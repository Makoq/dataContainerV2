var formidable = require("formidable");
var db = require("../models/db.js");
var ObjectID = require('mongodb').ObjectID;//数据库ObjectId
var sd = require('silly-datetime');
var fs = require('fs');

var req

var child_process = require('child_process');

//显示重构的页面
exports.showRefactorPage = function (req, res, next) {
    // req.session.currentRouter = "/refactor";
    if (req.session.login != "1") {//未登录
        //重定向
        res.redirect('/accounts/login');
        return;
    }

    if (req.session.login == "1") {
        //如果登陆了
        var username = req.session.username;
        var login = true;
    } else {
        //没有登陆
        var username = "";  //制定一个空用户名
        var login = false;
    }

    res.render('refactor/refactorpage', {
        "login": login,
        "username": username,
        "active": "refactor",
        "subactive": "refactor_0",
        'th_active': 'refactor_0_0'
    });
}


//得到所有重构服务，一个重构方法库就是一个重构服务。
// exports.getRefactorServices = function (req, res, next) {
//     //get提交，获取参数  {"pageamount":10,"page":10}
//     var paramJson = req.query;
//     //var param =  req.params.name;//get按照{}传递参数，req.params获取不到
//     var pageamount = parseInt(paramJson.pageamount);//每页的行数
//     var page = parseInt(paramJson.page);//第几页
//     var ids = paramJson.ids;

//     var findConditioin = new Array();

//     if (ids == "all") {//查询全部
//         findConditioin.push({});
//     } else if (ids instanceof Array) {
//         for (var i = 0; i < ids.length; i++) {
//             findConditioin.push({ "_id": ObjectID(ids[i]) });
//         }
//     }

//     // 排序  "sort":{"name":1}
//     db.find("refactor", { "$or": findConditioin,delete:'-1' }, { "pageamount": pageamount, "page": page }, function (err, result) {
//         if (err) {
//             res.send('-1');//获取数据失败
//             return;
//         }
//         res.send(result);
//     });
// }

// 获取重构服务的个数
// exports.getRefactorServicesCount = function (req, res, next) {
//     db.getAllCount('refactor', function (count) {
//         res.send(count + '');
//     });
// }

//显示refactor一般服务的方法页面
exports.showRefactorDetailPage = function (req, res, next) {
    // req.session.currentRouter = "/refactor/detail";
    if (req.session.login != "1") {//未登录
        //重定向
        res.redirect('/accounts/login');
        return;
    }

    if (req.session.login == "1") {
        //如果登陆了
        var username = req.session.username;
        var login = true;
    } else {
        //没有登陆
        var username = "";  //制定一个空用户名
        var login = false;
    }

    res.render('refactor/detailpage', {
        "login": login,
        "username": username,
        "active": "refactor",
        "subactive": "refactor_0",
        'th_active': 'refactor_0_0'
    });
}

//获取重构服务中的方法
exports.getMethods = function (req, res, next) {
    var paramObj = req.query;
    var serviceId = paramObj.id;

    //methods.xml/methods.json中记录着所有的方法信息
    var filepath = __dirname + "/../upload/refactor/" + serviceId + "/methods.json";

    //读取xml文件，转成json
    var json_string = fs.readFileSync(filepath, "utf-8"); //同步读取文件的方法

    res.send(json_string);
}


//显示方法库中具体方法的使用界面
exports.showRefactorUsePage = function (req, res, next) {
    // req.session.currentRouter = "/refactor/use";
    if (req.session.login != "1") {//未登录
        //重定向
        res.redirect('/accounts/login');
        return;
    }

    if (req.session.login == "1") {
        //如果登陆了
        var username = req.session.username;
        var login = true;
    } else {
        //没有登陆
        var username = "";  //制定一个空用户名
        var login = false;
    }

    res.render('refactor/usepage', {
        "login": login,
        "username": username,
        "active": "refactor",
        "subactive": "refactor_0",
        'th_active': 'refactor_0_0'
    });
}


//获取指定方法指定参数的schema
exports.getParamSchema = function (req, res, next) {
    var paramObj = req.query;

    var serviceId = paramObj.id;
    var schema = paramObj.schema;//Schema的路径
    var iotype = paramObj.iotype;

    if (schema == "") {
        res.send("");
        return;
    }

    var schemaPath = __dirname + "/../upload/refactor/" + serviceId + "/" + schema;

    var udxSchema = fs.readFileSync(schemaPath,'utf-8');

    if (iotype === 'in') {
        res.send(udxSchema);
    } else {
        //对于输出参数，要返回一个oid，作为输出文件的文件名
        res.send(udxSchema + '|' + new ObjectID());
    }
}


//调用refactor服务
// exports.callRefactor = function (req, res, next) {

//     var paramObj = req.query;
//     // 用户名
//     var username = req.session.username;

//     var serviceid = paramObj.id;
//     var method = paramObj.method;
//     var params = paramObj.params;//json数组   [{'path':'','iotype':''},{}]
//     // params 存储的内容：对于输入数据是oid，对于输出数据是 parentid


//     //获取exe的路径
//     var servicePath = __dirname + '/../upload/refactor/' + serviceid + '/' + 'RefactorWraper.exe';

//     var pList = '';
//     //获取数据的路径
//     var dataPath = __dirname + '/../upload/userdata/' + username + '/';

//     var outputs = new Array();

//     for (var i = 0; i < params.length; i++) {
//         if (params[i].iotype == "out") {//输出路径
//             //pList += __dirname + '/../tmp/' + params[i].path;
//             //TODO: 
//             var newoid = new ObjectID();
//             pList += dataPath + newoid;
//             // 保存新生成的文件的路径
//             outputs.push(newoid + '|' + params[i].path);// filename + '|' + parentid
//         } else {
//             // 文件存在，说明是文件数据。
//             if (fs.existsSync(dataPath + params[i].path)) {
//                 pList += dataPath + params[i].path + ' ';
//             } else {
//                 pList += params[i].path + ' ';// 文件不存在，说明有可能是单值的参数
//             }
//         }
//     }

//     //执行后台方法
//     child_process.exec(servicePath + ' ' + method + ' ' + pList.trim(), { cwd: __dirname + '/../upload/refactor/' + serviceid }, function (err, data, stderr) {
//         if (err) {
//             console.log(err, stderr);
//             res.send("-1");
//             return;
//         }

//         //将新生成的数据 存入数据库
//         (function iterator(i) {
//             if (i === outputs.length) {
//                 res.send({ 'paths': outputs, 'log': data });//  log: refactor 服务运行时产生的日志信息
//                 return;
//             }

//             //outputs中存存储的是 filename  '|'  parentid
//             var arr = outputs[i].split('|');
//             //对于文件的oid我们重新生成一个，可以不和文件名一致，因为文件名也是new了一个ObjectID

//             var filename = arr[0];
//             var parentid = arr[1];
//             var time = sd.format(new Date(), 'YYYY-MM-DD HH:mm:ss');

//             var stat = fs.statSync(dataPath + filename);

//             var size = parseFloat(stat.size) / 1024;
//             if (size < 1024) {
//                 size = Math.ceil(size) + ' KB';
//             } else if (size < 1024 * 1024) {
//                 size = Math.ceil(size / 1024) + ' M';
//             } else if (size < 1024 * 1024 * 1024) {
//                 size = Math.ceil(size / 1024 / 1024) + ' G';
//             } else {
//                 size = Math.ceil(size / 1024) + ' KB';
//             }

//             db.insertOne('userdata', { _id: ObjectID(filename), name: filename, format: 'file', datetime: time, size: size, creator: username, parentid: parentid, type: 'private', favoriteby: username }, function (error, results) {
//                 if (error) {
//                     console.log('insert the output file to db error: ' + error);
//                     res.send('-2');
//                     return;
//                 }

//                 iterator(i + 1);
//             });

//         })(0);
//     });


// }



//显示高级玩家界面
exports.showAdvancePage = function (req, res, next) {
    //  req.session.currentRouter = "/refactor/advance";
    if (req.session.login != "1") {//未登录
        //重定向
        res.redirect('/accounts/login');
        return;
    }

    if (req.session.login == "1") {
        //如果登陆了
        var username = req.session.username;
        var login = true;
    } else {
        //没有登陆
        var username = "";  //制定一个空用户名
        var login = false;
    }

    res.render('refactor/advance', {
        "login": login,
        "username": username,
        "active": "refactor",
        "subactive": "refactor_0",
        'th_active': 'refactor_0_3'

    });

}


// 下载串联运行的结果
exports.downloadAdvanceRes = function (req, res, next) {
    var filename = req.query.filename; //要下载的文件名拼接起来的字符串
    var username = req.session.username;

    var downloadPath = __dirname + '/../upload/userdata/' + username + '/' + filename;

    var data = null;
    try {
        data = fs.readFileSync(downloadPath);
    } catch (e) {
        console.log("error read advance call output file error : " + e);
        res.send('-1');
        data = null;
        return;
    }

    res.set({
        'Content-Type': 'file/xml',
        'Content-Length': data.length
    });
    res.setHeader('Content-Disposition', 'attachment; filename=' + filename);

    res.end(data);
}


// 切换服务开关
// exports.switch = function (req, res, next) {
//     var sid = req.query.id; // 服务id
//     var action = req.query.action;

//     var available = '-1';

//     if (action === 'stop') {
//         available = '-1';
//     } else if (action === 'start') {
//         available = '1';
//     }

//     db.updateMany('refactor', { _id: ObjectID(sid) }, { $set: { 'available': available } }, function (err, results) {
//         if (err) {
//             console.log(err);
//             res.send('-1');
//             return;
//         }
//         res.send('1');
//     });
// }


// 显示重构服务详情页面
// exports.showDescriptionPage = function (req, res, next) {
//     if (req.session.login != "1") {//未登录
//         //重定向
//         res.redirect('/accounts/login');
//         return;
//     }

//     if (req.session.login == "1") {
//         //如果登陆了
//         var username = req.session.username;
//         var login = true;
//     } else {
//         //没有登陆
//         var username = "";  //制定一个空用户名
//         var login = false;
//     }

//     res.render('refactor/descriptionpage', {
//         "login": login,
//         "username": username,
//         "active": "refactor",
//         "subactive": "refactor_0",
//         'th_active': 'refactor_0_1'
//     });
// }

// 显示运行实例页面
exports.showRefactorInstancePage = function (req, res, next) {
    if (req.session.login != "1") {//未登录
        //重定向
        res.redirect('/accounts/login');
        return;
    }

    if (req.session.login == "1") {
        //如果登陆了
        var username = req.session.username;
        var login = true;
    } else {
        //没有登陆
        var username = "";  //制定一个空用户名
        var login = false;
    }

    res.render('refactor/instance', {
        "login": login,
        "username": username,
        "active": "refactor",
        "subactive": "refactor_0",
        'th_active': 'refactor_0_1'
    });
}

// 显示运行记录页面
exports.showRefactorRecordPage = function (req, res, next) {
    // req.session.currentRouter = "/datamap/use";
    if (req.session.login != "1") {//未登录
        //重定向
        res.redirect('/accounts/login');
        return;
    }

    if (req.session.login == "1") {
        //如果登陆了
        var username = req.session.username;
        var login = true;
    } else {
        //没有登陆
        var username = "";  //制定一个空用户名
        var login = false;
    }

    res.render('refactor/recordpage', {
        "login": login,
        "username": username,
        "active": "refactor",
        "subactive": "refactor_0",
        'th_active': 'refactor_0_2'
    });
}

// 显示重构运行结果页面
exports.showRefactorResPage = function (req, res, next) {
    // req.session.currentRouter = "/datamap/use";
    if (req.session.login != "1") {//未登录
        //重定向
        res.redirect('/accounts/login');
        return;
    }

    if (req.session.login == "1") {
        //如果登陆了
        var username = req.session.username;
        var login = true;
    } else {
        //没有登陆
        var username = "";  //制定一个空用户名
        var login = false;
    }

    res.render('refactor/runres', {
        "login": login,
        "username": username,
        "active": "refactor",
        "subactive": "refactor_0",
        'th_active': 'refactor_0_2'
    });
}

// 显示高级操作结果页面
exports.showAdvanceResPage = function (req, res, next) {
    // req.session.currentRouter = "/datamap/use";
    if (req.session.login != "1") {//未登录
        //重定向
        res.redirect('/accounts/login');
        return;
    }

    if (req.session.login == "1") {
        //如果登陆了
        var username = req.session.username;
        var login = true;
    } else {
        //没有登陆
        var username = "";  //制定一个空用户名
        var login = false;
    }

    res.render('refactor/advanceres', {
        "login": login,
        "username": username,
        "active": "refactor",
        "subactive": "refactor_0",
        'th_active': 'refactor_0_2'
    });
}

//获取重构服务的运行记录信息
// exports.getRefactorRecordInfo = function (req, res, next) {
//     var pageamount = parseInt(req.query.pageamount);
//     var page = parseInt(req.query.page);
//     var guid = req.query.guid;

//     var condition = {};
//     if (guid != undefined) {
//         condition = { guid: guid };
//     }

//     db.find('refactorrecord', condition, { pageamount: pageamount, page: page, sort: { "starttime": -1 } }, function (err, result) {
//         if (err) {
//             console.log('failed to read record info : ' + err);
//             res.send('-1');
//             return;
//         }
//         res.send(result);
//     });
// }

// exports.getRefactorAdvanceRecordInfo = function (req, res, next) {
//     var pageamount = parseInt(req.query.pageamount);
//     var page = parseInt(req.query.page);
//     var guid = req.query.guid;

//     var condition = {};
//     if (guid != undefined) {
//         condition = { guid: guid };
//     }

//     db.find('refactoradvancerecord', condition, { pageamount: pageamount, page: page, sort: { "starttime": -1 } }, function (err, result) {
//         if (err) {
//             console.log('failed to read record info : ' + err);
//             res.send('-1');
//             return;
//         }
//         res.send(result);
//     });
// }

// 删除refactor service
// exports.deleteRefactor = function (req, res, next) {
//     var sid = req.query.id;

//     // var dir = __dirname + '/../upload/datamap/' + sid;
//     //1.首先删除物理磁盘上的数据：调用子进程删除本地文件夹。
//     child_process.exec('rd /s /q ' + sid, { cwd: __dirname + "/../upload/refactor" }, function (err, data, stderr) {
//         if (err) {
//             console.log('delete refactor service error: ' + err);
//             res.send('-1');
//             return;
//         }
//         //2.再删除数据中的信息
//         db.deleteMany('refactor', { _id: ObjectID(sid) }, function (err1, resul) {
//             if (err1) {
//                 console.log('delete refactor db error: ' + err1);
//                 res.send('-2');
//                 // return;
//                 // 设置该服务为不可用，因为执行到这一步，说明该服务已经物理删除了。
//                 db.updateMany('refactor', { _id: ObjectID(sid) }, { $set: { 'available': '0' } }, function (err2, result) {
//                     if (err2) {
//                         console.log('update refactor error: ' + err2);
//                         res.send('-3');
//                         return;
//                     }
//                     res.send('-4');
//                     return;
//                 });
//             } else {

//                 // 删除该服务的运行记录
//                 db.deleteMany('refactorrecord', { sid: ObjectID(sid) }, function (err3, resul) {
//                     if (err3) {
//                         consolelog('delete datamap record error: ' + err3);
//                         res.send('-5');
//                         return;
//                     }
//                     res.redirect('/datamap');
//                 });
//             }
//         });
//     });
// }


// 获取局域网内所有的重构服务
// exports.getAllRefactorServices = function (req, res, next) {

    // 1.获取局域网内所有的ip
    // db.find('host', {}, { 'sort': { "host": -1 } }, function (err, ips) {
    //     if (err) {
    //         console.log('can not read the ips from db: ' + err);
    //         res.send('-1');
    //         return;
    //     }



        // 局域网内所有主机上的重构服务
        // var refs = new Array();
        // // 遍历ip，请求每个局域网内主机上的重构服务
        // (function iterator(i) {
        //     if (i === ips.length) {
        //         res.send(refs);
        //         return;
        //     }

        //     // 远程主机ip地址
        //     var ip = ips[i].host + ':' + ips[i].port;

            

        //     db.find('http://' + ip + '/refactor/services', { ids: 'all' }, function (error, result) {
        //         if (error) {
        //             console.log(error);
        //             return;
        //         }

        //         refs.push(result);

        //         iterator(i+1);
        //     });
        // })(0);

    // });
// }