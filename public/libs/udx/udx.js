// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = typeof window === 'object';
// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret;  return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module["UTF16ToString"] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module["stringToUTF16"] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module["lengthBytesUTF16"] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module["UTF32ToString"] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
Module["stringToUTF32"] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module["lengthBytesUTF32"] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk



function enlargeMemory() {
  // TOTAL_MEMORY is the current size of the actual array, and DYNAMICTOP is the new top.
  assert(DYNAMICTOP >= TOTAL_MEMORY);
  assert(TOTAL_MEMORY > 4); // So the loop below will not be infinite

  var OLD_TOTAL_MEMORY = TOTAL_MEMORY;


  var LIMIT = Math.pow(2, 31); // 2GB is a practical maximum, as we use signed ints as pointers
                               // and JS engines seem unhappy to give us 2GB arrays currently
  if (DYNAMICTOP >= LIMIT) return false;

  while (TOTAL_MEMORY <= DYNAMICTOP) { // Simple heuristic.
    if (TOTAL_MEMORY < LIMIT/2) {
      TOTAL_MEMORY = alignMemoryPage(2*TOTAL_MEMORY); // double until 1GB
    } else {
      var last = TOTAL_MEMORY;
      TOTAL_MEMORY = alignMemoryPage((3*TOTAL_MEMORY + LIMIT)/4); // add smaller increments towards 2GB, which we cannot reach
      if (TOTAL_MEMORY <= last) return false;
    }
  }

  TOTAL_MEMORY = Math.max(TOTAL_MEMORY, 16*1024*1024);

  if (TOTAL_MEMORY >= LIMIT) return false;

  Module.printErr('Warning: Enlarging memory arrays, this is not fast! ' + [OLD_TOTAL_MEMORY, TOTAL_MEMORY]);


  var start = Date.now();

  try {
    if (ArrayBuffer.transfer) {
      buffer = ArrayBuffer.transfer(buffer, TOTAL_MEMORY);
    } else {
      var oldHEAP8 = HEAP8;
      buffer = new ArrayBuffer(TOTAL_MEMORY);
    }
  } catch(e) {
    return false;
  }

  var success = _emscripten_replace_memory(buffer);
  if (!success) return false;

  // everything worked

  Module['buffer'] = buffer;
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
  if (!ArrayBuffer.transfer) {
    HEAP8.set(oldHEAP8);
  }

  Module.printErr('enlarged memory arrays from ' + OLD_TOTAL_MEMORY + ' to ' + TOTAL_MEMORY + ', took ' + (Date.now() - start) + ' ms (has ArrayBuffer.transfer? ' + (!!ArrayBuffer.transfer) + ')');

  return true;
}

var byteLength;
try {
  byteLength = Function.prototype.call.bind(Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, 'byteLength').get);
  byteLength(new ArrayBuffer(4)); // can fail on older ie
} catch(e) { // can fail on older node/v8
  byteLength = function(buffer) { return buffer.byteLength; };
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
totalMemory = Math.max(totalMemory, 16*1024*1024);
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer;



buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);


// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 17824;
  /* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__sub_I_UdxDatasetSchema_cpp() } }, { func: function() { __GLOBAL__sub_I_bind_cpp() } });
  

/* memory initializer */ allocate([252,21,0,0,175,27,0,0,36,22,0,0,155,27,0,0,8,0,0,0,0,0,0,0,252,21,0,0,219,27,0,0,36,22,0,0,195,27,0,0,32,0,0,0,0,0,0,0,36,22,0,0,243,27,0,0,8,0,0,0,0,0,0,0,36,22,0,0,11,28,0,0,8,0,0,0,0,0,0,0,36,22,0,0,39,28,0,0,8,0,0,0,0,0,0,0,36,22,0,0,63,28,0,0,8,0,0,0,0,0,0,0,36,22,0,0,87,28,0,0,8,0,0,0,0,0,0,0,252,21,0,0,132,28,0,0,252,21,0,0,186,28,0,0,36,22,0,0,158,28,0,0,144,0,0,0,0,0,0,0,36,22,0,0,206,28,0,0,144,0,0,0,0,0,0,0,36,22,0,0,234,28,0,0,144,0,0,0,0,0,0,0,36,22,0,0,6,29,0,0,144,0,0,0,0,0,0,0,36,22,0,0,34,29,0,0,232,0,0,0,0,0,0,0,36,22,0,0,70,29,0,0,248,0,0,0,0,0,0,0,252,21,0,0,106,29,0,0,36,22,0,0,131,29,0,0,16,1,0,0,0,0,0,0,36,22,0,0,174,29,0,0,248,0,0,0,0,0,0,0,252,21,0,0,191,38,0,0,252,21,0,0,213,38,0,0,252,21,0,0,235,38,0,0,76,22,0,0,1,39,0,0,0,0,0,0,1,0,0,0,80,1,0,0,0,0,0,0,252,21,0,0,64,39,0,0,224,21,0,0,173,39,0,0,76,22,0,0,199,39,0,0,0,0,0,0,1,0,0,0,80,1,0,0,0,0,0,0,224,21,0,0,6,40,0,0,36,22,0,0,66,40,0,0,248,0,0,0,0,0,0,0,76,22,0,0,7,42,0,0,1,0,0,0,2,0,0,0,176,1,0,0,3,220,255,255,216,0,0,0,3,216,255,255,76,22,0,0,46,42,0,0,0,0,0,0,1,0,0,0,232,0,0,0,3,244,255,255,76,22,0,0,85,42,0,0,1,0,0,0,2,0,0,0,232,1,0,0,3,200,255,255,224,2,0,0,3,196,255,255,76,22,0,0,156,43,0,0,0,0,0,0,1,0,0,0,128,1,0,0,3,244,255,255,36,22,0,0,49,44,0,0,208,2,0,0,0,0,0,0,36,22,0,0,16,44,0,0,0,2,0,0,0,0,0,0,36,22,0,0,74,44,0,0,0,2,0,0,0,0,0,0,36,22,0,0,108,44,0,0,0,2,0,0,0,0,0,0,36,22,0,0,144,44,0,0,0,2,0,0,0,0,0,0,36,22,0,0,182,44,0,0,0,2,0,0,0,0,0,0,36,22,0,0,220,44,0,0,0,2,0,0,0,0,0,0,36,22,0,0,2,45,0,0,0,2,0,0,0,0,0,0,36,22,0,0,35,45,0,0,0,2,0,0,0,0,0,0,36,22,0,0,69,45,0,0,0,2,0,0,0,0,0,0,36,22,0,0,105,45,0,0,0,2,0,0,0,0,0,0,36,22,0,0,143,45,0,0,0,2,0,0,0,0,0,0,36,22,0,0,181,45,0,0,0,2,0,0,0,0,0,0,36,22,0,0,219,45,0,0,248,0,0,0,0,0,0,0,36,22,0,0,244,45,0,0,128,1,0,0,0,0,0,0,252,21,0,0,40,49,0,0,252,21,0,0,71,49,0,0,252,21,0,0,102,49,0,0,252,21,0,0,133,49,0,0,252,21,0,0,164,49,0,0,252,21,0,0,195,49,0,0,252,21,0,0,226,49,0,0,252,21,0,0,1,50,0,0,252,21,0,0,32,50,0,0,252,21,0,0,63,50,0,0,252,21,0,0,94,50,0,0,252,21,0,0,125,50,0,0,252,21,0,0,156,50,0,0,76,22,0,0,175,50,0,0,0,0,0,0,1,0,0,0,80,1,0,0,0,0,0,0,36,22,0,0,239,50,0,0,128,3,0,0,0,0,0,0,252,21,0,0,252,50,0,0,252,21,0,0,9,51,0,0,36,22,0,0,22,51,0,0,136,3,0,0,0,0,0,0,36,22,0,0,55,51,0,0,144,3,0,0,0,0,0,0,36,22,0,0,125,51,0,0,144,3,0,0,0,0,0,0,36,22,0,0,89,51,0,0,176,3,0,0,0,0,0,0,36,22,0,0,159,51,0,0,144,3,0,0,0,0,0,0,196,21,0,0,199,51,0,0,196,21,0,0,201,51,0,0,196,21,0,0,203,51,0,0,196,21,0,0,205,51,0,0,196,21,0,0,207,51,0,0,196,21,0,0,209,51,0,0,196,21,0,0,211,51,0,0,196,21,0,0,213,51,0,0,196,21,0,0,215,51,0,0,196,21,0,0,217,51,0,0,196,21,0,0,219,51,0,0,196,21,0,0,221,51,0,0,196,21,0,0,223,51,0,0,36,22,0,0,225,51,0,0,144,3,0,0,0,0,0,0,36,22,0,0,2,52,0,0,160,3,0,0,0,0,0,0,36,22,0,0,39,52,0,0,160,3,0,0,0,0,0,0,112,28,0,0,4,0,0,0,34,0,0,0,117,28,0,0,3,0,0,0,38,0,0,0,121,28,0,0,4,0,0,0,39,0,0,0,126,28,0,0,2,0,0,0,60,0,0,0,129,28,0,0,2,0,0,0,62,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,224,0,0,0,240,0,0,0,248,0,0,0,252,0,0,0,234,26,0,0,237,26,0,0,242,26,0,0,252,26,0,0,255,26,0,0,0,0,0,0,8,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,0,0,0,0,56,0,0,0,1,0,0,0,2,0,0,0,17,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,18,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,0,0,0,0,72,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,25,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,26,0,0,0,12,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,0,0,0,0,88,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,33,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,0,0,0,0,104,0,0,0,41,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,42,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,0,0,0,0,120,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,49,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,50,0,0,0,11,0,0,0,12,0,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,16,0,0,0,0,0,0,0,40,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,0,0,0,0,16,0,0,0,1,0,0,0,69,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,70,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,76,0,0,0,0,0,0,0,136,0,0,0,77,0,0,0,78,0,0,0,0,0,0,0,32,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,84,0,0,0,85,0,0,0,86,0,0,0,87,0,0,0,88,0,0,0,0,0,0,0,152,0,0,0,89,0,0,0,90,0,0,0,91,0,0,0,92,0,0,0,93,0,0,0,94,0,0,0,95,0,0,0,0,0,0,0,144,0,0,0,96,0,0,0,97,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,0,0,0,0,168,0,0,0,98,0,0,0,99,0,0,0,100,0,0,0,101,0,0,0,102,0,0,0,103,0,0,0,104,0,0,0,0,0,0,0,184,0,0,0,105,0,0,0,106,0,0,0,107,0,0,0,108,0,0,0,109,0,0,0,110,0,0,0,111,0,0,0,0,0,0,0,200,0,0,0,112,0,0,0,113,0,0,0,114,0,0,0,115,0,0,0,116,0,0,0,117,0,0,0,118,0,0,0,0,0,0,0,216,0,0,0,119,0,0,0,120,0,0,0,121,0,0,0,122,0,0,0,123,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,128,0,0,0,129,0,0,0,130,0,0,0,131,0,0,0,132,0,0,0,133,0,0,0,0,0,0,0,0,1,0,0,134,0,0,0,135,0,0,0,121,0,0,0,122,0,0,0,123,0,0,0,136,0,0,0,137,0,0,0,138,0,0,0,139,0,0,0,140,0,0,0,141,0,0,0,142,0,0,0,143,0,0,0,144,0,0,0,145,0,0,0,146,0,0,0,147,0,0,0,148,0,0,0,149,0,0,0,0,0,0,0,16,1,0,0,150,0,0,0,151,0,0,0,121,0,0,0,122,0,0,0,123,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,0,0,0,0,248,0,0,0,152,0,0,0,153,0,0,0,121,0,0,0,122,0,0,0,123,0,0,0,0,0,0,0,232,0,0,0,154,0,0,0,155,0,0,0,121,0,0,0,122,0,0,0,123,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,17,98,0,0,47,102,0,0,1,140,0,0,31,255,0,0,104,0,0,0,97,0,0,0,104,0,0,0,104,0,0,0,97,0,0,0,0,0,0,0,70,0,0,0,111,0,0,0,114,0,0,0,109,0,0,0,97,0,0,0,116,0,0,0,32,0,0,0,69,0,0,0,114,0,0,0,114,0,0,0,111,0,0,0,114,0,0,0,0,0,0,0,68,0,0,0,97,0,0,0,116,0,0,0,97,0,0,0,115,0,0,0,101,0,0,0,116,0,0,0,78,0,0,0,111,0,0,0,100,0,0,0,101,0,0,0,32,0,0,0,105,0,0,0,115,0,0,0,32,0,0,0,78,0,0,0,85,0,0,0,76,0,0,0,76,0,0,0,0,0,0,0,232,3,0,0,24,4,0,0,32,1,0,0,24,4,0,0,24,4,0,0,40,1,0,0,24,4,0,0,24,4,0,0,48,1,0,0,24,4,0,0,24,4,0,0,56,1,0,0,24,4,0,0,24,4,0,0,64,4,0,0,24,4,0,0,24,4,0,0,32,1,0,0,24,4,0,0,40,1,0,0,24,4,0,0,48,1,0,0,24,4,0,0,64,4,0,0,24,4,0,0,232,3,0,0,24,4,0,0,64,4,0,0,64,4,0,0,64,4,0,0,64,4,0,0,24,4,0,0,232,3,0,0,24,4,0,0,64,4,0,0,64,4,0,0,64,4,0,0,24,4,0,0,232,3,0,0,24,4,0,0,64,4,0,0,64,4,0,0,24,4,0,0,232,3,0,0,24,4,0,0,56,1,0,0,24,4,0,0,232,3,0,0,24,4,0,0,64,4,0,0,24,4,0,0,232,3,0,0,24,4,0,0,24,4,0,0,24,4,0,0,232,3,0,0,24,4,0,0,64,4,0,0,64,4,0,0,64,4,0,0,64,4,0,0,232,3,0,0,24,4,0,0,64,4,0,0,64,4,0,0,64,4,0,0,232,3,0,0,24,4,0,0,64,4,0,0,64,4,0,0,232,3,0,0,24,4,0,0,64,4,0,0,232,3,0,0,24,4,0,0,24,4,0,0,24,4,0,0,24,4,0,0,56,1,0,0,88,1,0,0,88,1,0,0,56,1,0,0,56,1,0,0,88,1,0,0,88,1,0,0,24,4,0,0,56,1,0,0,24,4,0,0,96,1,0,0,232,3,0,0,24,4,0,0,56,1,0,0,232,3,0,0,24,4,0,0,96,1,0,0,96,1,0,0,24,4,0,0,56,1,0,0,24,4,0,0,56,1,0,0,120,1,0,0,120,1,0,0,24,4,0,0,24,4,0,0,24,4,0,0,24,4,0,0,24,4,0,0,24,4,0,0,56,1,0,0,120,1,0,0,96,1,0,0,24,4,0,0,24,4,0,0,24,4,0,0,120,1,0,0,56,1,0,0,24,4,0,0,96,1,0,0,56,4,0,0,0,0,0,0,128,1,0,0,156,0,0,0,157,0,0,0,121,0,0,0,122,0,0,0,123,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,160,12,0,0,160,12,0,0,32,13,0,0,156,13,0,0,248,13,0,0,80,14,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,144,1,0,0,158,0,0,0,159,0,0,0,160,0,0,0,161,0,0,0,162,0,0,0,163,0,0,0,164,0,0,0,165,0,0,0,166,0,0,0,167,0,0,0,168,0,0,0,169,0,0,0,170,0,0,0,171,0,0,0,172,0,0,0,173,0,0,0,252,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,252,255,255,255,144,1,0,0,174,0,0,0,175,0,0,0,121,0,0,0,122,0,0,0,123,0,0,0,176,0,0,0,177,0,0,0,178,0,0,0,179,0,0,0,180,0,0,0,181,0,0,0,182,0,0,0,183,0,0,0,184,0,0,0,185,0,0,0,244,255,255,255,244,255,255,255,244,255,255,255,244,255,255,255,244,255,255,255,244,255,255,255,244,255,255,255,244,255,255,255,244,255,255,255,244,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,244,255,255,255,244,255,255,255,144,1,0,0,174,0,0,0,175,0,0,0,121,0,0,0,122,0,0,0,123,0,0,0,176,0,0,0,177,0,0,0,178,0,0,0,179,0,0,0,180,0,0,0,181,0,0,0,182,0,0,0,183,0,0,0,184,0,0,0,185,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,176,1,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,186,0,0,0,187,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,252,255,255,255,176,1,0,0,188,0,0,0,189,0,0,0,121,0,0,0,122,0,0,0,123,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,160,14,0,0,248,14,0,0,4,0,0,0,0,0,0,0,176,1,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,186,0,0,0,187,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,252,255,255,255,176,1,0,0,188,0,0,0,189,0,0,0,121,0,0,0,122,0,0,0,123,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,200,1,0,0,190,0,0,0,191,0,0,0,192,0,0,0,193,0,0,0,194,0,0,0,195,0,0,0,196,0,0,0,197,0,0,0,198,0,0,0,199,0,0,0,200,0,0,0,201,0,0,0,202,0,0,0,203,0,0,0,204,0,0,0,205,0,0,0,206,0,0,0,207,0,0,0,208,0,0,0,209,0,0,0,252,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,252,255,255,255,200,1,0,0,210,0,0,0,211,0,0,0,121,0,0,0,122,0,0,0,123,0,0,0,212,0,0,0,213,0,0,0,214,0,0,0,215,0,0,0,216,0,0,0,217,0,0,0,218,0,0,0,219,0,0,0,220,0,0,0,221,0,0,0,222,0,0,0,244,255,255,255,244,255,255,255,244,255,255,255,244,255,255,255,244,255,255,255,244,255,255,255,244,255,255,255,244,255,255,255,244,255,255,255,244,255,255,255,244,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,244,255,255,255,244,255,255,255,200,1,0,0,210,0,0,0,211,0,0,0,121,0,0,0,122,0,0,0,123,0,0,0,212,0,0,0,213,0,0,0,214,0,0,0,215,0,0,0,216,0,0,0,217,0,0,0,218,0,0,0,219,0,0,0,220,0,0,0,221,0,0,0,222,0,0,0,112,15,0,0,112,15,0,0,4,16,0,0,136,16,0,0,20,17,0,0,132,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,232,1,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,223,0,0,0,224,0,0,0,252,255,255,255,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,252,255,255,255,232,1,0,0,225,0,0,0,226,0,0,0,121,0,0,0,122,0,0,0,123,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,216,17,0,0,72,18,0,0,4,0,0,0,0,0,0,0,232,1,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,223,0,0,0,224,0,0,0,252,255,255,255,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,252,255,255,255,232,1,0,0,225,0,0,0,226,0,0,0,121,0,0,0,122,0,0,0,123,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,0,0,0,0,0,2,0,0,227,0,0,0,228,0,0,0,121,0,0,0,122,0,0,0,123,0,0,0,229,0,0,0,230,0,0,0,0,0,0,0,16,2,0,0,231,0,0,0,232,0,0,0,121,0,0,0,122,0,0,0,123,0,0,0,229,0,0,0,230,0,0,0,233,0,0,0,234,0,0,0,0,0,0,0,32,2,0,0,235,0,0,0,236,0,0,0,121,0,0,0,122,0,0,0,123,0,0,0,229,0,0,0,230,0,0,0,237,0,0,0,238,0,0,0,0,0,0,0,48,2,0,0,239,0,0,0,240,0,0,0,121,0,0,0,122,0,0,0,123,0,0,0,229,0,0,0,230,0,0,0,241,0,0,0,242,0,0,0,0,0,0,0,64,2,0,0,243,0,0,0,244,0,0,0,121,0,0,0,122,0,0,0,123,0,0,0,229,0,0,0,230,0,0,0,245,0,0,0,246,0,0,0,247,0,0,0,0,0,0,0,80,2,0,0,248,0,0,0,249,0,0,0,121,0,0,0,122,0,0,0,123,0,0,0,229,0,0,0,230,0,0,0,250,0,0,0,251,0,0,0,252,0,0,0,0,0,0,0,96,2,0,0,253,0,0,0,254,0,0,0,121,0,0,0,122,0,0,0,123,0,0,0,229,0,0,0,230,0,0,0,255,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,112,2,0,0,2,1,0,0,3,1,0,0,121,0,0,0,122,0,0,0,123,0,0,0,229,0,0,0,230,0,0,0,4,1,0,0,5,1,0,0,6,1,0,0,7,1,0,0,8,1,0,0,9,1,0,0,0,0,0,0,128,2,0,0,10,1,0,0,11,1,0,0,121,0,0,0,122,0,0,0,123,0,0,0,229,0,0,0,230,0,0,0,12,1,0,0,13,1,0,0,14,1,0,0,15,1,0,0,16,1,0,0,17,1,0,0,0,0,0,0,144,2,0,0,18,1,0,0,19,1,0,0,121,0,0,0,122,0,0,0,123,0,0,0,229,0,0,0,230,0,0,0,20,1,0,0,21,1,0,0,22,1,0,0,23,1,0,0,24,1,0,0,25,1,0,0,0,0,0,0,160,2,0,0,26,1,0,0,27,1,0,0,121,0,0,0,122,0,0,0,123,0,0,0,229,0,0,0,230,0,0,0,28,1,0,0,29,1,0,0,30,1,0,0,31,1,0,0,32,1,0,0,33,1,0,0,34,1,0,0,0,0,0,0,176,2,0,0,35,1,0,0,36,1,0,0,121,0,0,0,122,0,0,0,123,0,0,0,229,0,0,0,230,0,0,0,37,1,0,0,38,1,0,0,39,1,0,0,40,1,0,0,41,1,0,0,42,1,0,0,43,1,0,0,0,0,0,0,192,2,0,0,44,1,0,0,45,1,0,0,121,0,0,0,122,0,0,0,123,0,0,0,229,0,0,0,230,0,0,0,46,1,0,0,47,1,0,0,48,1,0,0,49,1,0,0,50,1,0,0,51,1,0,0,52,1,0,0,0,0,0,0,208,2,0,0,53,1,0,0,54,1,0,0,121,0,0,0,122,0,0,0,123,0,0,0,13,0,0,0,13,0,0,0,0,0,0,0,224,2,0,0,55,1,0,0,56,1,0,0,121,0,0,0,122,0,0,0,123,0,0,0,57,1,0,0,58,1,0,0,59,1,0,0,60,1,0,0,61,1,0,0,62,1,0,0,63,1,0,0,64,1,0,0,65,1,0,0,66,1,0,0,67,1,0,0,68,1,0,0,0,0,0,0,112,3,0,0,69,1,0,0,70,1,0,0,71,1,0,0,0,0,0,0,0,0,0,0,208,3,0,0,72,1,0,0,73,1,0,0,74,1,0,0,75,1,0,0,76,1,0,0,0,0,0,0,72,4,0,0,72,1,0,0,77,1,0,0,74,1,0,0,75,1,0,0,78,1,0,0,0,0,0,0,160,3,0,0,72,1,0,0,79,1,0,0,74,1,0,0,75,1,0,0,80,1,0,0,81,1,0,0,82,1,0,0,83,1,0,0,0,0,0,0,88,4,0,0,72,1,0,0,84,1,0,0,74,1,0,0,75,1,0,0,80,1,0,0,85,1,0,0,86,1,0,0,87,1,0,0,0,0,0,0,104,4,0,0,72,1,0,0,88,1,0,0,74,1,0,0,75,1,0,0,80,1,0,0,89,1,0,0,90,1,0,0,91,1,0,0,0,0,0,0,0,0,0,0,231,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,20,24,0,0,132,24,0,0,132,24,0,0,0,0,0,0,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,92,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,93,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,94,1,0,0,95,1,0,0,131,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,93,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,1,0,0,95,1,0,0,123,63,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,46,49,55,103,0,60,63,0,60,33,45,45,0,60,33,91,67,68,65,84,65,91,0,60,33,0,60,0,93,93,62,0,45,45,62,0,63,62,0,62,0,120,109,108,32,118,101,114,115,105,111,110,61,34,49,46,48,34,32,101,110,99,111,100,105,110,103,61,34,85,84,70,45,56,34,0,114,98,0,119,0,37,115,0,32,32,32,32,0,37,46,42,115,0,38,37,115,59,0,239,187,191,0,120,109,108,32,118,101,114,115,105,111,110,61,34,49,46,48,34,0,10,0,60,37,115,0,32,37,115,61,34,0,34,0,47,62,0,60,47,37,115,62,0,60,33,91,67,68,65,84,65,91,37,115,93,93,62,0,60,33,45,45,37,115,45,45,62,0,60,63,37,115,63,62,0,60,33,37,115,62,0,78,56,116,105,110,121,120,109,108,50,55,88,77,76,84,101,120,116,69,0,78,56,116,105,110,121,120,109,108,50,55,88,77,76,78,111,100,101,69,0,78,56,116,105,110,121,120,109,108,50,49,48,88,77,76,80,114,105,110,116,101,114,69,0,78,56,116,105,110,121,120,109,108,50,49,48,88,77,76,86,105,115,105,116,111,114,69,0,78,56,116,105,110,121,120,109,108,50,49,48,88,77,76,67,111,109,109,101,110,116,69,0,78,56,116,105,110,121,120,109,108,50,49,52,88,77,76,68,101,99,108,97,114,97,116,105,111,110,69,0,78,56,116,105,110,121,120,109,108,50,49,48,88,77,76,85,110,107,110,111,119,110,69,0,78,56,116,105,110,121,120,109,108,50,49,48,88,77,76,69,108,101,109,101,110,116,69,0,78,56,116,105,110,121,120,109,108,50,49,49,88,77,76,68,111,99,117,109,101,110,116,69,0,113,117,111,116,0,97,109,112,0,97,112,111,115,0,108,116,0,103,116,0,78,56,116,105,110,121,120,109,108,50,49,50,88,77,76,65,116,116,114,105,98,117,116,101,69,0,78,56,116,105,110,121,120,109,108,50,56,77,101,109,80,111,111,108,84,73,76,105,53,54,69,69,69,0,78,56,116,105,110,121,120,109,108,50,55,77,101,109,80,111,111,108,69,0,78,56,116,105,110,121,120,109,108,50,56,77,101,109,80,111,111,108,84,73,76,105,51,54,69,69,69,0,78,56,116,105,110,121,120,109,108,50,56,77,101,109,80,111,111,108,84,73,76,105,53,50,69,69,69,0,78,56,116,105,110,121,120,109,108,50,56,77,101,109,80,111,111,108,84,73,76,105,52,56,69,69,69,0,78,52,78,71,73,83,52,68,97,116,97,54,83,99,104,101,109,97,49,52,67,85,100,120,78,111,100,101,83,99,104,101,109,97,69,0,78,52,78,71,73,83,52,68,97,116,97,54,83,99,104,101,109,97,49,52,73,85,100,120,78,111,100,101,83,99,104,101,109,97,69,0,78,52,78,71,73,83,52,68,97,116,97,49,48,73,78,120,85,110,107,110,111,119,110,69,0,78,52,78,71,73,83,52,68,97,116,97,54,83,99,104,101,109,97,50,49,67,85,100,120,83,99,104,101,109,97,68,101,115,99,114,105,112,116,105,111,110,69,0,78,52,78,71,73,83,52,68,97,116,97,54,83,99,104,101,109,97,49,54,73,78,111,100,101,68,101,115,99,114,105,112,116,105,111,110,69,0,99,104,115,0,67,0,85,100,120,68,101,99,108,97,114,97,116,105,111,110,0,80,97,114,115,101,32,79,75,0,80,97,114,115,101,32,69,114,114,111,114,0,68,97,116,97,115,101,116,78,111,100,101,32,105,115,32,78,85,76,76,0,83,99,104,101,109,97,78,111,100,101,84,121,112,101,0,69,68,84,75,84,95,73,78,84,0,69,68,84,75,84,95,82,69,65,76,0,69,68,84,75,84,95,86,69,67,84,79,82,50,0,69,68,84,75,84,95,86,69,67,84,79,82,51,0,69,68,84,75,84,95,86,69,67,84,79,82,52,0,69,68,84,75,84,95,83,84,82,73,78,71,0,69,68,84,75,84,95,73,78,84,95,76,73,83,84,0,69,68,84,75,84,95,82,69,65,76,95,76,73,83,84,0,69,68,84,75,84,95,86,69,67,84,79,82,50,95,76,73,83,84,0,69,68,84,75,84,95,86,69,67,84,79,82,51,95,76,73,83,84,0,69,68,84,75,84,95,86,69,67,84,79,82,52,95,76,73,83,84,0,69,68,84,75,84,95,83,84,82,73,78,71,95,76,73,83,84,0,69,68,84,75,84,95,78,79,68,69,0,69,68,84,75,84,95,76,73,83,84,0,69,68,84,75,84,95,77,65,80,0,69,68,84,75,84,95,84,65,66,76,69,0,75,101,114,110,101,108,84,121,112,101,0,69,75,84,95,78,85,76,76,0,69,75,84,95,73,78,84,0,69,75,84,95,82,69,65,76,0,69,75,84,95,83,84,82,73,78,71,0,69,75,84,95,86,69,67,84,79,82,50,0,69,75,84,95,86,69,67,84,79,82,51,0,69,75,84,95,86,69,67,84,79,82,52,0,69,75,84,95,78,79,68,69,0,69,75,84,95,76,73,83,84,0,69,75,84,95,77,65,80,0,69,75,84,95,84,65,66,76,69,0,69,75,84,95,73,78,84,95,76,73,83,84,0,69,75,84,95,82,69,65,76,95,76,73,83,84,0,69,75,84,95,83,84,82,73,78,71,95,76,73,83,84,0,69,75,84,95,86,69,67,84,79,82,50,95,76,73,83,84,0,69,75,84,95,86,69,67,84,79,82,51,95,76,73,83,84,0,69,75,84,95,86,69,67,84,79,82,52,95,76,73,83,84,0,69,75,84,95,67,79,85,78,84,0,86,101,99,116,111,114,50,100,0,86,101,99,116,111,114,51,100,0,86,101,99,116,111,114,52,100,0,103,101,116,86,101,114,115,105,111,110,0,103,101,116,73,110,102,111,0,99,114,101,97,116,101,85,100,120,68,97,116,97,115,101,116,83,99,104,101,109,97,0,99,114,101,97,116,101,85,100,120,78,111,100,101,68,101,115,99,114,105,112,116,105,111,110,0,114,101,108,101,97,115,101,85,100,120,68,97,116,97,115,101,116,83,99,104,101,109,97,0,103,101,116,83,99,104,101,109,97,82,111,111,116,78,111,100,101,0,97,100,100,83,99,104,101,109,97,67,104,105,108,100,78,111,100,101,0,114,101,109,111,118,101,83,99,104,101,109,97,67,104,105,108,100,78,111,100,101,0,114,101,109,111,118,101,83,99,104,101,109,97,67,104,105,108,100,78,111,100,101,66,121,73,110,100,101,120,0,103,101,116,83,99,104,101,109,97,78,111,100,101,67,104,105,108,100,67,111,117,110,116,0,103,101,116,83,99,104,101,109,97,67,104,105,108,100,78,111,100,101,0,103,101,116,83,99,104,101,109,97,78,111,100,101,84,121,112,101,0,83,99,104,101,109,97,78,111,100,101,84,121,112,101,50,83,116,114,105,110,103,0,103,101,116,83,99,104,101,109,97,78,111,100,101,78,97,109,101,0,103,101,116,83,99,104,101,109,97,78,111,100,101,68,101,115,99,114,105,112,116,105,111,110,0,103,101,116,83,99,104,101,109,97,78,111,100,101,67,111,110,99,101,112,116,73,110,102,111,0,103,101,116,83,99,104,101,109,97,78,111,100,101,83,112,97,116,105,97,108,82,101,102,73,110,102,111,0,103,101,116,83,99,104,101,109,97,78,111,100,101,85,110,105,116,73,110,102,111,0,103,101,116,83,99,104,101,109,97,78,111,100,101,68,97,116,97,84,101,109,112,108,97,116,101,73,110,102,111,0,109,111,100,105,102,121,83,99,104,101,109,97,78,111,100,101,78,97,109,101,0,109,111,100,105,102,121,83,99,104,101,109,97,78,111,100,101,68,101,115,99,114,105,112,116,105,111,110,0,109,111,100,105,102,121,83,99,104,101,109,97,78,111,100,101,67,111,110,99,101,112,116,73,110,102,111,0,109,111,100,105,102,121,83,99,104,101,109,97,78,111,100,101,83,112,97,116,105,97,108,82,101,102,73,110,102,111,0,109,111,100,105,102,121,83,99,104,101,109,97,78,111,100,101,85,110,105,116,73,110,102,111,0,109,111,100,105,102,121,83,99,104,101,109,97,78,111,100,101,68,97,116,97,84,101,109,112,108,97,116,101,73,110,102,111,0,108,111,97,100,83,99,104,101,109,97,70,114,111,109,88,109,108,83,116,114,101,97,109,0,102,111,114,109,97,116,83,99,104,101,109,97,84,111,88,109,108,83,116,114,101,97,109,0,99,114,101,97,116,101,85,100,120,68,97,116,97,115,101,116,0,103,101,116,68,97,116,97,115,101,116,78,111,100,101,0,114,101,108,101,97,115,101,68,97,116,97,115,101,116,0,103,101,116,78,111,100,101,67,104,105,108,100,67,111,117,110,116,0,103,101,116,67,104,105,108,100,78,111,100,101,0,103,101,116,78,111,100,101,78,97,109,101,0,115,101,116,78,111,100,101,78,97,109,101,0,103,101,116,78,111,100,101,84,121,112,101,0,103,101,116,78,111,100,101,76,101,110,103,116,104,0,107,101,114,110,101,108,116,121,112,101,50,115,116,114,105,110,103,0,115,116,114,105,110,103,50,107,101,114,110,101,108,116,121,112,101,0,97,100,100,67,104,105,108,100,78,111,100,101,0,114,101,109,111,118,101,67,104,105,108,100,78,111,100,101,66,121,73,110,100,101,120,0,114,101,109,111,118,101,67,104,105,108,100,78,111,100,101,0,115,101,116,73,110,116,78,111,100,101,86,97,108,117,101,0,115,101,116,82,101,97,108,78,111,100,101,86,97,108,117,101,0,115,101,116,83,116,114,105,110,103,78,111,100,101,86,97,108,117,101,0,115,101,116,86,101,99,116,111,114,50,100,78,111,100,101,86,97,108,117,101,0,115,101,116,86,101,99,116,111,114,51,100,78,111,100,101,86,97,108,117,101,0,115,101,116,86,101,99,116,111,114,52,100,78,111,100,101,86,97,108,117,101,0,97,100,100,73,110,116,78,111,100,101,86,97,108,117,101,0,97,100,100,82,101,97,108,78,111,100,101,86,97,108,117,101,0,97,100,100,83,116,114,105,110,103,78,111,100,101,86,97,108,117,101,0,97,100,100,86,101,99,116,111,114,50,100,78,111,100,101,86,97,108,117,101,0,97,100,100,86,101,99,116,111,114,51,100,78,111,100,101,86,97,108,117,101,0,97,100,100,86,101,99,116,111,114,52,100,78,111,100,101,86,97,108,117,101,0,103,101,116,78,111,100,101,73,110,116,86,97,108,117,101,0,103,101,116,78,111,100,101,82,101,97,108,86,97,108,117,101,0,103,101,116,78,111,100,101,83,116,114,105,110,103,86,97,108,117,101,0,103,101,116,78,111,100,101,86,101,99,116,111,114,50,100,86,97,108,117,101,0,103,101,116,78,111,100,101,86,101,99,116,111,114,51,100,86,97,108,117,101,0,103,101,116,78,111,100,101,86,101,99,116,111,114,52,100,86,97,108,117,101,0,103,101,116,78,111,100,101,73,110,116,65,114,114,97,121,67,111,117,110,116,0,103,101,116,78,111,100,101,82,101,97,108,65,114,114,97,121,67,111,117,110,116,0,103,101,116,78,111,100,101,83,116,114,105,110,103,65,114,114,97,121,67,111,117,110,116,0,103,101,116,78,111,100,101,86,101,99,116,111,114,50,100,65,114,114,97,121,67,111,117,110,116,0,103,101,116,78,111,100,101,86,101,99,116,111,114,51,100,65,114,114,97,121,67,111,117,110,116,0,103,101,116,78,111,100,101,86,101,99,116,111,114,52,100,65,114,114,97,121,67,111,117,110,116,0,103,101,116,78,111,100,101,73,110,116,65,114,114,97,121,86,97,108,117,101,0,103,101,116,78,111,100,101,82,101,97,108,65,114,114,97,121,86,97,108,117,101,0,103,101,116,78,111,100,101,83,116,114,105,110,103,65,114,114,97,121,86,97,108,117,101,0,103,101,116,78,111,100,101,86,101,99,116,111,114,50,100,65,114,114,97,121,86,97,108,117,101,0,103,101,116,78,111,100,101,86,101,99,116,111,114,51,100,65,114,114,97,121,86,97,108,117,101,0,103,101,116,78,111,100,101,86,101,99,116,111,114,52,100,65,114,114,97,121,86,97,108,117,101,0,114,101,109,111,118,101,73,110,116,78,111,100,101,65,114,114,97,121,86,97,108,117,101,66,121,73,100,120,0,114,101,109,111,118,101,82,101,97,108,78,111,100,101,65,114,114,97,121,86,97,108,117,101,66,121,73,100,120,0,114,101,109,111,118,101,83,116,114,105,110,103,78,111,100,101,65,114,114,97,121,86,97,108,117,101,66,121,73,100,120,0,114,101,109,111,118,101,86,101,99,116,111,114,50,100,78,111,100,101,65,114,114,97,121,86,97,108,117,101,66,121,73,100,120,0,114,101,109,111,118,101,86,101,99,116,111,114,51,100,78,111,100,101,65,114,114,97,121,86,97,108,117,101,66,121,73,100,120,0,114,101,109,111,118,101,86,101,99,116,111,114,52,100,78,111,100,101,65,114,114,97,121,86,97,108,117,101,66,121,73,100,120,0,99,108,101,97,114,78,111,100,101,65,114,114,97,121,0,102,111,114,109,97,116,84,111,88,109,108,83,116,114,101,97,109,0,108,111,97,100,70,114,111,109,88,109,108,83,116,114,101,97,109,0,0,105,105,105,0,105,105,105,105,0,78,52,78,71,73,83,52,68,97,116,97,56,86,101,99,116,111,114,52,100,69,0,78,52,78,71,73,83,52,68,97,116,97,56,86,101,99,116,111,114,51,100,69,0,78,52,78,71,73,83,52,68,97,116,97,56,86,101,99,116,111,114,50,100,69,0,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,78,83,116,51,95,95,49,50,49,95,95,98,97,115,105,99,95,115,116,114,105,110,103,95,99,111,109,109,111,110,73,76,98,49,69,69,69,0,100,105,105,105,0,100,105,105,0,105,105,105,100,100,100,100,105,0,105,105,105,100,100,100,105,0,105,105,105,100,100,105,0,105,105,105,105,105,0,105,105,105,100,105,0,105,105,105,100,100,100,100,0,105,105,105,100,100,100,0,105,105,105,100,100,0,105,105,105,100,0,78,52,78,71,73,83,52,68,97,116,97,49,49,69,75,101,114,110,101,108,84,121,112,101,69,0,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,119,69,69,69,69,0,78,52], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);
/* memory initializer */ allocate([17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,110,97,110,0,78,65,78,0,46,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+17275);





/* no memory initializer */
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


   
  Module["_i64Subtract"] = _i64Subtract;

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  
  
  
  function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
          codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }var embind_charCodes=undefined;function readLatin1String(ptr) {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
          ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    }
  
  
  var awaitingDependencies={};
  
  var registeredTypes={};
  
  var typeDependencies={};
  
  
  
  
  
  
  var char_0=48;
  
  var char_9=57;function makeLegalFunctionName(name) {
      if (undefined === name) {
          return '_unknown';
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
          return '_' + name;
      } else {
          return name;
      }
    }function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      /*jshint evil:true*/
      return new Function(
          "body",
          "return function " + name + "() {\n" +
          "    \"use strict\";" +
          "    return body.apply(this, arguments);\n" +
          "};\n"
      )(body);
    }function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function(message) {
          this.name = errorName;
          this.message = message;
  
          var stack = (new Error(message)).stack;
          if (stack !== undefined) {
              this.stack = this.toString() + '\n' +
                  stack.replace(/^Error(:[^\n]*)?\n/, '');
          }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
          if (this.message === undefined) {
              return this.name;
          } else {
              return this.name + ': ' + this.message;
          }
      };
  
      return errorClass;
    }var BindingError=undefined;function throwBindingError(message) {
      throw new BindingError(message);
    }
  
  
  
  var InternalError=undefined;function throwInternalError(message) {
      throw new InternalError(message);
    }function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function(type) {
          typeDependencies[type] = dependentTypes;
      });
  
      function onComplete(typeConverters) {
          var myTypeConverters = getTypeConverters(typeConverters);
          if (myTypeConverters.length !== myTypes.length) {
              throwInternalError('Mismatched type converter count');
          }
          for (var i = 0; i < myTypes.length; ++i) {
              registerType(myTypes[i], myTypeConverters[i]);
          }
      }
  
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach(function(dt, i) {
          if (registeredTypes.hasOwnProperty(dt)) {
              typeConverters[i] = registeredTypes[dt];
          } else {
              unregisteredTypes.push(dt);
              if (!awaitingDependencies.hasOwnProperty(dt)) {
                  awaitingDependencies[dt] = [];
              }
              awaitingDependencies[dt].push(function() {
                  typeConverters[i] = registeredTypes[dt];
                  ++registered;
                  if (registered === unregisteredTypes.length) {
                      onComplete(typeConverters);
                  }
              });
          }
      });
      if (0 === unregisteredTypes.length) {
          onComplete(typeConverters);
      }
    }function registerType(rawType, registeredInstance, options) {
      options = options || {};
  
      if (!('argPackAdvance' in registeredInstance)) {
          throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }
  
      var name = registeredInstance.name;
      if (!rawType) {
          throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
          if (options.ignoreDuplicateRegistrations) {
              return;
          } else {
              throwBindingError("Cannot register type '" + name + "' twice");
          }
      }
  
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
  
      if (awaitingDependencies.hasOwnProperty(rawType)) {
          var callbacks = awaitingDependencies[rawType];
          delete awaitingDependencies[rawType];
          callbacks.forEach(function(cb) {
              cb();
          });
      }
    }function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          isVoid: true, // void return values can be optimized out sometimes
          name: name,
          'argPackAdvance': 0,
          'fromWireType': function() {
              return undefined;
          },
          'toWireType': function(destructors, o) {
              // TODO: assert if anything else is given?
              return undefined;
          },
      });
    }

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        if (info.refcount === 0) {
          if (info.destructor) {
            Runtime.dynCall('vi', info.destructor, [ptr]);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr)); // exception refcount should be cleared, but don't free it
      throw ptr;
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((asm["setTempRet0"](0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((asm["setTempRet0"](0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

  
  function getShiftFromSize(size) {
      switch (size) {
          case 1: return 0;
          case 2: return 1;
          case 4: return 2;
          case 8: return 3;
          default:
              throw new TypeError('Unknown type size: ' + size);
      }
    }function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(wt) {
              // ambiguous emscripten ABI: sometimes return values are
              // true or false, and sometimes integers (0 or 1)
              return !!wt;
          },
          'toWireType': function(destructors, o) {
              return o ? trueValue : falseValue;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': function(pointer) {
              // TODO: if heap is fixed (like in asm.js) this could be executed outside
              var heap;
              if (size === 1) {
                  heap = HEAP8;
              } else if (size === 2) {
                  heap = HEAP16;
              } else if (size === 4) {
                  heap = HEAP32;
              } else {
                  throw new TypeError("Unknown boolean type size: " + name);
              }
              return this['fromWireType'](heap[pointer >> shift]);
          },
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function ___gxx_personality_v0() {
    }

  var _emscripten_landingpad=true;

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  
  function _free() {
  }
  Module["_free"] = _free;
  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;
  
  function simpleReadValueFromPointer(pointer) {
      return this['fromWireType'](HEAPU32[pointer >> 2]);
    }function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              if (value instanceof ArrayBuffer) {
                  value = new Uint8Array(value);
              }
  
              function getTAElement(ta, index) {
                  return ta[index];
              }
              function getStringElement(string, index) {
                  return string.charCodeAt(index);
              }
              var getElement;
              if (value instanceof Uint8Array) {
                  getElement = getTAElement;
              } else if (value instanceof Int8Array) {
                  getElement = getTAElement;
              } else if (typeof value === 'string') {
                  getElement = getStringElement;
              } else {
                  throwBindingError('Cannot pass non-string to std::string');
              }
  
              // assumes 4-byte alignment
              var length = value.length;
              var ptr = _malloc(4 + length);
              HEAPU32[ptr >> 2] = length;
              for (var i = 0; i < length; ++i) {
                  var charCode = getElement(value, i);
                  if (charCode > 255) {
                      _free(ptr);
                      throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                  }
                  HEAPU8[ptr + 4 + i] = charCode;
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_std_wstring(rawType, charSize, name) {
      // nb. do not cache HEAPU16 and HEAPU32, they may be destroyed by enlargeMemory().
      name = readLatin1String(name);
      var getHeap, shift;
      if (charSize === 2) {
          getHeap = function() { return HEAPU16; };
          shift = 1;
      } else if (charSize === 4) {
          getHeap = function() { return HEAPU32; };
          shift = 2;
      }
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var HEAP = getHeap();
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              var start = (value + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAP[start + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              // assumes 4-byte alignment
              var HEAP = getHeap();
              var length = value.length;
              var ptr = _malloc(4 + length * charSize);
              HEAPU32[ptr >> 2] = length;
              var start = (ptr + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  HEAP[start + i] = value.charCodeAt(i);
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Runtime.dynCall('v', func);
      _pthread_once.seen[ptr] = 1;
    }

  function ___lock() {}

  function ___unlock() {}

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 85: return totalMemory / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 79:
          return 0;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  var _emscripten_postinvoke=true;

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  
  
  function getTypeName(type) {
      var ptr = ___getTypeName(type);
      var rv = readLatin1String(ptr);
      _free(ptr);
      return rv;
    }function requireRegisteredType(rawType, humanName) {
      var impl = registeredTypes[rawType];
      if (undefined === impl) {
          throwBindingError(humanName + " has unknown type " + getTypeName(rawType));
      }
      return impl;
    }function __embind_register_enum_value(
      rawEnumType,
      name,
      enumValue
    ) {
      var enumType = requireRegisteredType(rawEnumType, 'enum');
      name = readLatin1String(name);
  
      var Enum = enumType.constructor;
  
      var Value = Object.create(enumType.constructor.prototype, {
          value: {value: enumValue},
          constructor: {value: createNamedFunction(enumType.name + '_' + name, function() {})},
      });
      Enum.values[enumValue] = Value;
      Enum[name] = Value;
    }

  
  function _embind_repr(v) {
      if (v === null) {
          return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
          return v.toString();
      } else {
          return '' + v;
      }
    }
  
  function integerReadValueFromPointer(name, shift, signed) {
      // integers are quite common, so generate very specialized functions
      switch (shift) {
          case 0: return signed ?
              function readS8FromPointer(pointer) { return HEAP8[pointer]; } :
              function readU8FromPointer(pointer) { return HEAPU8[pointer]; };
          case 1: return signed ?
              function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :
              function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };
          case 2: return signed ?
              function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :
              function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
          maxRange = 4294967295;
      }
  
      var shift = getShiftFromSize(size);
      
      var fromWireType = function(value) {
          return value;
      };
      
      if (minRange === 0) {
          var bitshift = 32 - 8*size;
          fromWireType = function(value) {
              return (value << bitshift) >>> bitshift;
          };
      }
  
      registerType(primitiveType, {
          name: name,
          'fromWireType': fromWireType,
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following two if()s and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              if (value < minRange || value > maxRange) {
                  throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
              }
              return value | 0;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  
  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0100000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, curr, WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 0777, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (!window['setImmediate']) {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = '__emcc';
          function Browser_setImmediate_messageHandler(event) {
            if (event.source === window && event.data === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          window.addEventListener("message", Browser_setImmediate_messageHandler, true);
          window['setImmediate'] = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            window.postMessage(emscriptenMainLoopMessageId, "*");
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          window['setImmediate'](Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  
  var tupleRegistrations={};
  
  function requireFunction(signature, rawFunction) {
      signature = readLatin1String(signature);
  
      function makeDynCaller(dynCall) {
          var args = [];
          for (var i = 1; i < signature.length; ++i) {
              args.push('a' + i);
          }
  
          var name = 'dynCall_' + signature + '_' + rawFunction;
          var body = 'return function ' + name + '(' + args.join(', ') + ') {\n';
          body    += '    return dynCall(rawFunction' + (args.length ? ', ' : '') + args.join(', ') + ');\n';
          body    += '};\n';
  
          return (new Function('dynCall', 'rawFunction', body))(dynCall, rawFunction);
      }
  
      var fp;
      if (Module['FUNCTION_TABLE_' + signature] !== undefined) {
          fp = Module['FUNCTION_TABLE_' + signature][rawFunction];
      } else if (typeof FUNCTION_TABLE !== "undefined") {
          fp = FUNCTION_TABLE[rawFunction];
      } else {
          // asm.js does not give direct access to the function tables,
          // and thus we must go through the dynCall interface which allows
          // calling into a signature's function table by pointer value.
          //
          // https://github.com/dherman/asm.js/issues/83
          //
          // This has three main penalties:
          // - dynCall is another function call in the path from JavaScript to C++.
          // - JITs may not predict through the function table indirection at runtime.
          var dc = asm['dynCall_' + signature];
          if (dc === undefined) {
              // We will always enter this branch if the signature
              // contains 'f' and PRECISE_F32 is not enabled.
              //
              // Try again, replacing 'f' with 'd'.
              dc = asm['dynCall_' + signature.replace(/f/g, 'd')];
              if (dc === undefined) {
                  throwBindingError("No dynCall invoker for signature: " + signature);
              }
          }
          fp = makeDynCaller(dc);
      }
  
      if (typeof fp !== "function") {
          throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
      }
      return fp;
    }function __embind_register_value_array_element(
      rawTupleType,
      getterReturnType,
      getterSignature,
      getter,
      getterContext,
      setterArgumentType,
      setterSignature,
      setter,
      setterContext
    ) {
      tupleRegistrations[rawTupleType].elements.push({
          getterReturnType: getterReturnType,
          getter: requireFunction(getterSignature, getter),
          getterContext: getterContext,
          setterArgumentType: setterArgumentType,
          setter: requireFunction(setterSignature, setter),
          setterContext: setterContext,
      });
    }

  
  
  var emval_free_list=[];
  
  var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];function __emval_decref(handle) {
      if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
          emval_handle_array[handle] = undefined;
          emval_free_list.push(handle);
      }
    }
  
  
  
  function count_emval_handles() {
      var count = 0;
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              ++count;
          }
      }
      return count;
    }
  
  function get_first_emval() {
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              return emval_handle_array[i];
          }
      }
      return null;
    }function init_emval() {
      Module['count_emval_handles'] = count_emval_handles;
      Module['get_first_emval'] = get_first_emval;
    }function __emval_register(value) {
  
      switch(value){
        case undefined :{ return 1; }
        case null :{ return 2; }
        case true :{ return 3; }
        case false :{ return 4; }
        default:{
          var handle = emval_free_list.length ?
              emval_free_list.pop() :
              emval_handle_array.length;
  
          emval_handle_array[handle] = {refcount: 1, value: value};
          return handle;
          }
        }
    }function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(handle) {
              var rv = emval_handle_array[handle].value;
              __emval_decref(handle);
              return rv;
          },
          'toWireType': function(destructors, value) {
              return __emval_register(value);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: null, // This type does not need a destructor
  
          // TODO: do we need a deleteObject here?  write a test where
          // emval is passed into JS via an interface
      });
    }

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
        ret = ret.slice(0, Math.max(0, bufsize));
        writeStringToMemory(ret, buf, true);
        return ret.length;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function __embind_register_value_array(
      rawType,
      name,
      constructorSignature,
      rawConstructor,
      destructorSignature,
      rawDestructor
    ) {
      tupleRegistrations[rawType] = {
          name: readLatin1String(name),
          rawConstructor: requireFunction(constructorSignature, rawConstructor),
          rawDestructor: requireFunction(destructorSignature, rawDestructor),
          elements: [],
      };
    }

   
  Module["_i64Add"] = _i64Add;

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  function _llvm_trap() {
      abort('trap!');
    }

  
  function floatReadValueFromPointer(name, shift) {
      switch (shift) {
          case 2: return function(pointer) {
              return this['fromWireType'](HEAPF32[pointer >> 2]);
          };
          case 3: return function(pointer) {
              return this['fromWireType'](HEAPF64[pointer >> 3]);
          };
          default:
              throw new TypeError("Unknown float type: " + name);
      }
    }function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              return value;
          },
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following if() and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              return value;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': floatReadValueFromPointer(name, shift),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  var _BDtoIHigh=true;

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  var _emscripten_resume=true;

  
  function runDestructors(destructors) {
      while (destructors.length) {
          var ptr = destructors.pop();
          var del = destructors.pop();
          del(ptr);
      }
    }function __embind_finalize_value_array(rawTupleType) {
      var reg = tupleRegistrations[rawTupleType];
      delete tupleRegistrations[rawTupleType];
      var elements = reg.elements;
      var elementsLength = elements.length;
      var elementTypes = elements.map(function(elt) { return elt.getterReturnType; }).
                  concat(elements.map(function(elt) { return elt.setterArgumentType; }));
  
      var rawConstructor = reg.rawConstructor;
      var rawDestructor = reg.rawDestructor;
  
      whenDependentTypesAreResolved([rawTupleType], elementTypes, function(elementTypes) {
          elements.forEach(function(elt, i) {
              var getterReturnType = elementTypes[i];
              var getter = elt.getter;
              var getterContext = elt.getterContext;
              var setterArgumentType = elementTypes[i + elementsLength];
              var setter = elt.setter;
              var setterContext = elt.setterContext;
              elt.read = function(ptr) {
                  return getterReturnType['fromWireType'](getter(getterContext, ptr));
              };
              elt.write = function(ptr, o) {
                  var destructors = [];
                  setter(setterContext, ptr, setterArgumentType['toWireType'](destructors, o));
                  runDestructors(destructors);
              };
          });
  
          return [{
              name: reg.name,
              'fromWireType': function(ptr) {
                  var rv = new Array(elementsLength);
                  for (var i = 0; i < elementsLength; ++i) {
                      rv[i] = elements[i].read(ptr);
                  }
                  rawDestructor(ptr);
                  return rv;
              },
              'toWireType': function(destructors, o) {
                  if (elementsLength !== o.length) {
                      throw new TypeError("Incorrect number of tuple elements for " + reg.name + ": expected=" + elementsLength + ", actual=" + o.length);
                  }
                  var ptr = rawConstructor();
                  for (var i = 0; i < elementsLength; ++i) {
                      elements[i].write(ptr, o[i]);
                  }
                  if (destructors !== null) {
                      destructors.push(rawDestructor, ptr);
                  }
                  return ptr;
              },
              'argPackAdvance': 8,
              'readValueFromPointer': simpleReadValueFromPointer,
              destructorFunction: rawDestructor,
          }];
      });
    }

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  
  
  function new_(constructor, argumentList) {
      if (!(constructor instanceof Function)) {
          throw new TypeError('new_ called with constructor type ' + typeof(constructor) + " which is not a function");
      }
  
      /*
       * Previously, the following line was just:
  
       function dummy() {};
  
       * Unfortunately, Chrome was preserving 'dummy' as the object's name, even though at creation, the 'dummy' has the
       * correct constructor name.  Thus, objects created with IMVU.new would show up in the debugger as 'dummy', which
       * isn't very helpful.  Using IMVU.createNamedFunction addresses the issue.  Doublely-unfortunately, there's no way
       * to write a test for this behavior.  -NRD 2013.02.22
       */
      var dummy = createNamedFunction(constructor.name || 'unknownFunctionName', function(){});
      dummy.prototype = constructor.prototype;
      var obj = new dummy;
  
      var r = constructor.apply(obj, argumentList);
      return (r instanceof Object) ? r : obj;
    }function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
      // humanName: a human-readable string name for the function to be generated.
      // argTypes: An array that contains the embind type objects for all types in the function signature.
      //    argTypes[0] is the type object for the function return value.
      //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
      //    argTypes[2...] are the actual function parameters.
      // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
      // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
      // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
      var argCount = argTypes.length;
  
      if (argCount < 2) {
          throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
      }
  
      var isClassMethodFunc = (argTypes[1] !== null && classType !== null);
  
      // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
  // TODO: This omits argument count check - enable only at -O3 or similar.
  //    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
  //       return FUNCTION_TABLE[fn];
  //    }
  
      var argsList = "";
      var argsListWired = "";
      for(var i = 0; i < argCount - 2; ++i) {
          argsList += (i!==0?", ":"")+"arg"+i;
          argsListWired += (i!==0?", ":"")+"arg"+i+"Wired";
      }
  
      var invokerFnBody =
          "return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n" +
          "if (arguments.length !== "+(argCount - 2)+") {\n" +
              "throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount - 2)+" args!');\n" +
          "}\n";
  
  
      // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
      // TODO: Remove this completely once all function invokers are being dynamically generated.
      var needsDestructorStack = false;
  
      for(var i = 1; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here.
          if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) { // The type does not define a destructor function - must use dynamic stack
              needsDestructorStack = true;
              break;
          }
      }
  
      if (needsDestructorStack) {
          invokerFnBody +=
              "var destructors = [];\n";
      }
  
      var dtorStack = needsDestructorStack ? "destructors" : "null";
      var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
      var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
  
  
      if (isClassMethodFunc) {
          invokerFnBody += "var thisWired = classParam.toWireType("+dtorStack+", this);\n";
      }
  
      for(var i = 0; i < argCount - 2; ++i) {
          invokerFnBody += "var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";
          args1.push("argType"+i);
          args2.push(argTypes[i+2]);
      }
  
      if (isClassMethodFunc) {
          argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
      }
  
      var returns = (argTypes[0].name !== "void");
  
      invokerFnBody +=
          (returns?"var rv = ":"") + "invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";
  
      if (needsDestructorStack) {
          invokerFnBody += "runDestructors(destructors);\n";
      } else {
          for(var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
              var paramName = (i === 1 ? "thisWired" : ("arg"+(i - 2)+"Wired"));
              if (argTypes[i].destructorFunction !== null) {
                  invokerFnBody += paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";
                  args1.push(paramName+"_dtor");
                  args2.push(argTypes[i].destructorFunction);
              }
          }
      }
  
      if (returns) {
          invokerFnBody += "var ret = retType.fromWireType(rv);\n" +
                           "return ret;\n";
      } else {
      }
      invokerFnBody += "}\n";
  
      args1.push(invokerFnBody);
  
      var invokerFunction = new_(Function, args1).apply(null, args2);
      return invokerFunction;
    }
  
  
  function ensureOverloadTable(proto, methodName, humanName) {
      if (undefined === proto[methodName].overloadTable) {
          var prevFunc = proto[methodName];
          // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
          proto[methodName] = function() {
              // TODO This check can be removed in -O3 level "unsafe" optimizations.
              if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
                  throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
              }
              return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
          };
          // Move the previous function into the overload table.
          proto[methodName].overloadTable = [];
          proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
      }
    }function exposePublicSymbol(name, value, numArguments) {
      if (Module.hasOwnProperty(name)) {
          if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
              throwBindingError("Cannot register public name '" + name + "' twice");
          }
  
          // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
          // that routes between the two.
          ensureOverloadTable(Module, name, name);
          if (Module.hasOwnProperty(numArguments)) {
              throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
          }
          // Add the new function into the overload table.
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          if (undefined !== numArguments) {
              Module[name].numArguments = numArguments;
          }
      }
    }
  
  function heap32VectorToArray(count, firstElement) {
      var array = [];
      for (var i = 0; i < count; i++) {
          array.push(HEAP32[(firstElement >> 2) + i]);
      }
      return array;
    }
  
  function replacePublicSymbol(name, value, numArguments) {
      if (!Module.hasOwnProperty(name)) {
          throwInternalError('Replacing nonexistant public symbol');
      }
      // If there's an overload table for this symbol, replace the symbol in the overload table instead.
      if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
      }
    }
  
  
  var UnboundTypeError=undefined;function throwUnboundTypeError(message, types) {
      var unboundTypes = [];
      var seen = {};
      function visit(type) {
          if (seen[type]) {
              return;
          }
          if (registeredTypes[type]) {
              return;
          }
          if (typeDependencies[type]) {
              typeDependencies[type].forEach(visit);
              return;
          }
          unboundTypes.push(type);
          seen[type] = true;
      }
      types.forEach(visit);
  
      throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']));
    }function __embind_register_function(name, argCount, rawArgTypesAddr, signature, rawInvoker, fn) {
      var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      name = readLatin1String(name);
      
      rawInvoker = requireFunction(signature, rawInvoker);
  
      exposePublicSymbol(name, function() {
          throwUnboundTypeError('Cannot call ' + name + ' due to unbound types', argTypes);
      }, argCount - 1);
  
      whenDependentTypesAreResolved([], argTypes, function(argTypes) {
          var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
          replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn), argCount - 1);
          return [];
      });
    }

  
  function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      asm['setThrew'](0);
      // Call destructor if one is registered then clear it.
      var ptr = EXCEPTIONS.caught.pop();
      if (ptr) {
        EXCEPTIONS.decRef(EXCEPTIONS.deAdjust(ptr));
        EXCEPTIONS.last = 0; // XXX in decRef?
      }
    }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  var _fabs=Math_abs;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

   
  Module["_memmove"] = _memmove;

  var _emscripten_preinvoke=true;

  var _BItoD=true;

  function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [
          Int8Array,
          Uint8Array,
          Int16Array,
          Uint16Array,
          Int32Array,
          Uint32Array,
          Float32Array,
          Float64Array,
      ];
  
      var TA = typeMapping[dataTypeIndex];
  
      function decodeMemoryView(handle) {
          handle = handle >> 2;
          var heap = HEAPU32;
          var size = heap[handle]; // in elements
          var data = heap[handle + 1]; // byte offset into emscripten heap
          return new TA(heap['buffer'], data, size);
      }
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': decodeMemoryView,
          'argPackAdvance': 8,
          'readValueFromPointer': decodeMemoryView,
      }, {
          ignoreDuplicateRegistrations: true,
      });
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function _pthread_self() {
      //FIXME: assumes only a single thread
      return 0;
    }

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function enumReadValueFromPointer(name, shift, signed) {
      switch (shift) {
          case 0: return function(pointer) {
              var heap = signed ? HEAP8 : HEAPU8;
              return this['fromWireType'](heap[pointer]);
          };
          case 1: return function(pointer) {
              var heap = signed ? HEAP16 : HEAPU16;
              return this['fromWireType'](heap[pointer >> 1]);
          };
          case 2: return function(pointer) {
              var heap = signed ? HEAP32 : HEAPU32;
              return this['fromWireType'](heap[pointer >> 2]);
          };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }function __embind_register_enum(
      rawType,
      name,
      size,
      isSigned
    ) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
  
      function constructor() {
      }
      constructor.values = {};
  
      registerType(rawType, {
          name: name,
          constructor: constructor,
          'fromWireType': function(c) {
              return this.constructor.values[c];
          },
          'toWireType': function(destructors, c) {
              return c.value;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': enumReadValueFromPointer(name, shift, isSigned),
          destructorFunction: null,
      });
      exposePublicSymbol(name, constructor);
    }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
embind_init_charCodes()
BindingError = Module['BindingError'] = extendError(Error, 'BindingError');
InternalError = Module['InternalError'] = extendError(Error, 'InternalError');
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) }
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); }
init_emval();
UnboundTypeError = Module['UnboundTypeError'] = extendError(Error, 'UnboundTypeError');
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiddi(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiddi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiidi(x) { Module["printErr"]("Invalid function pointer called with signature 'iiidi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiidd(x) { Module["printErr"]("Invalid function pointer called with signature 'iiidd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiddd(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iidddd(x) { Module["printErr"]("Invalid function pointer called with signature 'iidddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iidd(x) { Module["printErr"]("Invalid function pointer called with signature 'iidd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iidddi(x) { Module["printErr"]("Invalid function pointer called with signature 'iidddi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iidi(x) { Module["printErr"]("Invalid function pointer called with signature 'iidi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiddddi(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiddddi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiidddi(x) { Module["printErr"]("Invalid function pointer called with signature 'iiidddi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiidddd(x) { Module["printErr"]("Invalid function pointer called with signature 'iiidddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_diii(x) { Module["printErr"]("Invalid function pointer called with signature 'diii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiid(x) { Module["printErr"]("Invalid function pointer called with signature 'iiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_di(x) { Module["printErr"]("Invalid function pointer called with signature 'di'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iid(x) { Module["printErr"]("Invalid function pointer called with signature 'iid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiddd(x) { Module["printErr"]("Invalid function pointer called with signature 'iiddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiddddi(x) { Module["printErr"]("Invalid function pointer called with signature 'iiddddi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiddi(x) { Module["printErr"]("Invalid function pointer called with signature 'iiddi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_dii(x) { Module["printErr"]("Invalid function pointer called with signature 'dii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_d(x) { Module["printErr"]("Invalid function pointer called with signature 'd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viid(x) { Module["printErr"]("Invalid function pointer called with signature 'viid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiddi(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiddi"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiidi(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiidi"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiidd(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiidd"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiddd(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiddd"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iidddd(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iidddd"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iidd(index,a1,a2,a3) {
  try {
    return Module["dynCall_iidd"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iidddi(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iidddi"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iidi(index,a1,a2,a3) {
  try {
    return Module["dynCall_iidi"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiddddi(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiddddi"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiidddi(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiidddi"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiidddd(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiidddd"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_diii(index,a1,a2,a3) {
  try {
    return Module["dynCall_diii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiid(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiid"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_di(index,a1) {
  try {
    return Module["dynCall_di"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iid(index,a1,a2) {
  try {
    return Module["dynCall_iid"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiddd(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiddd"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiddddi(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiddddi"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiddi(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiddi"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_dii(index,a1,a2) {
  try {
    return Module["dynCall_dii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_d(index) {
  try {
    return Module["dynCall_d"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viid(index,a1,a2,a3) {
  try {
    Module["dynCall_viid"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity, "byteLength": byteLength };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_iiiddi": nullFunc_iiiddi, "nullFunc_iiidi": nullFunc_iiidi, "nullFunc_vi": nullFunc_vi, "nullFunc_iiidd": nullFunc_iiidd, "nullFunc_vii": nullFunc_vii, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_iiiddd": nullFunc_iiiddd, "nullFunc_ii": nullFunc_ii, "nullFunc_iidddd": nullFunc_iidddd, "nullFunc_iidd": nullFunc_iidd, "nullFunc_iidddi": nullFunc_iidddi, "nullFunc_iidi": nullFunc_iidi, "nullFunc_iiiddddi": nullFunc_iiiddddi, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iiidddi": nullFunc_iiidddi, "nullFunc_iiidddd": nullFunc_iiidddd, "nullFunc_diii": nullFunc_diii, "nullFunc_iiid": nullFunc_iiid, "nullFunc_di": nullFunc_di, "nullFunc_iid": nullFunc_iid, "nullFunc_iiddd": nullFunc_iiddd, "nullFunc_iiddddi": nullFunc_iiddddi, "nullFunc_iiddi": nullFunc_iiddi, "nullFunc_iii": nullFunc_iii, "nullFunc_dii": nullFunc_dii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_d": nullFunc_d, "nullFunc_i": nullFunc_i, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_viid": nullFunc_viid, "nullFunc_viiii": nullFunc_viiii, "invoke_viiiii": invoke_viiiii, "invoke_iiiddi": invoke_iiiddi, "invoke_iiidi": invoke_iiidi, "invoke_vi": invoke_vi, "invoke_iiidd": invoke_iiidd, "invoke_vii": invoke_vii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_iiiddd": invoke_iiiddd, "invoke_ii": invoke_ii, "invoke_iidddd": invoke_iidddd, "invoke_iidd": invoke_iidd, "invoke_iidddi": invoke_iidddi, "invoke_iidi": invoke_iidi, "invoke_iiiddddi": invoke_iiiddddi, "invoke_iiiiii": invoke_iiiiii, "invoke_iiii": invoke_iiii, "invoke_iiidddi": invoke_iiidddi, "invoke_iiidddd": invoke_iiidddd, "invoke_diii": invoke_diii, "invoke_iiid": invoke_iiid, "invoke_di": invoke_di, "invoke_iid": invoke_iid, "invoke_iiddd": invoke_iiddd, "invoke_iiddddi": invoke_iiddddi, "invoke_iiddi": invoke_iiddi, "invoke_iii": invoke_iii, "invoke_dii": invoke_dii, "invoke_viiiiii": invoke_viiiiii, "invoke_d": invoke_d, "invoke_i": invoke_i, "invoke_iiiii": invoke_iiiii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_viid": invoke_viid, "invoke_viiii": invoke_viiii, "_fabs": _fabs, "___syscall221": ___syscall221, "__embind_register_enum": __embind_register_enum, "floatReadValueFromPointer": floatReadValueFromPointer, "simpleReadValueFromPointer": simpleReadValueFromPointer, "___gxx_personality_v0": ___gxx_personality_v0, "__embind_register_memory_view": __embind_register_memory_view, "throwInternalError": throwInternalError, "get_first_emval": get_first_emval, "_abort": _abort, "throwBindingError": throwBindingError, "_pthread_key_create": _pthread_key_create, "___cxa_pure_virtual": ___cxa_pure_virtual, "___setErrNo": ___setErrNo, "__embind_register_value_array_element": __embind_register_value_array_element, "extendError": extendError, "___assert_fail": ___assert_fail, "___cxa_free_exception": ___cxa_free_exception, "___cxa_allocate_exception": ___cxa_allocate_exception, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "count_emval_handles": count_emval_handles, "getShiftFromSize": getShiftFromSize, "__embind_register_function": __embind_register_function, "__embind_register_emval": __embind_register_emval, "___cxa_begin_catch": ___cxa_begin_catch, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "__emval_register": __emval_register, "_sbrk": _sbrk, "__embind_register_void": __embind_register_void, "_emscripten_memcpy_big": _emscripten_memcpy_big, "___cxa_end_catch": ___cxa_end_catch, "__embind_register_bool": __embind_register_bool, "___resumeException": ___resumeException, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "_sysconf": _sysconf, "enumReadValueFromPointer": enumReadValueFromPointer, "getTypeName": getTypeName, "__embind_register_std_wstring": __embind_register_std_wstring, "_pthread_getspecific": _pthread_getspecific, "createNamedFunction": createNamedFunction, "embind_init_charCodes": embind_init_charCodes, "readLatin1String": readLatin1String, "_embind_repr": _embind_repr, "throwUnboundTypeError": throwUnboundTypeError, "_pthread_self": _pthread_self, "craftInvokerFunction": craftInvokerFunction, "__embind_register_integer": __embind_register_integer, "_pthread_once": _pthread_once, "__emval_decref": __emval_decref, "_llvm_trap": _llvm_trap, "runDestructors": runDestructors, "requireRegisteredType": requireRegisteredType, "makeLegalFunctionName": makeLegalFunctionName, "whenDependentTypesAreResolved": whenDependentTypesAreResolved, "___syscall54": ___syscall54, "___unlock": ___unlock, "heap32VectorToArray": heap32VectorToArray, "_pthread_cleanup_pop": _pthread_cleanup_pop, "__embind_register_enum_value": __embind_register_enum_value, "_emscripten_set_main_loop": _emscripten_set_main_loop, "___syscall5": ___syscall5, "_pthread_setspecific": _pthread_setspecific, "integerReadValueFromPointer": integerReadValueFromPointer, "__embind_finalize_value_array": __embind_finalize_value_array, "___cxa_throw": ___cxa_throw, "__embind_register_value_array": __embind_register_value_array, "___lock": ___lock, "___syscall6": ___syscall6, "_pthread_cleanup_push": _pthread_cleanup_push, "ensureOverloadTable": ensureOverloadTable, "init_emval": init_emval, "_time": _time, "requireFunction": requireFunction, "__embind_register_float": __embind_register_float, "new_": new_, "registerType": registerType, "___syscall140": ___syscall140, "exposePublicSymbol": exposePublicSymbol, "__embind_register_std_string": __embind_register_std_string, "replacePublicSymbol": replacePublicSymbol, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  
  var Int8View = global.Int8Array;
  var Int16View = global.Int16Array;
  var Int32View = global.Int32Array;
  var Uint8View = global.Uint8Array;
  var Uint16View = global.Uint16Array;
  var Uint32View = global.Uint32Array;
  var Float32View = global.Float32Array;
  var Float64View = global.Float64Array;
  var HEAP8 = new Int8View(buffer);
  var HEAP16 = new Int16View(buffer);
  var HEAP32 = new Int32View(buffer);
  var HEAPU8 = new Uint8View(buffer);
  var HEAPU16 = new Uint16View(buffer);
  var HEAPU32 = new Uint32View(buffer);
  var HEAPF32 = new Float32View(buffer);
  var HEAPF64 = new Float64View(buffer);
  var byteLength = global.byteLength;


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_iiiddi=env.nullFunc_iiiddi;
  var nullFunc_iiidi=env.nullFunc_iiidi;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_iiidd=env.nullFunc_iiidd;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_iiiddd=env.nullFunc_iiiddd;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iidddd=env.nullFunc_iidddd;
  var nullFunc_iidd=env.nullFunc_iidd;
  var nullFunc_iidddi=env.nullFunc_iidddi;
  var nullFunc_iidi=env.nullFunc_iidi;
  var nullFunc_iiiddddi=env.nullFunc_iiiddddi;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_iiidddi=env.nullFunc_iiidddi;
  var nullFunc_iiidddd=env.nullFunc_iiidddd;
  var nullFunc_diii=env.nullFunc_diii;
  var nullFunc_iiid=env.nullFunc_iiid;
  var nullFunc_di=env.nullFunc_di;
  var nullFunc_iid=env.nullFunc_iid;
  var nullFunc_iiddd=env.nullFunc_iiddd;
  var nullFunc_iiddddi=env.nullFunc_iiddddi;
  var nullFunc_iiddi=env.nullFunc_iiddi;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_dii=env.nullFunc_dii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_d=env.nullFunc_d;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_viid=env.nullFunc_viid;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_iiiddi=env.invoke_iiiddi;
  var invoke_iiidi=env.invoke_iiidi;
  var invoke_vi=env.invoke_vi;
  var invoke_iiidd=env.invoke_iiidd;
  var invoke_vii=env.invoke_vii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_iiiddd=env.invoke_iiiddd;
  var invoke_ii=env.invoke_ii;
  var invoke_iidddd=env.invoke_iidddd;
  var invoke_iidd=env.invoke_iidd;
  var invoke_iidddi=env.invoke_iidddi;
  var invoke_iidi=env.invoke_iidi;
  var invoke_iiiddddi=env.invoke_iiiddddi;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_iiidddi=env.invoke_iiidddi;
  var invoke_iiidddd=env.invoke_iiidddd;
  var invoke_diii=env.invoke_diii;
  var invoke_iiid=env.invoke_iiid;
  var invoke_di=env.invoke_di;
  var invoke_iid=env.invoke_iid;
  var invoke_iiddd=env.invoke_iiddd;
  var invoke_iiddddi=env.invoke_iiddddi;
  var invoke_iiddi=env.invoke_iiddi;
  var invoke_iii=env.invoke_iii;
  var invoke_dii=env.invoke_dii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_d=env.invoke_d;
  var invoke_i=env.invoke_i;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_viid=env.invoke_viid;
  var invoke_viiii=env.invoke_viiii;
  var _fabs=env._fabs;
  var ___syscall221=env.___syscall221;
  var __embind_register_enum=env.__embind_register_enum;
  var floatReadValueFromPointer=env.floatReadValueFromPointer;
  var simpleReadValueFromPointer=env.simpleReadValueFromPointer;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var __embind_register_memory_view=env.__embind_register_memory_view;
  var throwInternalError=env.throwInternalError;
  var get_first_emval=env.get_first_emval;
  var _abort=env._abort;
  var throwBindingError=env.throwBindingError;
  var _pthread_key_create=env._pthread_key_create;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var ___setErrNo=env.___setErrNo;
  var __embind_register_value_array_element=env.__embind_register_value_array_element;
  var extendError=env.extendError;
  var ___assert_fail=env.___assert_fail;
  var ___cxa_free_exception=env.___cxa_free_exception;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var count_emval_handles=env.count_emval_handles;
  var getShiftFromSize=env.getShiftFromSize;
  var __embind_register_function=env.__embind_register_function;
  var __embind_register_emval=env.__embind_register_emval;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var __emval_register=env.__emval_register;
  var _sbrk=env._sbrk;
  var __embind_register_void=env.__embind_register_void;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var ___cxa_end_catch=env.___cxa_end_catch;
  var __embind_register_bool=env.__embind_register_bool;
  var ___resumeException=env.___resumeException;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var _sysconf=env._sysconf;
  var enumReadValueFromPointer=env.enumReadValueFromPointer;
  var getTypeName=env.getTypeName;
  var __embind_register_std_wstring=env.__embind_register_std_wstring;
  var _pthread_getspecific=env._pthread_getspecific;
  var createNamedFunction=env.createNamedFunction;
  var embind_init_charCodes=env.embind_init_charCodes;
  var readLatin1String=env.readLatin1String;
  var _embind_repr=env._embind_repr;
  var throwUnboundTypeError=env.throwUnboundTypeError;
  var _pthread_self=env._pthread_self;
  var craftInvokerFunction=env.craftInvokerFunction;
  var __embind_register_integer=env.__embind_register_integer;
  var _pthread_once=env._pthread_once;
  var __emval_decref=env.__emval_decref;
  var _llvm_trap=env._llvm_trap;
  var runDestructors=env.runDestructors;
  var requireRegisteredType=env.requireRegisteredType;
  var makeLegalFunctionName=env.makeLegalFunctionName;
  var whenDependentTypesAreResolved=env.whenDependentTypesAreResolved;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var heap32VectorToArray=env.heap32VectorToArray;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var __embind_register_enum_value=env.__embind_register_enum_value;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var ___syscall5=env.___syscall5;
  var _pthread_setspecific=env._pthread_setspecific;
  var integerReadValueFromPointer=env.integerReadValueFromPointer;
  var __embind_finalize_value_array=env.__embind_finalize_value_array;
  var ___cxa_throw=env.___cxa_throw;
  var __embind_register_value_array=env.__embind_register_value_array;
  var ___lock=env.___lock;
  var ___syscall6=env.___syscall6;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var ensureOverloadTable=env.ensureOverloadTable;
  var init_emval=env.init_emval;
  var _time=env._time;
  var requireFunction=env.requireFunction;
  var __embind_register_float=env.__embind_register_float;
  var new_=env.new_;
  var registerType=env.registerType;
  var ___syscall140=env.___syscall140;
  var exposePublicSymbol=env.exposePublicSymbol;
  var __embind_register_std_string=env.__embind_register_std_string;
  var replacePublicSymbol=env.replacePublicSymbol;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var tempFloat = 0.0;

function _emscripten_replace_memory(newBuffer) {
  if ((byteLength(newBuffer) & 0xffffff || byteLength(newBuffer) <= 0xffffff) || byteLength(newBuffer) > 0x80000000) return false;
  HEAP8 = new Int8View(newBuffer);
  HEAP16 = new Int16View(newBuffer);
  HEAP32 = new Int32View(newBuffer);
  HEAPU8 = new Uint8View(newBuffer);
  HEAPU16 = new Uint16View(newBuffer);
  HEAPU32 = new Uint32View(newBuffer);
  HEAPF32 = new Float32View(newBuffer);
  HEAPF64 = new Float64View(newBuffer);
  buffer = newBuffer;
  return true;
}

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function __ZN8tinyxml27StrPairD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __THREW__ = 0;
 invoke_vi(353,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN8tinyxml27StrPair5ResetEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 512;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = ((($1)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0|0);
  if (!($7)) {
   __ZdaPv($6);
  }
 }
 HEAP32[$1>>2] = 0;
 $8 = ((($1)) + 4|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($1)) + 8|0);
 HEAP32[$9>>2] = 0;
 STACKTOP = sp;return;
}
function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function __ZN8tinyxml27StrPair10TransferToEPS0_($this,$other) {
 $this = $this|0;
 $other = $other|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $other;
 $2 = $0;
 $3 = $1;
 $4 = ($2|0)==($3|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = $1;
 __ZN8tinyxml27StrPair5ResetEv($5);
 $6 = HEAP32[$2>>2]|0;
 $7 = $1;
 HEAP32[$7>>2] = $6;
 $8 = ((($2)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $1;
 $11 = ((($10)) + 4|0);
 HEAP32[$11>>2] = $9;
 $12 = ((($2)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $1;
 $15 = ((($14)) + 8|0);
 HEAP32[$15>>2] = $13;
 HEAP32[$2>>2] = 0;
 $16 = ((($2)) + 4|0);
 HEAP32[$16>>2] = 0;
 $17 = ((($2)) + 8|0);
 HEAP32[$17>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN8tinyxml27StrPair6SetStrEPKci($this,$str,$flags) {
 $this = $this|0;
 $str = $str|0;
 $flags = $flags|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $str;
 $2 = $flags;
 $3 = $0;
 __ZN8tinyxml27StrPair5ResetEv($3);
 $4 = $1;
 $5 = (_strlen($4)|0);
 $len = $5;
 $6 = $len;
 $7 = (($6) + 1)|0;
 $8 = (__Znaj($7)|0);
 $9 = ((($3)) + 4|0);
 HEAP32[$9>>2] = $8;
 $10 = ((($3)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $1;
 $13 = $len;
 $14 = (($13) + 1)|0;
 _memcpy(($11|0),($12|0),($14|0))|0;
 $15 = ((($3)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $len;
 $18 = (($16) + ($17)|0);
 $19 = ((($3)) + 8|0);
 HEAP32[$19>>2] = $18;
 $20 = $2;
 $21 = $20 | 512;
 HEAP32[$3>>2] = $21;
 STACKTOP = sp;return;
}
function __ZN8tinyxml27StrPair9ParseTextEPcPKci($this,$p,$endTag,$strFlags) {
 $this = $this|0;
 $p = $p|0;
 $endTag = $endTag|0;
 $strFlags = $strFlags|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $endChar = 0, $length = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $p;
 $3 = $endTag;
 $4 = $strFlags;
 $5 = $1;
 $6 = $2;
 $start = $6;
 $7 = $3;
 $8 = HEAP8[$7>>0]|0;
 $endChar = $8;
 $9 = $3;
 $10 = (_strlen($9)|0);
 $length = $10;
 while(1) {
  $11 = $2;
  $12 = HEAP8[$11>>0]|0;
  $13 = ($12<<24>>24)!=(0);
  if (!($13)) {
   label = 7;
   break;
  }
  $14 = $2;
  $15 = HEAP8[$14>>0]|0;
  $16 = $15 << 24 >> 24;
  $17 = $endChar;
  $18 = $17 << 24 >> 24;
  $19 = ($16|0)==($18|0);
  if ($19) {
   $20 = $2;
   $21 = $3;
   $22 = $length;
   $23 = (_strncmp($20,$21,$22)|0);
   $24 = ($23|0)==(0);
   if ($24) {
    label = 5;
    break;
   }
  }
  $31 = $2;
  $32 = ((($31)) + 1|0);
  $2 = $32;
 }
 if ((label|0) == 5) {
  $25 = $start;
  $26 = $2;
  $27 = $4;
  __ZN8tinyxml27StrPair3SetEPcS1_i($5,$25,$26,$27);
  $28 = $2;
  $29 = $length;
  $30 = (($28) + ($29)|0);
  $0 = $30;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 }
 else if ((label|0) == 7) {
  $0 = 0;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 }
 return (0)|0;
}
function __ZN8tinyxml27StrPair3SetEPcS1_i($this,$start,$end,$flags) {
 $this = $this|0;
 $start = $start|0;
 $end = $end|0;
 $flags = $flags|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $start;
 $2 = $end;
 $3 = $flags;
 $4 = $0;
 __ZN8tinyxml27StrPair5ResetEv($4);
 $5 = $1;
 $6 = ((($4)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = $2;
 $8 = ((($4)) + 8|0);
 HEAP32[$8>>2] = $7;
 $9 = $3;
 $10 = $9 | 256;
 HEAP32[$4>>2] = $10;
 STACKTOP = sp;return;
}
function __ZN8tinyxml27StrPair9ParseNameEPc($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $p;
 $3 = $1;
 $4 = $2;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $2;
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)!=(0);
  if ($8) {
   $9 = $2;
   $10 = HEAP8[$9>>0]|0;
   $11 = (__ZN8tinyxml27XMLUtil15IsNameStartCharEh($10)|0);
   if (!($11)) {
    $0 = 0;
    $26 = $0;
    STACKTOP = sp;return ($26|0);
   }
   $12 = $2;
   $start = $12;
   $13 = $2;
   $14 = ((($13)) + 1|0);
   $2 = $14;
   while(1) {
    $15 = $2;
    $16 = HEAP8[$15>>0]|0;
    $17 = ($16<<24>>24)!=(0);
    if (!($17)) {
     break;
    }
    $18 = $2;
    $19 = HEAP8[$18>>0]|0;
    $20 = (__ZN8tinyxml27XMLUtil10IsNameCharEh($19)|0);
    if (!($20)) {
     break;
    }
    $21 = $2;
    $22 = ((($21)) + 1|0);
    $2 = $22;
   }
   $23 = $start;
   $24 = $2;
   __ZN8tinyxml27StrPair3SetEPcS1_i($3,$23,$24,0);
   $25 = $2;
   $0 = $25;
   $26 = $0;
   STACKTOP = sp;return ($26|0);
  }
 }
 $0 = 0;
 $26 = $0;
 STACKTOP = sp;return ($26|0);
}
function __ZN8tinyxml27XMLUtil15IsNameStartCharEh($ch) {
 $ch = $ch|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 1|0;
 $1 = $ch;
 $2 = $1;
 $3 = $2&255;
 $4 = ($3|0)>=(128);
 do {
  if ($4) {
   $$expand_i1_val = 1;
   HEAP8[$0>>0] = $$expand_i1_val;
  } else {
   $5 = $1;
   $6 = $5&255;
   $7 = (_isalpha($6)|0);
   $8 = ($7|0)!=(0);
   if ($8) {
    $$expand_i1_val2 = 1;
    HEAP8[$0>>0] = $$expand_i1_val2;
    break;
   }
   $9 = $1;
   $10 = $9&255;
   $11 = ($10|0)==(58);
   if ($11) {
    $15 = 1;
   } else {
    $12 = $1;
    $13 = $12&255;
    $14 = ($13|0)==(95);
    $15 = $14;
   }
   $$expand_i1_val4 = $15&1;
   HEAP8[$0>>0] = $$expand_i1_val4;
  }
 } while(0);
 $$pre_trunc = HEAP8[$0>>0]|0;
 $16 = $$pre_trunc&1;
 STACKTOP = sp;return ($16|0);
}
function __ZN8tinyxml27XMLUtil10IsNameCharEh($ch) {
 $ch = $ch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ch;
 $1 = $0;
 $2 = (__ZN8tinyxml27XMLUtil15IsNameStartCharEh($1)|0);
 if ($2) {
  $13 = 1;
 } else {
  $3 = $0;
  $4 = $3&255;
  $5 = (_isdigit($4)|0);
  $6 = ($5|0)!=(0);
  if ($6) {
   $13 = 1;
  } else {
   $7 = $0;
   $8 = $7&255;
   $9 = ($8|0)==(46);
   if ($9) {
    $13 = 1;
   } else {
    $10 = $0;
    $11 = $10&255;
    $12 = ($11|0)==(45);
    $13 = $12;
   }
  }
 }
 STACKTOP = sp;return ($13|0);
}
function __ZN8tinyxml27StrPair18CollapseWhitespaceEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $q = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (__ZN8tinyxml27XMLUtil14SkipWhiteSpaceEPc($3)|0);
 $5 = ((($1)) + 4|0);
 HEAP32[$5>>2] = $4;
 $6 = ((($1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)!=(0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = ((($1)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $p = $11;
 $12 = ((($1)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $q = $13;
 while(1) {
  $14 = $p;
  $15 = HEAP8[$14>>0]|0;
  $16 = ($15<<24>>24)!=(0);
  if (!($16)) {
   break;
  }
  $17 = $p;
  $18 = HEAP8[$17>>0]|0;
  $19 = (__ZN8tinyxml27XMLUtil12IsWhiteSpaceEc($18)|0);
  if ($19) {
   $20 = $p;
   $21 = (__ZN8tinyxml27XMLUtil14SkipWhiteSpaceEPc($20)|0);
   $p = $21;
   $22 = $p;
   $23 = HEAP8[$22>>0]|0;
   $24 = $23 << 24 >> 24;
   $25 = ($24|0)==(0);
   if ($25) {
    break;
   }
   $26 = $q;
   HEAP8[$26>>0] = 32;
   $27 = $q;
   $28 = ((($27)) + 1|0);
   $q = $28;
  }
  $29 = $p;
  $30 = HEAP8[$29>>0]|0;
  $31 = $q;
  HEAP8[$31>>0] = $30;
  $32 = $q;
  $33 = ((($32)) + 1|0);
  $q = $33;
  $34 = $p;
  $35 = ((($34)) + 1|0);
  $p = $35;
 }
 $36 = $q;
 HEAP8[$36>>0] = 0;
 STACKTOP = sp;return;
}
function __ZN8tinyxml27XMLUtil14SkipWhiteSpaceEPc($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 $2 = (__ZN8tinyxml27XMLUtil14SkipWhiteSpaceEPKc($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN8tinyxml27XMLUtil12IsWhiteSpaceEc($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 $2 = (__ZN8tinyxml27XMLUtil18IsUTF8ContinuationEc($1)|0);
 if ($2) {
  $7 = 0;
  STACKTOP = sp;return ($7|0);
 }
 $3 = $0;
 $4 = $3&255;
 $5 = (_isspace($4)|0);
 $6 = ($5|0)!=(0);
 $7 = $6;
 STACKTOP = sp;return ($7|0);
}
function __ZN8tinyxml27StrPair6GetStrEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $adjusted = 0;
 var $buf = 0, $buflen = 0, $entity = 0, $entityFound = 0, $i = 0, $len = 0, $p = 0, $q = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 34|0;
 $len = sp + 12|0;
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 256;
 $4 = ($3|0)!=(0);
 if (!($4)) {
  $137 = ((($1)) + 4|0);
  $138 = HEAP32[$137>>2]|0;
  STACKTOP = sp;return ($138|0);
 }
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP8[$6>>0] = 0;
 $7 = HEAP32[$1>>2]|0;
 $8 = $7 ^ 256;
 HEAP32[$1>>2] = $8;
 $9 = HEAP32[$1>>2]|0;
 $10 = ($9|0)!=(0);
 if ($10) {
  $11 = ((($1)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $p = $12;
  $13 = ((($1)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $q = $14;
  while(1) {
   $15 = $p;
   $16 = ((($1)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($15>>>0)<($17>>>0);
   if (!($18)) {
    break;
   }
   $19 = HEAP32[$1>>2]|0;
   $20 = $19 & 2;
   $21 = ($20|0)!=(0);
   if ($21) {
    $22 = $p;
    $23 = HEAP8[$22>>0]|0;
    $24 = $23 << 24 >> 24;
    $25 = ($24|0)==(13);
    if ($25) {
     $26 = $p;
     $27 = ((($26)) + 1|0);
     $28 = HEAP8[$27>>0]|0;
     $29 = $28 << 24 >> 24;
     $30 = ($29|0)==(10);
     $31 = $p;
     if ($30) {
      $32 = ((($31)) + 2|0);
      $p = $32;
     } else {
      $33 = ((($31)) + 1|0);
      $p = $33;
     }
     $34 = $q;
     $35 = ((($34)) + 1|0);
     $q = $35;
     HEAP8[$34>>0] = 10;
     continue;
    }
   }
   $36 = HEAP32[$1>>2]|0;
   $37 = $36 & 2;
   $38 = ($37|0)!=(0);
   if ($38) {
    $39 = $p;
    $40 = HEAP8[$39>>0]|0;
    $41 = $40 << 24 >> 24;
    $42 = ($41|0)==(10);
    if ($42) {
     $43 = $p;
     $44 = ((($43)) + 1|0);
     $45 = HEAP8[$44>>0]|0;
     $46 = $45 << 24 >> 24;
     $47 = ($46|0)==(13);
     $48 = $p;
     if ($47) {
      $49 = ((($48)) + 2|0);
      $p = $49;
     } else {
      $50 = ((($48)) + 1|0);
      $p = $50;
     }
     $51 = $q;
     $52 = ((($51)) + 1|0);
     $q = $52;
     HEAP8[$51>>0] = 10;
     continue;
    }
   }
   $53 = HEAP32[$1>>2]|0;
   $54 = $53 & 1;
   $55 = ($54|0)!=(0);
   if ($55) {
    $56 = $p;
    $57 = HEAP8[$56>>0]|0;
    $58 = $57 << 24 >> 24;
    $59 = ($58|0)==(38);
    if ($59) {
     $60 = $p;
     $61 = ((($60)) + 1|0);
     $62 = HEAP8[$61>>0]|0;
     $63 = $62 << 24 >> 24;
     $64 = ($63|0)==(35);
     if ($64) {
      $buflen = 10;
      dest=$buf; stop=dest+10|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
      HEAP32[$len>>2] = 0;
      $65 = $p;
      $66 = (__ZN8tinyxml27XMLUtil15GetCharacterRefEPKcPcPi($65,$buf,$len)|0);
      $adjusted = $66;
      $67 = $adjusted;
      $68 = ($67|0)==(0|0);
      if ($68) {
       $69 = $p;
       $70 = HEAP8[$69>>0]|0;
       $71 = $q;
       HEAP8[$71>>0] = $70;
       $72 = $p;
       $73 = ((($72)) + 1|0);
       $p = $73;
       $74 = $q;
       $75 = ((($74)) + 1|0);
       $q = $75;
       continue;
      } else {
       $76 = $adjusted;
       $p = $76;
       $77 = $q;
       $78 = HEAP32[$len>>2]|0;
       _memcpy(($77|0),($buf|0),($78|0))|0;
       $79 = HEAP32[$len>>2]|0;
       $80 = $q;
       $81 = (($80) + ($79)|0);
       $q = $81;
       continue;
      }
     }
     $entityFound = 0;
     $i = 0;
     while(1) {
      $82 = $i;
      $83 = ($82|0)<(5);
      if (!($83)) {
       break;
      }
      $84 = $i;
      $85 = (1144 + (($84*12)|0)|0);
      $entity = $85;
      $86 = $p;
      $87 = ((($86)) + 1|0);
      $88 = $entity;
      $89 = HEAP32[$88>>2]|0;
      $90 = $entity;
      $91 = ((($90)) + 4|0);
      $92 = HEAP32[$91>>2]|0;
      $93 = (_strncmp($87,$89,$92)|0);
      $94 = ($93|0)==(0);
      if ($94) {
       $95 = $p;
       $96 = $entity;
       $97 = ((($96)) + 4|0);
       $98 = HEAP32[$97>>2]|0;
       $99 = (($95) + ($98)|0);
       $100 = ((($99)) + 1|0);
       $101 = HEAP8[$100>>0]|0;
       $102 = $101 << 24 >> 24;
       $103 = ($102|0)==(59);
       if ($103) {
        label = 27;
        break;
       }
      }
      $116 = $i;
      $117 = (($116) + 1)|0;
      $i = $117;
     }
     if ((label|0) == 27) {
      label = 0;
      $104 = $entity;
      $105 = ((($104)) + 8|0);
      $106 = HEAP8[$105>>0]|0;
      $107 = $q;
      HEAP8[$107>>0] = $106;
      $108 = $q;
      $109 = ((($108)) + 1|0);
      $q = $109;
      $110 = $entity;
      $111 = ((($110)) + 4|0);
      $112 = HEAP32[$111>>2]|0;
      $113 = (($112) + 2)|0;
      $114 = $p;
      $115 = (($114) + ($113)|0);
      $p = $115;
      $entityFound = 1;
     }
     $118 = $entityFound;
     $119 = $118&1;
     if ($119) {
      continue;
     }
     $120 = $p;
     $121 = ((($120)) + 1|0);
     $p = $121;
     $122 = $q;
     $123 = ((($122)) + 1|0);
     $q = $123;
     continue;
    }
   }
   $124 = $p;
   $125 = HEAP8[$124>>0]|0;
   $126 = $q;
   HEAP8[$126>>0] = $125;
   $127 = $p;
   $128 = ((($127)) + 1|0);
   $p = $128;
   $129 = $q;
   $130 = ((($129)) + 1|0);
   $q = $130;
  }
  $131 = $q;
  HEAP8[$131>>0] = 0;
 }
 $132 = HEAP32[$1>>2]|0;
 $133 = $132 & 4;
 $134 = ($133|0)!=(0);
 if ($134) {
  __ZN8tinyxml27StrPair18CollapseWhitespaceEv($1);
 }
 $135 = HEAP32[$1>>2]|0;
 $136 = $135 & 512;
 HEAP32[$1>>2] = $136;
 $137 = ((($1)) + 4|0);
 $138 = HEAP32[$137>>2]|0;
 STACKTOP = sp;return ($138|0);
}
function __ZN8tinyxml27XMLUtil15GetCharacterRefEPKcPcPi($p,$value,$length) {
 $p = $p|0;
 $value = $value|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $delta = 0, $digit = 0;
 var $digit2 = 0, $digitScaled = 0, $digitScaled3 = 0, $mult = 0, $q = 0, $q1 = 0, $ucs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $p;
 $2 = $value;
 $3 = $length;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 $5 = $1;
 $6 = ((($5)) + 1|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7 << 24 >> 24;
 $9 = ($8|0)==(35);
 if ($9) {
  $10 = $1;
  $11 = ((($10)) + 2|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = ($12<<24>>24)!=(0);
  if ($13) {
   $ucs = 0;
   $delta = 0;
   $mult = 1;
   $14 = $1;
   $15 = ((($14)) + 2|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = $16 << 24 >> 24;
   $18 = ($17|0)==(120);
   $19 = $1;
   L4: do {
    if ($18) {
     $20 = ((($19)) + 3|0);
     $q = $20;
     $21 = $q;
     $22 = HEAP8[$21>>0]|0;
     $23 = ($22<<24>>24)!=(0);
     if (!($23)) {
      $0 = 0;
      $137 = $0;
      STACKTOP = sp;return ($137|0);
     }
     $24 = $q;
     $25 = (_strchr($24,59)|0);
     $q = $25;
     $26 = $q;
     $27 = ($26|0)!=(0|0);
     if (!($27)) {
      $0 = 0;
      $137 = $0;
      STACKTOP = sp;return ($137|0);
     }
     $28 = $q;
     $29 = $1;
     $30 = $28;
     $31 = $29;
     $32 = (($30) - ($31))|0;
     $delta = $32;
     $33 = $q;
     $34 = ((($33)) + -1|0);
     $q = $34;
     L14: while(1) {
      $35 = $q;
      $36 = HEAP8[$35>>0]|0;
      $37 = $36 << 24 >> 24;
      $38 = ($37|0)!=(120);
      if (!($38)) {
       break L4;
      }
      $digit = 0;
      $39 = $q;
      $40 = HEAP8[$39>>0]|0;
      $41 = $40 << 24 >> 24;
      $42 = ($41|0)>=(48);
      if ($42) {
       $43 = $q;
       $44 = HEAP8[$43>>0]|0;
       $45 = $44 << 24 >> 24;
       $46 = ($45|0)<=(57);
       if ($46) {
        $47 = $q;
        $48 = HEAP8[$47>>0]|0;
        $49 = $48 << 24 >> 24;
        $50 = (($49) - 48)|0;
        $digit = $50;
       } else {
        label = 13;
       }
      } else {
       label = 13;
      }
      do {
       if ((label|0) == 13) {
        label = 0;
        $51 = $q;
        $52 = HEAP8[$51>>0]|0;
        $53 = $52 << 24 >> 24;
        $54 = ($53|0)>=(97);
        if ($54) {
         $55 = $q;
         $56 = HEAP8[$55>>0]|0;
         $57 = $56 << 24 >> 24;
         $58 = ($57|0)<=(102);
         if ($58) {
          $59 = $q;
          $60 = HEAP8[$59>>0]|0;
          $61 = $60 << 24 >> 24;
          $62 = (($61) - 97)|0;
          $63 = (($62) + 10)|0;
          $digit = $63;
          break;
         }
        }
        $64 = $q;
        $65 = HEAP8[$64>>0]|0;
        $66 = $65 << 24 >> 24;
        $67 = ($66|0)>=(65);
        if (!($67)) {
         break L14;
        }
        $68 = $q;
        $69 = HEAP8[$68>>0]|0;
        $70 = $69 << 24 >> 24;
        $71 = ($70|0)<=(70);
        if (!($71)) {
         break L14;
        }
        $72 = $q;
        $73 = HEAP8[$72>>0]|0;
        $74 = $73 << 24 >> 24;
        $75 = (($74) - 65)|0;
        $76 = (($75) + 10)|0;
        $digit = $76;
       }
      } while(0);
      $77 = $mult;
      $78 = $digit;
      $79 = Math_imul($77, $78)|0;
      $digitScaled = $79;
      $80 = $digitScaled;
      $81 = $ucs;
      $82 = (($81) + ($80))|0;
      $ucs = $82;
      $83 = $mult;
      $84 = $83<<4;
      $mult = $84;
      $85 = $q;
      $86 = ((($85)) + -1|0);
      $q = $86;
     }
     $0 = 0;
     $137 = $0;
     STACKTOP = sp;return ($137|0);
    } else {
     $87 = ((($19)) + 2|0);
     $q1 = $87;
     $88 = $q1;
     $89 = HEAP8[$88>>0]|0;
     $90 = ($89<<24>>24)!=(0);
     if (!($90)) {
      $0 = 0;
      $137 = $0;
      STACKTOP = sp;return ($137|0);
     }
     $91 = $q1;
     $92 = (_strchr($91,59)|0);
     $q1 = $92;
     $93 = $q1;
     $94 = ($93|0)!=(0|0);
     if (!($94)) {
      $0 = 0;
      $137 = $0;
      STACKTOP = sp;return ($137|0);
     }
     $95 = $q1;
     $96 = $1;
     $97 = $95;
     $98 = $96;
     $99 = (($97) - ($98))|0;
     $delta = $99;
     $100 = $q1;
     $101 = ((($100)) + -1|0);
     $q1 = $101;
     while(1) {
      $102 = $q1;
      $103 = HEAP8[$102>>0]|0;
      $104 = $103 << 24 >> 24;
      $105 = ($104|0)!=(35);
      if (!($105)) {
       break L4;
      }
      $106 = $q1;
      $107 = HEAP8[$106>>0]|0;
      $108 = $107 << 24 >> 24;
      $109 = ($108|0)>=(48);
      if (!($109)) {
       break;
      }
      $110 = $q1;
      $111 = HEAP8[$110>>0]|0;
      $112 = $111 << 24 >> 24;
      $113 = ($112|0)<=(57);
      if (!($113)) {
       break;
      }
      $114 = $q1;
      $115 = HEAP8[$114>>0]|0;
      $116 = $115 << 24 >> 24;
      $117 = (($116) - 48)|0;
      $digit2 = $117;
      $118 = $mult;
      $119 = $digit2;
      $120 = Math_imul($118, $119)|0;
      $digitScaled3 = $120;
      $121 = $digitScaled3;
      $122 = $ucs;
      $123 = (($122) + ($121))|0;
      $ucs = $123;
      $124 = $mult;
      $125 = ($124*10)|0;
      $mult = $125;
      $126 = $q1;
      $127 = ((($126)) + -1|0);
      $q1 = $127;
     }
     $0 = 0;
     $137 = $0;
     STACKTOP = sp;return ($137|0);
    }
   } while(0);
   $128 = $ucs;
   $129 = $2;
   $130 = $3;
   __ZN8tinyxml27XMLUtil18ConvertUTF32ToUTF8EmPcPi($128,$129,$130);
   $131 = $1;
   $132 = $delta;
   $133 = (($131) + ($132)|0);
   $134 = ((($133)) + 1|0);
   $0 = $134;
   $137 = $0;
   STACKTOP = sp;return ($137|0);
  }
 }
 $135 = $1;
 $136 = ((($135)) + 1|0);
 $0 = $136;
 $137 = $0;
 STACKTOP = sp;return ($137|0);
}
function __ZN8tinyxml27XMLUtil7ReadBOMEPKcPb($p,$bom) {
 $p = $p|0;
 $bom = $bom|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $pu = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $bom;
 $2 = $1;
 HEAP8[$2>>0] = 0;
 $3 = $0;
 $pu = $3;
 $4 = $pu;
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ($6|0)==(239);
 if ($7) {
  $8 = $pu;
  $9 = ((($8)) + 1|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = ($11|0)==(187);
  if ($12) {
   $13 = $pu;
   $14 = ((($13)) + 2|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = $15&255;
   $17 = ($16|0)==(191);
   if ($17) {
    $18 = $1;
    HEAP8[$18>>0] = 1;
    $19 = $0;
    $20 = ((($19)) + 3|0);
    $0 = $20;
   }
  }
 }
 $21 = $0;
 STACKTOP = sp;return ($21|0);
}
function __ZN8tinyxml27XMLUtil18ConvertUTF32ToUTF8EmPcPi($input,$output,$length) {
 $input = $input|0;
 $output = $output|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $BYTE_MARK = 0, $BYTE_MASK = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $input;
 $1 = $output;
 $2 = $length;
 $BYTE_MASK = 191;
 $BYTE_MARK = 128;
 $3 = $0;
 $4 = ($3>>>0)<(128);
 do {
  if ($4) {
   $5 = $2;
   HEAP32[$5>>2] = 1;
  } else {
   $6 = $0;
   $7 = ($6>>>0)<(2048);
   if ($7) {
    $8 = $2;
    HEAP32[$8>>2] = 2;
    break;
   }
   $9 = $0;
   $10 = ($9>>>0)<(65536);
   if ($10) {
    $11 = $2;
    HEAP32[$11>>2] = 3;
    break;
   }
   $12 = $0;
   $13 = ($12>>>0)<(2097152);
   $14 = $2;
   if ($13) {
    HEAP32[$14>>2] = 4;
    break;
   }
   HEAP32[$14>>2] = 0;
   STACKTOP = sp;return;
  }
 } while(0);
 $15 = $2;
 $16 = HEAP32[$15>>2]|0;
 $17 = $1;
 $18 = (($17) + ($16)|0);
 $1 = $18;
 $19 = $2;
 $20 = HEAP32[$19>>2]|0;
 switch ($20|0) {
 case 4:  {
  $21 = $1;
  $22 = ((($21)) + -1|0);
  $1 = $22;
  $23 = $0;
  $24 = $23 | 128;
  $25 = $24 & 191;
  $26 = $25&255;
  $27 = $1;
  HEAP8[$27>>0] = $26;
  $28 = $0;
  $29 = $28 >>> 6;
  $0 = $29;
  label = 12;
  break;
 }
 case 3:  {
  label = 12;
  break;
 }
 case 2:  {
  label = 13;
  break;
 }
 case 1:  {
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
 if ((label|0) == 12) {
  $30 = $1;
  $31 = ((($30)) + -1|0);
  $1 = $31;
  $32 = $0;
  $33 = $32 | 128;
  $34 = $33 & 191;
  $35 = $34&255;
  $36 = $1;
  HEAP8[$36>>0] = $35;
  $37 = $0;
  $38 = $37 >>> 6;
  $0 = $38;
  label = 13;
 }
 if ((label|0) == 13) {
  $39 = $1;
  $40 = ((($39)) + -1|0);
  $1 = $40;
  $41 = $0;
  $42 = $41 | 128;
  $43 = $42 & 191;
  $44 = $43&255;
  $45 = $1;
  HEAP8[$45>>0] = $44;
  $46 = $0;
  $47 = $46 >>> 6;
  $0 = $47;
 }
 $48 = $1;
 $49 = ((($48)) + -1|0);
 $1 = $49;
 $50 = $0;
 $51 = $2;
 $52 = HEAP32[$51>>2]|0;
 $53 = (1204 + ($52<<2)|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = $50 | $54;
 $56 = $55&255;
 $57 = $1;
 HEAP8[$57>>0] = $56;
 STACKTOP = sp;return;
}
function __ZN8tinyxml27XMLUtil5ToStrEiPci($v,$buffer,$bufferSize) {
 $v = $v|0;
 $buffer = $buffer|0;
 $bufferSize = $bufferSize|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $v;
 $1 = $buffer;
 $2 = $bufferSize;
 $3 = $1;
 $4 = $2;
 $5 = $0;
 HEAP32[$vararg_buffer>>2] = $5;
 (_snprintf($3,$4,11106,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function __ZN8tinyxml27XMLUtil5ToStrEdPci($v,$buffer,$bufferSize) {
 $v = +$v;
 $buffer = $buffer|0;
 $bufferSize = $bufferSize|0;
 var $0 = 0.0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 8|0;
 $0 = $v;
 $1 = $buffer;
 $2 = $bufferSize;
 $3 = $1;
 $4 = $2;
 $5 = $0;
 HEAPF64[$vararg_buffer>>3] = $5;
 (_snprintf($3,$4,6884,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function __ZN8tinyxml27XMLUtil5ToIntEPKcPi($str,$value) {
 $str = $str|0;
 $value = $value|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 12|0;
 $1 = $str;
 $2 = $value;
 $3 = $1;
 $4 = $2;
 HEAP32[$vararg_buffer>>2] = $4;
 $5 = (_sscanf($3,11106,$vararg_buffer)|0);
 $6 = ($5|0)==(1);
 if ($6) {
  $$expand_i1_val = 1;
  HEAP8[$0>>0] = $$expand_i1_val;
 } else {
  $$expand_i1_val2 = 0;
  HEAP8[$0>>0] = $$expand_i1_val2;
 }
 $$pre_trunc = HEAP8[$0>>0]|0;
 $7 = $$pre_trunc&1;
 STACKTOP = sp;return ($7|0);
}
function __ZN8tinyxml27XMLUtil11StringEqualEPKcS2_i($p,$q,$nChar) {
 $p = $p|0;
 $q = $q|0;
 $nChar = $nChar|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 12|0;
 $1 = $p;
 $2 = $q;
 $3 = $nChar;
 $4 = $1;
 $5 = $2;
 $6 = ($4|0)==($5|0);
 if ($6) {
  $$expand_i1_val = 1;
  HEAP8[$0>>0] = $$expand_i1_val;
 } else {
  $7 = $1;
  $8 = $2;
  $9 = $3;
  $10 = (_strncmp($7,$8,$9)|0);
  $11 = ($10|0)==(0);
  $$expand_i1_val2 = $11&1;
  HEAP8[$0>>0] = $$expand_i1_val2;
 }
 $$pre_trunc = HEAP8[$0>>0]|0;
 $12 = $$pre_trunc&1;
 STACKTOP = sp;return ($12|0);
}
function __ZN8tinyxml27XMLUtil8ToDoubleEPKcPd($str,$value) {
 $str = $str|0;
 $value = $value|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 12|0;
 $1 = $str;
 $2 = $value;
 $3 = $1;
 $4 = $2;
 HEAP32[$vararg_buffer>>2] = $4;
 $5 = (_sscanf($3,11115,$vararg_buffer)|0);
 $6 = ($5|0)==(1);
 if ($6) {
  $$expand_i1_val = 1;
  HEAP8[$0>>0] = $$expand_i1_val;
 } else {
  $$expand_i1_val2 = 0;
  HEAP8[$0>>0] = $$expand_i1_val2;
 }
 $$pre_trunc = HEAP8[$0>>0]|0;
 $7 = $$pre_trunc&1;
 STACKTOP = sp;return ($7|0);
}
function __ZN8tinyxml211XMLDocument8IdentifyEPcPPNS_7XMLNodeE($this,$p,$node) {
 $this = $this|0;
 $p = $p|0;
 $node = $node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $returnNode = 0, $start = 0, $text = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $p;
 $3 = $node;
 $4 = $1;
 $5 = $2;
 $start = $5;
 $6 = $2;
 $7 = (__ZN8tinyxml27XMLUtil14SkipWhiteSpaceEPc($6)|0);
 $2 = $7;
 $8 = $2;
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)!=(0);
 if (!($10)) {
  $11 = $3;
  HEAP32[$11>>2] = 0;
  $12 = $2;
  $0 = $12;
  $74 = $0;
  STACKTOP = sp;return ($74|0);
 }
 $returnNode = 0;
 $13 = $2;
 $14 = HEAP32[1232>>2]|0;
 $15 = (__ZN8tinyxml27XMLUtil11StringEqualEPKcS2_i($13,$14,2)|0);
 do {
  if ($15) {
   $16 = ((($4)) + 300|0);
   $17 = (__ZN8tinyxml28MemPoolTILi48EE5AllocEv($16)|0);
   __ZN8tinyxml214XMLDeclarationC2EPNS_11XMLDocumentE($17,$4);
   $returnNode = $17;
   $18 = ((($4)) + 300|0);
   $19 = $returnNode;
   $20 = ((($19)) + 44|0);
   HEAP32[$20>>2] = $18;
   $21 = $2;
   $22 = ((($21)) + 2|0);
   $2 = $22;
  } else {
   $23 = $2;
   $24 = HEAP32[1236>>2]|0;
   $25 = (__ZN8tinyxml27XMLUtil11StringEqualEPKcS2_i($23,$24,4)|0);
   if ($25) {
    $26 = ((($4)) + 300|0);
    $27 = (__ZN8tinyxml28MemPoolTILi48EE5AllocEv($26)|0);
    __ZN8tinyxml210XMLCommentC2EPNS_11XMLDocumentE($27,$4);
    $returnNode = $27;
    $28 = ((($4)) + 300|0);
    $29 = $returnNode;
    $30 = ((($29)) + 44|0);
    HEAP32[$30>>2] = $28;
    $31 = $2;
    $32 = ((($31)) + 4|0);
    $2 = $32;
    break;
   }
   $33 = $2;
   $34 = HEAP32[1240>>2]|0;
   $35 = (__ZN8tinyxml27XMLUtil11StringEqualEPKcS2_i($33,$34,9)|0);
   if ($35) {
    $36 = ((($4)) + 224|0);
    $37 = (__ZN8tinyxml28MemPoolTILi52EE5AllocEv($36)|0);
    __ZN8tinyxml27XMLTextC2EPNS_11XMLDocumentE($37,$4);
    $text = $37;
    $38 = $text;
    $returnNode = $38;
    $39 = ((($4)) + 224|0);
    $40 = $returnNode;
    $41 = ((($40)) + 44|0);
    HEAP32[$41>>2] = $39;
    $42 = $2;
    $43 = ((($42)) + 9|0);
    $2 = $43;
    $44 = $text;
    __ZN8tinyxml27XMLText8SetCDataEb($44,1);
    break;
   }
   $45 = $2;
   $46 = HEAP32[1244>>2]|0;
   $47 = (__ZN8tinyxml27XMLUtil11StringEqualEPKcS2_i($45,$46,2)|0);
   if ($47) {
    $48 = ((($4)) + 300|0);
    $49 = (__ZN8tinyxml28MemPoolTILi48EE5AllocEv($48)|0);
    __ZN8tinyxml210XMLUnknownC2EPNS_11XMLDocumentE($49,$4);
    $returnNode = $49;
    $50 = ((($4)) + 300|0);
    $51 = $returnNode;
    $52 = ((($51)) + 44|0);
    HEAP32[$52>>2] = $50;
    $53 = $2;
    $54 = ((($53)) + 2|0);
    $2 = $54;
    break;
   }
   $55 = $2;
   $56 = HEAP32[1248>>2]|0;
   $57 = (__ZN8tinyxml27XMLUtil11StringEqualEPKcS2_i($55,$56,1)|0);
   if ($57) {
    $58 = ((($4)) + 72|0);
    $59 = (__ZN8tinyxml28MemPoolTILi56EE5AllocEv($58)|0);
    __ZN8tinyxml210XMLElementC2EPNS_11XMLDocumentE($59,$4);
    $returnNode = $59;
    $60 = ((($4)) + 72|0);
    $61 = $returnNode;
    $62 = ((($61)) + 44|0);
    HEAP32[$62>>2] = $60;
    $63 = $2;
    $64 = ((($63)) + 1|0);
    $2 = $64;
    break;
   } else {
    $65 = ((($4)) + 224|0);
    $66 = (__ZN8tinyxml28MemPoolTILi52EE5AllocEv($65)|0);
    __ZN8tinyxml27XMLTextC2EPNS_11XMLDocumentE($66,$4);
    $returnNode = $66;
    $67 = ((($4)) + 224|0);
    $68 = $returnNode;
    $69 = ((($68)) + 44|0);
    HEAP32[$69>>2] = $67;
    $70 = $start;
    $2 = $70;
    break;
   }
  }
 } while(0);
 $71 = $returnNode;
 $72 = $3;
 HEAP32[$72>>2] = $71;
 $73 = $2;
 $0 = $73;
 $74 = $0;
 STACKTOP = sp;return ($74|0);
}
function __ZN8tinyxml28MemPoolTILi48EE5AllocEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $block = 0, $i = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $5 = (__Znwj(4080)|0);
  _memset(($5|0),0,4080)|0;
  $block = $5;
  $6 = ((($1)) + 4|0);
  $7 = $block;
  __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi48EE5BlockELi10EE4PushES4_($6,$7);
  $i = 0;
  while(1) {
   $8 = $i;
   $9 = ($8|0)<(84);
   if (!($9)) {
    break;
   }
   $10 = $i;
   $11 = (($10) + 1)|0;
   $12 = $block;
   $13 = (($12) + (($11*48)|0)|0);
   $14 = $i;
   $15 = $block;
   $16 = (($15) + (($14*48)|0)|0);
   HEAP32[$16>>2] = $13;
   $17 = $i;
   $18 = (($17) + 1)|0;
   $i = $18;
  }
  $19 = $block;
  $20 = ((($19)) + 4032|0);
  HEAP32[$20>>2] = 0;
  $21 = $block;
  $22 = ((($1)) + 56|0);
  HEAP32[$22>>2] = $21;
 }
 $23 = ((($1)) + 56|0);
 $24 = HEAP32[$23>>2]|0;
 $result = $24;
 $25 = ((($1)) + 56|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($1)) + 56|0);
 HEAP32[$28>>2] = $27;
 $29 = ((($1)) + 60|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + 1)|0;
 HEAP32[$29>>2] = $31;
 $32 = ((($1)) + 60|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($1)) + 68|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33|0)>($35|0);
 if (!($36)) {
  $40 = ((($1)) + 64|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($41) + 1)|0;
  HEAP32[$40>>2] = $42;
  $43 = ((($1)) + 72|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (($44) + 1)|0;
  HEAP32[$43>>2] = $45;
  $46 = $result;
  STACKTOP = sp;return ($46|0);
 }
 $37 = ((($1)) + 60|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($1)) + 68|0);
 HEAP32[$39>>2] = $38;
 $40 = ((($1)) + 64|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($41) + 1)|0;
 HEAP32[$40>>2] = $42;
 $43 = ((($1)) + 72|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (($44) + 1)|0;
 HEAP32[$43>>2] = $45;
 $46 = $result;
 STACKTOP = sp;return ($46|0);
}
function __ZN8tinyxml28MemPoolTILi52EE5AllocEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $block = 0, $i = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $5 = (__Znwj(4056)|0);
  _memset(($5|0),0,4056)|0;
  $block = $5;
  $6 = ((($1)) + 4|0);
  $7 = $block;
  __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EE4PushES4_($6,$7);
  $i = 0;
  while(1) {
   $8 = $i;
   $9 = ($8|0)<(77);
   if (!($9)) {
    break;
   }
   $10 = $i;
   $11 = (($10) + 1)|0;
   $12 = $block;
   $13 = (($12) + (($11*52)|0)|0);
   $14 = $i;
   $15 = $block;
   $16 = (($15) + (($14*52)|0)|0);
   HEAP32[$16>>2] = $13;
   $17 = $i;
   $18 = (($17) + 1)|0;
   $i = $18;
  }
  $19 = $block;
  $20 = ((($19)) + 4004|0);
  HEAP32[$20>>2] = 0;
  $21 = $block;
  $22 = ((($1)) + 56|0);
  HEAP32[$22>>2] = $21;
 }
 $23 = ((($1)) + 56|0);
 $24 = HEAP32[$23>>2]|0;
 $result = $24;
 $25 = ((($1)) + 56|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($1)) + 56|0);
 HEAP32[$28>>2] = $27;
 $29 = ((($1)) + 60|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + 1)|0;
 HEAP32[$29>>2] = $31;
 $32 = ((($1)) + 60|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($1)) + 68|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33|0)>($35|0);
 if (!($36)) {
  $40 = ((($1)) + 64|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($41) + 1)|0;
  HEAP32[$40>>2] = $42;
  $43 = ((($1)) + 72|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (($44) + 1)|0;
  HEAP32[$43>>2] = $45;
  $46 = $result;
  STACKTOP = sp;return ($46|0);
 }
 $37 = ((($1)) + 60|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($1)) + 68|0);
 HEAP32[$39>>2] = $38;
 $40 = ((($1)) + 64|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($41) + 1)|0;
 HEAP32[$40>>2] = $42;
 $43 = ((($1)) + 72|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (($44) + 1)|0;
 HEAP32[$43>>2] = $45;
 $46 = $result;
 STACKTOP = sp;return ($46|0);
}
function __ZN8tinyxml27XMLTextC2EPNS_11XMLDocumentE($this,$doc) {
 $this = $this|0;
 $doc = $doc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $doc;
 $2 = $0;
 $3 = $1;
 __ZN8tinyxml27XMLNodeC2EPNS_11XMLDocumentE($2,$3);
 $4 = 1800;
 HEAP32[$2>>2] = $4;
 $5 = ((($2)) + 48|0);
 HEAP8[$5>>0] = 0;
 STACKTOP = sp;return;
}
function __ZN8tinyxml27XMLText8SetCDataEb($this,$isCData) {
 $this = $this|0;
 $isCData = $isCData|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $2 = $isCData&1;
 $1 = $2;
 $3 = $0;
 $4 = $1;
 $5 = $4&1;
 $6 = ((($3)) + 48|0);
 $7 = $5&1;
 HEAP8[$6>>0] = $7;
 STACKTOP = sp;return;
}
function __ZN8tinyxml28MemPoolTILi56EE5AllocEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $block = 0, $i = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $5 = (__Znwj(4088)|0);
  _memset(($5|0),0,4088)|0;
  $block = $5;
  $6 = ((($1)) + 4|0);
  $7 = $block;
  __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EE4PushES4_($6,$7);
  $i = 0;
  while(1) {
   $8 = $i;
   $9 = ($8|0)<(72);
   if (!($9)) {
    break;
   }
   $10 = $i;
   $11 = (($10) + 1)|0;
   $12 = $block;
   $13 = (($12) + (($11*56)|0)|0);
   $14 = $i;
   $15 = $block;
   $16 = (($15) + (($14*56)|0)|0);
   HEAP32[$16>>2] = $13;
   $17 = $i;
   $18 = (($17) + 1)|0;
   $i = $18;
  }
  $19 = $block;
  $20 = ((($19)) + 4032|0);
  HEAP32[$20>>2] = 0;
  $21 = $block;
  $22 = ((($1)) + 56|0);
  HEAP32[$22>>2] = $21;
 }
 $23 = ((($1)) + 56|0);
 $24 = HEAP32[$23>>2]|0;
 $result = $24;
 $25 = ((($1)) + 56|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($1)) + 56|0);
 HEAP32[$28>>2] = $27;
 $29 = ((($1)) + 60|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + 1)|0;
 HEAP32[$29>>2] = $31;
 $32 = ((($1)) + 60|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($1)) + 68|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33|0)>($35|0);
 if (!($36)) {
  $40 = ((($1)) + 64|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($41) + 1)|0;
  HEAP32[$40>>2] = $42;
  $43 = ((($1)) + 72|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (($44) + 1)|0;
  HEAP32[$43>>2] = $45;
  $46 = $result;
  STACKTOP = sp;return ($46|0);
 }
 $37 = ((($1)) + 60|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($1)) + 68|0);
 HEAP32[$39>>2] = $38;
 $40 = ((($1)) + 64|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($41) + 1)|0;
 HEAP32[$40>>2] = $42;
 $43 = ((($1)) + 72|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (($44) + 1)|0;
 HEAP32[$43>>2] = $45;
 $46 = $result;
 STACKTOP = sp;return ($46|0);
}
function __ZNK8tinyxml211XMLDocument6AcceptEPNS_10XMLVisitorE($this,$visitor) {
 $this = $this|0;
 $visitor = $visitor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $visitor;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_iii[$6 & 1023]($3,$2)|0);
 L1: do {
  if ($7) {
   $8 = (__ZNK8tinyxml27XMLNode10FirstChildEv($2)|0);
   $node = $8;
   while(1) {
    $9 = $node;
    $10 = ($9|0)!=(0|0);
    if (!($10)) {
     break L1;
    }
    $11 = $node;
    $12 = HEAP32[$11>>2]|0;
    $13 = ((($12)) + 56|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $1;
    $16 = (FUNCTION_TABLE_iii[$14 & 1023]($11,$15)|0);
    if (!($16)) {
     break L1;
    }
    $17 = $node;
    $18 = (__ZNK8tinyxml27XMLNode11NextSiblingEv($17)|0);
    $node = $18;
   }
  }
 } while(0);
 $19 = $1;
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($20)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (FUNCTION_TABLE_iii[$22 & 1023]($19,$2)|0);
 STACKTOP = sp;return ($23|0);
}
function __ZNK8tinyxml27XMLNode10FirstChildEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZNK8tinyxml27XMLNode11NextSiblingEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN8tinyxml27XMLNodeC2EPNS_11XMLDocumentE($this,$doc) {
 $this = $this|0;
 $doc = $doc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $doc;
 $2 = $0;
 $3 = 1260;
 HEAP32[$2>>2] = $3;
 $4 = ((($2)) + 4|0);
 $5 = $1;
 HEAP32[$4>>2] = $5;
 $6 = ((($2)) + 8|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($2)) + 12|0);
 __ZN8tinyxml27StrPairC2Ev($7);
 $8 = ((($2)) + 24|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($2)) + 28|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($2)) + 32|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($2)) + 36|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($2)) + 40|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($2)) + 44|0);
 HEAP32[$13>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN8tinyxml27StrPairC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN8tinyxml27XMLNodeD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 1260;
 HEAP32[$3>>2] = $4;
 __THREW__ = 0;
 invoke_vi(354,($3|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  $7 = ((($3)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)!=(0|0);
  if (!($9)) {
   $18 = ((($3)) + 12|0);
   __ZN8tinyxml27StrPairD2Ev($18);
   STACKTOP = sp;return;
  }
  $10 = ((($3)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  __THREW__ = 0;
  invoke_vii(355,($11|0),($3|0));
  $12 = __THREW__; __THREW__ = 0;
  $13 = $12&1;
  if (!($13)) {
   $18 = ((($3)) + 12|0);
   __ZN8tinyxml27StrPairD2Ev($18);
   STACKTOP = sp;return;
  }
 }
 $14 = ___cxa_find_matching_catch(0|0)|0;
 $15 = tempRet0;
 $1 = $14;
 $2 = $15;
 $16 = ((($3)) + 12|0);
 __ZN8tinyxml27StrPairD2Ev($16);
 $17 = $1;
 ___clang_call_terminate($17);
 // unreachable;
}
function __ZN8tinyxml27XMLNode14DeleteChildrenEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 while(1) {
  $2 = ((($1)) + 24|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   break;
  }
  $5 = ((($1)) + 24|0);
  $6 = HEAP32[$5>>2]|0;
  $node = $6;
  $7 = $node;
  __ZN8tinyxml27XMLNode6UnlinkEPS0_($1,$7);
  $8 = $node;
  __ZN8tinyxml27XMLNode10DeleteNodeEPS0_($8);
 }
 $9 = ((($1)) + 28|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($1)) + 24|0);
 HEAP32[$10>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN8tinyxml27XMLNode6UnlinkEPS0_($this,$child) {
 $this = $this|0;
 $child = $child|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $child;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)==($5|0);
 if ($6) {
  $7 = ((($2)) + 24|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 36|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($2)) + 24|0);
  HEAP32[$11>>2] = $10;
 }
 $12 = $1;
 $13 = ((($2)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($12|0)==($14|0);
 if ($15) {
  $16 = ((($2)) + 28|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($17)) + 32|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($2)) + 28|0);
  HEAP32[$20>>2] = $19;
 }
 $21 = $1;
 $22 = ((($21)) + 32|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)!=(0|0);
 if ($24) {
  $25 = $1;
  $26 = ((($25)) + 36|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $1;
  $29 = ((($28)) + 32|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ((($30)) + 36|0);
  HEAP32[$31>>2] = $27;
 }
 $32 = $1;
 $33 = ((($32)) + 36|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)!=(0|0);
 if (!($35)) {
  $43 = $1;
  $44 = ((($43)) + 8|0);
  HEAP32[$44>>2] = 0;
  STACKTOP = sp;return;
 }
 $36 = $1;
 $37 = ((($36)) + 32|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $1;
 $40 = ((($39)) + 36|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ((($41)) + 32|0);
 HEAP32[$42>>2] = $38;
 $43 = $1;
 $44 = ((($43)) + 8|0);
 HEAP32[$44>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN8tinyxml27XMLNodeD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8tinyxml27XMLNodeD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNK8tinyxml27XMLNode5ValueEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 1023]($2)|0);
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $0 = 0;
  $10 = $0;
  STACKTOP = sp;return ($10|0);
 } else {
  $8 = ((($2)) + 12|0);
  $9 = (__ZN8tinyxml27StrPair6GetStrEv($8)|0);
  $0 = $9;
  $10 = $0;
  STACKTOP = sp;return ($10|0);
 }
 return (0)|0;
}
function __ZN8tinyxml27XMLNode8SetValueEPKcb($this,$str,$staticMem) {
 $this = $this|0;
 $str = $str|0;
 $staticMem = $staticMem|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $str;
 $3 = $staticMem&1;
 $2 = $3;
 $4 = $0;
 $5 = $2;
 $6 = $5&1;
 $7 = ((($4)) + 12|0);
 $8 = $1;
 if ($6) {
  __ZN8tinyxml27StrPair14SetInternedStrEPKc($7,$8);
  STACKTOP = sp;return;
 } else {
  __ZN8tinyxml27StrPair6SetStrEPKci($7,$8,0);
  STACKTOP = sp;return;
 }
}
function __ZN8tinyxml27StrPair14SetInternedStrEPKc($this,$str) {
 $this = $this|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $str;
 $2 = $0;
 __ZN8tinyxml27StrPair5ResetEv($2);
 $3 = $1;
 $4 = ((($2)) + 4|0);
 HEAP32[$4>>2] = $3;
 STACKTOP = sp;return;
}
function __ZN8tinyxml27XMLNode10DeleteNodeEPS0_($node) {
 $node = $node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $node;
 $1 = $0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = ((($3)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $pool = $5;
 $6 = $0;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 60|0);
 $9 = HEAP32[$8>>2]|0;
 FUNCTION_TABLE_vi[$9 & 1023]($6);
 $10 = $pool;
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $0;
 FUNCTION_TABLE_vii[$13 & 1023]($10,$14);
 STACKTOP = sp;return;
}
function __ZN8tinyxml27XMLNode14InsertEndChildEPS0_($this,$addThis) {
 $this = $this|0;
 $addThis = $addThis|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $addThis;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($3)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6|0)!=($8|0);
 if ($9) {
  $0 = 0;
  $34 = $0;
  STACKTOP = sp;return ($34|0);
 }
 $10 = $2;
 __ZNK8tinyxml27XMLNode19InsertChildPreambleEPS0_($3,$10);
 $11 = ((($3)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 $14 = $2;
 $15 = ((($3)) + 28|0);
 if ($13) {
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($16)) + 36|0);
  HEAP32[$17>>2] = $14;
  $18 = ((($3)) + 28|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $2;
  $21 = ((($20)) + 32|0);
  HEAP32[$21>>2] = $19;
  $22 = $2;
  $23 = ((($3)) + 28|0);
  HEAP32[$23>>2] = $22;
  $24 = $2;
  $25 = ((($24)) + 36|0);
  HEAP32[$25>>2] = 0;
 } else {
  HEAP32[$15>>2] = $14;
  $26 = ((($3)) + 24|0);
  HEAP32[$26>>2] = $14;
  $27 = $2;
  $28 = ((($27)) + 32|0);
  HEAP32[$28>>2] = 0;
  $29 = $2;
  $30 = ((($29)) + 36|0);
  HEAP32[$30>>2] = 0;
 }
 $31 = $2;
 $32 = ((($31)) + 8|0);
 HEAP32[$32>>2] = $3;
 $33 = $2;
 $0 = $33;
 $34 = $0;
 STACKTOP = sp;return ($34|0);
}
function __ZNK8tinyxml27XMLNode19InsertChildPreambleEPS0_($this,$insertThis) {
 $this = $this|0;
 $insertThis = $insertThis|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $insertThis;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 $6 = $1;
 if ($5) {
  $7 = ((($6)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $1;
  __ZN8tinyxml27XMLNode6UnlinkEPS0_($8,$9);
  STACKTOP = sp;return;
 } else {
  $10 = ((($6)) + 44|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($12)) + 20|0);
  $14 = HEAP32[$13>>2]|0;
  FUNCTION_TABLE_vi[$14 & 1023]($11);
  STACKTOP = sp;return;
 }
}
function __ZNK8tinyxml27XMLNode17FirstChildElementEPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $element = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $name;
 $3 = $1;
 $4 = ((($3)) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $node = $5;
 while(1) {
  $6 = $node;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   label = 8;
   break;
  }
  $8 = $node;
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 24|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (FUNCTION_TABLE_ii[$11 & 1023]($8)|0);
  $element = $12;
  $13 = $element;
  $14 = ($13|0)!=(0|0);
  if ($14) {
   $15 = $2;
   $16 = ($15|0)!=(0|0);
   if (!($16)) {
    label = 6;
    break;
   }
   $17 = $element;
   $18 = (__ZNK8tinyxml210XMLElement4NameEv($17)|0);
   $19 = $2;
   $20 = (__ZN8tinyxml27XMLUtil11StringEqualEPKcS2_i($18,$19,2147483647)|0);
   if ($20) {
    label = 6;
    break;
   }
  }
  $22 = $node;
  $23 = ((($22)) + 36|0);
  $24 = HEAP32[$23>>2]|0;
  $node = $24;
 }
 if ((label|0) == 6) {
  $21 = $element;
  $0 = $21;
  $25 = $0;
  STACKTOP = sp;return ($25|0);
 }
 else if ((label|0) == 8) {
  $0 = 0;
  $25 = $0;
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function __ZNK8tinyxml210XMLElement4NameEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (__ZNK8tinyxml27XMLNode5ValueEv($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNK8tinyxml27XMLNode18NextSiblingElementEPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $element = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $name;
 $3 = $1;
 $4 = ((($3)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $node = $5;
 while(1) {
  $6 = $node;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   label = 8;
   break;
  }
  $8 = $node;
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 24|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (FUNCTION_TABLE_ii[$11 & 1023]($8)|0);
  $element = $12;
  $13 = $element;
  $14 = ($13|0)!=(0|0);
  if ($14) {
   $15 = $2;
   $16 = ($15|0)!=(0|0);
   if (!($16)) {
    label = 6;
    break;
   }
   $17 = $2;
   $18 = $element;
   $19 = (__ZNK8tinyxml210XMLElement4NameEv($18)|0);
   $20 = (__ZN8tinyxml27XMLUtil11StringEqualEPKcS2_i($17,$19,2147483647)|0);
   if ($20) {
    label = 6;
    break;
   }
  }
  $22 = $node;
  $23 = ((($22)) + 36|0);
  $24 = HEAP32[$23>>2]|0;
  $node = $24;
 }
 if ((label|0) == 6) {
  $21 = $element;
  $0 = $21;
  $25 = $0;
  STACKTOP = sp;return ($25|0);
 }
 else if ((label|0) == 8) {
  $0 = 0;
  $25 = $0;
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function __ZN8tinyxml27XMLNode9ParseDeepEPcPNS_7StrPairE($this,$p,$parentEnd) {
 $this = $this|0;
 $p = $p|0;
 $parentEnd = $parentEnd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cleanup$dest = 0, $decl = 0, $ele = 0;
 var $endTag = 0, $mismatch = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $node = sp + 32|0;
 $endTag = sp + 20|0;
 $1 = $this;
 $2 = $p;
 $3 = $parentEnd;
 $7 = $1;
 L1: while(1) {
  $8 = $2;
  $9 = ($8|0)!=(0|0);
  if (!($9)) {
   label = 51;
   break;
  }
  $10 = $2;
  $11 = HEAP8[$10>>0]|0;
  $12 = ($11<<24>>24)!=(0);
  if (!($12)) {
   label = 51;
   break;
  }
  HEAP32[$node>>2] = 0;
  $13 = ((($7)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $2;
  $16 = (__ZN8tinyxml211XMLDocument8IdentifyEPcPPNS_7XMLNodeE($14,$15,$node)|0);
  $2 = $16;
  $17 = HEAP32[$node>>2]|0;
  $18 = ($17|0)==(0|0);
  if ($18) {
   label = 51;
   break;
  }
  __ZN8tinyxml27StrPairC2Ev($endTag);
  $19 = HEAP32[$node>>2]|0;
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($20)) + 68|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $2;
  __THREW__ = 0;
  $24 = (invoke_iiii($22|0,($19|0),($23|0),($endTag|0))|0);
  $25 = __THREW__; __THREW__ = 0;
  $26 = $25&1;
  if ($26) {
   label = 11;
   break;
  }
  $2 = $24;
  $27 = $2;
  $28 = ($27|0)!=(0|0);
  $29 = HEAP32[$node>>2]|0;
  do {
   if ($28) {
    $45 = HEAP32[$29>>2]|0;
    $46 = ((($45)) + 16|0);
    $47 = HEAP32[$46>>2]|0;
    __THREW__ = 0;
    $48 = (invoke_ii($47|0,($29|0))|0);
    $49 = __THREW__; __THREW__ = 0;
    $50 = $49&1;
    if ($50) {
     label = 11;
     break L1;
    }
    $decl = $48;
    $51 = $decl;
    $52 = ($51|0)!=(0|0);
    if ($52) {
     $53 = ((($7)) + 4|0);
     $54 = HEAP32[$53>>2]|0;
     __THREW__ = 0;
     $55 = (invoke_ii(359,($54|0))|0);
     $56 = __THREW__; __THREW__ = 0;
     $57 = $56&1;
     if ($57) {
      label = 11;
      break L1;
     }
     if (!($55)) {
      $58 = ((($7)) + 4|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = $decl;
      __THREW__ = 0;
      $61 = (invoke_ii(360,($60|0))|0);
      $62 = __THREW__; __THREW__ = 0;
      $63 = $62&1;
      if ($63) {
       label = 11;
       break L1;
      }
      __THREW__ = 0;
      invoke_viiii(358,($59|0),13,($61|0),(0|0));
      $64 = __THREW__; __THREW__ = 0;
      $65 = $64&1;
      if ($65) {
       label = 11;
       break L1;
      }
      $66 = $decl;
      __THREW__ = 0;
      invoke_vi(356,($66|0));
      $67 = __THREW__; __THREW__ = 0;
      $68 = $67&1;
      if ($68) {
       label = 11;
       break L1;
      }
      $6 = 3;
      break;
     }
    }
    $69 = HEAP32[$node>>2]|0;
    $70 = HEAP32[$69>>2]|0;
    $71 = HEAP32[$70>>2]|0;
    __THREW__ = 0;
    $72 = (invoke_ii($71|0,($69|0))|0);
    $73 = __THREW__; __THREW__ = 0;
    $74 = $73&1;
    if ($74) {
     label = 11;
     break L1;
    }
    $ele = $72;
    $75 = $ele;
    $76 = ($75|0)!=(0|0);
    if ($76) {
     $77 = $ele;
     __THREW__ = 0;
     $78 = (invoke_ii(361,($77|0))|0);
     $79 = __THREW__; __THREW__ = 0;
     $80 = $79&1;
     if ($80) {
      label = 11;
      break L1;
     }
     $81 = ($78|0)==(2);
     if ($81) {
      $82 = $3;
      $83 = ($82|0)!=(0|0);
      if ($83) {
       $84 = $ele;
       $85 = ((($84)) + 12|0);
       $86 = $3;
       __THREW__ = 0;
       invoke_vii(362,($85|0),($86|0));
       $87 = __THREW__; __THREW__ = 0;
       $88 = $87&1;
       if ($88) {
        label = 11;
        break L1;
       }
      }
      $89 = HEAP32[$node>>2]|0;
      $90 = ((($89)) + 44|0);
      $91 = HEAP32[$90>>2]|0;
      $92 = HEAP32[$91>>2]|0;
      $93 = ((($92)) + 20|0);
      $94 = HEAP32[$93>>2]|0;
      __THREW__ = 0;
      invoke_vi($94|0,($91|0));
      $95 = __THREW__; __THREW__ = 0;
      $96 = $95&1;
      if ($96) {
       label = 11;
       break L1;
      }
      $97 = HEAP32[$node>>2]|0;
      __THREW__ = 0;
      invoke_vi(356,($97|0));
      $98 = __THREW__; __THREW__ = 0;
      $99 = $98&1;
      if ($99) {
       label = 11;
       break L1;
      }
      $100 = $2;
      $0 = $100;
      $6 = 1;
      break;
     }
     $mismatch = 0;
     __THREW__ = 0;
     $101 = (invoke_ii(363,($endTag|0))|0);
     $102 = __THREW__; __THREW__ = 0;
     $103 = $102&1;
     if ($103) {
      label = 11;
      break L1;
     }
     $104 = $ele;
     __THREW__ = 0;
     $105 = (invoke_ii(361,($104|0))|0);
     $106 = __THREW__; __THREW__ = 0;
     $107 = $106&1;
     do {
      if ($101) {
       if ($107) {
        label = 11;
        break L1;
       }
       $108 = ($105|0)==(0);
       if ($108) {
        $mismatch = 1;
       }
      } else {
       if ($107) {
        label = 11;
        break L1;
       }
       $109 = ($105|0)!=(0);
       if ($109) {
        $mismatch = 1;
        break;
       }
       __THREW__ = 0;
       $110 = (invoke_ii(364,($endTag|0))|0);
       $111 = __THREW__; __THREW__ = 0;
       $112 = $111&1;
       if ($112) {
        label = 11;
        break L1;
       }
       $113 = $ele;
       __THREW__ = 0;
       $114 = (invoke_ii(365,($113|0))|0);
       $115 = __THREW__; __THREW__ = 0;
       $116 = $115&1;
       if ($116) {
        label = 11;
        break L1;
       }
       __THREW__ = 0;
       $117 = (invoke_iiii(366,($110|0),($114|0),2147483647)|0);
       $118 = __THREW__; __THREW__ = 0;
       $119 = $118&1;
       if ($119) {
        label = 11;
        break L1;
       }
       if ($117) {
        break;
       }
       $mismatch = 1;
      }
     } while(0);
     $120 = $mismatch;
     $121 = $120&1;
     if ($121) {
      $122 = ((($7)) + 4|0);
      $123 = HEAP32[$122>>2]|0;
      $124 = $ele;
      __THREW__ = 0;
      $125 = (invoke_ii(365,($124|0))|0);
      $126 = __THREW__; __THREW__ = 0;
      $127 = $126&1;
      if ($127) {
       label = 11;
       break L1;
      }
      __THREW__ = 0;
      invoke_viiii(358,($123|0),16,($125|0),(0|0));
      $128 = __THREW__; __THREW__ = 0;
      $129 = $128&1;
      if ($129) {
       label = 11;
       break L1;
      }
      $130 = HEAP32[$node>>2]|0;
      __THREW__ = 0;
      invoke_vi(356,($130|0));
      $131 = __THREW__; __THREW__ = 0;
      $132 = $131&1;
      if ($132) {
       label = 11;
       break L1;
      }
      $6 = 3;
      break;
     }
    }
    $133 = HEAP32[$node>>2]|0;
    __THREW__ = 0;
    (invoke_iii(367,($7|0),($133|0))|0);
    $134 = __THREW__; __THREW__ = 0;
    $135 = $134&1;
    if ($135) {
     label = 11;
     break L1;
    }
    $6 = 0;
   } else {
    __THREW__ = 0;
    invoke_vi(356,($29|0));
    $30 = __THREW__; __THREW__ = 0;
    $31 = $30&1;
    if ($31) {
     label = 11;
     break L1;
    }
    $32 = ((($7)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    __THREW__ = 0;
    $34 = (invoke_ii(357,($33|0))|0);
    $35 = __THREW__; __THREW__ = 0;
    $36 = $35&1;
    if ($36) {
     label = 11;
     break L1;
    }
    if (!($34)) {
     $37 = ((($7)) + 4|0);
     $38 = HEAP32[$37>>2]|0;
     __THREW__ = 0;
     invoke_viiii(358,($38|0),17,(0|0),(0|0));
     $39 = __THREW__; __THREW__ = 0;
     $40 = $39&1;
     if ($40) {
      label = 11;
      break L1;
     }
    }
    $6 = 3;
   }
  } while(0);
  __ZN8tinyxml27StrPairD2Ev($endTag);
  $cleanup$dest = $6;
  switch ($cleanup$dest|0) {
  case 0:  {
   break;
  }
  case 3:  {
   label = 51;
   break L1;
   break;
  }
  case 1:  {
   label = 52;
   break L1;
   break;
  }
  default: {
   label = 53;
   break L1;
  }
  }
 }
 if ((label|0) == 11) {
  $41 = ___cxa_find_matching_catch()|0;
  $42 = tempRet0;
  $4 = $41;
  $5 = $42;
  __ZN8tinyxml27StrPairD2Ev($endTag);
  $43 = $4;
  $44 = $5;
  ___resumeException($43|0);
  // unreachable;
 }
 else if ((label|0) == 51) {
  $0 = 0;
  $136 = $0;
  STACKTOP = sp;return ($136|0);
 }
 else if ((label|0) == 52) {
  $136 = $0;
  STACKTOP = sp;return ($136|0);
 }
 else if ((label|0) == 53) {
  // unreachable;
 }
 return (0)|0;
}
function __ZNK8tinyxml211XMLDocument5ErrorEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 52|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0);
 STACKTOP = sp;return ($4|0);
}
function __ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEPKcS3_($this,$error,$str1,$str2) {
 $this = $this|0;
 $error = $error|0;
 $str1 = $str1|0;
 $str2 = $str2|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $error;
 $2 = $str1;
 $3 = $str2;
 $4 = $0;
 $5 = $1;
 $6 = ((($4)) + 52|0);
 HEAP32[$6>>2] = $5;
 $7 = $2;
 $8 = ((($4)) + 60|0);
 HEAP32[$8>>2] = $7;
 $9 = $3;
 $10 = ((($4)) + 64|0);
 HEAP32[$10>>2] = $9;
 STACKTOP = sp;return;
}
function __ZNK8tinyxml27XMLNode10NoChildrenEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 $5 = $4 ^ 1;
 STACKTOP = sp;return ($5|0);
}
function __ZNK8tinyxml210XMLElement11ClosingTypeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZNK8tinyxml27StrPair5EmptyEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)==($5|0);
 STACKTOP = sp;return ($6|0);
}
function __ZN8tinyxml27XMLText9ParseDeepEPcPNS_7StrPairE($this,$p,$0) {
 $this = $this|0;
 $p = $p|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $flags = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $this;
 $3 = $p;
 $4 = $0;
 $5 = $2;
 $6 = $3;
 $start = $6;
 $7 = (__ZNK8tinyxml27XMLText5CDataEv($5)|0);
 if ($7) {
  $8 = ((($5)) + 12|0);
  $9 = $3;
  $10 = (__ZN8tinyxml27StrPair9ParseTextEPcPKci($8,$9,6913,2)|0);
  $3 = $10;
  $11 = $3;
  $12 = ($11|0)!=(0|0);
  if (!($12)) {
   $13 = ((($5)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $start;
   __ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEPKcS3_($14,11,$15,0);
  }
  $16 = $3;
  $1 = $16;
  $43 = $1;
  STACKTOP = sp;return ($43|0);
 }
 $17 = ((($5)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (__ZNK8tinyxml211XMLDocument15ProcessEntitiesEv($18)|0);
 $20 = $19 ? 3 : 2;
 $flags = $20;
 $21 = ((($5)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (__ZNK8tinyxml211XMLDocument14WhitespaceModeEv($22)|0);
 $24 = ($23|0)==(1);
 if ($24) {
  $25 = $flags;
  $26 = $25 | 4;
  $flags = $26;
 }
 $27 = ((($5)) + 12|0);
 $28 = $3;
 $29 = $flags;
 $30 = (__ZN8tinyxml27StrPair9ParseTextEPcPKci($27,$28,6911,$29)|0);
 $3 = $30;
 $31 = $3;
 $32 = ($31|0)!=(0|0);
 if ($32) {
  $33 = $3;
  $34 = HEAP8[$33>>0]|0;
  $35 = ($34<<24>>24)!=(0);
  if ($35) {
   $36 = $3;
   $37 = ((($36)) + -1|0);
   $1 = $37;
   $43 = $1;
   STACKTOP = sp;return ($43|0);
  }
 }
 $38 = $3;
 $39 = ($38|0)!=(0|0);
 if (!($39)) {
  $40 = ((($5)) + 4|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $start;
  __ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEPKcS3_($41,10,$42,0);
 }
 $1 = 0;
 $43 = $1;
 STACKTOP = sp;return ($43|0);
}
function __ZNK8tinyxml27XMLText5CDataEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 48|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&1;
 STACKTOP = sp;return ($4|0);
}
function __ZNK8tinyxml211XMLDocument15ProcessEntitiesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 49|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&1;
 STACKTOP = sp;return ($4|0);
}
function __ZNK8tinyxml211XMLDocument14WhitespaceModeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZNK8tinyxml27XMLText12ShallowCloneEPNS_11XMLDocumentE($this,$doc) {
 $this = $this|0;
 $doc = $doc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $text = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $doc;
 $2 = $0;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $5 = ((($2)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $1 = $6;
 }
 $7 = $1;
 $8 = (__ZNK8tinyxml27XMLNode5ValueEv($2)|0);
 $9 = (__ZN8tinyxml211XMLDocument7NewTextEPKc($7,$8)|0);
 $text = $9;
 $10 = $text;
 $11 = (__ZNK8tinyxml27XMLText5CDataEv($2)|0);
 __ZN8tinyxml27XMLText8SetCDataEb($10,$11);
 $12 = $text;
 STACKTOP = sp;return ($12|0);
}
function __ZN8tinyxml211XMLDocument7NewTextEPKc($this,$str) {
 $this = $this|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $text = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $str;
 $2 = $0;
 $3 = ((($2)) + 224|0);
 $4 = (__ZN8tinyxml28MemPoolTILi52EE5AllocEv($3)|0);
 __ZN8tinyxml27XMLTextC2EPNS_11XMLDocumentE($4,$2);
 $text = $4;
 $5 = ((($2)) + 224|0);
 $6 = $text;
 $7 = ((($6)) + 44|0);
 HEAP32[$7>>2] = $5;
 $8 = $text;
 $9 = $1;
 __ZN8tinyxml27XMLNode8SetValueEPKcb($8,$9,0);
 $10 = $text;
 STACKTOP = sp;return ($10|0);
}
function __ZNK8tinyxml27XMLText12ShallowEqualEPKNS_7XMLNodeE($this,$compare) {
 $this = $this|0;
 $compare = $compare|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $text = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $compare;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_ii[$6 & 1023]($3)|0);
 $text = $7;
 $8 = $text;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  $14 = 0;
  STACKTOP = sp;return ($14|0);
 }
 $10 = $text;
 $11 = (__ZNK8tinyxml27XMLNode5ValueEv($10)|0);
 $12 = (__ZNK8tinyxml27XMLNode5ValueEv($2)|0);
 $13 = (__ZN8tinyxml27XMLUtil11StringEqualEPKcS2_i($11,$12,2147483647)|0);
 $14 = $13;
 STACKTOP = sp;return ($14|0);
}
function __ZNK8tinyxml27XMLText6AcceptEPNS_10XMLVisitorE($this,$visitor) {
 $this = $this|0;
 $visitor = $visitor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $visitor;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_iii[$6 & 1023]($3,$2)|0);
 STACKTOP = sp;return ($7|0);
}
function __ZN8tinyxml210XMLCommentC2EPNS_11XMLDocumentE($this,$doc) {
 $this = $this|0;
 $doc = $doc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $doc;
 $2 = $0;
 $3 = $1;
 __ZN8tinyxml27XMLNodeC2EPNS_11XMLDocumentE($2,$3);
 $4 = 1340;
 HEAP32[$2>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN8tinyxml210XMLCommentD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8tinyxml27XMLNodeD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN8tinyxml210XMLCommentD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8tinyxml210XMLCommentD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN8tinyxml210XMLComment9ParseDeepEPcPNS_7StrPairE($this,$p,$0) {
 $this = $this|0;
 $p = $p|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $p;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $start = $5;
 $6 = ((($4)) + 12|0);
 $7 = $2;
 $8 = (__ZN8tinyxml27StrPair9ParseTextEPcPKci($6,$7,6917,2)|0);
 $2 = $8;
 $9 = $2;
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $14 = $2;
  STACKTOP = sp;return ($14|0);
 }
 $11 = ((($4)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $start;
 __ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEPKcS3_($12,12,$13,0);
 $14 = $2;
 STACKTOP = sp;return ($14|0);
}
function __ZNK8tinyxml210XMLComment12ShallowCloneEPNS_11XMLDocumentE($this,$doc) {
 $this = $this|0;
 $doc = $doc|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $comment = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $doc;
 $2 = $0;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $5 = ((($2)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $1 = $6;
 }
 $7 = $1;
 $8 = (__ZNK8tinyxml27XMLNode5ValueEv($2)|0);
 $9 = (__ZN8tinyxml211XMLDocument10NewCommentEPKc($7,$8)|0);
 $comment = $9;
 $10 = $comment;
 STACKTOP = sp;return ($10|0);
}
function __ZN8tinyxml211XMLDocument10NewCommentEPKc($this,$str) {
 $this = $this|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $comment = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $str;
 $2 = $0;
 $3 = ((($2)) + 300|0);
 $4 = (__ZN8tinyxml28MemPoolTILi48EE5AllocEv($3)|0);
 __ZN8tinyxml210XMLCommentC2EPNS_11XMLDocumentE($4,$2);
 $comment = $4;
 $5 = ((($2)) + 300|0);
 $6 = $comment;
 $7 = ((($6)) + 44|0);
 HEAP32[$7>>2] = $5;
 $8 = $comment;
 $9 = $1;
 __ZN8tinyxml27XMLNode8SetValueEPKcb($8,$9,0);
 $10 = $comment;
 STACKTOP = sp;return ($10|0);
}
function __ZNK8tinyxml210XMLComment12ShallowEqualEPKNS_7XMLNodeE($this,$compare) {
 $this = $this|0;
 $compare = $compare|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $comment = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $compare;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_ii[$6 & 1023]($3)|0);
 $comment = $7;
 $8 = $comment;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  $14 = 0;
  STACKTOP = sp;return ($14|0);
 }
 $10 = $comment;
 $11 = (__ZNK8tinyxml27XMLNode5ValueEv($10)|0);
 $12 = (__ZNK8tinyxml27XMLNode5ValueEv($2)|0);
 $13 = (__ZN8tinyxml27XMLUtil11StringEqualEPKcS2_i($11,$12,2147483647)|0);
 $14 = $13;
 STACKTOP = sp;return ($14|0);
}
function __ZNK8tinyxml210XMLComment6AcceptEPNS_10XMLVisitorE($this,$visitor) {
 $this = $this|0;
 $visitor = $visitor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $visitor;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_iii[$6 & 1023]($3,$2)|0);
 STACKTOP = sp;return ($7|0);
}
function __ZN8tinyxml214XMLDeclarationC2EPNS_11XMLDocumentE($this,$doc) {
 $this = $this|0;
 $doc = $doc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $doc;
 $2 = $0;
 $3 = $1;
 __ZN8tinyxml27XMLNodeC2EPNS_11XMLDocumentE($2,$3);
 $4 = 1420;
 HEAP32[$2>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN8tinyxml214XMLDeclarationD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8tinyxml27XMLNodeD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN8tinyxml214XMLDeclarationD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8tinyxml214XMLDeclarationD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN8tinyxml214XMLDeclaration9ParseDeepEPcPNS_7StrPairE($this,$p,$0) {
 $this = $this|0;
 $p = $p|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $p;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $start = $5;
 $6 = ((($4)) + 12|0);
 $7 = $2;
 $8 = (__ZN8tinyxml27StrPair9ParseTextEPcPKci($6,$7,6921,2)|0);
 $2 = $8;
 $9 = $2;
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $14 = $2;
  STACKTOP = sp;return ($14|0);
 }
 $11 = ((($4)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $start;
 __ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEPKcS3_($12,13,$13,0);
 $14 = $2;
 STACKTOP = sp;return ($14|0);
}
function __ZNK8tinyxml214XMLDeclaration12ShallowCloneEPNS_11XMLDocumentE($this,$doc) {
 $this = $this|0;
 $doc = $doc|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dec = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $doc;
 $2 = $0;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $5 = ((($2)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $1 = $6;
 }
 $7 = $1;
 $8 = (__ZNK8tinyxml27XMLNode5ValueEv($2)|0);
 $9 = (__ZN8tinyxml211XMLDocument14NewDeclarationEPKc($7,$8)|0);
 $dec = $9;
 $10 = $dec;
 STACKTOP = sp;return ($10|0);
}
function __ZN8tinyxml211XMLDocument14NewDeclarationEPKc($this,$str) {
 $this = $this|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dec = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $str;
 $2 = $0;
 $3 = ((($2)) + 300|0);
 $4 = (__ZN8tinyxml28MemPoolTILi48EE5AllocEv($3)|0);
 __ZN8tinyxml214XMLDeclarationC2EPNS_11XMLDocumentE($4,$2);
 $dec = $4;
 $5 = ((($2)) + 300|0);
 $6 = $dec;
 $7 = ((($6)) + 44|0);
 HEAP32[$7>>2] = $5;
 $8 = $dec;
 $9 = $1;
 $10 = ($9|0)!=(0|0);
 $11 = $1;
 $12 = $10 ? $11 : 6926;
 __ZN8tinyxml27XMLNode8SetValueEPKcb($8,$12,0);
 $13 = $dec;
 STACKTOP = sp;return ($13|0);
}
function __ZNK8tinyxml214XMLDeclaration12ShallowEqualEPKNS_7XMLNodeE($this,$compare) {
 $this = $this|0;
 $compare = $compare|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $declaration = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $compare;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 40|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_ii[$6 & 1023]($3)|0);
 $declaration = $7;
 $8 = $declaration;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  $14 = 0;
  STACKTOP = sp;return ($14|0);
 }
 $10 = $declaration;
 $11 = (__ZNK8tinyxml27XMLNode5ValueEv($10)|0);
 $12 = (__ZNK8tinyxml27XMLNode5ValueEv($2)|0);
 $13 = (__ZN8tinyxml27XMLUtil11StringEqualEPKcS2_i($11,$12,2147483647)|0);
 $14 = $13;
 STACKTOP = sp;return ($14|0);
}
function __ZNK8tinyxml214XMLDeclaration6AcceptEPNS_10XMLVisitorE($this,$visitor) {
 $this = $this|0;
 $visitor = $visitor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $visitor;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_iii[$6 & 1023]($3,$2)|0);
 STACKTOP = sp;return ($7|0);
}
function __ZN8tinyxml210XMLUnknownC2EPNS_11XMLDocumentE($this,$doc) {
 $this = $this|0;
 $doc = $doc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $doc;
 $2 = $0;
 $3 = $1;
 __ZN8tinyxml27XMLNodeC2EPNS_11XMLDocumentE($2,$3);
 $4 = 1500;
 HEAP32[$2>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN8tinyxml210XMLUnknownD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8tinyxml27XMLNodeD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN8tinyxml210XMLUnknownD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8tinyxml210XMLUnknownD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN8tinyxml210XMLUnknown9ParseDeepEPcPNS_7StrPairE($this,$p,$0) {
 $this = $this|0;
 $p = $p|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $p;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $start = $5;
 $6 = ((($4)) + 12|0);
 $7 = $2;
 $8 = (__ZN8tinyxml27StrPair9ParseTextEPcPKci($6,$7,6924,2)|0);
 $2 = $8;
 $9 = $2;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $14 = $2;
  STACKTOP = sp;return ($14|0);
 }
 $11 = ((($4)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $start;
 __ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEPKcS3_($12,14,$13,0);
 $14 = $2;
 STACKTOP = sp;return ($14|0);
}
function __ZNK8tinyxml210XMLUnknown12ShallowCloneEPNS_11XMLDocumentE($this,$doc) {
 $this = $this|0;
 $doc = $doc|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $text = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $doc;
 $2 = $0;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $5 = ((($2)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $1 = $6;
 }
 $7 = $1;
 $8 = (__ZNK8tinyxml27XMLNode5ValueEv($2)|0);
 $9 = (__ZN8tinyxml211XMLDocument10NewUnknownEPKc($7,$8)|0);
 $text = $9;
 $10 = $text;
 STACKTOP = sp;return ($10|0);
}
function __ZN8tinyxml211XMLDocument10NewUnknownEPKc($this,$str) {
 $this = $this|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $unk = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $str;
 $2 = $0;
 $3 = ((($2)) + 300|0);
 $4 = (__ZN8tinyxml28MemPoolTILi48EE5AllocEv($3)|0);
 __ZN8tinyxml210XMLUnknownC2EPNS_11XMLDocumentE($4,$2);
 $unk = $4;
 $5 = ((($2)) + 300|0);
 $6 = $unk;
 $7 = ((($6)) + 44|0);
 HEAP32[$7>>2] = $5;
 $8 = $unk;
 $9 = $1;
 __ZN8tinyxml27XMLNode8SetValueEPKcb($8,$9,0);
 $10 = $unk;
 STACKTOP = sp;return ($10|0);
}
function __ZNK8tinyxml210XMLUnknown12ShallowEqualEPKNS_7XMLNodeE($this,$compare) {
 $this = $this|0;
 $compare = $compare|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $unknown = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $compare;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_ii[$6 & 1023]($3)|0);
 $unknown = $7;
 $8 = $unknown;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  $14 = 0;
  STACKTOP = sp;return ($14|0);
 }
 $10 = $unknown;
 $11 = (__ZNK8tinyxml27XMLNode5ValueEv($10)|0);
 $12 = (__ZNK8tinyxml27XMLNode5ValueEv($2)|0);
 $13 = (__ZN8tinyxml27XMLUtil11StringEqualEPKcS2_i($11,$12,2147483647)|0);
 $14 = $13;
 STACKTOP = sp;return ($14|0);
}
function __ZNK8tinyxml210XMLUnknown6AcceptEPNS_10XMLVisitorE($this,$visitor) {
 $this = $this|0;
 $visitor = $visitor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $visitor;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_iii[$6 & 1023]($3,$2)|0);
 STACKTOP = sp;return ($7|0);
}
function __ZNK8tinyxml212XMLAttribute4NameEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = (__ZN8tinyxml27StrPair6GetStrEv($2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZNK8tinyxml212XMLAttribute5ValueEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 16|0);
 $3 = (__ZN8tinyxml27StrPair6GetStrEv($2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN8tinyxml212XMLAttribute9ParseDeepEPcb($this,$p,$processEntities) {
 $this = $this|0;
 $p = $p|0;
 $processEntities = $processEntities|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $endTag = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $endTag = sp + 12|0;
 $1 = $this;
 $2 = $p;
 $4 = $processEntities&1;
 $3 = $4;
 $5 = $1;
 $6 = ((($5)) + 4|0);
 $7 = $2;
 $8 = (__ZN8tinyxml27StrPair9ParseNameEPc($6,$7)|0);
 $2 = $8;
 $9 = $2;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $2;
  $12 = HEAP8[$11>>0]|0;
  $13 = ($12<<24>>24)!=(0);
  if ($13) {
   $14 = $2;
   $15 = (__ZN8tinyxml27XMLUtil14SkipWhiteSpaceEPc($14)|0);
   $2 = $15;
   $16 = $2;
   $17 = HEAP8[$16>>0]|0;
   $18 = $17 << 24 >> 24;
   $19 = ($18|0)!=(61);
   if ($19) {
    $0 = 0;
    $44 = $0;
    STACKTOP = sp;return ($44|0);
   }
   $20 = $2;
   $21 = ((($20)) + 1|0);
   $2 = $21;
   $22 = $2;
   $23 = (__ZN8tinyxml27XMLUtil14SkipWhiteSpaceEPc($22)|0);
   $2 = $23;
   $24 = $2;
   $25 = HEAP8[$24>>0]|0;
   $26 = $25 << 24 >> 24;
   $27 = ($26|0)!=(34);
   if ($27) {
    $28 = $2;
    $29 = HEAP8[$28>>0]|0;
    $30 = $29 << 24 >> 24;
    $31 = ($30|0)!=(39);
    if ($31) {
     $0 = 0;
     $44 = $0;
     STACKTOP = sp;return ($44|0);
    }
   }
   $32 = $2;
   $33 = HEAP8[$32>>0]|0;
   HEAP8[$endTag>>0] = $33;
   $34 = ((($endTag)) + 1|0);
   HEAP8[$34>>0] = 0;
   $35 = $2;
   $36 = ((($35)) + 1|0);
   $2 = $36;
   $37 = ((($5)) + 16|0);
   $38 = $2;
   $39 = $3;
   $40 = $39&1;
   $41 = $40 ? 3 : 2;
   $42 = (__ZN8tinyxml27StrPair9ParseTextEPcPKci($37,$38,$endTag,$41)|0);
   $2 = $42;
   $43 = $2;
   $0 = $43;
   $44 = $0;
   STACKTOP = sp;return ($44|0);
  }
 }
 $0 = 0;
 $44 = $0;
 STACKTOP = sp;return ($44|0);
}
function __ZN8tinyxml212XMLAttribute7SetNameEPKc($this,$n) {
 $this = $this|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $n;
 $2 = $0;
 $3 = ((($2)) + 4|0);
 $4 = $1;
 __ZN8tinyxml27StrPair6SetStrEPKci($3,$4,0);
 STACKTOP = sp;return;
}
function __ZNK8tinyxml212XMLAttribute13QueryIntValueEPi($this,$value) {
 $this = $this|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $value;
 $3 = $1;
 $4 = (__ZNK8tinyxml212XMLAttribute5ValueEv($3)|0);
 $5 = $2;
 $6 = (__ZN8tinyxml27XMLUtil5ToIntEPKcPi($4,$5)|0);
 if ($6) {
  $0 = 0;
  $7 = $0;
  STACKTOP = sp;return ($7|0);
 } else {
  $0 = 2;
  $7 = $0;
  STACKTOP = sp;return ($7|0);
 }
 return (0)|0;
}
function __ZNK8tinyxml212XMLAttribute16QueryDoubleValueEPd($this,$value) {
 $this = $this|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $value;
 $3 = $1;
 $4 = (__ZNK8tinyxml212XMLAttribute5ValueEv($3)|0);
 $5 = $2;
 $6 = (__ZN8tinyxml27XMLUtil8ToDoubleEPKcPd($4,$5)|0);
 if ($6) {
  $0 = 0;
  $7 = $0;
  STACKTOP = sp;return ($7|0);
 } else {
  $0 = 2;
  $7 = $0;
  STACKTOP = sp;return ($7|0);
 }
 return (0)|0;
}
function __ZN8tinyxml212XMLAttribute12SetAttributeEPKc($this,$v) {
 $this = $this|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $v;
 $2 = $0;
 $3 = ((($2)) + 16|0);
 $4 = $1;
 __ZN8tinyxml27StrPair6SetStrEPKci($3,$4,0);
 STACKTOP = sp;return;
}
function __ZN8tinyxml212XMLAttribute12SetAttributeEi($this,$v) {
 $this = $this|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 8|0;
 $0 = $this;
 $1 = $v;
 $2 = $0;
 $3 = $1;
 __ZN8tinyxml27XMLUtil5ToStrEiPci($3,$buf,200);
 $4 = ((($2)) + 16|0);
 __ZN8tinyxml27StrPair6SetStrEPKci($4,$buf,0);
 STACKTOP = sp;return;
}
function __ZN8tinyxml212XMLAttribute12SetAttributeEd($this,$v) {
 $this = $this|0;
 $v = +$v;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 16|0;
 $0 = $this;
 $1 = $v;
 $2 = $0;
 $3 = $1;
 __ZN8tinyxml27XMLUtil5ToStrEdPci($3,$buf,200);
 $4 = ((($2)) + 16|0);
 __ZN8tinyxml27StrPair6SetStrEPKci($4,$buf,0);
 STACKTOP = sp;return;
}
function __ZN8tinyxml210XMLElementC2EPNS_11XMLDocumentE($this,$doc) {
 $this = $this|0;
 $doc = $doc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $doc;
 $2 = $0;
 $3 = $1;
 __ZN8tinyxml27XMLNodeC2EPNS_11XMLDocumentE($2,$3);
 $4 = 1580;
 HEAP32[$2>>2] = $4;
 $5 = ((($2)) + 48|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($2)) + 52|0);
 HEAP32[$6>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN8tinyxml210XMLElementD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $next = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 1580;
 HEAP32[$3>>2] = $4;
 while(1) {
  $5 = ((($3)) + 52|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   label = 6;
   break;
  }
  $8 = ((($3)) + 52|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 28|0);
  $11 = HEAP32[$10>>2]|0;
  $next = $11;
  $12 = ((($3)) + 52|0);
  $13 = HEAP32[$12>>2]|0;
  __THREW__ = 0;
  invoke_vi(368,($13|0));
  $14 = __THREW__; __THREW__ = 0;
  $15 = $14&1;
  if ($15) {
   label = 5;
   break;
  }
  $16 = $next;
  $17 = ((($3)) + 52|0);
  HEAP32[$17>>2] = $16;
 }
 if ((label|0) == 5) {
  $18 = ___cxa_find_matching_catch(0|0)|0;
  $19 = tempRet0;
  $1 = $18;
  $2 = $19;
  __ZN8tinyxml27XMLNodeD2Ev($3);
  $20 = $1;
  ___clang_call_terminate($20);
  // unreachable;
 }
 else if ((label|0) == 6) {
  __ZN8tinyxml27XMLNodeD2Ev($3);
  STACKTOP = sp;return;
 }
}
function __ZN8tinyxml210XMLElement15DeleteAttributeEPNS_12XMLAttributeE($attribute) {
 $attribute = $attribute|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $attribute;
 $1 = $0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = ((($3)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $pool = $5;
 $6 = $0;
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 FUNCTION_TABLE_vi[$8 & 1023]($6);
 $9 = $pool;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $0;
 FUNCTION_TABLE_vii[$12 & 1023]($9,$13);
 STACKTOP = sp;return;
}
function __ZN8tinyxml210XMLElementD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8tinyxml210XMLElementD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNK8tinyxml210XMLElement13FindAttributeEPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $name;
 $3 = $1;
 $4 = ((($3)) + 52|0);
 $5 = HEAP32[$4>>2]|0;
 $a = $5;
 while(1) {
  $6 = $a;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   label = 6;
   break;
  }
  $8 = $a;
  $9 = (__ZNK8tinyxml212XMLAttribute4NameEv($8)|0);
  $10 = $2;
  $11 = (__ZN8tinyxml27XMLUtil11StringEqualEPKcS2_i($9,$10,2147483647)|0);
  $12 = $a;
  if ($11) {
   label = 4;
   break;
  }
  $13 = ((($12)) + 28|0);
  $14 = HEAP32[$13>>2]|0;
  $a = $14;
 }
 if ((label|0) == 4) {
  $0 = $12;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 }
 else if ((label|0) == 6) {
  $0 = 0;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function __ZNK8tinyxml210XMLElement9AttributeEPKcS2_($this,$name,$value) {
 $this = $this|0;
 $name = $name|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $name;
 $3 = $value;
 $4 = $1;
 $5 = $2;
 $6 = (__ZNK8tinyxml210XMLElement13FindAttributeEPKc($4,$5)|0);
 $a = $6;
 $7 = $a;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  $0 = 0;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 $9 = $3;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $a;
  $12 = (__ZNK8tinyxml212XMLAttribute5ValueEv($11)|0);
  $13 = $3;
  $14 = (__ZN8tinyxml27XMLUtil11StringEqualEPKcS2_i($12,$13,2147483647)|0);
  if (!($14)) {
   $0 = 0;
   $17 = $0;
   STACKTOP = sp;return ($17|0);
  }
 }
 $15 = $a;
 $16 = (__ZNK8tinyxml212XMLAttribute5ValueEv($15)|0);
 $0 = $16;
 $17 = $0;
 STACKTOP = sp;return ($17|0);
}
function __ZN8tinyxml27XMLNode11GetDocumentEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN8tinyxml210XMLElement21FindOrCreateAttributeEPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $attrib = 0, $last = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $name;
 $2 = $0;
 $last = 0;
 $attrib = 0;
 $3 = ((($2)) + 52|0);
 $4 = HEAP32[$3>>2]|0;
 $attrib = $4;
 while(1) {
  $5 = $attrib;
  $6 = ($5|0)!=(0|0);
  if (!($6)) {
   break;
  }
  $7 = $attrib;
  $8 = (__ZNK8tinyxml212XMLAttribute4NameEv($7)|0);
  $9 = $1;
  $10 = (__ZN8tinyxml27XMLUtil11StringEqualEPKcS2_i($8,$9,2147483647)|0);
  if ($10) {
   break;
  }
  $11 = $attrib;
  $last = $11;
  $12 = $attrib;
  $13 = ((($12)) + 28|0);
  $14 = HEAP32[$13>>2]|0;
  $attrib = $14;
 }
 $15 = $attrib;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $40 = $attrib;
  STACKTOP = sp;return ($40|0);
 }
 $17 = ((($2)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($18)) + 148|0);
 $20 = (__ZN8tinyxml28MemPoolTILi36EE5AllocEv($19)|0);
 __ZN8tinyxml212XMLAttributeC2Ev($20);
 $attrib = $20;
 $21 = ((($2)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($22)) + 148|0);
 $24 = $attrib;
 $25 = ((($24)) + 32|0);
 HEAP32[$25>>2] = $23;
 $26 = $last;
 $27 = ($26|0)!=(0|0);
 $28 = $attrib;
 if ($27) {
  $29 = $last;
  $30 = ((($29)) + 28|0);
  HEAP32[$30>>2] = $28;
 } else {
  $31 = ((($2)) + 52|0);
  HEAP32[$31>>2] = $28;
 }
 $32 = $attrib;
 $33 = $1;
 __ZN8tinyxml212XMLAttribute7SetNameEPKc($32,$33);
 $34 = $attrib;
 $35 = ((($34)) + 32|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = HEAP32[$36>>2]|0;
 $38 = ((($37)) + 20|0);
 $39 = HEAP32[$38>>2]|0;
 FUNCTION_TABLE_vi[$39 & 1023]($36);
 $40 = $attrib;
 STACKTOP = sp;return ($40|0);
}
function __ZN8tinyxml28MemPoolTILi36EE5AllocEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $block = 0, $i = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $5 = (__Znwj(4068)|0);
  _memset(($5|0),0,4068)|0;
  $block = $5;
  $6 = ((($1)) + 4|0);
  $7 = $block;
  __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi36EE5BlockELi10EE4PushES4_($6,$7);
  $i = 0;
  while(1) {
   $8 = $i;
   $9 = ($8|0)<(112);
   if (!($9)) {
    break;
   }
   $10 = $i;
   $11 = (($10) + 1)|0;
   $12 = $block;
   $13 = (($12) + (($11*36)|0)|0);
   $14 = $i;
   $15 = $block;
   $16 = (($15) + (($14*36)|0)|0);
   HEAP32[$16>>2] = $13;
   $17 = $i;
   $18 = (($17) + 1)|0;
   $i = $18;
  }
  $19 = $block;
  $20 = ((($19)) + 4032|0);
  HEAP32[$20>>2] = 0;
  $21 = $block;
  $22 = ((($1)) + 56|0);
  HEAP32[$22>>2] = $21;
 }
 $23 = ((($1)) + 56|0);
 $24 = HEAP32[$23>>2]|0;
 $result = $24;
 $25 = ((($1)) + 56|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($1)) + 56|0);
 HEAP32[$28>>2] = $27;
 $29 = ((($1)) + 60|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + 1)|0;
 HEAP32[$29>>2] = $31;
 $32 = ((($1)) + 60|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($1)) + 68|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33|0)>($35|0);
 if (!($36)) {
  $40 = ((($1)) + 64|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($41) + 1)|0;
  HEAP32[$40>>2] = $42;
  $43 = ((($1)) + 72|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (($44) + 1)|0;
  HEAP32[$43>>2] = $45;
  $46 = $result;
  STACKTOP = sp;return ($46|0);
 }
 $37 = ((($1)) + 60|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($1)) + 68|0);
 HEAP32[$39>>2] = $38;
 $40 = ((($1)) + 64|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($41) + 1)|0;
 HEAP32[$40>>2] = $42;
 $43 = ((($1)) + 72|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (($44) + 1)|0;
 HEAP32[$43>>2] = $45;
 $46 = $result;
 STACKTOP = sp;return ($46|0);
}
function __ZN8tinyxml212XMLAttributeC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 1880;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 4|0);
 __ZN8tinyxml27StrPairC2Ev($5);
 $6 = ((($3)) + 16|0);
 __THREW__ = 0;
 invoke_vi(369,($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  $1 = $11;
  $2 = $12;
  __ZN8tinyxml27StrPairD2Ev($5);
  $13 = $1;
  $14 = $2;
  ___resumeException($13|0);
  // unreachable;
 } else {
  $9 = ((($3)) + 28|0);
  HEAP32[$9>>2] = 0;
  $10 = ((($3)) + 32|0);
  HEAP32[$10>>2] = 0;
  STACKTOP = sp;return;
 }
}
function __ZN8tinyxml210XMLElement15ParseAttributesEPc($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $9 = 0, $attrib = 0, $prevAttribute = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $p;
 $3 = $1;
 $4 = $2;
 $start = $4;
 $prevAttribute = 0;
 while(1) {
  $5 = $2;
  $6 = ($5|0)!=(0|0);
  if (!($6)) {
   break;
  }
  $7 = $2;
  $8 = (__ZN8tinyxml27XMLUtil14SkipWhiteSpaceEPc($7)|0);
  $2 = $8;
  $9 = $2;
  $10 = HEAP8[$9>>0]|0;
  $11 = ($10<<24>>24)!=(0);
  if (!($11)) {
   label = 4;
   break;
  }
  $16 = $2;
  $17 = HEAP8[$16>>0]|0;
  $18 = (__ZN8tinyxml27XMLUtil15IsNameStartCharEh($17)|0);
  if (!($18)) {
   label = 13;
   break;
  }
  $19 = ((($3)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($20)) + 148|0);
  $22 = (__ZN8tinyxml28MemPoolTILi36EE5AllocEv($21)|0);
  __ZN8tinyxml212XMLAttributeC2Ev($22);
  $attrib = $22;
  $23 = ((($3)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($24)) + 148|0);
  $26 = $attrib;
  $27 = ((($26)) + 32|0);
  HEAP32[$27>>2] = $25;
  $28 = $attrib;
  $29 = ((($28)) + 32|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($31)) + 20|0);
  $33 = HEAP32[$32>>2]|0;
  FUNCTION_TABLE_vi[$33 & 1023]($30);
  $34 = $attrib;
  $35 = $2;
  $36 = ((($3)) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (__ZNK8tinyxml211XMLDocument15ProcessEntitiesEv($37)|0);
  $39 = (__ZN8tinyxml212XMLAttribute9ParseDeepEPcb($34,$35,$38)|0);
  $2 = $39;
  $40 = $2;
  $41 = ($40|0)!=(0|0);
  if (!($41)) {
   label = 8;
   break;
  }
  $42 = $attrib;
  $43 = (__ZNK8tinyxml212XMLAttribute4NameEv($42)|0);
  $44 = (__ZNK8tinyxml210XMLElement9AttributeEPKcS2_($3,$43,0)|0);
  $45 = ($44|0)!=(0|0);
  if ($45) {
   label = 8;
   break;
  }
  $51 = $prevAttribute;
  $52 = ($51|0)!=(0|0);
  $53 = $attrib;
  if ($52) {
   $54 = $prevAttribute;
   $55 = ((($54)) + 28|0);
   HEAP32[$55>>2] = $53;
  } else {
   $56 = ((($3)) + 52|0);
   HEAP32[$56>>2] = $53;
  }
  $57 = $attrib;
  $prevAttribute = $57;
 }
 do {
  if ((label|0) == 4) {
   $12 = ((($3)) + 4|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = $start;
   $15 = (__ZNK8tinyxml210XMLElement4NameEv($3)|0);
   __ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEPKcS3_($13,7,$14,$15);
   $0 = 0;
   $80 = $0;
   STACKTOP = sp;return ($80|0);
  }
  else if ((label|0) == 8) {
   $46 = $attrib;
   __ZN8tinyxml210XMLElement15DeleteAttributeEPNS_12XMLAttributeE($46);
   $47 = ((($3)) + 4|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = $start;
   $50 = $2;
   __ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEPKcS3_($48,8,$49,$50);
   $0 = 0;
   $80 = $0;
   STACKTOP = sp;return ($80|0);
  }
  else if ((label|0) == 13) {
   $58 = $2;
   $59 = HEAP8[$58>>0]|0;
   $60 = $59 << 24 >> 24;
   $61 = ($60|0)==(62);
   $62 = $2;
   if ($61) {
    $63 = ((($62)) + 1|0);
    $2 = $63;
    break;
   }
   $64 = HEAP8[$62>>0]|0;
   $65 = $64 << 24 >> 24;
   $66 = ($65|0)==(47);
   if ($66) {
    $67 = $2;
    $68 = ((($67)) + 1|0);
    $69 = HEAP8[$68>>0]|0;
    $70 = $69 << 24 >> 24;
    $71 = ($70|0)==(62);
    if ($71) {
     $72 = ((($3)) + 48|0);
     HEAP32[$72>>2] = 1;
     $73 = $2;
     $74 = ((($73)) + 2|0);
     $0 = $74;
     $80 = $0;
     STACKTOP = sp;return ($80|0);
    }
   }
   $75 = ((($3)) + 4|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $start;
   $78 = $2;
   __ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEPKcS3_($76,7,$77,$78);
   $0 = 0;
   $80 = $0;
   STACKTOP = sp;return ($80|0);
  }
 } while(0);
 $79 = $2;
 $0 = $79;
 $80 = $0;
 STACKTOP = sp;return ($80|0);
}
function __ZN8tinyxml210XMLElement9ParseDeepEPcPNS_7StrPairE($this,$p,$strPair) {
 $this = $this|0;
 $p = $p|0;
 $strPair = $strPair|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $p;
 $3 = $strPair;
 $4 = $1;
 $5 = $2;
 $6 = (__ZN8tinyxml27XMLUtil14SkipWhiteSpaceEPc($5)|0);
 $2 = $6;
 $7 = $2;
 $8 = HEAP8[$7>>0]|0;
 $9 = $8 << 24 >> 24;
 $10 = ($9|0)==(47);
 if ($10) {
  $11 = ((($4)) + 48|0);
  HEAP32[$11>>2] = 2;
  $12 = $2;
  $13 = ((($12)) + 1|0);
  $2 = $13;
 }
 $14 = ((($4)) + 12|0);
 $15 = $2;
 $16 = (__ZN8tinyxml27StrPair9ParseNameEPc($14,$15)|0);
 $2 = $16;
 $17 = ((($4)) + 12|0);
 $18 = (__ZNK8tinyxml27StrPair5EmptyEv($17)|0);
 if ($18) {
  $0 = 0;
  $34 = $0;
  STACKTOP = sp;return ($34|0);
 }
 $19 = $2;
 $20 = (__ZN8tinyxml210XMLElement15ParseAttributesEPc($4,$19)|0);
 $2 = $20;
 $21 = $2;
 $22 = ($21|0)!=(0|0);
 if ($22) {
  $23 = $2;
  $24 = HEAP8[$23>>0]|0;
  $25 = ($24<<24>>24)!=(0);
  if ($25) {
   $26 = ((($4)) + 48|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)!=(0);
   if (!($28)) {
    $30 = $2;
    $31 = $3;
    $32 = (__ZN8tinyxml27XMLNode9ParseDeepEPcPNS_7StrPairE($4,$30,$31)|0);
    $2 = $32;
    $33 = $2;
    $0 = $33;
    $34 = $0;
    STACKTOP = sp;return ($34|0);
   }
  }
 }
 $29 = $2;
 $0 = $29;
 $34 = $0;
 STACKTOP = sp;return ($34|0);
}
function __ZNK8tinyxml210XMLElement12ShallowCloneEPNS_11XMLDocumentE($this,$doc) {
 $this = $this|0;
 $doc = $doc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $a = 0, $element = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $doc;
 $2 = $0;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $5 = ((($2)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $1 = $6;
 }
 $7 = $1;
 $8 = (__ZNK8tinyxml27XMLNode5ValueEv($2)|0);
 $9 = (__ZN8tinyxml211XMLDocument10NewElementEPKc($7,$8)|0);
 $element = $9;
 $10 = (__ZNK8tinyxml210XMLElement14FirstAttributeEv($2)|0);
 $a = $10;
 while(1) {
  $11 = $a;
  $12 = ($11|0)!=(0|0);
  $13 = $element;
  if (!($12)) {
   break;
  }
  $14 = $a;
  $15 = (__ZNK8tinyxml212XMLAttribute4NameEv($14)|0);
  $16 = $a;
  $17 = (__ZNK8tinyxml212XMLAttribute5ValueEv($16)|0);
  __ZN8tinyxml210XMLElement12SetAttributeEPKcS2_($13,$15,$17);
  $18 = $a;
  $19 = (__ZNK8tinyxml212XMLAttribute4NextEv($18)|0);
  $a = $19;
 }
 STACKTOP = sp;return ($13|0);
}
function __ZN8tinyxml211XMLDocument10NewElementEPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ele = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $name;
 $2 = $0;
 $3 = ((($2)) + 72|0);
 $4 = (__ZN8tinyxml28MemPoolTILi56EE5AllocEv($3)|0);
 __ZN8tinyxml210XMLElementC2EPNS_11XMLDocumentE($4,$2);
 $ele = $4;
 $5 = ((($2)) + 72|0);
 $6 = $ele;
 $7 = ((($6)) + 44|0);
 HEAP32[$7>>2] = $5;
 $8 = $ele;
 $9 = $1;
 __ZN8tinyxml210XMLElement7SetNameEPKcb($8,$9,0);
 $10 = $ele;
 STACKTOP = sp;return ($10|0);
}
function __ZNK8tinyxml210XMLElement14FirstAttributeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 52|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN8tinyxml210XMLElement12SetAttributeEPKcS2_($this,$name,$value) {
 $this = $this|0;
 $name = $name|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $name;
 $2 = $value;
 $3 = $0;
 $4 = $1;
 $5 = (__ZN8tinyxml210XMLElement21FindOrCreateAttributeEPKc($3,$4)|0);
 $a = $5;
 $6 = $a;
 $7 = $2;
 __ZN8tinyxml212XMLAttribute12SetAttributeEPKc($6,$7);
 STACKTOP = sp;return;
}
function __ZNK8tinyxml212XMLAttribute4NextEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZNK8tinyxml210XMLElement12ShallowEqualEPKNS_7XMLNodeE($this,$compare) {
 $this = $this|0;
 $compare = $compare|0;
 var $$expand_i1_val = 0, $$expand_i1_val3 = 0, $$expand_i1_val5 = 0, $$expand_i1_val7 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $a = 0, $b = 0, $or$cond = 0, $other = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 20|0;
 $1 = $this;
 $2 = $compare;
 $3 = $1;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_ii[$7 & 1023]($4)|0);
 $other = $8;
 $9 = $other;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $other;
  $12 = (__ZNK8tinyxml210XMLElement4NameEv($11)|0);
  $13 = (__ZNK8tinyxml210XMLElement4NameEv($3)|0);
  $14 = (__ZN8tinyxml27XMLUtil11StringEqualEPKcS2_i($12,$13,2147483647)|0);
  if ($14) {
   $15 = (__ZNK8tinyxml210XMLElement14FirstAttributeEv($3)|0);
   $a = $15;
   $16 = $other;
   $17 = (__ZNK8tinyxml210XMLElement14FirstAttributeEv($16)|0);
   $b = $17;
   while(1) {
    $18 = $a;
    $19 = ($18|0)!=(0|0);
    $20 = $b;
    $21 = ($20|0)!=(0|0);
    $22 = $19 ? $21 : 0;
    $23 = $a;
    if (!($22)) {
     break;
    }
    $24 = (__ZNK8tinyxml212XMLAttribute5ValueEv($23)|0);
    $25 = $b;
    $26 = (__ZNK8tinyxml212XMLAttribute5ValueEv($25)|0);
    $27 = (__ZN8tinyxml27XMLUtil11StringEqualEPKcS2_i($24,$26,2147483647)|0);
    if (!($27)) {
     label = 6;
     break;
    }
    $28 = $a;
    $29 = (__ZNK8tinyxml212XMLAttribute4NextEv($28)|0);
    $a = $29;
    $30 = $b;
    $31 = (__ZNK8tinyxml212XMLAttribute4NextEv($30)|0);
    $b = $31;
   }
   if ((label|0) == 6) {
    $$expand_i1_val = 0;
    HEAP8[$0>>0] = $$expand_i1_val;
    $$pre_trunc = HEAP8[$0>>0]|0;
    $35 = $$pre_trunc&1;
    STACKTOP = sp;return ($35|0);
   }
   $32 = ($23|0)!=(0|0);
   $33 = $b;
   $34 = ($33|0)!=(0|0);
   $or$cond = $32 | $34;
   if ($or$cond) {
    $$expand_i1_val3 = 0;
    HEAP8[$0>>0] = $$expand_i1_val3;
    $$pre_trunc = HEAP8[$0>>0]|0;
    $35 = $$pre_trunc&1;
    STACKTOP = sp;return ($35|0);
   } else {
    $$expand_i1_val5 = 1;
    HEAP8[$0>>0] = $$expand_i1_val5;
    $$pre_trunc = HEAP8[$0>>0]|0;
    $35 = $$pre_trunc&1;
    STACKTOP = sp;return ($35|0);
   }
  }
 }
 $$expand_i1_val7 = 0;
 HEAP8[$0>>0] = $$expand_i1_val7;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $35 = $$pre_trunc&1;
 STACKTOP = sp;return ($35|0);
}
function __ZNK8tinyxml210XMLElement6AcceptEPNS_10XMLVisitorE($this,$visitor) {
 $this = $this|0;
 $visitor = $visitor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $visitor;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 52|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (FUNCTION_TABLE_iiii[$6 & 1023]($3,$2,$8)|0);
 L1: do {
  if ($9) {
   $10 = (__ZNK8tinyxml27XMLNode10FirstChildEv($2)|0);
   $node = $10;
   while(1) {
    $11 = $node;
    $12 = ($11|0)!=(0|0);
    if (!($12)) {
     break L1;
    }
    $13 = $node;
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($14)) + 56|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = $1;
    $18 = (FUNCTION_TABLE_iii[$16 & 1023]($13,$17)|0);
    if (!($18)) {
     break L1;
    }
    $19 = $node;
    $20 = (__ZNK8tinyxml27XMLNode11NextSiblingEv($19)|0);
    $node = $20;
   }
  }
 } while(0);
 $21 = $1;
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($22)) + 20|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (FUNCTION_TABLE_iii[$24 & 1023]($21,$2)|0);
 STACKTOP = sp;return ($25|0);
}
function __ZN8tinyxml211XMLDocumentC2EbNS_10WhitespaceE($this,$processEntities,$whitespace) {
 $this = $this|0;
 $processEntities = $processEntities|0;
 $whitespace = $whitespace|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $5 = $processEntities&1;
 $1 = $5;
 $2 = $whitespace;
 $6 = $0;
 __ZN8tinyxml27XMLNodeC2EPNS_11XMLDocumentE($6,0);
 $7 = 1660;
 HEAP32[$6>>2] = $7;
 $8 = ((($6)) + 48|0);
 HEAP8[$8>>0] = 0;
 $9 = ((($6)) + 49|0);
 $10 = $1;
 $11 = $10&1;
 $12 = $11&1;
 HEAP8[$9>>0] = $12;
 $13 = ((($6)) + 52|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($6)) + 56|0);
 $15 = $2;
 HEAP32[$14>>2] = $15;
 $16 = ((($6)) + 60|0);
 HEAP32[$16>>2] = 0;
 $17 = ((($6)) + 64|0);
 HEAP32[$17>>2] = 0;
 $18 = ((($6)) + 68|0);
 HEAP32[$18>>2] = 0;
 $19 = ((($6)) + 72|0);
 __THREW__ = 0;
 invoke_vi(370,($19|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $32 = ___cxa_find_matching_catch()|0;
  $33 = tempRet0;
  $3 = $32;
  $4 = $33;
  __ZN8tinyxml27XMLNodeD2Ev($6);
  $40 = $3;
  $41 = $4;
  ___resumeException($40|0);
  // unreachable;
 }
 $22 = ((($6)) + 148|0);
 __THREW__ = 0;
 invoke_vi(371,($22|0));
 $23 = __THREW__; __THREW__ = 0;
 $24 = $23&1;
 if ($24) {
  $34 = ___cxa_find_matching_catch()|0;
  $35 = tempRet0;
  $3 = $34;
  $4 = $35;
 } else {
  $25 = ((($6)) + 224|0);
  __THREW__ = 0;
  invoke_vi(372,($25|0));
  $26 = __THREW__; __THREW__ = 0;
  $27 = $26&1;
  do {
   if ($27) {
    $36 = ___cxa_find_matching_catch()|0;
    $37 = tempRet0;
    $3 = $36;
    $4 = $37;
   } else {
    $28 = ((($6)) + 300|0);
    __THREW__ = 0;
    invoke_vi(373,($28|0));
    $29 = __THREW__; __THREW__ = 0;
    $30 = $29&1;
    if ($30) {
     $38 = ___cxa_find_matching_catch()|0;
     $39 = tempRet0;
     $3 = $38;
     $4 = $39;
     __ZN8tinyxml28MemPoolTILi52EED2Ev($25);
     break;
    } else {
     $31 = ((($6)) + 4|0);
     HEAP32[$31>>2] = $6;
     STACKTOP = sp;return;
    }
   }
  } while(0);
  __ZN8tinyxml28MemPoolTILi36EED2Ev($22);
 }
 __ZN8tinyxml28MemPoolTILi56EED2Ev($19);
 __ZN8tinyxml27XMLNodeD2Ev($6);
 $40 = $3;
 $41 = $4;
 ___resumeException($40|0);
 // unreachable;
}
function __ZN8tinyxml28MemPoolTILi56EEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __ZN8tinyxml27MemPoolC2Ev($3);
 $4 = 1944;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 4|0);
 __THREW__ = 0;
 invoke_vi(374,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  $1 = $13;
  $2 = $14;
  __ZN8tinyxml27MemPoolD2Ev($3);
  $15 = $1;
  $16 = $2;
  ___resumeException($15|0);
  // unreachable;
 } else {
  $8 = ((($3)) + 56|0);
  HEAP32[$8>>2] = 0;
  $9 = ((($3)) + 60|0);
  HEAP32[$9>>2] = 0;
  $10 = ((($3)) + 64|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($3)) + 68|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($3)) + 72|0);
  HEAP32[$12>>2] = 0;
  STACKTOP = sp;return;
 }
}
function __ZN8tinyxml28MemPoolTILi36EEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __ZN8tinyxml27MemPoolC2Ev($3);
 $4 = 2016;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 4|0);
 __THREW__ = 0;
 invoke_vi(375,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  $1 = $13;
  $2 = $14;
  __ZN8tinyxml27MemPoolD2Ev($3);
  $15 = $1;
  $16 = $2;
  ___resumeException($15|0);
  // unreachable;
 } else {
  $8 = ((($3)) + 56|0);
  HEAP32[$8>>2] = 0;
  $9 = ((($3)) + 60|0);
  HEAP32[$9>>2] = 0;
  $10 = ((($3)) + 64|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($3)) + 68|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($3)) + 72|0);
  HEAP32[$12>>2] = 0;
  STACKTOP = sp;return;
 }
}
function __ZN8tinyxml28MemPoolTILi52EEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __ZN8tinyxml27MemPoolC2Ev($3);
 $4 = 2052;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 4|0);
 __THREW__ = 0;
 invoke_vi(376,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  $1 = $13;
  $2 = $14;
  __ZN8tinyxml27MemPoolD2Ev($3);
  $15 = $1;
  $16 = $2;
  ___resumeException($15|0);
  // unreachable;
 } else {
  $8 = ((($3)) + 56|0);
  HEAP32[$8>>2] = 0;
  $9 = ((($3)) + 60|0);
  HEAP32[$9>>2] = 0;
  $10 = ((($3)) + 64|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($3)) + 68|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($3)) + 72|0);
  HEAP32[$12>>2] = 0;
  STACKTOP = sp;return;
 }
}
function __ZN8tinyxml28MemPoolTILi48EEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __ZN8tinyxml27MemPoolC2Ev($3);
 $4 = 2088;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 4|0);
 __THREW__ = 0;
 invoke_vi(377,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  $1 = $13;
  $2 = $14;
  __ZN8tinyxml27MemPoolD2Ev($3);
  $15 = $1;
  $16 = $2;
  ___resumeException($15|0);
  // unreachable;
 } else {
  $8 = ((($3)) + 56|0);
  HEAP32[$8>>2] = 0;
  $9 = ((($3)) + 60|0);
  HEAP32[$9>>2] = 0;
  $10 = ((($3)) + 64|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($3)) + 68|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($3)) + 72|0);
  HEAP32[$12>>2] = 0;
  STACKTOP = sp;return;
 }
}
function __ZN8tinyxml28MemPoolTILi52EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 2052;
 HEAP32[$3>>2] = $4;
 $5 = HEAP32[$3>>2]|0;
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 __THREW__ = 0;
 invoke_vi($7|0,($3|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $11 = ___cxa_find_matching_catch(0|0)|0;
  $12 = tempRet0;
  $1 = $11;
  $2 = $12;
  $13 = ((($3)) + 4|0);
  __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EED2Ev($13);
  __ZN8tinyxml27MemPoolD2Ev($3);
  $14 = $1;
  ___clang_call_terminate($14);
  // unreachable;
 } else {
  $10 = ((($3)) + 4|0);
  __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EED2Ev($10);
  __ZN8tinyxml27MemPoolD2Ev($3);
  STACKTOP = sp;return;
 }
}
function __ZN8tinyxml28MemPoolTILi36EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 2016;
 HEAP32[$3>>2] = $4;
 $5 = HEAP32[$3>>2]|0;
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 __THREW__ = 0;
 invoke_vi($7|0,($3|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $11 = ___cxa_find_matching_catch(0|0)|0;
  $12 = tempRet0;
  $1 = $11;
  $2 = $12;
  $13 = ((($3)) + 4|0);
  __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi36EE5BlockELi10EED2Ev($13);
  __ZN8tinyxml27MemPoolD2Ev($3);
  $14 = $1;
  ___clang_call_terminate($14);
  // unreachable;
 } else {
  $10 = ((($3)) + 4|0);
  __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi36EE5BlockELi10EED2Ev($10);
  __ZN8tinyxml27MemPoolD2Ev($3);
  STACKTOP = sp;return;
 }
}
function __ZN8tinyxml28MemPoolTILi56EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 1944;
 HEAP32[$3>>2] = $4;
 $5 = HEAP32[$3>>2]|0;
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 __THREW__ = 0;
 invoke_vi($7|0,($3|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $11 = ___cxa_find_matching_catch(0|0)|0;
  $12 = tempRet0;
  $1 = $11;
  $2 = $12;
  $13 = ((($3)) + 4|0);
  __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EED2Ev($13);
  __ZN8tinyxml27MemPoolD2Ev($3);
  $14 = $1;
  ___clang_call_terminate($14);
  // unreachable;
 } else {
  $10 = ((($3)) + 4|0);
  __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EED2Ev($10);
  __ZN8tinyxml27MemPoolD2Ev($3);
  STACKTOP = sp;return;
 }
}
function __ZN8tinyxml211XMLDocumentD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 1660;
 HEAP32[$3>>2] = $4;
 __THREW__ = 0;
 invoke_vi(378,($3|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $11 = ___cxa_find_matching_catch(0|0)|0;
  $12 = tempRet0;
  $1 = $11;
  $2 = $12;
  $13 = ((($3)) + 300|0);
  __ZN8tinyxml28MemPoolTILi48EED2Ev($13);
  $14 = ((($3)) + 224|0);
  __ZN8tinyxml28MemPoolTILi52EED2Ev($14);
  $15 = ((($3)) + 148|0);
  __ZN8tinyxml28MemPoolTILi36EED2Ev($15);
  $16 = ((($3)) + 72|0);
  __ZN8tinyxml28MemPoolTILi56EED2Ev($16);
  __ZN8tinyxml27XMLNodeD2Ev($3);
  $17 = $1;
  ___clang_call_terminate($17);
  // unreachable;
 } else {
  $7 = ((($3)) + 300|0);
  __ZN8tinyxml28MemPoolTILi48EED2Ev($7);
  $8 = ((($3)) + 224|0);
  __ZN8tinyxml28MemPoolTILi52EED2Ev($8);
  $9 = ((($3)) + 148|0);
  __ZN8tinyxml28MemPoolTILi36EED2Ev($9);
  $10 = ((($3)) + 72|0);
  __ZN8tinyxml28MemPoolTILi56EED2Ev($10);
  __ZN8tinyxml27XMLNodeD2Ev($3);
  STACKTOP = sp;return;
 }
}
function __ZN8tinyxml211XMLDocument5ClearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8tinyxml27XMLNode14DeleteChildrenEv($1);
 $2 = ((($1)) + 52|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 60|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 64|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($1)) + 68|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $8 = ((($1)) + 68|0);
  HEAP32[$8>>2] = 0;
  STACKTOP = sp;return;
 }
 __ZdaPv($6);
 $8 = ((($1)) + 68|0);
 HEAP32[$8>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN8tinyxml28MemPoolTILi48EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 2088;
 HEAP32[$3>>2] = $4;
 $5 = HEAP32[$3>>2]|0;
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 __THREW__ = 0;
 invoke_vi($7|0,($3|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $11 = ___cxa_find_matching_catch(0|0)|0;
  $12 = tempRet0;
  $1 = $11;
  $2 = $12;
  $13 = ((($3)) + 4|0);
  __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi48EE5BlockELi10EED2Ev($13);
  __ZN8tinyxml27MemPoolD2Ev($3);
  $14 = $1;
  ___clang_call_terminate($14);
  // unreachable;
 } else {
  $10 = ((($3)) + 4|0);
  __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi48EE5BlockELi10EED2Ev($10);
  __ZN8tinyxml27MemPoolD2Ev($3);
  STACKTOP = sp;return;
 }
}
function __ZN8tinyxml211XMLDocumentD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8tinyxml211XMLDocumentD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN8tinyxml210XMLElement7SetNameEPKcb($this,$str,$staticMem) {
 $this = $this|0;
 $str = $str|0;
 $staticMem = $staticMem|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $str;
 $3 = $staticMem&1;
 $2 = $3;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $6&1;
 __ZN8tinyxml27XMLNode8SetValueEPKcb($4,$5,$7);
 STACKTOP = sp;return;
}
function __ZN8tinyxml211XMLDocument8LoadFileEPKc($this,$filename) {
 $this = $this|0;
 $filename = $filename|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $filename;
 $3 = $1;
 __ZN8tinyxml211XMLDocument5ClearEv($3);
 $4 = $2;
 $5 = (__ZN8tinyxml2L9callfopenEPKcS1_($4,6961)|0);
 $fp = $5;
 $6 = $fp;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $11 = $fp;
  (__ZN8tinyxml211XMLDocument8LoadFileEP8_IO_FILE($3,$11)|0);
  $12 = $fp;
  (_fclose($12)|0);
  $13 = ((($3)) + 52|0);
  $14 = HEAP32[$13>>2]|0;
  $0 = $14;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 } else {
  $8 = $2;
  __ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEPKcS3_($3,3,$8,0);
  $9 = ((($3)) + 52|0);
  $10 = HEAP32[$9>>2]|0;
  $0 = $10;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function __ZN8tinyxml2L9callfopenEPKcS1_($filepath,$mode) {
 $filepath = $filepath|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $fp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $filepath;
 $1 = $mode;
 $2 = $0;
 $3 = $1;
 $4 = (_fopen($2,$3)|0);
 $fp = $4;
 $5 = $fp;
 STACKTOP = sp;return ($5|0);
}
function __ZN8tinyxml211XMLDocument8LoadFileEP8_IO_FILE($this,$fp) {
 $this = $this|0;
 $fp = $fp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $filelength = 0, $read = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $fp;
 $3 = $1;
 __ZN8tinyxml211XMLDocument5ClearEv($3);
 $4 = $2;
 (_fseek($4,0,0)|0);
 $5 = $2;
 $6 = (_fgetc($5)|0);
 $7 = ($6|0)==(-1);
 if ($7) {
  $8 = $2;
  $9 = (_ferror($8)|0);
  $10 = ($9|0)!=(0);
  if ($10) {
   __ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEPKcS3_($3,5,0,0);
   $11 = ((($3)) + 52|0);
   $12 = HEAP32[$11>>2]|0;
   $0 = $12;
   $50 = $0;
   STACKTOP = sp;return ($50|0);
  }
 }
 $13 = $2;
 (_fseek($13,0,2)|0);
 $14 = $2;
 $15 = (_ftell($14)|0);
 $filelength = $15;
 $16 = $2;
 (_fseek($16,0,0)|0);
 $17 = $filelength;
 $18 = ($17|0)==(-1);
 if ($18) {
  __ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEPKcS3_($3,5,0,0);
  $19 = ((($3)) + 52|0);
  $20 = HEAP32[$19>>2]|0;
  $0 = $20;
  $50 = $0;
  STACKTOP = sp;return ($50|0);
 }
 $21 = $filelength;
 $22 = (__ZN8tinyxml225LongFitsIntoSizeTMinusOneILb1EE4FitsEm($21)|0);
 if (!($22)) {
  __ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEPKcS3_($3,5,0,0);
  $23 = ((($3)) + 52|0);
  $24 = HEAP32[$23>>2]|0;
  $0 = $24;
  $50 = $0;
  STACKTOP = sp;return ($50|0);
 }
 $25 = $filelength;
 $26 = ($25|0)==(0);
 if ($26) {
  __ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEPKcS3_($3,15,0,0);
  $27 = ((($3)) + 52|0);
  $28 = HEAP32[$27>>2]|0;
  $0 = $28;
  $50 = $0;
  STACKTOP = sp;return ($50|0);
 }
 $29 = $filelength;
 $size = $29;
 $30 = $size;
 $31 = (($30) + 1)|0;
 $32 = (__Znaj($31)|0);
 $33 = ((($3)) + 68|0);
 HEAP32[$33>>2] = $32;
 $34 = ((($3)) + 68|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $size;
 $37 = $2;
 $38 = (_fread($35,1,$36,$37)|0);
 $read = $38;
 $39 = $read;
 $40 = $size;
 $41 = ($39|0)!=($40|0);
 if ($41) {
  __ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEPKcS3_($3,5,0,0);
  $42 = ((($3)) + 52|0);
  $43 = HEAP32[$42>>2]|0;
  $0 = $43;
  $50 = $0;
  STACKTOP = sp;return ($50|0);
 } else {
  $44 = $size;
  $45 = ((($3)) + 68|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (($46) + ($44)|0);
  HEAP8[$47>>0] = 0;
  __ZN8tinyxml211XMLDocument5ParseEv($3);
  $48 = ((($3)) + 52|0);
  $49 = HEAP32[$48>>2]|0;
  $0 = $49;
  $50 = $0;
  STACKTOP = sp;return ($50|0);
 }
 return (0)|0;
}
function __ZN8tinyxml225LongFitsIntoSizeTMinusOneILb1EE4FitsEm($value) {
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $value;
 $1 = $0;
 $2 = ($1>>>0)<(4294967295);
 STACKTOP = sp;return ($2|0);
}
function __ZN8tinyxml211XMLDocument5ParseEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 68|0);
 $3 = HEAP32[$2>>2]|0;
 $p = $3;
 $4 = $p;
 $5 = (__ZN8tinyxml27XMLUtil14SkipWhiteSpaceEPc($4)|0);
 $p = $5;
 $6 = $p;
 $7 = ((($1)) + 48|0);
 $8 = (__ZN8tinyxml27XMLUtil7ReadBOMEPKcPb($6,$7)|0);
 $p = $8;
 $9 = $p;
 $10 = HEAP8[$9>>0]|0;
 $11 = ($10<<24>>24)!=(0);
 if ($11) {
  $12 = HEAP32[$1>>2]|0;
  $13 = ((($12)) + 68|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $p;
  (FUNCTION_TABLE_iiii[$14 & 1023]($1,$15,0)|0);
  STACKTOP = sp;return;
 } else {
  __ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEPKcS3_($1,15,0,0);
  STACKTOP = sp;return;
 }
}
function __ZN8tinyxml211XMLDocument8SaveFileEPKcb($this,$filename,$compact) {
 $this = $this|0;
 $filename = $filename|0;
 $compact = $compact|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $fp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $filename;
 $4 = $compact&1;
 $3 = $4;
 $5 = $1;
 $6 = $2;
 $7 = (__ZN8tinyxml2L9callfopenEPKcS1_($6,6964)|0);
 $fp = $7;
 $8 = $fp;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $13 = $fp;
  $14 = $3;
  $15 = $14&1;
  (__ZN8tinyxml211XMLDocument8SaveFileEP8_IO_FILEb($5,$13,$15)|0);
  $16 = $fp;
  (_fclose($16)|0);
  $17 = ((($5)) + 52|0);
  $18 = HEAP32[$17>>2]|0;
  $0 = $18;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 } else {
  $10 = $2;
  __ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEPKcS3_($5,4,$10,0);
  $11 = ((($5)) + 52|0);
  $12 = HEAP32[$11>>2]|0;
  $0 = $12;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function __ZN8tinyxml211XMLDocument8SaveFileEP8_IO_FILEb($this,$fp,$compact) {
 $this = $this|0;
 $fp = $fp|0;
 $compact = $compact|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $stream = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $stream = sp + 16|0;
 $0 = $this;
 $1 = $fp;
 $6 = $compact&1;
 $2 = $6;
 $7 = $0;
 __ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEPKcS3_($7,0,0,0);
 $8 = $1;
 $9 = $2;
 $10 = $9&1;
 __ZN8tinyxml210XMLPrinterC2EP8_IO_FILEbi($stream,$8,$10,0);
 __THREW__ = 0;
 invoke_vii(379,($7|0),($stream|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $15 = ___cxa_find_matching_catch()|0;
  $16 = tempRet0;
  $3 = $15;
  $4 = $16;
  __ZN8tinyxml210XMLPrinterD2Ev($stream);
  $17 = $3;
  $18 = $4;
  ___resumeException($17|0);
  // unreachable;
 } else {
  $13 = ((($7)) + 52|0);
  $14 = HEAP32[$13>>2]|0;
  $5 = 1;
  __ZN8tinyxml210XMLPrinterD2Ev($stream);
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function __ZNK8tinyxml211XMLDocument5PrintEPNS_10XMLPrinterE($this,$streamer) {
 $this = $this|0;
 $streamer = $streamer|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $stdoutStreamer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $stdoutStreamer = sp + 8|0;
 $0 = $this;
 $1 = $streamer;
 $4 = $0;
 $5 = $1;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = HEAP32[$4>>2]|0;
  $8 = ((($7)) + 56|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $1;
  (FUNCTION_TABLE_iii[$9 & 1023]($4,$10)|0);
  STACKTOP = sp;return;
 }
 $11 = HEAP32[6004>>2]|0;
 __ZN8tinyxml210XMLPrinterC2EP8_IO_FILEbi($stdoutStreamer,$11,0,0);
 $12 = HEAP32[$4>>2]|0;
 $13 = ((($12)) + 56|0);
 $14 = HEAP32[$13>>2]|0;
 __THREW__ = 0;
 (invoke_iii($14|0,($4|0),($stdoutStreamer|0))|0);
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if ($16) {
  $17 = ___cxa_find_matching_catch()|0;
  $18 = tempRet0;
  $2 = $17;
  $3 = $18;
  __ZN8tinyxml210XMLPrinterD2Ev($stdoutStreamer);
  $19 = $2;
  $20 = $3;
  ___resumeException($19|0);
  // unreachable;
 }
 __ZN8tinyxml210XMLPrinterD2Ev($stdoutStreamer);
 STACKTOP = sp;return;
}
function __ZN8tinyxml210XMLPrinterD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 1740;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 208|0);
 __ZN8tinyxml28DynArrayIcLi20EED2Ev($3);
 $4 = ((($1)) + 8|0);
 __ZN8tinyxml28DynArrayIPKcLi10EED2Ev($4);
 __ZN8tinyxml210XMLVisitorD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN8tinyxml211XMLDocument5ParseEPKcj($this,$p,$len) {
 $this = $this|0;
 $p = $p|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $p;
 $3 = $len;
 $4 = $1;
 __ZN8tinyxml211XMLDocument5ClearEv($4);
 $5 = $3;
 $6 = ($5|0)!=(0);
 $7 = $2;
 $8 = ($7|0)!=(0|0);
 $or$cond = $6 & $8;
 if ($or$cond) {
  $9 = $2;
  $10 = HEAP8[$9>>0]|0;
  $11 = ($10<<24>>24)!=(0);
  if ($11) {
   $14 = $3;
   $15 = ($14|0)==(-1);
   if ($15) {
    $16 = $2;
    $17 = (_strlen($16)|0);
    $3 = $17;
   }
   $18 = $3;
   $19 = (($18) + 1)|0;
   $20 = (__Znaj($19)|0);
   $21 = ((($4)) + 68|0);
   HEAP32[$21>>2] = $20;
   $22 = ((($4)) + 68|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = $2;
   $25 = $3;
   _memcpy(($23|0),($24|0),($25|0))|0;
   $26 = $3;
   $27 = ((($4)) + 68|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (($28) + ($26)|0);
   HEAP8[$29>>0] = 0;
   __ZN8tinyxml211XMLDocument5ParseEv($4);
   $30 = (__ZNK8tinyxml211XMLDocument5ErrorEv($4)|0);
   if ($30) {
    __ZN8tinyxml27XMLNode14DeleteChildrenEv($4);
    $31 = ((($4)) + 72|0);
    __ZN8tinyxml28MemPoolTILi56EE5ClearEv($31);
    $32 = ((($4)) + 148|0);
    __ZN8tinyxml28MemPoolTILi36EE5ClearEv($32);
    $33 = ((($4)) + 224|0);
    __ZN8tinyxml28MemPoolTILi52EE5ClearEv($33);
    $34 = ((($4)) + 300|0);
    __ZN8tinyxml28MemPoolTILi48EE5ClearEv($34);
   }
   $35 = ((($4)) + 52|0);
   $36 = HEAP32[$35>>2]|0;
   $0 = $36;
   $37 = $0;
   STACKTOP = sp;return ($37|0);
  }
 }
 __ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEPKcS3_($4,15,0,0);
 $12 = ((($4)) + 52|0);
 $13 = HEAP32[$12>>2]|0;
 $0 = $13;
 $37 = $0;
 STACKTOP = sp;return ($37|0);
}
function __ZN8tinyxml28MemPoolTILi56EE5ClearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 while(1) {
  $2 = ((($1)) + 4|0);
  $3 = (__ZNK8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EE5EmptyEv($2)|0);
  $4 = $3 ^ 1;
  if (!($4)) {
   break;
  }
  $5 = ((($1)) + 4|0);
  $6 = (__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EE3PopEv($5)|0);
  $b = $6;
  $7 = $b;
  $8 = ($7|0)==(0|0);
  if ($8) {
   continue;
  }
  __ZdlPv($7);
 }
 $9 = ((($1)) + 56|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($1)) + 60|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($1)) + 64|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($1)) + 68|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($1)) + 72|0);
 HEAP32[$13>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN8tinyxml28MemPoolTILi36EE5ClearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 while(1) {
  $2 = ((($1)) + 4|0);
  $3 = (__ZNK8tinyxml28DynArrayIPNS_8MemPoolTILi36EE5BlockELi10EE5EmptyEv($2)|0);
  $4 = $3 ^ 1;
  if (!($4)) {
   break;
  }
  $5 = ((($1)) + 4|0);
  $6 = (__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi36EE5BlockELi10EE3PopEv($5)|0);
  $b = $6;
  $7 = $b;
  $8 = ($7|0)==(0|0);
  if ($8) {
   continue;
  }
  __ZdlPv($7);
 }
 $9 = ((($1)) + 56|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($1)) + 60|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($1)) + 64|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($1)) + 68|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($1)) + 72|0);
 HEAP32[$13>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN8tinyxml28MemPoolTILi52EE5ClearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 while(1) {
  $2 = ((($1)) + 4|0);
  $3 = (__ZNK8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EE5EmptyEv($2)|0);
  $4 = $3 ^ 1;
  if (!($4)) {
   break;
  }
  $5 = ((($1)) + 4|0);
  $6 = (__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EE3PopEv($5)|0);
  $b = $6;
  $7 = $b;
  $8 = ($7|0)==(0|0);
  if ($8) {
   continue;
  }
  __ZdlPv($7);
 }
 $9 = ((($1)) + 56|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($1)) + 60|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($1)) + 64|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($1)) + 68|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($1)) + 72|0);
 HEAP32[$13>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN8tinyxml28MemPoolTILi48EE5ClearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 while(1) {
  $2 = ((($1)) + 4|0);
  $3 = (__ZNK8tinyxml28DynArrayIPNS_8MemPoolTILi48EE5BlockELi10EE5EmptyEv($2)|0);
  $4 = $3 ^ 1;
  if (!($4)) {
   break;
  }
  $5 = ((($1)) + 4|0);
  $6 = (__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi48EE5BlockELi10EE3PopEv($5)|0);
  $b = $6;
  $7 = $b;
  $8 = ($7|0)==(0|0);
  if ($8) {
   continue;
  }
  __ZdlPv($7);
 }
 $9 = ((($1)) + 56|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($1)) + 60|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($1)) + 64|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($1)) + 68|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($1)) + 72|0);
 HEAP32[$13>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN8tinyxml210XMLPrinterC2EP8_IO_FILEbi($this,$file,$compact,$depth) {
 $this = $this|0;
 $file = $file|0;
 $compact = $compact|0;
 $depth = $depth|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $entityValue = 0, $i = 0, $i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $file;
 $6 = $compact&1;
 $2 = $6;
 $3 = $depth;
 $7 = $0;
 __ZN8tinyxml210XMLVisitorC2Ev($7);
 $8 = 1740;
 HEAP32[$7>>2] = $8;
 $9 = ((($7)) + 4|0);
 HEAP8[$9>>0] = 0;
 $10 = ((($7)) + 8|0);
 __THREW__ = 0;
 invoke_vi(380,($10|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $37 = ___cxa_find_matching_catch()|0;
  $38 = tempRet0;
  $4 = $37;
  $5 = $38;
  __ZN8tinyxml210XMLVisitorD2Ev($7);
  $64 = $4;
  $65 = $5;
  ___resumeException($64|0);
  // unreachable;
 }
 $13 = ((($7)) + 60|0);
 HEAP8[$13>>0] = 1;
 $14 = ((($7)) + 64|0);
 $15 = $1;
 HEAP32[$14>>2] = $15;
 $16 = ((($7)) + 68|0);
 $17 = $3;
 HEAP32[$16>>2] = $17;
 $18 = ((($7)) + 72|0);
 HEAP32[$18>>2] = -1;
 $19 = ((($7)) + 76|0);
 HEAP8[$19>>0] = 1;
 $20 = ((($7)) + 77|0);
 $21 = $2;
 $22 = $21&1;
 $23 = $22&1;
 HEAP8[$20>>0] = $23;
 $24 = ((($7)) + 208|0);
 __THREW__ = 0;
 invoke_vi(381,($24|0));
 $25 = __THREW__; __THREW__ = 0;
 $26 = $25&1;
 do {
  if ($26) {
   $39 = ___cxa_find_matching_catch()|0;
   $40 = tempRet0;
   $4 = $39;
   $5 = $40;
  } else {
   $i = 0;
   while(1) {
    $27 = $i;
    $28 = ($27|0)<(64);
    if (!($28)) {
     break;
    }
    $29 = $i;
    $30 = ((($7)) + 78|0);
    $31 = (($30) + ($29)|0);
    HEAP8[$31>>0] = 0;
    $32 = $i;
    $33 = ((($7)) + 142|0);
    $34 = (($33) + ($32)|0);
    HEAP8[$34>>0] = 0;
    $35 = $i;
    $36 = (($35) + 1)|0;
    $i = $36;
   }
   $i1 = 0;
   while(1) {
    $41 = $i1;
    $42 = ($41|0)<(5);
    if (!($42)) {
     break;
    }
    $43 = $i1;
    $44 = (1144 + (($43*12)|0)|0);
    $45 = ((($44)) + 8|0);
    $46 = HEAP8[$45>>0]|0;
    $entityValue = $46;
    $47 = $entityValue;
    $48 = $47&255;
    $49 = ((($7)) + 78|0);
    $50 = (($49) + ($48)|0);
    HEAP8[$50>>0] = 1;
    $51 = $i1;
    $52 = (($51) + 1)|0;
    $i1 = $52;
   }
   $53 = ((($7)) + 142|0);
   $54 = ((($53)) + 38|0);
   HEAP8[$54>>0] = 1;
   $55 = ((($7)) + 142|0);
   $56 = ((($55)) + 60|0);
   HEAP8[$56>>0] = 1;
   $57 = ((($7)) + 142|0);
   $58 = ((($57)) + 62|0);
   HEAP8[$58>>0] = 1;
   $59 = ((($7)) + 208|0);
   __THREW__ = 0;
   invoke_vii(382,($59|0),0);
   $60 = __THREW__; __THREW__ = 0;
   $61 = $60&1;
   if ($61) {
    $62 = ___cxa_find_matching_catch()|0;
    $63 = tempRet0;
    $4 = $62;
    $5 = $63;
    __ZN8tinyxml28DynArrayIcLi20EED2Ev($24);
    break;
   } else {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 __ZN8tinyxml28DynArrayIPKcLi10EED2Ev($10);
 __ZN8tinyxml210XMLVisitorD2Ev($7);
 $64 = $4;
 $65 = $5;
 ___resumeException($64|0);
 // unreachable;
}
function __ZN8tinyxml210XMLVisitorC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 1896;
 HEAP32[$1>>2] = $2;
 STACKTOP = sp;return;
}
function __ZN8tinyxml28DynArrayIPKcLi10EEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 44|0);
 HEAP32[$3>>2] = 10;
 $4 = ((($1)) + 48|0);
 HEAP32[$4>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN8tinyxml28DynArrayIcLi20EEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 24|0);
 HEAP32[$3>>2] = 20;
 $4 = ((($1)) + 28|0);
 HEAP32[$4>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN8tinyxml28DynArrayIcLi20EE4PushEc($this,$t) {
 $this = $this|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $t;
 $2 = $0;
 $3 = ((($2)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 __ZN8tinyxml28DynArrayIcLi20EE14EnsureCapacityEi($2,$5);
 $6 = $1;
 $7 = ((($2)) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 1)|0;
 HEAP32[$7>>2] = $9;
 $10 = HEAP32[$2>>2]|0;
 $11 = (($10) + ($8)|0);
 HEAP8[$11>>0] = $6;
 STACKTOP = sp;return;
}
function __ZN8tinyxml28DynArrayIcLi20EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($1)) + 4|0);
 $4 = ($2|0)!=($3|0);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   __ZdaPv($5);
  }
 }
 STACKTOP = sp;return;
}
function __ZN8tinyxml28DynArrayIPKcLi10EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($1)) + 4|0);
 $4 = ($2|0)!=($3|0);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   __ZdaPv($5);
  }
 }
 STACKTOP = sp;return;
}
function __ZN8tinyxml210XMLPrinter5PrintEPKcz($this,$format,$varargs) {
 $this = $this|0;
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $len = 0;
 var $p = 0, $va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $va = sp + 8|0;
 $0 = $this;
 $1 = $format;
 $2 = $0;
 HEAP32[$va>>2] = $varargs;
 $3 = ((($2)) + 64|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = ((($2)) + 64|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $1;
  (_vfprintf($7,$8,$va)|0);
  STACKTOP = sp;return;
 } else {
  $9 = $1;
  $10 = (__ZL15TIXML_VSCPRINTFPKcPi($9,$va)|0);
  $len = $10;
  HEAP32[$va>>2] = $varargs;
  $11 = ((($2)) + 208|0);
  $12 = $len;
  $13 = (__ZN8tinyxml28DynArrayIcLi20EE7PushArrEi($11,$12)|0);
  $14 = ((($13)) + -1|0);
  $p = $14;
  $15 = $p;
  $16 = $len;
  $17 = (($16) + 1)|0;
  $18 = $1;
  (_vsnprintf($15,$17,$18,$va)|0);
  STACKTOP = sp;return;
 }
}
function __ZL15TIXML_VSCPRINTFPKcPi($format,$va) {
 $format = $format|0;
 $va = $va|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $format;
 $1 = $va;
 $2 = $0;
 $3 = $1;
 $4 = (_vsnprintf(0,0,$2,$3)|0);
 $len = $4;
 $5 = $len;
 STACKTOP = sp;return ($5|0);
}
function __ZN8tinyxml28DynArrayIcLi20EE7PushArrEi($this,$count) {
 $this = $this|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $count;
 $2 = $0;
 $3 = ((($2)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = (($4) + ($5))|0;
 __ZN8tinyxml28DynArrayIcLi20EE14EnsureCapacityEi($2,$6);
 $7 = ((($2)) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$2>>2]|0;
 $10 = (($9) + ($8)|0);
 $ret = $10;
 $11 = $1;
 $12 = ((($2)) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + ($11))|0;
 HEAP32[$12>>2] = $14;
 $15 = $ret;
 STACKTOP = sp;return ($15|0);
}
function __ZN8tinyxml210XMLPrinter10PrintSpaceEi($this,$depth) {
 $this = $this|0;
 $depth = $depth|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $depth;
 $2 = $0;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = $1;
  $5 = ($3|0)<($4|0);
  if (!($5)) {
   break;
  }
  __ZN8tinyxml210XMLPrinter5PrintEPKcz($2,6969,$vararg_buffer);
  $6 = $i;
  $7 = (($6) + 1)|0;
  $i = $7;
 }
 STACKTOP = sp;return;
}
function __ZN8tinyxml210XMLPrinter11PrintStringEPKcb($this,$p,$restricted) {
 $this = $this|0;
 $p = $p|0;
 $restricted = $restricted|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $delta = 0, $entityPatternPrinted = 0, $flag = 0, $i = 0, $q = 0;
 var $toPrint = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $p;
 $3 = $restricted&1;
 $2 = $3;
 $4 = $0;
 $5 = $1;
 $q = $5;
 $6 = ((($4)) + 76|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&1;
 L1: do {
  if ($8) {
   $9 = $2;
   $10 = $9&1;
   $11 = ((($4)) + 142|0);
   $12 = ((($4)) + 78|0);
   $13 = $10 ? $11 : $12;
   $flag = $13;
   while(1) {
    $14 = $q;
    $15 = HEAP8[$14>>0]|0;
    $16 = ($15<<24>>24)!=(0);
    if (!($16)) {
     break L1;
    }
    $17 = $q;
    $18 = HEAP8[$17>>0]|0;
    $19 = $18 << 24 >> 24;
    $20 = ($19|0)>(0);
    if ($20) {
     $21 = $q;
     $22 = HEAP8[$21>>0]|0;
     $23 = $22 << 24 >> 24;
     $24 = ($23|0)<(64);
     if ($24) {
      $25 = $q;
      $26 = HEAP8[$25>>0]|0;
      $27 = $26&255;
      $28 = $flag;
      $29 = (($28) + ($27)|0);
      $30 = HEAP8[$29>>0]|0;
      $31 = $30&1;
      if ($31) {
       while(1) {
        $32 = $1;
        $33 = $q;
        $34 = ($32>>>0)<($33>>>0);
        if (!($34)) {
         break;
        }
        $35 = $q;
        $36 = $1;
        $37 = $35;
        $38 = $36;
        $39 = (($37) - ($38))|0;
        $delta = $39;
        $40 = $delta;
        $41 = (2147483647)<($40>>>0);
        $42 = $delta;
        $43 = $41 ? 2147483647 : $42;
        $toPrint = $43;
        $44 = $toPrint;
        $45 = $1;
        HEAP32[$vararg_buffer>>2] = $44;
        $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
        HEAP32[$vararg_ptr1>>2] = $45;
        __ZN8tinyxml210XMLPrinter5PrintEPKcz($4,6974,$vararg_buffer);
        $46 = $toPrint;
        $47 = $1;
        $48 = (($47) + ($46)|0);
        $1 = $48;
       }
       $entityPatternPrinted = 0;
       $i = 0;
       while(1) {
        $49 = $i;
        $50 = ($49|0)<(5);
        if (!($50)) {
         break;
        }
        $51 = $i;
        $52 = (1144 + (($51*12)|0)|0);
        $53 = ((($52)) + 8|0);
        $54 = HEAP8[$53>>0]|0;
        $55 = $54 << 24 >> 24;
        $56 = $q;
        $57 = HEAP8[$56>>0]|0;
        $58 = $57 << 24 >> 24;
        $59 = ($55|0)==($58|0);
        $60 = $i;
        if ($59) {
         label = 12;
         break;
        }
        $63 = (($60) + 1)|0;
        $i = $63;
       }
       if ((label|0) == 12) {
        label = 0;
        $61 = (1144 + (($60*12)|0)|0);
        $62 = HEAP32[$61>>2]|0;
        HEAP32[$vararg_buffer2>>2] = $62;
        __ZN8tinyxml210XMLPrinter5PrintEPKcz($4,6979,$vararg_buffer2);
        $entityPatternPrinted = 1;
       }
       $64 = $1;
       $65 = ((($64)) + 1|0);
       $1 = $65;
      }
     }
    }
    $66 = $q;
    $67 = ((($66)) + 1|0);
    $q = $67;
   }
  }
 } while(0);
 $68 = ((($4)) + 76|0);
 $69 = HEAP8[$68>>0]|0;
 $70 = $69&1;
 if ($70) {
  $71 = $1;
  $72 = $q;
  $73 = ($71>>>0)<($72>>>0);
  if (!($73)) {
   STACKTOP = sp;return;
  }
 }
 $74 = $1;
 HEAP32[$vararg_buffer5>>2] = $74;
 __ZN8tinyxml210XMLPrinter5PrintEPKcz($4,6966,$vararg_buffer5);
 STACKTOP = sp;return;
}
function __ZN8tinyxml210XMLPrinter10PushHeaderEbb($this,$writeBOM,$writeDec) {
 $this = $this|0;
 $writeBOM = $writeBOM|0;
 $writeDec = $writeDec|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $3 = $writeBOM&1;
 $1 = $3;
 $4 = $writeDec&1;
 $2 = $4;
 $5 = $0;
 $6 = $1;
 $7 = $6&1;
 if ($7) {
  HEAP32[$vararg_buffer>>2] = 6984;
  __ZN8tinyxml210XMLPrinter5PrintEPKcz($5,6966,$vararg_buffer);
 }
 $8 = $2;
 $9 = $8&1;
 if (!($9)) {
  STACKTOP = sp;return;
 }
 __ZN8tinyxml210XMLPrinter15PushDeclarationEPKc($5,6988);
 STACKTOP = sp;return;
}
function __ZN8tinyxml210XMLPrinter15PushDeclarationEPKc($this,$value) {
 $this = $this|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $value;
 $2 = $0;
 __ZN8tinyxml210XMLPrinter23SealElementIfJustOpenedEv($2);
 $3 = ((($2)) + 72|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<(0);
 if ($5) {
  $6 = ((($2)) + 60|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&1;
  if (!($8)) {
   $9 = ((($2)) + 77|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&1;
   if (!($11)) {
    __ZN8tinyxml210XMLPrinter5PrintEPKcz($2,7006,$vararg_buffer);
    $12 = HEAP32[$2>>2]|0;
    $13 = ((($12)) + 48|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($2)) + 68|0);
    $16 = HEAP32[$15>>2]|0;
    FUNCTION_TABLE_vii[$14 & 1023]($2,$16);
   }
  }
 }
 $17 = ((($2)) + 60|0);
 HEAP8[$17>>0] = 0;
 $18 = $1;
 HEAP32[$vararg_buffer1>>2] = $18;
 __ZN8tinyxml210XMLPrinter5PrintEPKcz($2,7054,$vararg_buffer1);
 STACKTOP = sp;return;
}
function __ZN8tinyxml210XMLPrinter11OpenElementEPKcb($this,$name,$compactMode) {
 $this = $this|0;
 $name = $name|0;
 $compactMode = $compactMode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $name;
 $3 = $compactMode&1;
 $2 = $3;
 $4 = $0;
 __ZN8tinyxml210XMLPrinter23SealElementIfJustOpenedEv($4);
 $5 = ((($4)) + 8|0);
 $6 = $1;
 __ZN8tinyxml28DynArrayIPKcLi10EE4PushES2_($5,$6);
 $7 = ((($4)) + 72|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)<(0);
 if ($9) {
  $10 = ((($4)) + 60|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&1;
  if (!($12)) {
   $13 = $2;
   $14 = $13&1;
   if (!($14)) {
    __ZN8tinyxml210XMLPrinter5PrintEPKcz($4,7006,$vararg_buffer);
   }
  }
 }
 $15 = $2;
 $16 = $15&1;
 if (!($16)) {
  $17 = HEAP32[$4>>2]|0;
  $18 = ((($17)) + 48|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($4)) + 68|0);
  $21 = HEAP32[$20>>2]|0;
  FUNCTION_TABLE_vii[$19 & 1023]($4,$21);
 }
 $22 = $1;
 HEAP32[$vararg_buffer1>>2] = $22;
 __ZN8tinyxml210XMLPrinter5PrintEPKcz($4,7008,$vararg_buffer1);
 $23 = ((($4)) + 4|0);
 HEAP8[$23>>0] = 1;
 $24 = ((($4)) + 60|0);
 HEAP8[$24>>0] = 0;
 $25 = ((($4)) + 68|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) + 1)|0;
 HEAP32[$25>>2] = $27;
 STACKTOP = sp;return;
}
function __ZN8tinyxml210XMLPrinter23SealElementIfJustOpenedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&1;
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = ((($1)) + 4|0);
 HEAP8[$5>>0] = 0;
 __ZN8tinyxml210XMLPrinter5PrintEPKcz($1,6924,$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZN8tinyxml28DynArrayIPKcLi10EE4PushES2_($this,$t) {
 $this = $this|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $t;
 $2 = $0;
 $3 = ((($2)) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 __ZN8tinyxml28DynArrayIPKcLi10EE14EnsureCapacityEi($2,$5);
 $6 = $1;
 $7 = ((($2)) + 48|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 1)|0;
 HEAP32[$7>>2] = $9;
 $10 = HEAP32[$2>>2]|0;
 $11 = (($10) + ($8<<2)|0);
 HEAP32[$11>>2] = $6;
 STACKTOP = sp;return;
}
function __ZN8tinyxml210XMLPrinter13PushAttributeEPKcS2_($this,$name,$value) {
 $this = $this|0;
 $name = $name|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $name;
 $2 = $value;
 $3 = $0;
 $4 = $1;
 HEAP32[$vararg_buffer>>2] = $4;
 __ZN8tinyxml210XMLPrinter5PrintEPKcz($3,7012,$vararg_buffer);
 $5 = $2;
 __ZN8tinyxml210XMLPrinter11PrintStringEPKcb($3,$5,0);
 __ZN8tinyxml210XMLPrinter5PrintEPKcz($3,7018,$vararg_buffer1);
 STACKTOP = sp;return;
}
function __ZN8tinyxml210XMLPrinter12CloseElementEb($this,$compactMode) {
 $this = $this|0;
 $compactMode = $compactMode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $name = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $this;
 $2 = $compactMode&1;
 $1 = $2;
 $3 = $0;
 $4 = ((($3)) + 68|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 HEAP32[$4>>2] = $6;
 $7 = ((($3)) + 8|0);
 $8 = (__ZN8tinyxml28DynArrayIPKcLi10EE3PopEv($7)|0);
 $name = $8;
 $9 = ((($3)) + 4|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&1;
 if ($11) {
  __ZN8tinyxml210XMLPrinter5PrintEPKcz($3,7020,$vararg_buffer);
 } else {
  $12 = ((($3)) + 72|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)<(0);
  if ($14) {
   $15 = $1;
   $16 = $15&1;
   if (!($16)) {
    __ZN8tinyxml210XMLPrinter5PrintEPKcz($3,7006,$vararg_buffer1);
    $17 = HEAP32[$3>>2]|0;
    $18 = ((($17)) + 48|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ((($3)) + 68|0);
    $21 = HEAP32[$20>>2]|0;
    FUNCTION_TABLE_vii[$19 & 1023]($3,$21);
   }
  }
  $22 = $name;
  HEAP32[$vararg_buffer3>>2] = $22;
  __ZN8tinyxml210XMLPrinter5PrintEPKcz($3,7023,$vararg_buffer3);
 }
 $23 = ((($3)) + 72|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($3)) + 68|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($24|0)==($26|0);
 if ($27) {
  $28 = ((($3)) + 72|0);
  HEAP32[$28>>2] = -1;
 }
 $29 = ((($3)) + 68|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(0);
 if (!($31)) {
  $34 = ((($3)) + 4|0);
  HEAP8[$34>>0] = 0;
  STACKTOP = sp;return;
 }
 $32 = $1;
 $33 = $32&1;
 if ($33) {
  $34 = ((($3)) + 4|0);
  HEAP8[$34>>0] = 0;
  STACKTOP = sp;return;
 }
 __ZN8tinyxml210XMLPrinter5PrintEPKcz($3,7006,$vararg_buffer5);
 $34 = ((($3)) + 4|0);
 HEAP8[$34>>0] = 0;
 STACKTOP = sp;return;
}
function __ZN8tinyxml28DynArrayIPKcLi10EE3PopEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -1)|0;
 HEAP32[$2>>2] = $4;
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + ($4<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 STACKTOP = sp;return ($7|0);
}
function __ZN8tinyxml210XMLPrinter8PushTextEPKcb($this,$text,$cdata) {
 $this = $this|0;
 $text = $text|0;
 $cdata = $cdata|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $text;
 $3 = $cdata&1;
 $2 = $3;
 $4 = $0;
 $5 = ((($4)) + 68|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) - 1)|0;
 $8 = ((($4)) + 72|0);
 HEAP32[$8>>2] = $7;
 __ZN8tinyxml210XMLPrinter23SealElementIfJustOpenedEv($4);
 $9 = $2;
 $10 = $9&1;
 $11 = $1;
 if ($10) {
  HEAP32[$vararg_buffer>>2] = $11;
  __ZN8tinyxml210XMLPrinter5PrintEPKcz($4,7029,$vararg_buffer);
  STACKTOP = sp;return;
 } else {
  __ZN8tinyxml210XMLPrinter11PrintStringEPKcb($4,$11,1);
  STACKTOP = sp;return;
 }
}
function __ZN8tinyxml210XMLPrinter11PushCommentEPKc($this,$comment) {
 $this = $this|0;
 $comment = $comment|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $comment;
 $2 = $0;
 __ZN8tinyxml210XMLPrinter23SealElementIfJustOpenedEv($2);
 $3 = ((($2)) + 72|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<(0);
 if ($5) {
  $6 = ((($2)) + 60|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&1;
  if (!($8)) {
   $9 = ((($2)) + 77|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&1;
   if (!($11)) {
    __ZN8tinyxml210XMLPrinter5PrintEPKcz($2,7006,$vararg_buffer);
    $12 = HEAP32[$2>>2]|0;
    $13 = ((($12)) + 48|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($2)) + 68|0);
    $16 = HEAP32[$15>>2]|0;
    FUNCTION_TABLE_vii[$14 & 1023]($2,$16);
   }
  }
 }
 $17 = ((($2)) + 60|0);
 HEAP8[$17>>0] = 0;
 $18 = $1;
 HEAP32[$vararg_buffer1>>2] = $18;
 __ZN8tinyxml210XMLPrinter5PrintEPKcz($2,7044,$vararg_buffer1);
 STACKTOP = sp;return;
}
function __ZN8tinyxml210XMLPrinter11PushUnknownEPKc($this,$value) {
 $this = $this|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $value;
 $2 = $0;
 __ZN8tinyxml210XMLPrinter23SealElementIfJustOpenedEv($2);
 $3 = ((($2)) + 72|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<(0);
 if ($5) {
  $6 = ((($2)) + 60|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&1;
  if (!($8)) {
   $9 = ((($2)) + 77|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&1;
   if (!($11)) {
    __ZN8tinyxml210XMLPrinter5PrintEPKcz($2,7006,$vararg_buffer);
    $12 = HEAP32[$2>>2]|0;
    $13 = ((($12)) + 48|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($2)) + 68|0);
    $16 = HEAP32[$15>>2]|0;
    FUNCTION_TABLE_vii[$14 & 1023]($2,$16);
   }
  }
 }
 $17 = ((($2)) + 60|0);
 HEAP8[$17>>0] = 0;
 $18 = $1;
 HEAP32[$vararg_buffer1>>2] = $18;
 __ZN8tinyxml210XMLPrinter5PrintEPKcz($2,7061,$vararg_buffer1);
 STACKTOP = sp;return;
}
function __ZN8tinyxml210XMLPrinter10VisitEnterERKNS_11XMLDocumentE($this,$doc) {
 $this = $this|0;
 $doc = $doc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $doc;
 $2 = $0;
 $3 = $1;
 $4 = (__ZNK8tinyxml211XMLDocument15ProcessEntitiesEv($3)|0);
 $5 = ((($2)) + 76|0);
 $6 = $4&1;
 HEAP8[$5>>0] = $6;
 $7 = $1;
 $8 = (__ZNK8tinyxml211XMLDocument6HasBOMEv($7)|0);
 if (!($8)) {
  STACKTOP = sp;return 1;
 }
 __ZN8tinyxml210XMLPrinter10PushHeaderEbb($2,1,0);
 STACKTOP = sp;return 1;
}
function __ZNK8tinyxml211XMLDocument6HasBOMEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 48|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&1;
 STACKTOP = sp;return ($4|0);
}
function __ZN8tinyxml210XMLPrinter10VisitEnterERKNS_10XMLElementEPKNS_12XMLAttributeE($this,$element,$attribute) {
 $this = $this|0;
 $element = $element|0;
 $attribute = $attribute|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $compactMode = 0, $parentElem = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $element;
 $2 = $attribute;
 $3 = $0;
 $parentElem = 0;
 $4 = $1;
 $5 = (__ZNK8tinyxml27XMLNode6ParentEv($4)|0);
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $1;
  $8 = (__ZNK8tinyxml27XMLNode6ParentEv($7)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 24|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (FUNCTION_TABLE_ii[$11 & 1023]($8)|0);
  $parentElem = $12;
 }
 $13 = $parentElem;
 $14 = ($13|0)!=(0|0);
 if ($14) {
  $15 = HEAP32[$3>>2]|0;
  $16 = ((($15)) + 44|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $parentElem;
  $19 = (FUNCTION_TABLE_iii[$17 & 1023]($3,$18)|0);
  $24 = $19;
 } else {
  $20 = ((($3)) + 77|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&1;
  $24 = $22;
 }
 $23 = $24&1;
 $compactMode = $23;
 $25 = $1;
 $26 = (__ZNK8tinyxml210XMLElement4NameEv($25)|0);
 $27 = $compactMode;
 $28 = $27&1;
 __ZN8tinyxml210XMLPrinter11OpenElementEPKcb($3,$26,$28);
 while(1) {
  $29 = $2;
  $30 = ($29|0)!=(0|0);
  if (!($30)) {
   break;
  }
  $31 = $2;
  $32 = (__ZNK8tinyxml212XMLAttribute4NameEv($31)|0);
  $33 = $2;
  $34 = (__ZNK8tinyxml212XMLAttribute5ValueEv($33)|0);
  __ZN8tinyxml210XMLPrinter13PushAttributeEPKcS2_($3,$32,$34);
  $35 = $2;
  $36 = (__ZNK8tinyxml212XMLAttribute4NextEv($35)|0);
  $2 = $36;
 }
 STACKTOP = sp;return 1;
}
function __ZNK8tinyxml27XMLNode6ParentEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN8tinyxml210XMLPrinter9VisitExitERKNS_10XMLElementE($this,$element) {
 $this = $this|0;
 $element = $element|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $element;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$2>>2]|0;
 $7 = ((($6)) + 44|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 $10 = (FUNCTION_TABLE_iii[$8 & 1023]($2,$9)|0);
 FUNCTION_TABLE_vii[$5 & 1023]($2,$10);
 STACKTOP = sp;return 1;
}
function __ZN8tinyxml210XMLPrinter5VisitERKNS_7XMLTextE($this,$text) {
 $this = $this|0;
 $text = $text|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $text;
 $2 = $0;
 $3 = $1;
 $4 = (__ZNK8tinyxml27XMLNode5ValueEv($3)|0);
 $5 = $1;
 $6 = (__ZNK8tinyxml27XMLText5CDataEv($5)|0);
 __ZN8tinyxml210XMLPrinter8PushTextEPKcb($2,$4,$6);
 STACKTOP = sp;return 1;
}
function __ZN8tinyxml210XMLPrinter5VisitERKNS_10XMLCommentE($this,$comment) {
 $this = $this|0;
 $comment = $comment|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $comment;
 $2 = $0;
 $3 = $1;
 $4 = (__ZNK8tinyxml27XMLNode5ValueEv($3)|0);
 __ZN8tinyxml210XMLPrinter11PushCommentEPKc($2,$4);
 STACKTOP = sp;return 1;
}
function __ZN8tinyxml210XMLPrinter5VisitERKNS_14XMLDeclarationE($this,$declaration) {
 $this = $this|0;
 $declaration = $declaration|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $declaration;
 $2 = $0;
 $3 = $1;
 $4 = (__ZNK8tinyxml27XMLNode5ValueEv($3)|0);
 __ZN8tinyxml210XMLPrinter15PushDeclarationEPKc($2,$4);
 STACKTOP = sp;return 1;
}
function __ZN8tinyxml210XMLPrinter5VisitERKNS_10XMLUnknownE($this,$unknown) {
 $this = $this|0;
 $unknown = $unknown|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $unknown;
 $2 = $0;
 $3 = $1;
 $4 = (__ZNK8tinyxml27XMLNode5ValueEv($3)|0);
 __ZN8tinyxml210XMLPrinter11PushUnknownEPKc($2,$4);
 STACKTOP = sp;return 1;
}
function __ZN8tinyxml27XMLNode9ToElementEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return (0|0);
}
function __ZN8tinyxml27XMLText6ToTextEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN8tinyxml27XMLNode9ToCommentEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return (0|0);
}
function __ZN8tinyxml27XMLNode10ToDocumentEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return (0|0);
}
function __ZN8tinyxml27XMLNode13ToDeclarationEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return (0|0);
}
function __ZN8tinyxml27XMLNode9ToUnknownEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return (0|0);
}
function __ZNK8tinyxml27XMLNode9ToElementEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return (0|0);
}
function __ZNK8tinyxml27XMLText6ToTextEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZNK8tinyxml27XMLNode9ToCommentEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return (0|0);
}
function __ZNK8tinyxml27XMLNode10ToDocumentEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return (0|0);
}
function __ZNK8tinyxml27XMLNode13ToDeclarationEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return (0|0);
}
function __ZNK8tinyxml27XMLNode9ToUnknownEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return (0|0);
}
function __ZN8tinyxml27XMLTextD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8tinyxml27XMLNodeD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN8tinyxml27XMLTextD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8tinyxml27XMLTextD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN8tinyxml210XMLPrinterD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8tinyxml210XMLPrinterD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN8tinyxml210XMLPrinter9VisitExitERKNS_11XMLDocumentE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 STACKTOP = sp;return 1;
}
function __ZN8tinyxml210XMLPrinter11CompactModeERKNS_10XMLElementE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = ((($3)) + 77|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&1;
 STACKTOP = sp;return ($6|0);
}
function __ZN8tinyxml27XMLNode6ToTextEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return (0|0);
}
function __ZNK8tinyxml27XMLNode6ToTextEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return (0|0);
}
function __ZN8tinyxml210XMLComment9ToCommentEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZNK8tinyxml210XMLComment9ToCommentEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN8tinyxml214XMLDeclaration13ToDeclarationEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZNK8tinyxml214XMLDeclaration13ToDeclarationEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN8tinyxml210XMLUnknown9ToUnknownEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZNK8tinyxml210XMLUnknown9ToUnknownEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN8tinyxml210XMLElement9ToElementEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZNK8tinyxml210XMLElement9ToElementEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN8tinyxml211XMLDocument10ToDocumentEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZNK8tinyxml211XMLDocument10ToDocumentEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZNK8tinyxml211XMLDocument12ShallowCloneEPS0_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 STACKTOP = sp;return (0|0);
}
function __ZNK8tinyxml211XMLDocument12ShallowEqualEPKNS_7XMLNodeE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 STACKTOP = sp;return 0;
}
function __ZN8tinyxml27XMLUtil14SkipWhiteSpaceEPKc($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 while(1) {
  $1 = $0;
  $2 = HEAP8[$1>>0]|0;
  $3 = (__ZN8tinyxml27XMLUtil12IsWhiteSpaceEc($2)|0);
  $4 = $0;
  if (!($3)) {
   break;
  }
  $5 = ((($4)) + 1|0);
  $0 = $5;
 }
 STACKTOP = sp;return ($4|0);
}
function __ZN8tinyxml27XMLUtil18IsUTF8ContinuationEc($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 $2 = $1 << 24 >> 24;
 $3 = $2 & 128;
 $4 = ($3|0)!=(0);
 STACKTOP = sp;return ($4|0);
}
function __ZN8tinyxml212XMLAttributeD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 1880;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 16|0);
 __ZN8tinyxml27StrPairD2Ev($3);
 $4 = ((($1)) + 4|0);
 __ZN8tinyxml27StrPairD2Ev($4);
 STACKTOP = sp;return;
}
function __ZN8tinyxml212XMLAttributeD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8tinyxml212XMLAttributeD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN8tinyxml210XMLVisitorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN8tinyxml210XMLVisitorD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8tinyxml210XMLVisitorD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN8tinyxml210XMLVisitor10VisitEnterERKNS_11XMLDocumentE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 STACKTOP = sp;return 1;
}
function __ZN8tinyxml210XMLVisitor9VisitExitERKNS_11XMLDocumentE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 STACKTOP = sp;return 1;
}
function __ZN8tinyxml210XMLVisitor10VisitEnterERKNS_10XMLElementEPKNS_12XMLAttributeE($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $this;
 $3 = $0;
 $4 = $1;
 STACKTOP = sp;return 1;
}
function __ZN8tinyxml210XMLVisitor9VisitExitERKNS_10XMLElementE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 STACKTOP = sp;return 1;
}
function __ZN8tinyxml210XMLVisitor5VisitERKNS_14XMLDeclarationE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 STACKTOP = sp;return 1;
}
function __ZN8tinyxml210XMLVisitor5VisitERKNS_7XMLTextE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 STACKTOP = sp;return 1;
}
function __ZN8tinyxml210XMLVisitor5VisitERKNS_10XMLCommentE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 STACKTOP = sp;return 1;
}
function __ZN8tinyxml210XMLVisitor5VisitERKNS_10XMLUnknownE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 STACKTOP = sp;return 1;
}
function __ZN8tinyxml28DynArrayIcLi20EE14EnsureCapacityEi($this,$cap) {
 $this = $this|0;
 $cap = $cap|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $newAllocated = 0, $newMem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $cap;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)>($5|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = $1;
 $8 = $7<<1;
 $newAllocated = $8;
 $9 = $newAllocated;
 $10 = ($9|0)<(0);
 $11 = $10 ? -1 : $9;
 $12 = (__Znaj($11)|0);
 $newMem = $12;
 $13 = $newMem;
 $14 = HEAP32[$2>>2]|0;
 $15 = ((($2)) + 28|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16;
 _memcpy(($13|0),($14|0),($17|0))|0;
 $18 = HEAP32[$2>>2]|0;
 $19 = ((($2)) + 4|0);
 $20 = ($18|0)!=($19|0);
 if ($20) {
  $21 = HEAP32[$2>>2]|0;
  $22 = ($21|0)==(0|0);
  if (!($22)) {
   __ZdaPv($21);
  }
 }
 $23 = $newMem;
 HEAP32[$2>>2] = $23;
 $24 = $newAllocated;
 $25 = ((($2)) + 24|0);
 HEAP32[$25>>2] = $24;
 STACKTOP = sp;return;
}
function __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi48EE5BlockELi10EE4PushES4_($this,$t) {
 $this = $this|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $t;
 $2 = $0;
 $3 = ((($2)) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi48EE5BlockELi10EE14EnsureCapacityEi($2,$5);
 $6 = $1;
 $7 = ((($2)) + 48|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 1)|0;
 HEAP32[$7>>2] = $9;
 $10 = HEAP32[$2>>2]|0;
 $11 = (($10) + ($8<<2)|0);
 HEAP32[$11>>2] = $6;
 STACKTOP = sp;return;
}
function __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi48EE5BlockELi10EE14EnsureCapacityEi($this,$cap) {
 $this = $this|0;
 $cap = $cap|0;
 var $$arith = 0, $$overflow = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $newAllocated = 0, $newMem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $cap;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)>($5|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = $1;
 $8 = $7<<1;
 $newAllocated = $8;
 $9 = $newAllocated;
 $$arith = $9<<2;
 $$overflow = ($9>>>0)>(1073741823);
 $10 = $$overflow ? -1 : $$arith;
 $11 = (__Znaj($10)|0);
 $newMem = $11;
 $12 = $newMem;
 $13 = HEAP32[$2>>2]|0;
 $14 = ((($2)) + 48|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15<<2;
 _memcpy(($12|0),($13|0),($16|0))|0;
 $17 = HEAP32[$2>>2]|0;
 $18 = ((($2)) + 4|0);
 $19 = ($17|0)!=($18|0);
 if ($19) {
  $20 = HEAP32[$2>>2]|0;
  $21 = ($20|0)==(0|0);
  if (!($21)) {
   __ZdaPv($20);
  }
 }
 $22 = $newMem;
 HEAP32[$2>>2] = $22;
 $23 = $newAllocated;
 $24 = ((($2)) + 44|0);
 HEAP32[$24>>2] = $23;
 STACKTOP = sp;return;
}
function __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EE4PushES4_($this,$t) {
 $this = $this|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $t;
 $2 = $0;
 $3 = ((($2)) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EE14EnsureCapacityEi($2,$5);
 $6 = $1;
 $7 = ((($2)) + 48|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 1)|0;
 HEAP32[$7>>2] = $9;
 $10 = HEAP32[$2>>2]|0;
 $11 = (($10) + ($8<<2)|0);
 HEAP32[$11>>2] = $6;
 STACKTOP = sp;return;
}
function __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EE14EnsureCapacityEi($this,$cap) {
 $this = $this|0;
 $cap = $cap|0;
 var $$arith = 0, $$overflow = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $newAllocated = 0, $newMem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $cap;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)>($5|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = $1;
 $8 = $7<<1;
 $newAllocated = $8;
 $9 = $newAllocated;
 $$arith = $9<<2;
 $$overflow = ($9>>>0)>(1073741823);
 $10 = $$overflow ? -1 : $$arith;
 $11 = (__Znaj($10)|0);
 $newMem = $11;
 $12 = $newMem;
 $13 = HEAP32[$2>>2]|0;
 $14 = ((($2)) + 48|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15<<2;
 _memcpy(($12|0),($13|0),($16|0))|0;
 $17 = HEAP32[$2>>2]|0;
 $18 = ((($2)) + 4|0);
 $19 = ($17|0)!=($18|0);
 if ($19) {
  $20 = HEAP32[$2>>2]|0;
  $21 = ($20|0)==(0|0);
  if (!($21)) {
   __ZdaPv($20);
  }
 }
 $22 = $newMem;
 HEAP32[$2>>2] = $22;
 $23 = $newAllocated;
 $24 = ((($2)) + 44|0);
 HEAP32[$24>>2] = $23;
 STACKTOP = sp;return;
}
function __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EE4PushES4_($this,$t) {
 $this = $this|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $t;
 $2 = $0;
 $3 = ((($2)) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EE14EnsureCapacityEi($2,$5);
 $6 = $1;
 $7 = ((($2)) + 48|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 1)|0;
 HEAP32[$7>>2] = $9;
 $10 = HEAP32[$2>>2]|0;
 $11 = (($10) + ($8<<2)|0);
 HEAP32[$11>>2] = $6;
 STACKTOP = sp;return;
}
function __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EE14EnsureCapacityEi($this,$cap) {
 $this = $this|0;
 $cap = $cap|0;
 var $$arith = 0, $$overflow = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $newAllocated = 0, $newMem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $cap;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)>($5|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = $1;
 $8 = $7<<1;
 $newAllocated = $8;
 $9 = $newAllocated;
 $$arith = $9<<2;
 $$overflow = ($9>>>0)>(1073741823);
 $10 = $$overflow ? -1 : $$arith;
 $11 = (__Znaj($10)|0);
 $newMem = $11;
 $12 = $newMem;
 $13 = HEAP32[$2>>2]|0;
 $14 = ((($2)) + 48|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15<<2;
 _memcpy(($12|0),($13|0),($16|0))|0;
 $17 = HEAP32[$2>>2]|0;
 $18 = ((($2)) + 4|0);
 $19 = ($17|0)!=($18|0);
 if ($19) {
  $20 = HEAP32[$2>>2]|0;
  $21 = ($20|0)==(0|0);
  if (!($21)) {
   __ZdaPv($20);
  }
 }
 $22 = $newMem;
 HEAP32[$2>>2] = $22;
 $23 = $newAllocated;
 $24 = ((($2)) + 44|0);
 HEAP32[$24>>2] = $23;
 STACKTOP = sp;return;
}
function __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi36EE5BlockELi10EE4PushES4_($this,$t) {
 $this = $this|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $t;
 $2 = $0;
 $3 = ((($2)) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi36EE5BlockELi10EE14EnsureCapacityEi($2,$5);
 $6 = $1;
 $7 = ((($2)) + 48|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 1)|0;
 HEAP32[$7>>2] = $9;
 $10 = HEAP32[$2>>2]|0;
 $11 = (($10) + ($8<<2)|0);
 HEAP32[$11>>2] = $6;
 STACKTOP = sp;return;
}
function __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi36EE5BlockELi10EE14EnsureCapacityEi($this,$cap) {
 $this = $this|0;
 $cap = $cap|0;
 var $$arith = 0, $$overflow = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $newAllocated = 0, $newMem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $cap;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)>($5|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = $1;
 $8 = $7<<1;
 $newAllocated = $8;
 $9 = $newAllocated;
 $$arith = $9<<2;
 $$overflow = ($9>>>0)>(1073741823);
 $10 = $$overflow ? -1 : $$arith;
 $11 = (__Znaj($10)|0);
 $newMem = $11;
 $12 = $newMem;
 $13 = HEAP32[$2>>2]|0;
 $14 = ((($2)) + 48|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15<<2;
 _memcpy(($12|0),($13|0),($16|0))|0;
 $17 = HEAP32[$2>>2]|0;
 $18 = ((($2)) + 4|0);
 $19 = ($17|0)!=($18|0);
 if ($19) {
  $20 = HEAP32[$2>>2]|0;
  $21 = ($20|0)==(0|0);
  if (!($21)) {
   __ZdaPv($20);
  }
 }
 $22 = $newMem;
 HEAP32[$2>>2] = $22;
 $23 = $newAllocated;
 $24 = ((($2)) + 44|0);
 HEAP32[$24>>2] = $23;
 STACKTOP = sp;return;
}
function __ZN8tinyxml27MemPoolC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 1980;
 HEAP32[$1>>2] = $2;
 STACKTOP = sp;return;
}
function __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 44|0);
 HEAP32[$3>>2] = 10;
 $4 = ((($1)) + 48|0);
 HEAP32[$4>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN8tinyxml28MemPoolTILi56EED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8tinyxml28MemPoolTILi56EED2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNK8tinyxml28MemPoolTILi56EE8ItemSizeEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 56;
}
function __ZN8tinyxml28MemPoolTILi56EE4FreeEPv($this,$mem) {
 $this = $this|0;
 $mem = $mem|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $chunk = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $mem;
 $2 = $0;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = ((($2)) + 60|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + -1)|0;
 HEAP32[$5>>2] = $7;
 $8 = $1;
 $chunk = $8;
 $9 = ((($2)) + 56|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $chunk;
 HEAP32[$11>>2] = $10;
 $12 = $chunk;
 $13 = ((($2)) + 56|0);
 HEAP32[$13>>2] = $12;
 STACKTOP = sp;return;
}
function __ZN8tinyxml28MemPoolTILi56EE10SetTrackedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -1)|0;
 HEAP32[$2>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN8tinyxml27MemPoolD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN8tinyxml27MemPoolD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8tinyxml27MemPoolD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi36EE5BlockELi10EEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 44|0);
 HEAP32[$3>>2] = 10;
 $4 = ((($1)) + 48|0);
 HEAP32[$4>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN8tinyxml28MemPoolTILi36EED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8tinyxml28MemPoolTILi36EED2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNK8tinyxml28MemPoolTILi36EE8ItemSizeEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 36;
}
function __ZN8tinyxml28MemPoolTILi36EE4FreeEPv($this,$mem) {
 $this = $this|0;
 $mem = $mem|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $chunk = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $mem;
 $2 = $0;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = ((($2)) + 60|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + -1)|0;
 HEAP32[$5>>2] = $7;
 $8 = $1;
 $chunk = $8;
 $9 = ((($2)) + 56|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $chunk;
 HEAP32[$11>>2] = $10;
 $12 = $chunk;
 $13 = ((($2)) + 56|0);
 HEAP32[$13>>2] = $12;
 STACKTOP = sp;return;
}
function __ZN8tinyxml28MemPoolTILi36EE10SetTrackedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -1)|0;
 HEAP32[$2>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 44|0);
 HEAP32[$3>>2] = 10;
 $4 = ((($1)) + 48|0);
 HEAP32[$4>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN8tinyxml28MemPoolTILi52EED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8tinyxml28MemPoolTILi52EED2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNK8tinyxml28MemPoolTILi52EE8ItemSizeEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 52;
}
function __ZN8tinyxml28MemPoolTILi52EE4FreeEPv($this,$mem) {
 $this = $this|0;
 $mem = $mem|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $chunk = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $mem;
 $2 = $0;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = ((($2)) + 60|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + -1)|0;
 HEAP32[$5>>2] = $7;
 $8 = $1;
 $chunk = $8;
 $9 = ((($2)) + 56|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $chunk;
 HEAP32[$11>>2] = $10;
 $12 = $chunk;
 $13 = ((($2)) + 56|0);
 HEAP32[$13>>2] = $12;
 STACKTOP = sp;return;
}
function __ZN8tinyxml28MemPoolTILi52EE10SetTrackedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -1)|0;
 HEAP32[$2>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi48EE5BlockELi10EEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 44|0);
 HEAP32[$3>>2] = 10;
 $4 = ((($1)) + 48|0);
 HEAP32[$4>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN8tinyxml28MemPoolTILi48EED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8tinyxml28MemPoolTILi48EED2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNK8tinyxml28MemPoolTILi48EE8ItemSizeEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 48;
}
function __ZN8tinyxml28MemPoolTILi48EE4FreeEPv($this,$mem) {
 $this = $this|0;
 $mem = $mem|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $chunk = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $mem;
 $2 = $0;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = ((($2)) + 60|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + -1)|0;
 HEAP32[$5>>2] = $7;
 $8 = $1;
 $chunk = $8;
 $9 = ((($2)) + 56|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $chunk;
 HEAP32[$11>>2] = $10;
 $12 = $chunk;
 $13 = ((($2)) + 56|0);
 HEAP32[$13>>2] = $12;
 STACKTOP = sp;return;
}
function __ZN8tinyxml28MemPoolTILi48EE10SetTrackedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -1)|0;
 HEAP32[$2>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($1)) + 4|0);
 $4 = ($2|0)!=($3|0);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   __ZdaPv($5);
  }
 }
 STACKTOP = sp;return;
}
function __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi36EE5BlockELi10EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($1)) + 4|0);
 $4 = ($2|0)!=($3|0);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   __ZdaPv($5);
  }
 }
 STACKTOP = sp;return;
}
function __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($1)) + 4|0);
 $4 = ($2|0)!=($3|0);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   __ZdaPv($5);
  }
 }
 STACKTOP = sp;return;
}
function __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi48EE5BlockELi10EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($1)) + 4|0);
 $4 = ($2|0)!=($3|0);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   __ZdaPv($5);
  }
 }
 STACKTOP = sp;return;
}
function __ZNK8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EE5EmptyEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 STACKTOP = sp;return ($4|0);
}
function __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EE3PopEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -1)|0;
 HEAP32[$2>>2] = $4;
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + ($4<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 STACKTOP = sp;return ($7|0);
}
function __ZNK8tinyxml28DynArrayIPNS_8MemPoolTILi36EE5BlockELi10EE5EmptyEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 STACKTOP = sp;return ($4|0);
}
function __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi36EE5BlockELi10EE3PopEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -1)|0;
 HEAP32[$2>>2] = $4;
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + ($4<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 STACKTOP = sp;return ($7|0);
}
function __ZNK8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EE5EmptyEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 STACKTOP = sp;return ($4|0);
}
function __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EE3PopEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -1)|0;
 HEAP32[$2>>2] = $4;
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + ($4<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 STACKTOP = sp;return ($7|0);
}
function __ZNK8tinyxml28DynArrayIPNS_8MemPoolTILi48EE5BlockELi10EE5EmptyEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 STACKTOP = sp;return ($4|0);
}
function __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi48EE5BlockELi10EE3PopEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -1)|0;
 HEAP32[$2>>2] = $4;
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + ($4<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 STACKTOP = sp;return ($7|0);
}
function __ZN8tinyxml28DynArrayIPKcLi10EE14EnsureCapacityEi($this,$cap) {
 $this = $this|0;
 $cap = $cap|0;
 var $$arith = 0, $$overflow = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $newAllocated = 0, $newMem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $cap;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)>($5|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = $1;
 $8 = $7<<1;
 $newAllocated = $8;
 $9 = $newAllocated;
 $$arith = $9<<2;
 $$overflow = ($9>>>0)>(1073741823);
 $10 = $$overflow ? -1 : $$arith;
 $11 = (__Znaj($10)|0);
 $newMem = $11;
 $12 = $newMem;
 $13 = HEAP32[$2>>2]|0;
 $14 = ((($2)) + 48|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15<<2;
 _memcpy(($12|0),($13|0),($16|0))|0;
 $17 = HEAP32[$2>>2]|0;
 $18 = ((($2)) + 4|0);
 $19 = ($17|0)!=($18|0);
 if ($19) {
  $20 = HEAP32[$2>>2]|0;
  $21 = ($20|0)==(0|0);
  if (!($21)) {
   __ZdaPv($20);
  }
 }
 $22 = $newMem;
 HEAP32[$2>>2] = $22;
 $23 = $newAllocated;
 $24 = ((($2)) + 44|0);
 HEAP32[$24>>2] = $23;
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data6Schema14CUdxNodeSchemaC2EPNS1_14IUdxNodeSchemaEPKcPNS1_16INodeDescriptionE($this,$pParent,$pName,$pDescription) {
 $this = $this|0;
 $pParent = $pParent|0;
 $pName = $pName|0;
 $pDescription = $pDescription|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 68|0;
 $6 = sp + 56|0;
 $15 = $this;
 $16 = $pParent;
 $17 = $pName;
 $18 = $pDescription;
 $21 = $15;
 __ZN4NGIS4Data6Schema14IUdxNodeSchemaC2Ev($21);
 $22 = 2124;
 HEAP32[$21>>2] = $22;
 $23 = ((($21)) + 8|0);
 $24 = $17;
 $13 = $23;
 $14 = $24;
 $25 = $13;
 $12 = $25;
 $26 = $12;
 $11 = $26;
 $27 = $11;
 $10 = $27;
 $28 = $14;
 $29 = $14;
 __THREW__ = 0;
 $30 = (invoke_ii(383,($29|0))|0);
 $31 = __THREW__; __THREW__ = 0;
 $32 = $31&1;
 if (!($32)) {
  __THREW__ = 0;
  invoke_viii(384,($25|0),($28|0),($30|0));
  $33 = __THREW__; __THREW__ = 0;
  $34 = $33&1;
  if (!($34)) {
   $35 = ((($21)) + 24|0);
   $9 = $35;
   $36 = $9;
   $8 = $36;
   $37 = $8;
   $7 = $37;
   HEAP32[$37>>2] = 0;
   $38 = ((($37)) + 4|0);
   HEAP32[$38>>2] = 0;
   $39 = ((($37)) + 8|0);
   $5 = $39;
   HEAP32[$6>>2] = 0;
   $40 = $5;
   $4 = $6;
   $41 = $4;
   $42 = HEAP32[$41>>2]|0;
   $2 = $40;
   HEAP32[$3>>2] = $42;
   $43 = $2;
   $1 = $43;
   $0 = $3;
   $44 = $0;
   $45 = HEAP32[$44>>2]|0;
   HEAP32[$43>>2] = $45;
   $46 = $16;
   $47 = ((($21)) + 36|0);
   HEAP32[$47>>2] = $46;
   $48 = $18;
   $49 = ((($21)) + 20|0);
   HEAP32[$49>>2] = $48;
   $50 = ((($21)) + 36|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ($51|0)!=(0|0);
   if ($52) {
    $53 = ((($21)) + 36|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = HEAP32[$54>>2]|0;
    $56 = ((($55)) + 8|0);
    $57 = HEAP32[$56>>2]|0;
    __THREW__ = 0;
    (invoke_ii($57|0,($54|0))|0);
    $58 = __THREW__; __THREW__ = 0;
    $59 = $58&1;
    if (!($59)) {
     label = 7;
    }
   } else {
    label = 7;
   }
   if ((label|0) == 7) {
    $64 = ((($21)) + 20|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = ($65|0)!=(0|0);
    if (!($66)) {
     STACKTOP = sp;return;
    }
    $67 = ((($21)) + 20|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = HEAP32[$68>>2]|0;
    $70 = ((($69)) + 8|0);
    $71 = HEAP32[$70>>2]|0;
    __THREW__ = 0;
    (invoke_ii($71|0,($68|0))|0);
    $72 = __THREW__; __THREW__ = 0;
    $73 = $72&1;
    if (!($73)) {
     STACKTOP = sp;return;
    }
   }
   $62 = ___cxa_find_matching_catch()|0;
   $63 = tempRet0;
   $19 = $62;
   $20 = $63;
   __ZNSt3__16vectorIPN4NGIS4Data6Schema14IUdxNodeSchemaENS_9allocatorIS5_EEED2Ev($35);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($23);
   __ZN4NGIS4Data6Schema14IUdxNodeSchemaD2Ev($21);
   $74 = $19;
   $75 = $20;
   ___resumeException($74|0);
   // unreachable;
  }
 }
 $60 = ___cxa_find_matching_catch()|0;
 $61 = tempRet0;
 $19 = $60;
 $20 = $61;
 __ZN4NGIS4Data6Schema14IUdxNodeSchemaD2Ev($21);
 $74 = $19;
 $75 = $20;
 ___resumeException($74|0);
 // unreachable;
}
function __ZN4NGIS4Data6Schema14CUdxNodeSchemaD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__old_size$i = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp;
 $8 = sp + 100|0;
 $21 = $this;
 $24 = $21;
 $25 = 2124;
 HEAP32[$24>>2] = $25;
 $26 = ((($24)) + 36|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)!=(0|0);
 if ($28) {
  $29 = ((($24)) + 36|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($31)) + 12|0);
  $33 = HEAP32[$32>>2]|0;
  __THREW__ = 0;
  (invoke_ii($33|0,($30|0))|0);
  $34 = __THREW__; __THREW__ = 0;
  $35 = $34&1;
  if (!($35)) {
   label = 4;
  }
 } else {
  label = 4;
 }
 L3: do {
  if ((label|0) == 4) {
   $41 = ((($24)) + 20|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)!=(0|0);
   if ($43) {
    $44 = ((($24)) + 20|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = HEAP32[$45>>2]|0;
    $47 = ((($46)) + 12|0);
    $48 = HEAP32[$47>>2]|0;
    __THREW__ = 0;
    (invoke_ii($48|0,($45|0))|0);
    $49 = __THREW__; __THREW__ = 0;
    $50 = $49&1;
    if ($50) {
     break;
    }
   }
   $i = 0;
   while(1) {
    $51 = $i;
    $52 = ((($24)) + 24|0);
    $20 = $52;
    $53 = $20;
    $54 = ((($53)) + 4|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = HEAP32[$53>>2]|0;
    $57 = $55;
    $58 = $56;
    $59 = (($57) - ($58))|0;
    $60 = (($59|0) / 4)&-1;
    $61 = ($51>>>0)<($60>>>0);
    $62 = ((($24)) + 24|0);
    if (!($61)) {
     break;
    }
    $63 = $i;
    $18 = $62;
    $19 = $63;
    $64 = $18;
    $65 = $19;
    $66 = HEAP32[$64>>2]|0;
    $67 = (($66) + ($65<<2)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = HEAP32[$68>>2]|0;
    $70 = ((($69)) + 12|0);
    $71 = HEAP32[$70>>2]|0;
    __THREW__ = 0;
    (invoke_ii($71|0,($68|0))|0);
    $72 = __THREW__; __THREW__ = 0;
    $73 = $72&1;
    if ($73) {
     break L3;
    }
    $74 = $i;
    $75 = (($74) + 1)|0;
    $i = $75;
   }
   $17 = $62;
   $76 = $17;
   $16 = $76;
   $77 = $16;
   $78 = ((($77)) + 4|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = HEAP32[$77>>2]|0;
   $81 = $79;
   $82 = $80;
   $83 = (($81) - ($82))|0;
   $84 = (($83|0) / 4)&-1;
   $__old_size$i = $84;
   $15 = $76;
   $85 = $15;
   $86 = HEAP32[$85>>2]|0;
   $13 = $85;
   $14 = $86;
   $87 = $13;
   while(1) {
    $88 = $14;
    $89 = ((($87)) + 4|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = ($88|0)!=($90|0);
    if (!($91)) {
     break;
    }
    $12 = $87;
    $92 = $12;
    $93 = ((($92)) + 8|0);
    $11 = $93;
    $94 = $11;
    $10 = $94;
    $95 = $10;
    $96 = ((($87)) + 4|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ((($97)) + -4|0);
    HEAP32[$96>>2] = $98;
    $9 = $98;
    $99 = $9;
    $6 = $95;
    $7 = $99;
    $100 = $6;
    $101 = $7;
    ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
    $3 = $100;
    $4 = $101;
    $102 = $3;
    $103 = $4;
    $1 = $102;
    $2 = $103;
   }
   $104 = $__old_size$i;
   __THREW__ = 0;
   invoke_vii(385,($76|0),($104|0));
   $105 = __THREW__; __THREW__ = 0;
   $106 = $105&1;
   if ($106) {
    $107 = ___cxa_find_matching_catch(0|0)|0;
    $108 = tempRet0;
    ___clang_call_terminate($107);
    // unreachable;
   } else {
    $0 = $76;
    $109 = ((($24)) + 24|0);
    __ZNSt3__16vectorIPN4NGIS4Data6Schema14IUdxNodeSchemaENS_9allocatorIS5_EEED2Ev($109);
    $110 = ((($24)) + 8|0);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($110);
    __ZN4NGIS4Data6Schema14IUdxNodeSchemaD2Ev($24);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $36 = ___cxa_find_matching_catch(0|0)|0;
 $37 = tempRet0;
 $22 = $36;
 $23 = $37;
 $38 = ((($24)) + 24|0);
 __ZNSt3__16vectorIPN4NGIS4Data6Schema14IUdxNodeSchemaENS_9allocatorIS5_EEED2Ev($38);
 $39 = ((($24)) + 8|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($39);
 __ZN4NGIS4Data6Schema14IUdxNodeSchemaD2Ev($24);
 $40 = $22;
 ___clang_call_terminate($40);
 // unreachable;
}
function __ZN4NGIS4Data6Schema14CUdxNodeSchemaD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4NGIS4Data6Schema14CUdxNodeSchemaD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data6Schema14CUdxNodeSchema7getNameEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $15 = $this;
 $16 = $15;
 $17 = ((($16)) + 8|0);
 $14 = $17;
 $18 = $14;
 $13 = $18;
 $19 = $13;
 $12 = $19;
 $20 = $12;
 $11 = $20;
 $21 = $11;
 $10 = $21;
 $22 = $10;
 $9 = $22;
 $23 = $9;
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 $26 = $25 & 1;
 $27 = ($26|0)!=(0);
 if ($27) {
  $3 = $20;
  $28 = $3;
  $2 = $28;
  $29 = $2;
  $1 = $29;
  $30 = $1;
  $31 = ((($30)) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $39 = $32;
  $0 = $39;
  $40 = $0;
  STACKTOP = sp;return ($40|0);
 } else {
  $8 = $20;
  $33 = $8;
  $7 = $33;
  $34 = $7;
  $6 = $34;
  $35 = $6;
  $36 = ((($35)) + 1|0);
  $5 = $36;
  $37 = $5;
  $4 = $37;
  $38 = $4;
  $39 = $38;
  $0 = $39;
  $40 = $0;
  STACKTOP = sp;return ($40|0);
 }
 return (0)|0;
}
function __ZN4NGIS4Data6Schema14CUdxNodeSchema14getDescriptionEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN4NGIS4Data6Schema14CUdxNodeSchema10modifyNameEPKc($this,$pName) {
 $this = $this|0;
 $pName = $pName|0;
 var $$expand_i1_val = 0, $$expand_i1_val11 = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val9 = 0, $$pre_trunc = 0, $$pre_trunc13 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__lhs_sz$i = 0, $__lp$i = 0;
 var $__rp$i = 0, $pNameStr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $53 = sp + 285|0;
 $61 = sp + 284|0;
 $pNameStr = sp + 12|0;
 $62 = $this;
 $63 = $pName;
 $67 = $62;
 $68 = $63;
 $59 = $pNameStr;
 $60 = $68;
 $69 = $59;
 $58 = $69;
 $70 = $58;
 $57 = $70;
 $71 = $57;
 $56 = $71;
 $72 = $60;
 $73 = $60;
 $74 = (__ZNSt3__111char_traitsIcE6lengthEPKc($73)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($69,$72,$74);
 $75 = ((($67)) + 8|0);
 $54 = $75;
 $55 = $pNameStr;
 $76 = $54;
 $52 = $76;
 $77 = $52;
 $51 = $77;
 $78 = $51;
 $50 = $78;
 $79 = $50;
 $49 = $79;
 $80 = $49;
 $81 = HEAP8[$80>>0]|0;
 $82 = $81&255;
 $83 = $82 & 1;
 $84 = ($83|0)!=(0);
 if ($84) {
  $45 = $77;
  $85 = $45;
  $44 = $85;
  $86 = $44;
  $43 = $86;
  $87 = $43;
  $88 = ((($87)) + 4|0);
  $89 = HEAP32[$88>>2]|0;
  $96 = $89;
 } else {
  $48 = $77;
  $90 = $48;
  $47 = $90;
  $91 = $47;
  $46 = $91;
  $92 = $46;
  $93 = HEAP8[$92>>0]|0;
  $94 = $93&255;
  $95 = $94 >> 1;
  $96 = $95;
 }
 $__lhs_sz$i = $96;
 $97 = $__lhs_sz$i;
 $98 = $55;
 $42 = $98;
 $99 = $42;
 $41 = $99;
 $100 = $41;
 $40 = $100;
 $101 = $40;
 $39 = $101;
 $102 = $39;
 $103 = HEAP8[$102>>0]|0;
 $104 = $103&255;
 $105 = $104 & 1;
 $106 = ($105|0)!=(0);
 if ($106) {
  $35 = $99;
  $107 = $35;
  $34 = $107;
  $108 = $34;
  $33 = $108;
  $109 = $33;
  $110 = ((($109)) + 4|0);
  $111 = HEAP32[$110>>2]|0;
  $119 = $111;
 } else {
  $38 = $99;
  $112 = $38;
  $37 = $112;
  $113 = $37;
  $36 = $113;
  $114 = $36;
  $115 = HEAP8[$114>>0]|0;
  $116 = $115&255;
  $117 = $116 >> 1;
  $119 = $117;
 }
 $118 = ($97|0)!=($119|0);
 do {
  if ($118) {
   $$expand_i1_val = 0;
   HEAP8[$53>>0] = $$expand_i1_val;
  } else {
   $120 = $54;
   $32 = $120;
   $121 = $32;
   $31 = $121;
   $122 = $31;
   $30 = $122;
   $123 = $30;
   $29 = $123;
   $124 = $29;
   $28 = $124;
   $125 = $28;
   $126 = HEAP8[$125>>0]|0;
   $127 = $126&255;
   $128 = $127 & 1;
   $129 = ($128|0)!=(0);
   if ($129) {
    $22 = $122;
    $130 = $22;
    $21 = $130;
    $131 = $21;
    $20 = $131;
    $132 = $20;
    $133 = ((($132)) + 8|0);
    $134 = HEAP32[$133>>2]|0;
    $141 = $134;
   } else {
    $27 = $122;
    $135 = $27;
    $26 = $135;
    $136 = $26;
    $25 = $136;
    $137 = $25;
    $138 = ((($137)) + 1|0);
    $24 = $138;
    $139 = $24;
    $23 = $139;
    $140 = $23;
    $141 = $140;
   }
   $19 = $141;
   $142 = $19;
   $__lp$i = $142;
   $143 = $55;
   $15 = $143;
   $144 = $15;
   $14 = $144;
   $145 = $14;
   $13 = $145;
   $146 = $13;
   $12 = $146;
   $147 = $12;
   $11 = $147;
   $148 = $11;
   $149 = HEAP8[$148>>0]|0;
   $150 = $149&255;
   $151 = $150 & 1;
   $152 = ($151|0)!=(0);
   if ($152) {
    $5 = $145;
    $153 = $5;
    $4 = $153;
    $154 = $4;
    $3 = $154;
    $155 = $3;
    $156 = ((($155)) + 8|0);
    $157 = HEAP32[$156>>2]|0;
    $164 = $157;
   } else {
    $10 = $145;
    $158 = $10;
    $9 = $158;
    $159 = $9;
    $8 = $159;
    $160 = $8;
    $161 = ((($160)) + 1|0);
    $7 = $161;
    $162 = $7;
    $6 = $162;
    $163 = $6;
    $164 = $163;
   }
   $2 = $164;
   $165 = $2;
   $__rp$i = $165;
   $166 = $54;
   $18 = $166;
   $167 = $18;
   $17 = $167;
   $168 = $17;
   $16 = $168;
   $169 = $16;
   $170 = HEAP8[$169>>0]|0;
   $171 = $170&255;
   $172 = $171 & 1;
   $173 = ($172|0)!=(0);
   if ($173) {
    $174 = $__lp$i;
    $175 = $__rp$i;
    $176 = $__lhs_sz$i;
    __THREW__ = 0;
    $177 = (invoke_iiii(386,($174|0),($175|0),($176|0))|0);
    $178 = __THREW__; __THREW__ = 0;
    $179 = $178&1;
    if ($179) {
     $196 = ___cxa_find_matching_catch(0|0)|0;
     $197 = tempRet0;
     ___clang_call_terminate($196);
     // unreachable;
    } else {
     $180 = ($177|0)==(0);
     $$expand_i1_val2 = $180&1;
     HEAP8[$53>>0] = $$expand_i1_val2;
     break;
    }
   }
   while(1) {
    $181 = $__lhs_sz$i;
    $182 = ($181|0)!=(0);
    if (!($182)) {
     label = 22;
     break;
    }
    $183 = $__lp$i;
    $184 = HEAP8[$183>>0]|0;
    $185 = $184 << 24 >> 24;
    $186 = $__rp$i;
    $187 = HEAP8[$186>>0]|0;
    $188 = $187 << 24 >> 24;
    $189 = ($185|0)!=($188|0);
    if ($189) {
     label = 20;
     break;
    }
    $190 = $__lhs_sz$i;
    $191 = (($190) + -1)|0;
    $__lhs_sz$i = $191;
    $192 = $__lp$i;
    $193 = ((($192)) + 1|0);
    $__lp$i = $193;
    $194 = $__rp$i;
    $195 = ((($194)) + 1|0);
    $__rp$i = $195;
   }
   if ((label|0) == 20) {
    $$expand_i1_val4 = 0;
    HEAP8[$53>>0] = $$expand_i1_val4;
    break;
   }
   else if ((label|0) == 22) {
    $$expand_i1_val6 = 1;
    HEAP8[$53>>0] = $$expand_i1_val6;
    break;
   }
  }
 } while(0);
 $$pre_trunc = HEAP8[$53>>0]|0;
 $198 = $$pre_trunc&1;
 if ($198) {
  $$expand_i1_val9 = 0;
  HEAP8[$61>>0] = $$expand_i1_val9;
  $64 = 1;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($pNameStr);
  $$pre_trunc13 = HEAP8[$61>>0]|0;
  $209 = $$pre_trunc13&1;
  STACKTOP = sp;return ($209|0);
 }
 $199 = ((($67)) + 8|0);
 $200 = $63;
 $0 = $199;
 $1 = $200;
 $201 = $0;
 $202 = $1;
 __THREW__ = 0;
 (invoke_iii(387,($201|0),($202|0))|0);
 $203 = __THREW__; __THREW__ = 0;
 $204 = $203&1;
 if ($204) {
  $205 = ___cxa_find_matching_catch()|0;
  $206 = tempRet0;
  $65 = $205;
  $66 = $206;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($pNameStr);
  $207 = $65;
  $208 = $66;
  ___resumeException($207|0);
  // unreachable;
 }
 $$expand_i1_val11 = 1;
 HEAP8[$61>>0] = $$expand_i1_val11;
 $64 = 1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($pNameStr);
 $$pre_trunc13 = HEAP8[$61>>0]|0;
 $209 = $$pre_trunc13&1;
 STACKTOP = sp;return ($209|0);
}
function __ZN4NGIS4Data6Schema14CUdxNodeSchema13getParentNodeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN4NGIS4Data6Schema14CUdxNodeSchema17getChildNodeCountEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = ((($2)) + 24|0);
 $0 = $3;
 $4 = $0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$4>>2]|0;
 $8 = $6;
 $9 = $7;
 $10 = (($8) - ($9))|0;
 $11 = (($10|0) / 4)&-1;
 STACKTOP = sp;return ($11|0);
}
function __ZN4NGIS4Data6Schema14CUdxNodeSchema12getChildNodeEi($this,$idx) {
 $this = $this|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = $this;
 $5 = $idx;
 $6 = $4;
 $7 = $5;
 $8 = ($7|0)<(0);
 if (!($8)) {
  $9 = $5;
  $10 = ((($6)) + 24|0);
  $2 = $10;
  $11 = $2;
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$11>>2]|0;
  $15 = $13;
  $16 = $14;
  $17 = (($15) - ($16))|0;
  $18 = (($17|0) / 4)&-1;
  $19 = ($9>>>0)>=($18>>>0);
  if (!($19)) {
   $20 = ((($6)) + 24|0);
   $21 = $5;
   $0 = $20;
   $1 = $21;
   $22 = $0;
   $23 = $1;
   $24 = HEAP32[$22>>2]|0;
   $25 = (($24) + ($23<<2)|0);
   $26 = HEAP32[$25>>2]|0;
   $3 = $26;
   $27 = $3;
   STACKTOP = sp;return ($27|0);
  }
 }
 $3 = 0;
 $27 = $3;
 STACKTOP = sp;return ($27|0);
}
function __ZN4NGIS4Data6Schema14CUdxNodeSchema12addChildNodeEPKcPNS1_16INodeDescriptionE($this,$pName,$pDescription) {
 $this = $this|0;
 $pName = $pName|0;
 $pDescription = $pDescription|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__annotator$i = 0, $isOK = 0, $mType = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond19 = 0, $or$cond21 = 0, $or$cond23 = 0, $or$cond25 = 0, $or$cond27 = 0, $or$cond29 = 0, $or$cond3 = 0, $or$cond31 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $pNode = 0;
 var $pType = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $10 = sp;
 $15 = sp + 146|0;
 $__annotator$i = sp + 145|0;
 $33 = sp + 4|0;
 $28 = $this;
 $29 = $pName;
 $30 = $pDescription;
 $34 = $28;
 $35 = ((($34)) + 20|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = HEAP32[$36>>2]|0;
 $38 = ((($37)) + 20|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (FUNCTION_TABLE_ii[$39 & 1023]($36)|0);
 $mType = $40;
 $41 = $mType;
 $42 = ($41|0)==(2);
 $43 = $mType;
 $44 = ($43|0)==(4);
 $or$cond = $42 | $44;
 $45 = $mType;
 $46 = ($45|0)==(64);
 $or$cond3 = $or$cond | $46;
 $47 = $mType;
 $48 = ($47|0)==(8);
 $or$cond5 = $or$cond3 | $48;
 $49 = $mType;
 $50 = ($49|0)==(16);
 $or$cond7 = $or$cond5 | $50;
 $51 = $mType;
 $52 = ($51|0)==(32);
 $or$cond9 = $or$cond7 | $52;
 $53 = $mType;
 $54 = ($53|0)==(258);
 $or$cond11 = $or$cond9 | $54;
 $55 = $mType;
 $56 = ($55|0)==(260);
 $or$cond13 = $or$cond11 | $56;
 $57 = $mType;
 $58 = ($57|0)==(320);
 $or$cond15 = $or$cond13 | $58;
 $59 = $mType;
 $60 = ($59|0)==(264);
 $or$cond17 = $or$cond15 | $60;
 $61 = $mType;
 $62 = ($61|0)==(272);
 $or$cond19 = $or$cond17 | $62;
 $63 = $mType;
 $64 = ($63|0)==(288);
 $or$cond21 = $or$cond19 | $64;
 if ($or$cond21) {
  $27 = 0;
  $159 = $27;
  STACKTOP = sp;return ($159|0);
 }
 $65 = $mType;
 $66 = ($65|0)==(256);
 do {
  if ($66) {
   $67 = ((($34)) + 24|0);
   $26 = $67;
   $68 = $26;
   $69 = ((($68)) + 4|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = HEAP32[$68>>2]|0;
   $72 = $70;
   $73 = $71;
   $74 = (($72) - ($73))|0;
   $75 = (($74|0) / 4)&-1;
   $76 = ($75>>>0)>=(1);
   if ($76) {
    $27 = 0;
    $159 = $27;
    STACKTOP = sp;return ($159|0);
   }
  } else {
   $77 = $mType;
   $78 = ($77|0)==(512);
   if ($78) {
    $79 = ((($34)) + 24|0);
    $0 = $79;
    $80 = $0;
    $81 = ((($80)) + 4|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = HEAP32[$80>>2]|0;
    $84 = $82;
    $85 = $83;
    $86 = (($84) - ($85))|0;
    $87 = (($86|0) / 4)&-1;
    $88 = ($87>>>0)>=(2);
    if (!($88)) {
     break;
    }
    $27 = 0;
    $159 = $27;
    STACKTOP = sp;return ($159|0);
   }
   $89 = $mType;
   $90 = ($89|0)==(1024);
   if ($90) {
    $isOK = 0;
    $91 = $30;
    $92 = HEAP32[$91>>2]|0;
    $93 = ((($92)) + 20|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = (FUNCTION_TABLE_ii[$94 & 1023]($91)|0);
    $pType = $95;
    $96 = $pType;
    $97 = ($96|0)==(258);
    $98 = $pType;
    $99 = ($98|0)==(260);
    $or$cond23 = $97 | $99;
    $100 = $pType;
    $101 = ($100|0)==(320);
    $or$cond25 = $or$cond23 | $101;
    $102 = $pType;
    $103 = ($102|0)==(264);
    $or$cond27 = $or$cond25 | $103;
    $104 = $pType;
    $105 = ($104|0)==(272);
    $or$cond29 = $or$cond27 | $105;
    $106 = $pType;
    $107 = ($106|0)==(288);
    $or$cond31 = $or$cond29 | $107;
    if ($or$cond31) {
     $isOK = 1;
    }
    $108 = $isOK;
    $109 = $108&1;
    $110 = $109&1;
    $111 = ($110|0)==(0);
    if ($111) {
     $27 = 0;
     $159 = $27;
     STACKTOP = sp;return ($159|0);
    }
   }
  }
 } while(0);
 $112 = (__Znwj(40)|0);
 $113 = $29;
 $114 = $30;
 __THREW__ = 0;
 invoke_viiii(388,($112|0),($34|0),($113|0),($114|0));
 $115 = __THREW__; __THREW__ = 0;
 $116 = $115&1;
 if ($116) {
  $155 = ___cxa_find_matching_catch()|0;
  $156 = tempRet0;
  $31 = $155;
  $32 = $156;
  __ZdlPv($112);
  $157 = $31;
  $158 = $32;
  ___resumeException($157|0);
  // unreachable;
 }
 $pNode = $112;
 $117 = ((($34)) + 24|0);
 $118 = $pNode;
 HEAP32[$33>>2] = $118;
 $24 = $117;
 $25 = $33;
 $119 = $24;
 $120 = ((($119)) + 4|0);
 $121 = HEAP32[$120>>2]|0;
 $23 = $119;
 $122 = $23;
 $123 = ((($122)) + 8|0);
 $22 = $123;
 $124 = $22;
 $21 = $124;
 $125 = $21;
 $126 = HEAP32[$125>>2]|0;
 $127 = ($121>>>0)<($126>>>0);
 if ($127) {
  __ZNSt3__16vectorIPN4NGIS4Data6Schema14IUdxNodeSchemaENS_9allocatorIS5_EEE24__RAII_IncreaseAnnotatorC2ERKS8_j($__annotator$i,$119,1);
  $20 = $119;
  $128 = $20;
  $129 = ((($128)) + 8|0);
  $19 = $129;
  $130 = $19;
  $18 = $130;
  $131 = $18;
  $132 = ((($119)) + 4|0);
  $133 = HEAP32[$132>>2]|0;
  $16 = $133;
  $134 = $16;
  $135 = $25;
  $1 = $135;
  $136 = $1;
  $12 = $131;
  $13 = $134;
  $14 = $136;
  $137 = $12;
  $138 = $13;
  $139 = $14;
  $11 = $139;
  $140 = $11;
  ;HEAP8[$10>>0]=HEAP8[$15>>0]|0;
  $7 = $137;
  $8 = $138;
  $9 = $140;
  $141 = $7;
  $142 = $8;
  $143 = $9;
  $6 = $143;
  $144 = $6;
  $3 = $141;
  $4 = $142;
  $5 = $144;
  $145 = $4;
  $146 = $5;
  $2 = $146;
  $147 = $2;
  $148 = HEAP32[$147>>2]|0;
  HEAP32[$145>>2] = $148;
  __ZNSt3__16vectorIPN4NGIS4Data6Schema14IUdxNodeSchemaENS_9allocatorIS5_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
  $149 = ((($119)) + 4|0);
  $150 = HEAP32[$149>>2]|0;
  $151 = ((($150)) + 4|0);
  HEAP32[$149>>2] = $151;
 } else {
  $152 = $25;
  $17 = $152;
  $153 = $17;
  __ZNSt3__16vectorIPN4NGIS4Data6Schema14IUdxNodeSchemaENS_9allocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_($119,$153);
 }
 $154 = $pNode;
 $27 = $154;
 $159 = $27;
 STACKTOP = sp;return ($159|0);
}
function __ZN4NGIS4Data6Schema14CUdxNodeSchema12addChildNodeEPKciS4_($this,$pName,$pNodeType,$pNodeInfo) {
 $this = $this|0;
 $pName = $pName|0;
 $pNodeType = $pNodeType|0;
 $pNodeInfo = $pNodeInfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pDescription = 0, $pNode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $pName;
 $2 = $pNodeType;
 $3 = $pNodeInfo;
 $6 = $0;
 $7 = (__Znwj(84)|0);
 $8 = $2;
 $9 = $3;
 __THREW__ = 0;
 invoke_viii(389,($7|0),($8|0),($9|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $23 = ___cxa_find_matching_catch()|0;
  $24 = tempRet0;
  $4 = $23;
  $5 = $24;
  __ZdlPv($7);
  $25 = $4;
  $26 = $5;
  ___resumeException($25|0);
  // unreachable;
 } else {
  $pDescription = $7;
  $12 = HEAP32[$6>>2]|0;
  $13 = ((($12)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $1;
  $16 = $pDescription;
  $17 = (FUNCTION_TABLE_iiii[$14 & 1023]($6,$15,$16)|0);
  $pNode = $17;
  $18 = $pDescription;
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($19)) + 12|0);
  $21 = HEAP32[$20>>2]|0;
  (FUNCTION_TABLE_ii[$21 & 1023]($18)|0);
  $22 = $pNode;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function __ZN4NGIS4Data6Schema14CUdxNodeSchema15removeChildNodeEPNS1_14IUdxNodeSchemaE($this,$pNode) {
 $this = $this|0;
 $pNode = $pNode|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__n$i$i$i = 0;
 var $__old_size$i$i = 0, $__p$i = 0, $__ps$i = 0, $end = 0, $it = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $22 = sp + 256|0;
 $33 = sp + 8|0;
 $36 = sp + 353|0;
 $48 = sp + 156|0;
 $51 = sp + 144|0;
 $53 = sp + 136|0;
 $55 = sp + 128|0;
 $57 = sp + 116|0;
 $58 = sp;
 $61 = sp + 100|0;
 $64 = sp + 88|0;
 $67 = sp + 76|0;
 $72 = sp + 56|0;
 $75 = sp + 44|0;
 $77 = sp + 352|0;
 $it = sp + 28|0;
 $end = sp + 24|0;
 $80 = sp + 20|0;
 $81 = sp + 16|0;
 $82 = sp + 12|0;
 $78 = $this;
 $79 = $pNode;
 $83 = $78;
 $84 = ((($83)) + 24|0);
 $76 = $84;
 $85 = $76;
 $86 = HEAP32[$85>>2]|0;
 $73 = $85;
 $74 = $86;
 $87 = $74;
 $70 = $72;
 $71 = $87;
 $88 = $70;
 $89 = $71;
 HEAP32[$88>>2] = $89;
 $90 = HEAP32[$72>>2]|0;
 HEAP32[$75>>2] = $90;
 $91 = HEAP32[$75>>2]|0;
 HEAP32[$it>>2] = $91;
 $92 = ((($83)) + 24|0);
 $65 = $92;
 $93 = $65;
 $94 = ((($93)) + 4|0);
 $95 = HEAP32[$94>>2]|0;
 $62 = $93;
 $63 = $95;
 $96 = $63;
 $59 = $61;
 $60 = $96;
 $97 = $59;
 $98 = $60;
 HEAP32[$97>>2] = $98;
 $99 = HEAP32[$61>>2]|0;
 HEAP32[$64>>2] = $99;
 $100 = HEAP32[$64>>2]|0;
 HEAP32[$end>>2] = $100;
 while(1) {
  $9 = $it;
  $10 = $end;
  $101 = $9;
  $102 = $10;
  $7 = $101;
  $8 = $102;
  $103 = $7;
  $6 = $103;
  $104 = $6;
  $105 = HEAP32[$104>>2]|0;
  $106 = $8;
  $5 = $106;
  $107 = $5;
  $108 = HEAP32[$107>>2]|0;
  $109 = ($105|0)==($108|0);
  $110 = $109 ^ 1;
  if (!($110)) {
   label = 11;
   break;
  }
  $4 = $it;
  $111 = $4;
  $112 = HEAP32[$111>>2]|0;
  $113 = HEAP32[$112>>2]|0;
  $114 = $79;
  $115 = ($113|0)==($114|0);
  if ($115) {
   break;
  }
  $68 = $it;
  $69 = 0;
  $210 = $68;
  ;HEAP32[$67>>2]=HEAP32[$210>>2]|0;
  $66 = $210;
  $211 = $66;
  $212 = HEAP32[$211>>2]|0;
  $213 = ((($212)) + 4|0);
  HEAP32[$211>>2] = $213;
  $214 = HEAP32[$67>>2]|0;
  HEAP32[$82>>2] = $214;
 }
 if ((label|0) == 11) {
  $$expand_i1_val2 = 0;
  HEAP8[$77>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$77>>0]|0;
  $215 = $$pre_trunc&1;
  STACKTOP = sp;return ($215|0);
 }
 $116 = ((($83)) + 24|0);
 $1 = $80;
 $2 = $it;
 $3 = 0;
 $117 = $1;
 $118 = $2;
 $0 = $118;
 $119 = $0;
 $120 = HEAP32[$119>>2]|0;
 HEAP32[$117>>2] = $120;
 ;HEAP8[$58>>0]=HEAP8[$80>>0]|0;HEAP8[$58+1>>0]=HEAP8[$80+1>>0]|0;HEAP8[$58+2>>0]=HEAP8[$80+2>>0]|0;HEAP8[$58+3>>0]=HEAP8[$80+3>>0]|0;
 $56 = $116;
 $121 = $56;
 $54 = $121;
 $122 = $54;
 $52 = $122;
 $123 = $52;
 $124 = HEAP32[$123>>2]|0;
 $49 = $123;
 $50 = $124;
 $125 = $50;
 $46 = $48;
 $47 = $125;
 $126 = $46;
 $127 = $47;
 HEAP32[$126>>2] = $127;
 $128 = HEAP32[$48>>2]|0;
 HEAP32[$51>>2] = $128;
 $129 = HEAP32[$51>>2]|0;
 HEAP32[$53>>2] = $129;
 $130 = HEAP32[$53>>2]|0;
 HEAP32[$57>>2] = $130;
 $27 = $58;
 $28 = $57;
 $131 = $27;
 $26 = $131;
 $132 = $26;
 $133 = HEAP32[$132>>2]|0;
 $134 = $28;
 $25 = $134;
 $135 = $25;
 $136 = HEAP32[$135>>2]|0;
 $137 = $133;
 $138 = $136;
 $139 = (($137) - ($138))|0;
 $140 = (($139|0) / 4)&-1;
 $__ps$i = $140;
 $141 = HEAP32[$121>>2]|0;
 $142 = $__ps$i;
 $143 = (($141) + ($142<<2)|0);
 $__p$i = $143;
 $144 = $__p$i;
 $23 = $121;
 $24 = $144;
 $145 = $24;
 $20 = $22;
 $21 = $145;
 $146 = $20;
 $147 = $21;
 HEAP32[$146>>2] = $147;
 $148 = HEAP32[$22>>2]|0;
 HEAP32[$55>>2] = $148;
 $149 = $__p$i;
 $150 = ((($149)) + 4|0);
 $151 = ((($121)) + 4|0);
 $152 = HEAP32[$151>>2]|0;
 $153 = $__p$i;
 $17 = $150;
 $18 = $152;
 $19 = $153;
 $154 = $17;
 $16 = $154;
 $155 = $16;
 $156 = $18;
 $11 = $156;
 $157 = $11;
 $158 = $19;
 $12 = $158;
 $159 = $12;
 $13 = $155;
 $14 = $157;
 $15 = $159;
 $160 = $14;
 $161 = $13;
 $162 = $160;
 $163 = $161;
 $164 = (($162) - ($163))|0;
 $165 = (($164|0) / 4)&-1;
 $__n$i$i$i = $165;
 $166 = $15;
 $167 = $13;
 $168 = $__n$i$i$i;
 $169 = $168<<2;
 _memmove(($166|0),($167|0),($169|0))|0;
 $170 = $15;
 $171 = $__n$i$i$i;
 $172 = (($170) + ($171<<2)|0);
 $44 = $121;
 $45 = $172;
 $173 = $44;
 $43 = $173;
 $174 = $43;
 $175 = ((($174)) + 4|0);
 $176 = HEAP32[$175>>2]|0;
 $177 = HEAP32[$174>>2]|0;
 $178 = $176;
 $179 = $177;
 $180 = (($178) - ($179))|0;
 $181 = (($180|0) / 4)&-1;
 $__old_size$i$i = $181;
 $182 = $45;
 $41 = $173;
 $42 = $182;
 $183 = $41;
 while(1) {
  $184 = $42;
  $185 = ((($183)) + 4|0);
  $186 = HEAP32[$185>>2]|0;
  $187 = ($184|0)!=($186|0);
  if (!($187)) {
   break;
  }
  $40 = $183;
  $188 = $40;
  $189 = ((($188)) + 8|0);
  $39 = $189;
  $190 = $39;
  $38 = $190;
  $191 = $38;
  $192 = ((($183)) + 4|0);
  $193 = HEAP32[$192>>2]|0;
  $194 = ((($193)) + -4|0);
  HEAP32[$192>>2] = $194;
  $37 = $194;
  $195 = $37;
  $34 = $191;
  $35 = $195;
  $196 = $34;
  $197 = $35;
  ;HEAP8[$33>>0]=HEAP8[$36>>0]|0;
  $31 = $196;
  $32 = $197;
  $198 = $31;
  $199 = $32;
  $29 = $198;
  $30 = $199;
 }
 $200 = $__old_size$i$i;
 __THREW__ = 0;
 invoke_vii(385,($173|0),($200|0));
 $201 = __THREW__; __THREW__ = 0;
 $202 = $201&1;
 if ($202) {
  $203 = ___cxa_find_matching_catch(0|0)|0;
  $204 = tempRet0;
  ___clang_call_terminate($203);
  // unreachable;
 }
 $205 = HEAP32[$55>>2]|0;
 HEAP32[$81>>2] = $205;
 $206 = $79;
 $207 = HEAP32[$206>>2]|0;
 $208 = ((($207)) + 12|0);
 $209 = HEAP32[$208>>2]|0;
 (FUNCTION_TABLE_ii[$209 & 1023]($206)|0);
 $$expand_i1_val = 1;
 HEAP8[$77>>0] = $$expand_i1_val;
 $$pre_trunc = HEAP8[$77>>0]|0;
 $215 = $$pre_trunc&1;
 STACKTOP = sp;return ($215|0);
}
function __ZN4NGIS4Data6Schema14CUdxNodeSchema15removeChildNodeEi($this,$idx) {
 $this = $this|0;
 $idx = $idx|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__n$i$i$i = 0, $__old_size$i$i = 0, $__p$i = 0, $__ps$i = 0, $end = 0, $it = 0, $pNode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $22 = sp + 260|0;
 $33 = sp + 8|0;
 $36 = sp + 357|0;
 $48 = sp + 160|0;
 $51 = sp + 148|0;
 $53 = sp + 140|0;
 $55 = sp + 132|0;
 $57 = sp + 120|0;
 $58 = sp;
 $61 = sp + 104|0;
 $64 = sp + 92|0;
 $67 = sp + 80|0;
 $72 = sp + 60|0;
 $75 = sp + 48|0;
 $77 = sp + 356|0;
 $it = sp + 28|0;
 $end = sp + 24|0;
 $80 = sp + 20|0;
 $81 = sp + 16|0;
 $82 = sp + 12|0;
 $78 = $this;
 $79 = $idx;
 $83 = $78;
 $84 = HEAP32[$83>>2]|0;
 $85 = ((($84)) + 40|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = $79;
 $88 = (FUNCTION_TABLE_iii[$86 & 1023]($83,$87)|0);
 $pNode = $88;
 $89 = $pNode;
 $90 = ($89|0)==(0|0);
 if ($90) {
  $$expand_i1_val = 0;
  HEAP8[$77>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$77>>0]|0;
  $222 = $$pre_trunc&1;
  STACKTOP = sp;return ($222|0);
 }
 $91 = ((($83)) + 24|0);
 $76 = $91;
 $92 = $76;
 $93 = HEAP32[$92>>2]|0;
 $73 = $92;
 $74 = $93;
 $94 = $74;
 $70 = $72;
 $71 = $94;
 $95 = $70;
 $96 = $71;
 HEAP32[$95>>2] = $96;
 $97 = HEAP32[$72>>2]|0;
 HEAP32[$75>>2] = $97;
 $98 = HEAP32[$75>>2]|0;
 HEAP32[$it>>2] = $98;
 $99 = ((($83)) + 24|0);
 $65 = $99;
 $100 = $65;
 $101 = ((($100)) + 4|0);
 $102 = HEAP32[$101>>2]|0;
 $62 = $100;
 $63 = $102;
 $103 = $63;
 $59 = $61;
 $60 = $103;
 $104 = $59;
 $105 = $60;
 HEAP32[$104>>2] = $105;
 $106 = HEAP32[$61>>2]|0;
 HEAP32[$64>>2] = $106;
 $107 = HEAP32[$64>>2]|0;
 HEAP32[$end>>2] = $107;
 while(1) {
  $9 = $it;
  $10 = $end;
  $108 = $9;
  $109 = $10;
  $7 = $108;
  $8 = $109;
  $110 = $7;
  $6 = $110;
  $111 = $6;
  $112 = HEAP32[$111>>2]|0;
  $113 = $8;
  $5 = $113;
  $114 = $5;
  $115 = HEAP32[$114>>2]|0;
  $116 = ($112|0)==($115|0);
  $117 = $116 ^ 1;
  if (!($117)) {
   label = 13;
   break;
  }
  $4 = $it;
  $118 = $4;
  $119 = HEAP32[$118>>2]|0;
  $120 = HEAP32[$119>>2]|0;
  $121 = $pNode;
  $122 = ($120|0)==($121|0);
  if ($122) {
   break;
  }
  $68 = $it;
  $69 = 0;
  $217 = $68;
  ;HEAP32[$67>>2]=HEAP32[$217>>2]|0;
  $66 = $217;
  $218 = $66;
  $219 = HEAP32[$218>>2]|0;
  $220 = ((($219)) + 4|0);
  HEAP32[$218>>2] = $220;
  $221 = HEAP32[$67>>2]|0;
  HEAP32[$82>>2] = $221;
 }
 if ((label|0) == 13) {
  $$expand_i1_val4 = 0;
  HEAP8[$77>>0] = $$expand_i1_val4;
  $$pre_trunc = HEAP8[$77>>0]|0;
  $222 = $$pre_trunc&1;
  STACKTOP = sp;return ($222|0);
 }
 $123 = ((($83)) + 24|0);
 $1 = $80;
 $2 = $it;
 $3 = 0;
 $124 = $1;
 $125 = $2;
 $0 = $125;
 $126 = $0;
 $127 = HEAP32[$126>>2]|0;
 HEAP32[$124>>2] = $127;
 ;HEAP8[$58>>0]=HEAP8[$80>>0]|0;HEAP8[$58+1>>0]=HEAP8[$80+1>>0]|0;HEAP8[$58+2>>0]=HEAP8[$80+2>>0]|0;HEAP8[$58+3>>0]=HEAP8[$80+3>>0]|0;
 $56 = $123;
 $128 = $56;
 $54 = $128;
 $129 = $54;
 $52 = $129;
 $130 = $52;
 $131 = HEAP32[$130>>2]|0;
 $49 = $130;
 $50 = $131;
 $132 = $50;
 $46 = $48;
 $47 = $132;
 $133 = $46;
 $134 = $47;
 HEAP32[$133>>2] = $134;
 $135 = HEAP32[$48>>2]|0;
 HEAP32[$51>>2] = $135;
 $136 = HEAP32[$51>>2]|0;
 HEAP32[$53>>2] = $136;
 $137 = HEAP32[$53>>2]|0;
 HEAP32[$57>>2] = $137;
 $27 = $58;
 $28 = $57;
 $138 = $27;
 $26 = $138;
 $139 = $26;
 $140 = HEAP32[$139>>2]|0;
 $141 = $28;
 $25 = $141;
 $142 = $25;
 $143 = HEAP32[$142>>2]|0;
 $144 = $140;
 $145 = $143;
 $146 = (($144) - ($145))|0;
 $147 = (($146|0) / 4)&-1;
 $__ps$i = $147;
 $148 = HEAP32[$128>>2]|0;
 $149 = $__ps$i;
 $150 = (($148) + ($149<<2)|0);
 $__p$i = $150;
 $151 = $__p$i;
 $23 = $128;
 $24 = $151;
 $152 = $24;
 $20 = $22;
 $21 = $152;
 $153 = $20;
 $154 = $21;
 HEAP32[$153>>2] = $154;
 $155 = HEAP32[$22>>2]|0;
 HEAP32[$55>>2] = $155;
 $156 = $__p$i;
 $157 = ((($156)) + 4|0);
 $158 = ((($128)) + 4|0);
 $159 = HEAP32[$158>>2]|0;
 $160 = $__p$i;
 $17 = $157;
 $18 = $159;
 $19 = $160;
 $161 = $17;
 $16 = $161;
 $162 = $16;
 $163 = $18;
 $11 = $163;
 $164 = $11;
 $165 = $19;
 $12 = $165;
 $166 = $12;
 $13 = $162;
 $14 = $164;
 $15 = $166;
 $167 = $14;
 $168 = $13;
 $169 = $167;
 $170 = $168;
 $171 = (($169) - ($170))|0;
 $172 = (($171|0) / 4)&-1;
 $__n$i$i$i = $172;
 $173 = $15;
 $174 = $13;
 $175 = $__n$i$i$i;
 $176 = $175<<2;
 _memmove(($173|0),($174|0),($176|0))|0;
 $177 = $15;
 $178 = $__n$i$i$i;
 $179 = (($177) + ($178<<2)|0);
 $44 = $128;
 $45 = $179;
 $180 = $44;
 $43 = $180;
 $181 = $43;
 $182 = ((($181)) + 4|0);
 $183 = HEAP32[$182>>2]|0;
 $184 = HEAP32[$181>>2]|0;
 $185 = $183;
 $186 = $184;
 $187 = (($185) - ($186))|0;
 $188 = (($187|0) / 4)&-1;
 $__old_size$i$i = $188;
 $189 = $45;
 $41 = $180;
 $42 = $189;
 $190 = $41;
 while(1) {
  $191 = $42;
  $192 = ((($190)) + 4|0);
  $193 = HEAP32[$192>>2]|0;
  $194 = ($191|0)!=($193|0);
  if (!($194)) {
   break;
  }
  $40 = $190;
  $195 = $40;
  $196 = ((($195)) + 8|0);
  $39 = $196;
  $197 = $39;
  $38 = $197;
  $198 = $38;
  $199 = ((($190)) + 4|0);
  $200 = HEAP32[$199>>2]|0;
  $201 = ((($200)) + -4|0);
  HEAP32[$199>>2] = $201;
  $37 = $201;
  $202 = $37;
  $34 = $198;
  $35 = $202;
  $203 = $34;
  $204 = $35;
  ;HEAP8[$33>>0]=HEAP8[$36>>0]|0;
  $31 = $203;
  $32 = $204;
  $205 = $31;
  $206 = $32;
  $29 = $205;
  $30 = $206;
 }
 $207 = $__old_size$i$i;
 __THREW__ = 0;
 invoke_vii(385,($180|0),($207|0));
 $208 = __THREW__; __THREW__ = 0;
 $209 = $208&1;
 if ($209) {
  $210 = ___cxa_find_matching_catch(0|0)|0;
  $211 = tempRet0;
  ___clang_call_terminate($210);
  // unreachable;
 }
 $212 = HEAP32[$55>>2]|0;
 HEAP32[$81>>2] = $212;
 $213 = $pNode;
 $214 = HEAP32[$213>>2]|0;
 $215 = ((($214)) + 12|0);
 $216 = HEAP32[$215>>2]|0;
 (FUNCTION_TABLE_ii[$216 & 1023]($213)|0);
 $$expand_i1_val2 = 1;
 HEAP8[$77>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$77>>0]|0;
 $222 = $$pre_trunc&1;
 STACKTOP = sp;return ($222|0);
}
function __ZN4NGIS4Data6Schema14IUdxNodeSchemaC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4NGIS4Data10INxUnknownC2Ev($1);
 $2 = 2388;
 HEAP32[$1>>2] = $2;
 STACKTOP = sp;return;
}
function __ZNSt3__111char_traitsIcE6lengthEPKc($__s) {
 $__s = $__s|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__s;
 $1 = $0;
 $2 = (_strlen($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNSt3__16vectorIPN4NGIS4Data6Schema14IUdxNodeSchemaENS_9allocatorIS5_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIPN4NGIS4Data6Schema14IUdxNodeSchemaENS_9allocatorIS5_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data6Schema14IUdxNodeSchemaD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4NGIS4Data10INxUnknownD2Ev($1);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIPN4NGIS4Data6Schema14IUdxNodeSchemaENS_9allocatorIS5_EEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 4)&-1;
 $35 = (($22) + ($34<<2)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + ($39<<2)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 4)&-1;
 $52 = (($43) + ($51<<2)|0);
 __ZNKSt3__16vectorIPN4NGIS4Data6Schema14IUdxNodeSchemaENS_9allocatorIS5_EEE31__annotate_contiguous_containerEPKvSA_SA_SA_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZNSt3__111char_traitsIcE7compareEPKcS3_j($__s1,$__s2,$__n) {
 $__s1 = $__s1|0;
 $__s2 = $__s2|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__s1;
 $1 = $__s2;
 $2 = $__n;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = (_memcmp($3,$4,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZNSt3__16vectorIPN4NGIS4Data6Schema14IUdxNodeSchemaENS_9allocatorIS5_EEE24__RAII_IncreaseAnnotatorC2ERKS8_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPN4NGIS4Data6Schema14IUdxNodeSchemaENS_9allocatorIS5_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPN4NGIS4Data6Schema14IUdxNodeSchemaENS_9allocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp + 8|0;
 $13 = sp + 201|0;
 $22 = sp;
 $25 = sp + 200|0;
 $33 = sp + 80|0;
 $34 = sp + 68|0;
 $__v = sp + 20|0;
 $39 = $this;
 $40 = $__x;
 $43 = $39;
 $38 = $43;
 $44 = $38;
 $45 = ((($44)) + 8|0);
 $37 = $45;
 $46 = $37;
 $36 = $46;
 $47 = $36;
 $__a = $47;
 $35 = $43;
 $48 = $35;
 $49 = ((($48)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP32[$48>>2]|0;
 $52 = $50;
 $53 = $51;
 $54 = (($52) - ($53))|0;
 $55 = (($54|0) / 4)&-1;
 $56 = (($55) + 1)|0;
 $32 = $43;
 HEAP32[$33>>2] = $56;
 $57 = $32;
 $58 = (__ZNKSt3__16vectorIPN4NGIS4Data6Schema14IUdxNodeSchemaENS_9allocatorIS5_EEE8max_sizeEv($57)|0);
 $__ms$i = $58;
 $59 = HEAP32[$33>>2]|0;
 $60 = $__ms$i;
 $61 = ($59>>>0)>($60>>>0);
 if ($61) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($57);
  // unreachable;
 }
 $30 = $57;
 $62 = $30;
 $29 = $62;
 $63 = $29;
 $28 = $63;
 $64 = $28;
 $65 = ((($64)) + 8|0);
 $27 = $65;
 $66 = $27;
 $26 = $66;
 $67 = $26;
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$63>>2]|0;
 $70 = $68;
 $71 = $69;
 $72 = (($70) - ($71))|0;
 $73 = (($72|0) / 4)&-1;
 $__cap$i = $73;
 $74 = $__cap$i;
 $75 = $__ms$i;
 $76 = (($75>>>0) / 2)&-1;
 $77 = ($74>>>0)>=($76>>>0);
 if ($77) {
  $78 = $__ms$i;
  $31 = $78;
 } else {
  $79 = $__cap$i;
  $80 = $79<<1;
  HEAP32[$34>>2] = $80;
  $23 = $34;
  $24 = $33;
  $81 = $23;
  $82 = $24;
  ;HEAP8[$22>>0]=HEAP8[$25>>0]|0;
  $20 = $81;
  $21 = $82;
  $83 = $20;
  $84 = $21;
  $17 = $22;
  $18 = $83;
  $19 = $84;
  $85 = $18;
  $86 = HEAP32[$85>>2]|0;
  $87 = $19;
  $88 = HEAP32[$87>>2]|0;
  $89 = ($86>>>0)<($88>>>0);
  $90 = $21;
  $91 = $20;
  $92 = $89 ? $90 : $91;
  $93 = HEAP32[$92>>2]|0;
  $31 = $93;
 }
 $94 = $31;
 $16 = $43;
 $95 = $16;
 $96 = ((($95)) + 4|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = HEAP32[$95>>2]|0;
 $99 = $97;
 $100 = $98;
 $101 = (($99) - ($100))|0;
 $102 = (($101|0) / 4)&-1;
 $103 = $__a;
 __ZNSt3__114__split_bufferIPN4NGIS4Data6Schema14IUdxNodeSchemaERNS_9allocatorIS5_EEEC2EjjS8_($__v,$94,$102,$103);
 $104 = $__a;
 $105 = ((($__v)) + 8|0);
 $106 = HEAP32[$105>>2]|0;
 $15 = $106;
 $107 = $15;
 $108 = $40;
 $14 = $108;
 $109 = $14;
 $10 = $104;
 $11 = $107;
 $12 = $109;
 $110 = $10;
 $111 = $11;
 $112 = $12;
 $9 = $112;
 $113 = $9;
 ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
 $5 = $110;
 $6 = $111;
 $7 = $113;
 $114 = $5;
 $115 = $6;
 $116 = $7;
 $4 = $116;
 $117 = $4;
 $1 = $114;
 $2 = $115;
 $3 = $117;
 $118 = $2;
 $119 = $3;
 $0 = $119;
 $120 = $0;
 $121 = HEAP32[$120>>2]|0;
 HEAP32[$118>>2] = $121;
 $122 = ((($__v)) + 8|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = ((($123)) + 4|0);
 HEAP32[$122>>2] = $124;
 __THREW__ = 0;
 invoke_vii(390,($43|0),($__v|0));
 $125 = __THREW__; __THREW__ = 0;
 $126 = $125&1;
 if ($126) {
  $127 = ___cxa_find_matching_catch()|0;
  $128 = tempRet0;
  $41 = $127;
  $42 = $128;
  __ZNSt3__114__split_bufferIPN4NGIS4Data6Schema14IUdxNodeSchemaERNS_9allocatorIS5_EEED2Ev($__v);
  $129 = $41;
  $130 = $42;
  ___resumeException($129|0);
  // unreachable;
 } else {
  __ZNSt3__114__split_bufferIPN4NGIS4Data6Schema14IUdxNodeSchemaERNS_9allocatorIS5_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
}
function __ZN4NGIS4Data6Schema21CUdxSchemaDescriptionC2ENS1_15ESchemaNodeTypeEPKc($this,$pKernelType,$pNodeDescription) {
 $this = $this|0;
 $pKernelType = $pKernelType|0;
 $pNodeDescription = $pNodeDescription|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__a$i$i = 0, $__a$i$i1 = 0, $__a$i$i12 = 0, $__a$i$i16 = 0, $__a$i$i4 = 0, $__a$i$i8 = 0, $__i$i$i = 0, $__i$i$i13 = 0, $__i$i$i17 = 0, $__i$i$i2 = 0, $__i$i$i5 = 0, $__i$i$i9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $54 = $this;
 $55 = $pKernelType;
 $56 = $pNodeDescription;
 $59 = $54;
 __ZN4NGIS4Data6Schema16INodeDescriptionC2Ev($59);
 $60 = 2192;
 HEAP32[$59>>2] = $60;
 $61 = ((($59)) + 12|0);
 $53 = $61;
 $62 = $53;
 $52 = $62;
 $63 = $52;
 $51 = $63;
 $64 = $51;
 $50 = $64;
 $49 = $62;
 $65 = $49;
 $48 = $65;
 $66 = $48;
 $47 = $66;
 $67 = $47;
 $__a$i$i = $67;
 $__i$i$i = 0;
 while(1) {
  $68 = $__i$i$i;
  $69 = ($68>>>0)<(3);
  if (!($69)) {
   break;
  }
  $70 = $__i$i$i;
  $71 = $__a$i$i;
  $72 = (($71) + ($70<<2)|0);
  HEAP32[$72>>2] = 0;
  $73 = $__i$i$i;
  $74 = (($73) + 1)|0;
  $__i$i$i = $74;
 }
 $75 = ((($59)) + 24|0);
 $46 = $75;
 $76 = $46;
 $45 = $76;
 $77 = $45;
 $44 = $77;
 $78 = $44;
 $43 = $78;
 $42 = $76;
 $79 = $42;
 $41 = $79;
 $80 = $41;
 $40 = $80;
 $81 = $40;
 $__a$i$i1 = $81;
 $__i$i$i2 = 0;
 while(1) {
  $82 = $__i$i$i2;
  $83 = ($82>>>0)<(3);
  if (!($83)) {
   break;
  }
  $84 = $__i$i$i2;
  $85 = $__a$i$i1;
  $86 = (($85) + ($84<<2)|0);
  HEAP32[$86>>2] = 0;
  $87 = $__i$i$i2;
  $88 = (($87) + 1)|0;
  $__i$i$i2 = $88;
 }
 $89 = ((($59)) + 36|0);
 $37 = $89;
 $90 = $37;
 $36 = $90;
 $91 = $36;
 $35 = $91;
 $92 = $35;
 $34 = $92;
 $33 = $90;
 $93 = $33;
 $32 = $93;
 $94 = $32;
 $31 = $94;
 $95 = $31;
 $__a$i$i4 = $95;
 $__i$i$i5 = 0;
 while(1) {
  $96 = $__i$i$i5;
  $97 = ($96>>>0)<(3);
  if (!($97)) {
   break;
  }
  $98 = $__i$i$i5;
  $99 = $__a$i$i4;
  $100 = (($99) + ($98<<2)|0);
  HEAP32[$100>>2] = 0;
  $101 = $__i$i$i5;
  $102 = (($101) + 1)|0;
  $__i$i$i5 = $102;
 }
 $103 = ((($59)) + 48|0);
 $28 = $103;
 $104 = $28;
 $27 = $104;
 $105 = $27;
 $26 = $105;
 $106 = $26;
 $25 = $106;
 $24 = $104;
 $107 = $24;
 $23 = $107;
 $108 = $23;
 $22 = $108;
 $109 = $22;
 $__a$i$i8 = $109;
 $__i$i$i9 = 0;
 while(1) {
  $110 = $__i$i$i9;
  $111 = ($110>>>0)<(3);
  if (!($111)) {
   break;
  }
  $112 = $__i$i$i9;
  $113 = $__a$i$i8;
  $114 = (($113) + ($112<<2)|0);
  HEAP32[$114>>2] = 0;
  $115 = $__i$i$i9;
  $116 = (($115) + 1)|0;
  $__i$i$i9 = $116;
 }
 $117 = ((($59)) + 60|0);
 $19 = $117;
 $118 = $19;
 $18 = $118;
 $119 = $18;
 $17 = $119;
 $120 = $17;
 $16 = $120;
 $15 = $118;
 $121 = $15;
 $14 = $121;
 $122 = $14;
 $13 = $122;
 $123 = $13;
 $__a$i$i12 = $123;
 $__i$i$i13 = 0;
 while(1) {
  $124 = $__i$i$i13;
  $125 = ($124>>>0)<(3);
  if (!($125)) {
   break;
  }
  $126 = $__i$i$i13;
  $127 = $__a$i$i12;
  $128 = (($127) + ($126<<2)|0);
  HEAP32[$128>>2] = 0;
  $129 = $__i$i$i13;
  $130 = (($129) + 1)|0;
  $__i$i$i13 = $130;
 }
 $131 = ((($59)) + 72|0);
 $10 = $131;
 $132 = $10;
 $9 = $132;
 $133 = $9;
 $8 = $133;
 $134 = $8;
 $7 = $134;
 $6 = $132;
 $135 = $6;
 $5 = $135;
 $136 = $5;
 $4 = $136;
 $137 = $4;
 $__a$i$i16 = $137;
 $__i$i$i17 = 0;
 while(1) {
  $138 = $__i$i$i17;
  $139 = ($138>>>0)<(3);
  if (!($139)) {
   break;
  }
  $140 = $__i$i$i17;
  $141 = $__a$i$i16;
  $142 = (($141) + ($140<<2)|0);
  HEAP32[$142>>2] = 0;
  $143 = $__i$i$i17;
  $144 = (($143) + 1)|0;
  $__i$i$i17 = $144;
 }
 $145 = $55;
 $146 = ((($59)) + 8|0);
 HEAP32[$146>>2] = $145;
 $147 = ((($59)) + 12|0);
 $148 = $56;
 $0 = $147;
 $1 = $148;
 $149 = $0;
 $150 = $1;
 __THREW__ = 0;
 (invoke_iii(387,($149|0),($150|0))|0);
 $151 = __THREW__; __THREW__ = 0;
 $152 = $151&1;
 if (!($152)) {
  $153 = ((($59)) + 24|0);
  $2 = $153;
  $3 = 11786;
  $154 = $2;
  $155 = $3;
  __THREW__ = 0;
  (invoke_iii(387,($154|0),($155|0))|0);
  $156 = __THREW__; __THREW__ = 0;
  $157 = $156&1;
  if (!($157)) {
   $158 = ((($59)) + 36|0);
   $11 = $158;
   $12 = 11786;
   $159 = $11;
   $160 = $12;
   __THREW__ = 0;
   (invoke_iii(387,($159|0),($160|0))|0);
   $161 = __THREW__; __THREW__ = 0;
   $162 = $161&1;
   if (!($162)) {
    $163 = ((($59)) + 48|0);
    $20 = $163;
    $21 = 11786;
    $164 = $20;
    $165 = $21;
    __THREW__ = 0;
    (invoke_iii(387,($164|0),($165|0))|0);
    $166 = __THREW__; __THREW__ = 0;
    $167 = $166&1;
    if (!($167)) {
     $168 = ((($59)) + 60|0);
     $29 = $168;
     $30 = 11786;
     $169 = $29;
     $170 = $30;
     __THREW__ = 0;
     (invoke_iii(387,($169|0),($170|0))|0);
     $171 = __THREW__; __THREW__ = 0;
     $172 = $171&1;
     if (!($172)) {
      $173 = ((($59)) + 72|0);
      $38 = $173;
      $39 = 11786;
      $174 = $38;
      $175 = $39;
      __THREW__ = 0;
      (invoke_iii(387,($174|0),($175|0))|0);
      $176 = __THREW__; __THREW__ = 0;
      $177 = $176&1;
      if (!($177)) {
       STACKTOP = sp;return;
      }
     }
    }
   }
  }
 }
 $178 = ___cxa_find_matching_catch()|0;
 $179 = tempRet0;
 $57 = $178;
 $58 = $179;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($131);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($117);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($103);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($89);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($75);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($61);
 __ZN4NGIS4Data6Schema16INodeDescriptionD2Ev($59);
 $180 = $57;
 $181 = $58;
 ___resumeException($180|0);
 // unreachable;
}
function __ZN4NGIS4Data10INxUnknown6addRefEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[$2>>2] = $4;
 STACKTOP = sp;return ($4|0);
}
function __ZN4NGIS4Data10INxUnknown7releaseEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + -1)|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($2)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0);
 if ($8) {
  $13 = ((($2)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $0 = $14;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 }
 $9 = ($2|0)==(0|0);
 if (!($9)) {
  $10 = HEAP32[$2>>2]|0;
  $11 = ((($10)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  FUNCTION_TABLE_vi[$12 & 1023]($2);
 }
 $0 = 0;
 $15 = $0;
 STACKTOP = sp;return ($15|0);
}
function __ZN4NGIS4Data10INxUnknown19getReferenceCounterEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN4NGIS4Data6Schema16INodeDescriptionC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4NGIS4Data10INxUnknownC2Ev($1);
 $2 = 2276;
 HEAP32[$1>>2] = $2;
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data6Schema16INodeDescriptionD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4NGIS4Data10INxUnknownD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data10INxUnknownD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data6Schema21CUdxSchemaDescriptionD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 2192;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 72|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
 $4 = ((($1)) + 60|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
 $5 = ((($1)) + 48|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
 $6 = ((($1)) + 36|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6);
 $7 = ((($1)) + 24|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
 $8 = ((($1)) + 12|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 __ZN4NGIS4Data6Schema16INodeDescriptionD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data6Schema21CUdxSchemaDescriptionD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4NGIS4Data6Schema21CUdxSchemaDescriptionD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data6Schema21CUdxSchemaDescription13getKernelTypeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN4NGIS4Data6Schema21CUdxSchemaDescription16modifyKernelTypeENS1_15ESchemaNodeTypeE($this,$pKernelType) {
 $this = $this|0;
 $pKernelType = $pKernelType|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 8|0;
 $1 = $this;
 $2 = $pKernelType;
 $3 = $1;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $2;
 $7 = ($5|0)==($6|0);
 if ($7) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
 } else {
  $8 = $2;
  $9 = ((($3)) + 8|0);
  HEAP32[$9>>2] = $8;
  $$expand_i1_val2 = 1;
  HEAP8[$0>>0] = $$expand_i1_val2;
 }
 $$pre_trunc = HEAP8[$0>>0]|0;
 $10 = $$pre_trunc&1;
 STACKTOP = sp;return ($10|0);
}
function __ZN4NGIS4Data6Schema21CUdxSchemaDescription18getNodeDescriptionEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $15 = $this;
 $16 = $15;
 $17 = ((($16)) + 12|0);
 $14 = $17;
 $18 = $14;
 $13 = $18;
 $19 = $13;
 $12 = $19;
 $20 = $12;
 $11 = $20;
 $21 = $11;
 $10 = $21;
 $22 = $10;
 $9 = $22;
 $23 = $9;
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 $26 = $25 & 1;
 $27 = ($26|0)!=(0);
 if ($27) {
  $3 = $20;
  $28 = $3;
  $2 = $28;
  $29 = $2;
  $1 = $29;
  $30 = $1;
  $31 = ((($30)) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $39 = $32;
  $0 = $39;
  $40 = $0;
  STACKTOP = sp;return ($40|0);
 } else {
  $8 = $20;
  $33 = $8;
  $7 = $33;
  $34 = $7;
  $6 = $34;
  $35 = $6;
  $36 = ((($35)) + 1|0);
  $5 = $36;
  $37 = $5;
  $4 = $37;
  $38 = $4;
  $39 = $38;
  $0 = $39;
  $40 = $0;
  STACKTOP = sp;return ($40|0);
 }
 return (0)|0;
}
function __ZN4NGIS4Data6Schema21CUdxSchemaDescription21modifyNodeDescriptionEPKc($this,$pNodeInfo) {
 $this = $this|0;
 $pNodeInfo = $pNodeInfo|0;
 var $$expand_i1_val = 0, $$expand_i1_val11 = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val9 = 0, $$pre_trunc = 0, $$pre_trunc13 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__lhs_sz$i = 0, $__lp$i = 0, $__rp$i = 0, $pInfoStr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $51 = sp + 277|0;
 $59 = sp + 276|0;
 $pInfoStr = sp + 12|0;
 $60 = $this;
 $61 = $pNodeInfo;
 $65 = $60;
 $66 = $61;
 $57 = $pInfoStr;
 $58 = $66;
 $67 = $57;
 $56 = $67;
 $68 = $56;
 $55 = $68;
 $69 = $55;
 $54 = $69;
 $70 = $58;
 $71 = $58;
 $72 = (__ZNSt3__111char_traitsIcE6lengthEPKc($71)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($67,$70,$72);
 $73 = ((($65)) + 12|0);
 $52 = $73;
 $53 = $pInfoStr;
 $74 = $52;
 $50 = $74;
 $75 = $50;
 $49 = $75;
 $76 = $49;
 $48 = $76;
 $77 = $48;
 $47 = $77;
 $78 = $47;
 $79 = HEAP8[$78>>0]|0;
 $80 = $79&255;
 $81 = $80 & 1;
 $82 = ($81|0)!=(0);
 if ($82) {
  $43 = $75;
  $83 = $43;
  $42 = $83;
  $84 = $42;
  $41 = $84;
  $85 = $41;
  $86 = ((($85)) + 4|0);
  $87 = HEAP32[$86>>2]|0;
  $94 = $87;
 } else {
  $46 = $75;
  $88 = $46;
  $45 = $88;
  $89 = $45;
  $44 = $89;
  $90 = $44;
  $91 = HEAP8[$90>>0]|0;
  $92 = $91&255;
  $93 = $92 >> 1;
  $94 = $93;
 }
 $__lhs_sz$i = $94;
 $95 = $__lhs_sz$i;
 $96 = $53;
 $40 = $96;
 $97 = $40;
 $39 = $97;
 $98 = $39;
 $38 = $98;
 $99 = $38;
 $37 = $99;
 $100 = $37;
 $101 = HEAP8[$100>>0]|0;
 $102 = $101&255;
 $103 = $102 & 1;
 $104 = ($103|0)!=(0);
 if ($104) {
  $33 = $97;
  $105 = $33;
  $32 = $105;
  $106 = $32;
  $31 = $106;
  $107 = $31;
  $108 = ((($107)) + 4|0);
  $109 = HEAP32[$108>>2]|0;
  $117 = $109;
 } else {
  $36 = $97;
  $110 = $36;
  $35 = $110;
  $111 = $35;
  $34 = $111;
  $112 = $34;
  $113 = HEAP8[$112>>0]|0;
  $114 = $113&255;
  $115 = $114 >> 1;
  $117 = $115;
 }
 $116 = ($95|0)!=($117|0);
 do {
  if ($116) {
   $$expand_i1_val = 0;
   HEAP8[$51>>0] = $$expand_i1_val;
  } else {
   $118 = $52;
   $30 = $118;
   $119 = $30;
   $29 = $119;
   $120 = $29;
   $28 = $120;
   $121 = $28;
   $27 = $121;
   $122 = $27;
   $26 = $122;
   $123 = $26;
   $124 = HEAP8[$123>>0]|0;
   $125 = $124&255;
   $126 = $125 & 1;
   $127 = ($126|0)!=(0);
   if ($127) {
    $20 = $120;
    $128 = $20;
    $19 = $128;
    $129 = $19;
    $18 = $129;
    $130 = $18;
    $131 = ((($130)) + 8|0);
    $132 = HEAP32[$131>>2]|0;
    $139 = $132;
   } else {
    $25 = $120;
    $133 = $25;
    $24 = $133;
    $134 = $24;
    $23 = $134;
    $135 = $23;
    $136 = ((($135)) + 1|0);
    $22 = $136;
    $137 = $22;
    $21 = $137;
    $138 = $21;
    $139 = $138;
   }
   $17 = $139;
   $140 = $17;
   $__lp$i = $140;
   $141 = $53;
   $13 = $141;
   $142 = $13;
   $12 = $142;
   $143 = $12;
   $11 = $143;
   $144 = $11;
   $10 = $144;
   $145 = $10;
   $9 = $145;
   $146 = $9;
   $147 = HEAP8[$146>>0]|0;
   $148 = $147&255;
   $149 = $148 & 1;
   $150 = ($149|0)!=(0);
   if ($150) {
    $3 = $143;
    $151 = $3;
    $2 = $151;
    $152 = $2;
    $1 = $152;
    $153 = $1;
    $154 = ((($153)) + 8|0);
    $155 = HEAP32[$154>>2]|0;
    $162 = $155;
   } else {
    $8 = $143;
    $156 = $8;
    $7 = $156;
    $157 = $7;
    $6 = $157;
    $158 = $6;
    $159 = ((($158)) + 1|0);
    $5 = $159;
    $160 = $5;
    $4 = $160;
    $161 = $4;
    $162 = $161;
   }
   $0 = $162;
   $163 = $0;
   $__rp$i = $163;
   $164 = $52;
   $16 = $164;
   $165 = $16;
   $15 = $165;
   $166 = $15;
   $14 = $166;
   $167 = $14;
   $168 = HEAP8[$167>>0]|0;
   $169 = $168&255;
   $170 = $169 & 1;
   $171 = ($170|0)!=(0);
   if ($171) {
    $172 = $__lp$i;
    $173 = $__rp$i;
    $174 = $__lhs_sz$i;
    __THREW__ = 0;
    $175 = (invoke_iiii(386,($172|0),($173|0),($174|0))|0);
    $176 = __THREW__; __THREW__ = 0;
    $177 = $176&1;
    if ($177) {
     $194 = ___cxa_find_matching_catch(0|0)|0;
     $195 = tempRet0;
     ___clang_call_terminate($194);
     // unreachable;
    } else {
     $178 = ($175|0)==(0);
     $$expand_i1_val2 = $178&1;
     HEAP8[$51>>0] = $$expand_i1_val2;
     break;
    }
   }
   while(1) {
    $179 = $__lhs_sz$i;
    $180 = ($179|0)!=(0);
    if (!($180)) {
     label = 22;
     break;
    }
    $181 = $__lp$i;
    $182 = HEAP8[$181>>0]|0;
    $183 = $182 << 24 >> 24;
    $184 = $__rp$i;
    $185 = HEAP8[$184>>0]|0;
    $186 = $185 << 24 >> 24;
    $187 = ($183|0)!=($186|0);
    if ($187) {
     label = 20;
     break;
    }
    $188 = $__lhs_sz$i;
    $189 = (($188) + -1)|0;
    $__lhs_sz$i = $189;
    $190 = $__lp$i;
    $191 = ((($190)) + 1|0);
    $__lp$i = $191;
    $192 = $__rp$i;
    $193 = ((($192)) + 1|0);
    $__rp$i = $193;
   }
   if ((label|0) == 20) {
    $$expand_i1_val4 = 0;
    HEAP8[$51>>0] = $$expand_i1_val4;
    break;
   }
   else if ((label|0) == 22) {
    $$expand_i1_val6 = 1;
    HEAP8[$51>>0] = $$expand_i1_val6;
    break;
   }
  }
 } while(0);
 $$pre_trunc = HEAP8[$51>>0]|0;
 $196 = $$pre_trunc&1;
 if ($196) {
  $$expand_i1_val9 = 0;
  HEAP8[$59>>0] = $$expand_i1_val9;
  $62 = 1;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($pInfoStr);
  $$pre_trunc13 = HEAP8[$59>>0]|0;
  $204 = $$pre_trunc13&1;
  STACKTOP = sp;return ($204|0);
 }
 $197 = ((($65)) + 12|0);
 __THREW__ = 0;
 (invoke_iii(391,($197|0),($pInfoStr|0))|0);
 $198 = __THREW__; __THREW__ = 0;
 $199 = $198&1;
 if ($199) {
  $200 = ___cxa_find_matching_catch()|0;
  $201 = tempRet0;
  $63 = $200;
  $64 = $201;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($pInfoStr);
  $202 = $63;
  $203 = $64;
  ___resumeException($202|0);
  // unreachable;
 }
 $$expand_i1_val11 = 1;
 HEAP8[$59>>0] = $$expand_i1_val11;
 $62 = 1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($pInfoStr);
 $$pre_trunc13 = HEAP8[$59>>0]|0;
 $204 = $$pre_trunc13&1;
 STACKTOP = sp;return ($204|0);
}
function __ZN4NGIS4Data6Schema21CUdxSchemaDescription13getConceptTagEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $15 = $this;
 $16 = $15;
 $17 = ((($16)) + 24|0);
 $14 = $17;
 $18 = $14;
 $13 = $18;
 $19 = $13;
 $12 = $19;
 $20 = $12;
 $11 = $20;
 $21 = $11;
 $10 = $21;
 $22 = $10;
 $9 = $22;
 $23 = $9;
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 $26 = $25 & 1;
 $27 = ($26|0)!=(0);
 if ($27) {
  $3 = $20;
  $28 = $3;
  $2 = $28;
  $29 = $2;
  $1 = $29;
  $30 = $1;
  $31 = ((($30)) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $39 = $32;
  $0 = $39;
  $40 = $0;
  STACKTOP = sp;return ($40|0);
 } else {
  $8 = $20;
  $33 = $8;
  $7 = $33;
  $34 = $7;
  $6 = $34;
  $35 = $6;
  $36 = ((($35)) + 1|0);
  $5 = $36;
  $37 = $5;
  $4 = $37;
  $38 = $4;
  $39 = $38;
  $0 = $39;
  $40 = $0;
  STACKTOP = sp;return ($40|0);
 }
 return (0)|0;
}
function __ZN4NGIS4Data6Schema21CUdxSchemaDescription16modifyConceptTagEPKc($this,$pTag) {
 $this = $this|0;
 $pTag = $pTag|0;
 var $$expand_i1_val = 0, $$expand_i1_val11 = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val9 = 0, $$pre_trunc = 0, $$pre_trunc13 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__lhs_sz$i = 0, $__lp$i = 0, $__rp$i = 0, $pTagStr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $51 = sp + 277|0;
 $59 = sp + 276|0;
 $pTagStr = sp + 12|0;
 $60 = $this;
 $61 = $pTag;
 $65 = $60;
 $66 = $61;
 $57 = $pTagStr;
 $58 = $66;
 $67 = $57;
 $56 = $67;
 $68 = $56;
 $55 = $68;
 $69 = $55;
 $54 = $69;
 $70 = $58;
 $71 = $58;
 $72 = (__ZNSt3__111char_traitsIcE6lengthEPKc($71)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($67,$70,$72);
 $73 = ((($65)) + 24|0);
 $52 = $73;
 $53 = $pTagStr;
 $74 = $52;
 $50 = $74;
 $75 = $50;
 $49 = $75;
 $76 = $49;
 $48 = $76;
 $77 = $48;
 $47 = $77;
 $78 = $47;
 $79 = HEAP8[$78>>0]|0;
 $80 = $79&255;
 $81 = $80 & 1;
 $82 = ($81|0)!=(0);
 if ($82) {
  $43 = $75;
  $83 = $43;
  $42 = $83;
  $84 = $42;
  $41 = $84;
  $85 = $41;
  $86 = ((($85)) + 4|0);
  $87 = HEAP32[$86>>2]|0;
  $94 = $87;
 } else {
  $46 = $75;
  $88 = $46;
  $45 = $88;
  $89 = $45;
  $44 = $89;
  $90 = $44;
  $91 = HEAP8[$90>>0]|0;
  $92 = $91&255;
  $93 = $92 >> 1;
  $94 = $93;
 }
 $__lhs_sz$i = $94;
 $95 = $__lhs_sz$i;
 $96 = $53;
 $40 = $96;
 $97 = $40;
 $39 = $97;
 $98 = $39;
 $38 = $98;
 $99 = $38;
 $37 = $99;
 $100 = $37;
 $101 = HEAP8[$100>>0]|0;
 $102 = $101&255;
 $103 = $102 & 1;
 $104 = ($103|0)!=(0);
 if ($104) {
  $33 = $97;
  $105 = $33;
  $32 = $105;
  $106 = $32;
  $31 = $106;
  $107 = $31;
  $108 = ((($107)) + 4|0);
  $109 = HEAP32[$108>>2]|0;
  $117 = $109;
 } else {
  $36 = $97;
  $110 = $36;
  $35 = $110;
  $111 = $35;
  $34 = $111;
  $112 = $34;
  $113 = HEAP8[$112>>0]|0;
  $114 = $113&255;
  $115 = $114 >> 1;
  $117 = $115;
 }
 $116 = ($95|0)!=($117|0);
 do {
  if ($116) {
   $$expand_i1_val = 0;
   HEAP8[$51>>0] = $$expand_i1_val;
  } else {
   $118 = $52;
   $30 = $118;
   $119 = $30;
   $29 = $119;
   $120 = $29;
   $28 = $120;
   $121 = $28;
   $27 = $121;
   $122 = $27;
   $26 = $122;
   $123 = $26;
   $124 = HEAP8[$123>>0]|0;
   $125 = $124&255;
   $126 = $125 & 1;
   $127 = ($126|0)!=(0);
   if ($127) {
    $20 = $120;
    $128 = $20;
    $19 = $128;
    $129 = $19;
    $18 = $129;
    $130 = $18;
    $131 = ((($130)) + 8|0);
    $132 = HEAP32[$131>>2]|0;
    $139 = $132;
   } else {
    $25 = $120;
    $133 = $25;
    $24 = $133;
    $134 = $24;
    $23 = $134;
    $135 = $23;
    $136 = ((($135)) + 1|0);
    $22 = $136;
    $137 = $22;
    $21 = $137;
    $138 = $21;
    $139 = $138;
   }
   $17 = $139;
   $140 = $17;
   $__lp$i = $140;
   $141 = $53;
   $13 = $141;
   $142 = $13;
   $12 = $142;
   $143 = $12;
   $11 = $143;
   $144 = $11;
   $10 = $144;
   $145 = $10;
   $9 = $145;
   $146 = $9;
   $147 = HEAP8[$146>>0]|0;
   $148 = $147&255;
   $149 = $148 & 1;
   $150 = ($149|0)!=(0);
   if ($150) {
    $3 = $143;
    $151 = $3;
    $2 = $151;
    $152 = $2;
    $1 = $152;
    $153 = $1;
    $154 = ((($153)) + 8|0);
    $155 = HEAP32[$154>>2]|0;
    $162 = $155;
   } else {
    $8 = $143;
    $156 = $8;
    $7 = $156;
    $157 = $7;
    $6 = $157;
    $158 = $6;
    $159 = ((($158)) + 1|0);
    $5 = $159;
    $160 = $5;
    $4 = $160;
    $161 = $4;
    $162 = $161;
   }
   $0 = $162;
   $163 = $0;
   $__rp$i = $163;
   $164 = $52;
   $16 = $164;
   $165 = $16;
   $15 = $165;
   $166 = $15;
   $14 = $166;
   $167 = $14;
   $168 = HEAP8[$167>>0]|0;
   $169 = $168&255;
   $170 = $169 & 1;
   $171 = ($170|0)!=(0);
   if ($171) {
    $172 = $__lp$i;
    $173 = $__rp$i;
    $174 = $__lhs_sz$i;
    __THREW__ = 0;
    $175 = (invoke_iiii(386,($172|0),($173|0),($174|0))|0);
    $176 = __THREW__; __THREW__ = 0;
    $177 = $176&1;
    if ($177) {
     $194 = ___cxa_find_matching_catch(0|0)|0;
     $195 = tempRet0;
     ___clang_call_terminate($194);
     // unreachable;
    } else {
     $178 = ($175|0)==(0);
     $$expand_i1_val2 = $178&1;
     HEAP8[$51>>0] = $$expand_i1_val2;
     break;
    }
   }
   while(1) {
    $179 = $__lhs_sz$i;
    $180 = ($179|0)!=(0);
    if (!($180)) {
     label = 22;
     break;
    }
    $181 = $__lp$i;
    $182 = HEAP8[$181>>0]|0;
    $183 = $182 << 24 >> 24;
    $184 = $__rp$i;
    $185 = HEAP8[$184>>0]|0;
    $186 = $185 << 24 >> 24;
    $187 = ($183|0)!=($186|0);
    if ($187) {
     label = 20;
     break;
    }
    $188 = $__lhs_sz$i;
    $189 = (($188) + -1)|0;
    $__lhs_sz$i = $189;
    $190 = $__lp$i;
    $191 = ((($190)) + 1|0);
    $__lp$i = $191;
    $192 = $__rp$i;
    $193 = ((($192)) + 1|0);
    $__rp$i = $193;
   }
   if ((label|0) == 20) {
    $$expand_i1_val4 = 0;
    HEAP8[$51>>0] = $$expand_i1_val4;
    break;
   }
   else if ((label|0) == 22) {
    $$expand_i1_val6 = 1;
    HEAP8[$51>>0] = $$expand_i1_val6;
    break;
   }
  }
 } while(0);
 $$pre_trunc = HEAP8[$51>>0]|0;
 $196 = $$pre_trunc&1;
 if ($196) {
  $$expand_i1_val9 = 0;
  HEAP8[$59>>0] = $$expand_i1_val9;
  $62 = 1;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($pTagStr);
  $$pre_trunc13 = HEAP8[$59>>0]|0;
  $204 = $$pre_trunc13&1;
  STACKTOP = sp;return ($204|0);
 }
 $197 = ((($65)) + 24|0);
 __THREW__ = 0;
 (invoke_iii(391,($197|0),($pTagStr|0))|0);
 $198 = __THREW__; __THREW__ = 0;
 $199 = $198&1;
 if ($199) {
  $200 = ___cxa_find_matching_catch()|0;
  $201 = tempRet0;
  $63 = $200;
  $64 = $201;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($pTagStr);
  $202 = $63;
  $203 = $64;
  ___resumeException($202|0);
  // unreachable;
 }
 $$expand_i1_val11 = 1;
 HEAP8[$59>>0] = $$expand_i1_val11;
 $62 = 1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($pTagStr);
 $$pre_trunc13 = HEAP8[$59>>0]|0;
 $204 = $$pre_trunc13&1;
 STACKTOP = sp;return ($204|0);
}
function __ZN4NGIS4Data6Schema21CUdxSchemaDescription10getUnitTagEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $15 = $this;
 $16 = $15;
 $17 = ((($16)) + 36|0);
 $14 = $17;
 $18 = $14;
 $13 = $18;
 $19 = $13;
 $12 = $19;
 $20 = $12;
 $11 = $20;
 $21 = $11;
 $10 = $21;
 $22 = $10;
 $9 = $22;
 $23 = $9;
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 $26 = $25 & 1;
 $27 = ($26|0)!=(0);
 if ($27) {
  $3 = $20;
  $28 = $3;
  $2 = $28;
  $29 = $2;
  $1 = $29;
  $30 = $1;
  $31 = ((($30)) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $39 = $32;
  $0 = $39;
  $40 = $0;
  STACKTOP = sp;return ($40|0);
 } else {
  $8 = $20;
  $33 = $8;
  $7 = $33;
  $34 = $7;
  $6 = $34;
  $35 = $6;
  $36 = ((($35)) + 1|0);
  $5 = $36;
  $37 = $5;
  $4 = $37;
  $38 = $4;
  $39 = $38;
  $0 = $39;
  $40 = $0;
  STACKTOP = sp;return ($40|0);
 }
 return (0)|0;
}
function __ZN4NGIS4Data6Schema21CUdxSchemaDescription13modifyUnitTagEPKc($this,$pTag) {
 $this = $this|0;
 $pTag = $pTag|0;
 var $$expand_i1_val = 0, $$expand_i1_val11 = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val9 = 0, $$pre_trunc = 0, $$pre_trunc13 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__lhs_sz$i = 0, $__lp$i = 0, $__rp$i = 0, $pTagStr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $51 = sp + 277|0;
 $59 = sp + 276|0;
 $pTagStr = sp + 12|0;
 $60 = $this;
 $61 = $pTag;
 $65 = $60;
 $66 = $61;
 $57 = $pTagStr;
 $58 = $66;
 $67 = $57;
 $56 = $67;
 $68 = $56;
 $55 = $68;
 $69 = $55;
 $54 = $69;
 $70 = $58;
 $71 = $58;
 $72 = (__ZNSt3__111char_traitsIcE6lengthEPKc($71)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($67,$70,$72);
 $73 = ((($65)) + 36|0);
 $52 = $73;
 $53 = $pTagStr;
 $74 = $52;
 $50 = $74;
 $75 = $50;
 $49 = $75;
 $76 = $49;
 $48 = $76;
 $77 = $48;
 $47 = $77;
 $78 = $47;
 $79 = HEAP8[$78>>0]|0;
 $80 = $79&255;
 $81 = $80 & 1;
 $82 = ($81|0)!=(0);
 if ($82) {
  $43 = $75;
  $83 = $43;
  $42 = $83;
  $84 = $42;
  $41 = $84;
  $85 = $41;
  $86 = ((($85)) + 4|0);
  $87 = HEAP32[$86>>2]|0;
  $94 = $87;
 } else {
  $46 = $75;
  $88 = $46;
  $45 = $88;
  $89 = $45;
  $44 = $89;
  $90 = $44;
  $91 = HEAP8[$90>>0]|0;
  $92 = $91&255;
  $93 = $92 >> 1;
  $94 = $93;
 }
 $__lhs_sz$i = $94;
 $95 = $__lhs_sz$i;
 $96 = $53;
 $40 = $96;
 $97 = $40;
 $39 = $97;
 $98 = $39;
 $38 = $98;
 $99 = $38;
 $37 = $99;
 $100 = $37;
 $101 = HEAP8[$100>>0]|0;
 $102 = $101&255;
 $103 = $102 & 1;
 $104 = ($103|0)!=(0);
 if ($104) {
  $33 = $97;
  $105 = $33;
  $32 = $105;
  $106 = $32;
  $31 = $106;
  $107 = $31;
  $108 = ((($107)) + 4|0);
  $109 = HEAP32[$108>>2]|0;
  $117 = $109;
 } else {
  $36 = $97;
  $110 = $36;
  $35 = $110;
  $111 = $35;
  $34 = $111;
  $112 = $34;
  $113 = HEAP8[$112>>0]|0;
  $114 = $113&255;
  $115 = $114 >> 1;
  $117 = $115;
 }
 $116 = ($95|0)!=($117|0);
 do {
  if ($116) {
   $$expand_i1_val = 0;
   HEAP8[$51>>0] = $$expand_i1_val;
  } else {
   $118 = $52;
   $30 = $118;
   $119 = $30;
   $29 = $119;
   $120 = $29;
   $28 = $120;
   $121 = $28;
   $27 = $121;
   $122 = $27;
   $26 = $122;
   $123 = $26;
   $124 = HEAP8[$123>>0]|0;
   $125 = $124&255;
   $126 = $125 & 1;
   $127 = ($126|0)!=(0);
   if ($127) {
    $20 = $120;
    $128 = $20;
    $19 = $128;
    $129 = $19;
    $18 = $129;
    $130 = $18;
    $131 = ((($130)) + 8|0);
    $132 = HEAP32[$131>>2]|0;
    $139 = $132;
   } else {
    $25 = $120;
    $133 = $25;
    $24 = $133;
    $134 = $24;
    $23 = $134;
    $135 = $23;
    $136 = ((($135)) + 1|0);
    $22 = $136;
    $137 = $22;
    $21 = $137;
    $138 = $21;
    $139 = $138;
   }
   $17 = $139;
   $140 = $17;
   $__lp$i = $140;
   $141 = $53;
   $13 = $141;
   $142 = $13;
   $12 = $142;
   $143 = $12;
   $11 = $143;
   $144 = $11;
   $10 = $144;
   $145 = $10;
   $9 = $145;
   $146 = $9;
   $147 = HEAP8[$146>>0]|0;
   $148 = $147&255;
   $149 = $148 & 1;
   $150 = ($149|0)!=(0);
   if ($150) {
    $3 = $143;
    $151 = $3;
    $2 = $151;
    $152 = $2;
    $1 = $152;
    $153 = $1;
    $154 = ((($153)) + 8|0);
    $155 = HEAP32[$154>>2]|0;
    $162 = $155;
   } else {
    $8 = $143;
    $156 = $8;
    $7 = $156;
    $157 = $7;
    $6 = $157;
    $158 = $6;
    $159 = ((($158)) + 1|0);
    $5 = $159;
    $160 = $5;
    $4 = $160;
    $161 = $4;
    $162 = $161;
   }
   $0 = $162;
   $163 = $0;
   $__rp$i = $163;
   $164 = $52;
   $16 = $164;
   $165 = $16;
   $15 = $165;
   $166 = $15;
   $14 = $166;
   $167 = $14;
   $168 = HEAP8[$167>>0]|0;
   $169 = $168&255;
   $170 = $169 & 1;
   $171 = ($170|0)!=(0);
   if ($171) {
    $172 = $__lp$i;
    $173 = $__rp$i;
    $174 = $__lhs_sz$i;
    __THREW__ = 0;
    $175 = (invoke_iiii(386,($172|0),($173|0),($174|0))|0);
    $176 = __THREW__; __THREW__ = 0;
    $177 = $176&1;
    if ($177) {
     $194 = ___cxa_find_matching_catch(0|0)|0;
     $195 = tempRet0;
     ___clang_call_terminate($194);
     // unreachable;
    } else {
     $178 = ($175|0)==(0);
     $$expand_i1_val2 = $178&1;
     HEAP8[$51>>0] = $$expand_i1_val2;
     break;
    }
   }
   while(1) {
    $179 = $__lhs_sz$i;
    $180 = ($179|0)!=(0);
    if (!($180)) {
     label = 22;
     break;
    }
    $181 = $__lp$i;
    $182 = HEAP8[$181>>0]|0;
    $183 = $182 << 24 >> 24;
    $184 = $__rp$i;
    $185 = HEAP8[$184>>0]|0;
    $186 = $185 << 24 >> 24;
    $187 = ($183|0)!=($186|0);
    if ($187) {
     label = 20;
     break;
    }
    $188 = $__lhs_sz$i;
    $189 = (($188) + -1)|0;
    $__lhs_sz$i = $189;
    $190 = $__lp$i;
    $191 = ((($190)) + 1|0);
    $__lp$i = $191;
    $192 = $__rp$i;
    $193 = ((($192)) + 1|0);
    $__rp$i = $193;
   }
   if ((label|0) == 20) {
    $$expand_i1_val4 = 0;
    HEAP8[$51>>0] = $$expand_i1_val4;
    break;
   }
   else if ((label|0) == 22) {
    $$expand_i1_val6 = 1;
    HEAP8[$51>>0] = $$expand_i1_val6;
    break;
   }
  }
 } while(0);
 $$pre_trunc = HEAP8[$51>>0]|0;
 $196 = $$pre_trunc&1;
 if ($196) {
  $$expand_i1_val9 = 0;
  HEAP8[$59>>0] = $$expand_i1_val9;
  $62 = 1;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($pTagStr);
  $$pre_trunc13 = HEAP8[$59>>0]|0;
  $204 = $$pre_trunc13&1;
  STACKTOP = sp;return ($204|0);
 }
 $197 = ((($65)) + 36|0);
 __THREW__ = 0;
 (invoke_iii(391,($197|0),($pTagStr|0))|0);
 $198 = __THREW__; __THREW__ = 0;
 $199 = $198&1;
 if ($199) {
  $200 = ___cxa_find_matching_catch()|0;
  $201 = tempRet0;
  $63 = $200;
  $64 = $201;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($pTagStr);
  $202 = $63;
  $203 = $64;
  ___resumeException($202|0);
  // unreachable;
 }
 $$expand_i1_val11 = 1;
 HEAP8[$59>>0] = $$expand_i1_val11;
 $62 = 1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($pTagStr);
 $$pre_trunc13 = HEAP8[$59>>0]|0;
 $204 = $$pre_trunc13&1;
 STACKTOP = sp;return ($204|0);
}
function __ZN4NGIS4Data6Schema21CUdxSchemaDescription15getDimensionTagEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $15 = $this;
 $16 = $15;
 $17 = ((($16)) + 48|0);
 $14 = $17;
 $18 = $14;
 $13 = $18;
 $19 = $13;
 $12 = $19;
 $20 = $12;
 $11 = $20;
 $21 = $11;
 $10 = $21;
 $22 = $10;
 $9 = $22;
 $23 = $9;
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 $26 = $25 & 1;
 $27 = ($26|0)!=(0);
 if ($27) {
  $3 = $20;
  $28 = $3;
  $2 = $28;
  $29 = $2;
  $1 = $29;
  $30 = $1;
  $31 = ((($30)) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $39 = $32;
  $0 = $39;
  $40 = $0;
  STACKTOP = sp;return ($40|0);
 } else {
  $8 = $20;
  $33 = $8;
  $7 = $33;
  $34 = $7;
  $6 = $34;
  $35 = $6;
  $36 = ((($35)) + 1|0);
  $5 = $36;
  $37 = $5;
  $4 = $37;
  $38 = $4;
  $39 = $38;
  $0 = $39;
  $40 = $0;
  STACKTOP = sp;return ($40|0);
 }
 return (0)|0;
}
function __ZN4NGIS4Data6Schema21CUdxSchemaDescription18modifyDimensionTagEPKc($this,$pTag) {
 $this = $this|0;
 $pTag = $pTag|0;
 var $$expand_i1_val = 0, $$expand_i1_val11 = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val9 = 0, $$pre_trunc = 0, $$pre_trunc13 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__lhs_sz$i = 0, $__lp$i = 0, $__rp$i = 0, $pTagStr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $51 = sp + 277|0;
 $59 = sp + 276|0;
 $pTagStr = sp + 12|0;
 $60 = $this;
 $61 = $pTag;
 $65 = $60;
 $66 = $61;
 $57 = $pTagStr;
 $58 = $66;
 $67 = $57;
 $56 = $67;
 $68 = $56;
 $55 = $68;
 $69 = $55;
 $54 = $69;
 $70 = $58;
 $71 = $58;
 $72 = (__ZNSt3__111char_traitsIcE6lengthEPKc($71)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($67,$70,$72);
 $73 = ((($65)) + 48|0);
 $52 = $73;
 $53 = $pTagStr;
 $74 = $52;
 $50 = $74;
 $75 = $50;
 $49 = $75;
 $76 = $49;
 $48 = $76;
 $77 = $48;
 $47 = $77;
 $78 = $47;
 $79 = HEAP8[$78>>0]|0;
 $80 = $79&255;
 $81 = $80 & 1;
 $82 = ($81|0)!=(0);
 if ($82) {
  $43 = $75;
  $83 = $43;
  $42 = $83;
  $84 = $42;
  $41 = $84;
  $85 = $41;
  $86 = ((($85)) + 4|0);
  $87 = HEAP32[$86>>2]|0;
  $94 = $87;
 } else {
  $46 = $75;
  $88 = $46;
  $45 = $88;
  $89 = $45;
  $44 = $89;
  $90 = $44;
  $91 = HEAP8[$90>>0]|0;
  $92 = $91&255;
  $93 = $92 >> 1;
  $94 = $93;
 }
 $__lhs_sz$i = $94;
 $95 = $__lhs_sz$i;
 $96 = $53;
 $40 = $96;
 $97 = $40;
 $39 = $97;
 $98 = $39;
 $38 = $98;
 $99 = $38;
 $37 = $99;
 $100 = $37;
 $101 = HEAP8[$100>>0]|0;
 $102 = $101&255;
 $103 = $102 & 1;
 $104 = ($103|0)!=(0);
 if ($104) {
  $33 = $97;
  $105 = $33;
  $32 = $105;
  $106 = $32;
  $31 = $106;
  $107 = $31;
  $108 = ((($107)) + 4|0);
  $109 = HEAP32[$108>>2]|0;
  $117 = $109;
 } else {
  $36 = $97;
  $110 = $36;
  $35 = $110;
  $111 = $35;
  $34 = $111;
  $112 = $34;
  $113 = HEAP8[$112>>0]|0;
  $114 = $113&255;
  $115 = $114 >> 1;
  $117 = $115;
 }
 $116 = ($95|0)!=($117|0);
 do {
  if ($116) {
   $$expand_i1_val = 0;
   HEAP8[$51>>0] = $$expand_i1_val;
  } else {
   $118 = $52;
   $30 = $118;
   $119 = $30;
   $29 = $119;
   $120 = $29;
   $28 = $120;
   $121 = $28;
   $27 = $121;
   $122 = $27;
   $26 = $122;
   $123 = $26;
   $124 = HEAP8[$123>>0]|0;
   $125 = $124&255;
   $126 = $125 & 1;
   $127 = ($126|0)!=(0);
   if ($127) {
    $20 = $120;
    $128 = $20;
    $19 = $128;
    $129 = $19;
    $18 = $129;
    $130 = $18;
    $131 = ((($130)) + 8|0);
    $132 = HEAP32[$131>>2]|0;
    $139 = $132;
   } else {
    $25 = $120;
    $133 = $25;
    $24 = $133;
    $134 = $24;
    $23 = $134;
    $135 = $23;
    $136 = ((($135)) + 1|0);
    $22 = $136;
    $137 = $22;
    $21 = $137;
    $138 = $21;
    $139 = $138;
   }
   $17 = $139;
   $140 = $17;
   $__lp$i = $140;
   $141 = $53;
   $13 = $141;
   $142 = $13;
   $12 = $142;
   $143 = $12;
   $11 = $143;
   $144 = $11;
   $10 = $144;
   $145 = $10;
   $9 = $145;
   $146 = $9;
   $147 = HEAP8[$146>>0]|0;
   $148 = $147&255;
   $149 = $148 & 1;
   $150 = ($149|0)!=(0);
   if ($150) {
    $3 = $143;
    $151 = $3;
    $2 = $151;
    $152 = $2;
    $1 = $152;
    $153 = $1;
    $154 = ((($153)) + 8|0);
    $155 = HEAP32[$154>>2]|0;
    $162 = $155;
   } else {
    $8 = $143;
    $156 = $8;
    $7 = $156;
    $157 = $7;
    $6 = $157;
    $158 = $6;
    $159 = ((($158)) + 1|0);
    $5 = $159;
    $160 = $5;
    $4 = $160;
    $161 = $4;
    $162 = $161;
   }
   $0 = $162;
   $163 = $0;
   $__rp$i = $163;
   $164 = $52;
   $16 = $164;
   $165 = $16;
   $15 = $165;
   $166 = $15;
   $14 = $166;
   $167 = $14;
   $168 = HEAP8[$167>>0]|0;
   $169 = $168&255;
   $170 = $169 & 1;
   $171 = ($170|0)!=(0);
   if ($171) {
    $172 = $__lp$i;
    $173 = $__rp$i;
    $174 = $__lhs_sz$i;
    __THREW__ = 0;
    $175 = (invoke_iiii(386,($172|0),($173|0),($174|0))|0);
    $176 = __THREW__; __THREW__ = 0;
    $177 = $176&1;
    if ($177) {
     $194 = ___cxa_find_matching_catch(0|0)|0;
     $195 = tempRet0;
     ___clang_call_terminate($194);
     // unreachable;
    } else {
     $178 = ($175|0)==(0);
     $$expand_i1_val2 = $178&1;
     HEAP8[$51>>0] = $$expand_i1_val2;
     break;
    }
   }
   while(1) {
    $179 = $__lhs_sz$i;
    $180 = ($179|0)!=(0);
    if (!($180)) {
     label = 22;
     break;
    }
    $181 = $__lp$i;
    $182 = HEAP8[$181>>0]|0;
    $183 = $182 << 24 >> 24;
    $184 = $__rp$i;
    $185 = HEAP8[$184>>0]|0;
    $186 = $185 << 24 >> 24;
    $187 = ($183|0)!=($186|0);
    if ($187) {
     label = 20;
     break;
    }
    $188 = $__lhs_sz$i;
    $189 = (($188) + -1)|0;
    $__lhs_sz$i = $189;
    $190 = $__lp$i;
    $191 = ((($190)) + 1|0);
    $__lp$i = $191;
    $192 = $__rp$i;
    $193 = ((($192)) + 1|0);
    $__rp$i = $193;
   }
   if ((label|0) == 20) {
    $$expand_i1_val4 = 0;
    HEAP8[$51>>0] = $$expand_i1_val4;
    break;
   }
   else if ((label|0) == 22) {
    $$expand_i1_val6 = 1;
    HEAP8[$51>>0] = $$expand_i1_val6;
    break;
   }
  }
 } while(0);
 $$pre_trunc = HEAP8[$51>>0]|0;
 $196 = $$pre_trunc&1;
 if ($196) {
  $$expand_i1_val9 = 0;
  HEAP8[$59>>0] = $$expand_i1_val9;
  $62 = 1;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($pTagStr);
  $$pre_trunc13 = HEAP8[$59>>0]|0;
  $204 = $$pre_trunc13&1;
  STACKTOP = sp;return ($204|0);
 }
 $197 = ((($65)) + 48|0);
 __THREW__ = 0;
 (invoke_iii(391,($197|0),($pTagStr|0))|0);
 $198 = __THREW__; __THREW__ = 0;
 $199 = $198&1;
 if ($199) {
  $200 = ___cxa_find_matching_catch()|0;
  $201 = tempRet0;
  $63 = $200;
  $64 = $201;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($pTagStr);
  $202 = $63;
  $203 = $64;
  ___resumeException($202|0);
  // unreachable;
 }
 $$expand_i1_val11 = 1;
 HEAP8[$59>>0] = $$expand_i1_val11;
 $62 = 1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($pTagStr);
 $$pre_trunc13 = HEAP8[$59>>0]|0;
 $204 = $$pre_trunc13&1;
 STACKTOP = sp;return ($204|0);
}
function __ZN4NGIS4Data6Schema21CUdxSchemaDescription23getSpatialReferencefTagEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $15 = $this;
 $16 = $15;
 $17 = ((($16)) + 60|0);
 $14 = $17;
 $18 = $14;
 $13 = $18;
 $19 = $13;
 $12 = $19;
 $20 = $12;
 $11 = $20;
 $21 = $11;
 $10 = $21;
 $22 = $10;
 $9 = $22;
 $23 = $9;
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 $26 = $25 & 1;
 $27 = ($26|0)!=(0);
 if ($27) {
  $3 = $20;
  $28 = $3;
  $2 = $28;
  $29 = $2;
  $1 = $29;
  $30 = $1;
  $31 = ((($30)) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $39 = $32;
  $0 = $39;
  $40 = $0;
  STACKTOP = sp;return ($40|0);
 } else {
  $8 = $20;
  $33 = $8;
  $7 = $33;
  $34 = $7;
  $6 = $34;
  $35 = $6;
  $36 = ((($35)) + 1|0);
  $5 = $36;
  $37 = $5;
  $4 = $37;
  $38 = $4;
  $39 = $38;
  $0 = $39;
  $40 = $0;
  STACKTOP = sp;return ($40|0);
 }
 return (0)|0;
}
function __ZN4NGIS4Data6Schema21CUdxSchemaDescription25modifySpatialReferenceTagEPKc($this,$pTag) {
 $this = $this|0;
 $pTag = $pTag|0;
 var $$expand_i1_val = 0, $$expand_i1_val11 = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val9 = 0, $$pre_trunc = 0, $$pre_trunc13 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__lhs_sz$i = 0, $__lp$i = 0, $__rp$i = 0, $pTagStr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $51 = sp + 277|0;
 $59 = sp + 276|0;
 $pTagStr = sp + 12|0;
 $60 = $this;
 $61 = $pTag;
 $65 = $60;
 $66 = $61;
 $57 = $pTagStr;
 $58 = $66;
 $67 = $57;
 $56 = $67;
 $68 = $56;
 $55 = $68;
 $69 = $55;
 $54 = $69;
 $70 = $58;
 $71 = $58;
 $72 = (__ZNSt3__111char_traitsIcE6lengthEPKc($71)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($67,$70,$72);
 $73 = ((($65)) + 60|0);
 $52 = $73;
 $53 = $pTagStr;
 $74 = $52;
 $50 = $74;
 $75 = $50;
 $49 = $75;
 $76 = $49;
 $48 = $76;
 $77 = $48;
 $47 = $77;
 $78 = $47;
 $79 = HEAP8[$78>>0]|0;
 $80 = $79&255;
 $81 = $80 & 1;
 $82 = ($81|0)!=(0);
 if ($82) {
  $43 = $75;
  $83 = $43;
  $42 = $83;
  $84 = $42;
  $41 = $84;
  $85 = $41;
  $86 = ((($85)) + 4|0);
  $87 = HEAP32[$86>>2]|0;
  $94 = $87;
 } else {
  $46 = $75;
  $88 = $46;
  $45 = $88;
  $89 = $45;
  $44 = $89;
  $90 = $44;
  $91 = HEAP8[$90>>0]|0;
  $92 = $91&255;
  $93 = $92 >> 1;
  $94 = $93;
 }
 $__lhs_sz$i = $94;
 $95 = $__lhs_sz$i;
 $96 = $53;
 $40 = $96;
 $97 = $40;
 $39 = $97;
 $98 = $39;
 $38 = $98;
 $99 = $38;
 $37 = $99;
 $100 = $37;
 $101 = HEAP8[$100>>0]|0;
 $102 = $101&255;
 $103 = $102 & 1;
 $104 = ($103|0)!=(0);
 if ($104) {
  $33 = $97;
  $105 = $33;
  $32 = $105;
  $106 = $32;
  $31 = $106;
  $107 = $31;
  $108 = ((($107)) + 4|0);
  $109 = HEAP32[$108>>2]|0;
  $117 = $109;
 } else {
  $36 = $97;
  $110 = $36;
  $35 = $110;
  $111 = $35;
  $34 = $111;
  $112 = $34;
  $113 = HEAP8[$112>>0]|0;
  $114 = $113&255;
  $115 = $114 >> 1;
  $117 = $115;
 }
 $116 = ($95|0)!=($117|0);
 do {
  if ($116) {
   $$expand_i1_val = 0;
   HEAP8[$51>>0] = $$expand_i1_val;
  } else {
   $118 = $52;
   $30 = $118;
   $119 = $30;
   $29 = $119;
   $120 = $29;
   $28 = $120;
   $121 = $28;
   $27 = $121;
   $122 = $27;
   $26 = $122;
   $123 = $26;
   $124 = HEAP8[$123>>0]|0;
   $125 = $124&255;
   $126 = $125 & 1;
   $127 = ($126|0)!=(0);
   if ($127) {
    $20 = $120;
    $128 = $20;
    $19 = $128;
    $129 = $19;
    $18 = $129;
    $130 = $18;
    $131 = ((($130)) + 8|0);
    $132 = HEAP32[$131>>2]|0;
    $139 = $132;
   } else {
    $25 = $120;
    $133 = $25;
    $24 = $133;
    $134 = $24;
    $23 = $134;
    $135 = $23;
    $136 = ((($135)) + 1|0);
    $22 = $136;
    $137 = $22;
    $21 = $137;
    $138 = $21;
    $139 = $138;
   }
   $17 = $139;
   $140 = $17;
   $__lp$i = $140;
   $141 = $53;
   $13 = $141;
   $142 = $13;
   $12 = $142;
   $143 = $12;
   $11 = $143;
   $144 = $11;
   $10 = $144;
   $145 = $10;
   $9 = $145;
   $146 = $9;
   $147 = HEAP8[$146>>0]|0;
   $148 = $147&255;
   $149 = $148 & 1;
   $150 = ($149|0)!=(0);
   if ($150) {
    $3 = $143;
    $151 = $3;
    $2 = $151;
    $152 = $2;
    $1 = $152;
    $153 = $1;
    $154 = ((($153)) + 8|0);
    $155 = HEAP32[$154>>2]|0;
    $162 = $155;
   } else {
    $8 = $143;
    $156 = $8;
    $7 = $156;
    $157 = $7;
    $6 = $157;
    $158 = $6;
    $159 = ((($158)) + 1|0);
    $5 = $159;
    $160 = $5;
    $4 = $160;
    $161 = $4;
    $162 = $161;
   }
   $0 = $162;
   $163 = $0;
   $__rp$i = $163;
   $164 = $52;
   $16 = $164;
   $165 = $16;
   $15 = $165;
   $166 = $15;
   $14 = $166;
   $167 = $14;
   $168 = HEAP8[$167>>0]|0;
   $169 = $168&255;
   $170 = $169 & 1;
   $171 = ($170|0)!=(0);
   if ($171) {
    $172 = $__lp$i;
    $173 = $__rp$i;
    $174 = $__lhs_sz$i;
    __THREW__ = 0;
    $175 = (invoke_iiii(386,($172|0),($173|0),($174|0))|0);
    $176 = __THREW__; __THREW__ = 0;
    $177 = $176&1;
    if ($177) {
     $194 = ___cxa_find_matching_catch(0|0)|0;
     $195 = tempRet0;
     ___clang_call_terminate($194);
     // unreachable;
    } else {
     $178 = ($175|0)==(0);
     $$expand_i1_val2 = $178&1;
     HEAP8[$51>>0] = $$expand_i1_val2;
     break;
    }
   }
   while(1) {
    $179 = $__lhs_sz$i;
    $180 = ($179|0)!=(0);
    if (!($180)) {
     label = 22;
     break;
    }
    $181 = $__lp$i;
    $182 = HEAP8[$181>>0]|0;
    $183 = $182 << 24 >> 24;
    $184 = $__rp$i;
    $185 = HEAP8[$184>>0]|0;
    $186 = $185 << 24 >> 24;
    $187 = ($183|0)!=($186|0);
    if ($187) {
     label = 20;
     break;
    }
    $188 = $__lhs_sz$i;
    $189 = (($188) + -1)|0;
    $__lhs_sz$i = $189;
    $190 = $__lp$i;
    $191 = ((($190)) + 1|0);
    $__lp$i = $191;
    $192 = $__rp$i;
    $193 = ((($192)) + 1|0);
    $__rp$i = $193;
   }
   if ((label|0) == 20) {
    $$expand_i1_val4 = 0;
    HEAP8[$51>>0] = $$expand_i1_val4;
    break;
   }
   else if ((label|0) == 22) {
    $$expand_i1_val6 = 1;
    HEAP8[$51>>0] = $$expand_i1_val6;
    break;
   }
  }
 } while(0);
 $$pre_trunc = HEAP8[$51>>0]|0;
 $196 = $$pre_trunc&1;
 if ($196) {
  $$expand_i1_val9 = 0;
  HEAP8[$59>>0] = $$expand_i1_val9;
  $62 = 1;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($pTagStr);
  $$pre_trunc13 = HEAP8[$59>>0]|0;
  $204 = $$pre_trunc13&1;
  STACKTOP = sp;return ($204|0);
 }
 $197 = ((($65)) + 60|0);
 __THREW__ = 0;
 (invoke_iii(391,($197|0),($pTagStr|0))|0);
 $198 = __THREW__; __THREW__ = 0;
 $199 = $198&1;
 if ($199) {
  $200 = ___cxa_find_matching_catch()|0;
  $201 = tempRet0;
  $63 = $200;
  $64 = $201;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($pTagStr);
  $202 = $63;
  $203 = $64;
  ___resumeException($202|0);
  // unreachable;
 }
 $$expand_i1_val11 = 1;
 HEAP8[$59>>0] = $$expand_i1_val11;
 $62 = 1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($pTagStr);
 $$pre_trunc13 = HEAP8[$59>>0]|0;
 $204 = $$pre_trunc13&1;
 STACKTOP = sp;return ($204|0);
}
function __ZN4NGIS4Data6Schema21CUdxSchemaDescription18getDataTemplateTagEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $15 = $this;
 $16 = $15;
 $17 = ((($16)) + 72|0);
 $14 = $17;
 $18 = $14;
 $13 = $18;
 $19 = $13;
 $12 = $19;
 $20 = $12;
 $11 = $20;
 $21 = $11;
 $10 = $21;
 $22 = $10;
 $9 = $22;
 $23 = $9;
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 $26 = $25 & 1;
 $27 = ($26|0)!=(0);
 if ($27) {
  $3 = $20;
  $28 = $3;
  $2 = $28;
  $29 = $2;
  $1 = $29;
  $30 = $1;
  $31 = ((($30)) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $39 = $32;
  $0 = $39;
  $40 = $0;
  STACKTOP = sp;return ($40|0);
 } else {
  $8 = $20;
  $33 = $8;
  $7 = $33;
  $34 = $7;
  $6 = $34;
  $35 = $6;
  $36 = ((($35)) + 1|0);
  $5 = $36;
  $37 = $5;
  $4 = $37;
  $38 = $4;
  $39 = $38;
  $0 = $39;
  $40 = $0;
  STACKTOP = sp;return ($40|0);
 }
 return (0)|0;
}
function __ZN4NGIS4Data6Schema21CUdxSchemaDescription21modifyDataTemplateTagEPKc($this,$pTag) {
 $this = $this|0;
 $pTag = $pTag|0;
 var $$expand_i1_val = 0, $$expand_i1_val11 = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val9 = 0, $$pre_trunc = 0, $$pre_trunc13 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__lhs_sz$i = 0, $__lp$i = 0, $__rp$i = 0, $pTagStr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $51 = sp + 277|0;
 $59 = sp + 276|0;
 $pTagStr = sp + 12|0;
 $60 = $this;
 $61 = $pTag;
 $65 = $60;
 $66 = $61;
 $57 = $pTagStr;
 $58 = $66;
 $67 = $57;
 $56 = $67;
 $68 = $56;
 $55 = $68;
 $69 = $55;
 $54 = $69;
 $70 = $58;
 $71 = $58;
 $72 = (__ZNSt3__111char_traitsIcE6lengthEPKc($71)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($67,$70,$72);
 $73 = ((($65)) + 72|0);
 $52 = $73;
 $53 = $pTagStr;
 $74 = $52;
 $50 = $74;
 $75 = $50;
 $49 = $75;
 $76 = $49;
 $48 = $76;
 $77 = $48;
 $47 = $77;
 $78 = $47;
 $79 = HEAP8[$78>>0]|0;
 $80 = $79&255;
 $81 = $80 & 1;
 $82 = ($81|0)!=(0);
 if ($82) {
  $43 = $75;
  $83 = $43;
  $42 = $83;
  $84 = $42;
  $41 = $84;
  $85 = $41;
  $86 = ((($85)) + 4|0);
  $87 = HEAP32[$86>>2]|0;
  $94 = $87;
 } else {
  $46 = $75;
  $88 = $46;
  $45 = $88;
  $89 = $45;
  $44 = $89;
  $90 = $44;
  $91 = HEAP8[$90>>0]|0;
  $92 = $91&255;
  $93 = $92 >> 1;
  $94 = $93;
 }
 $__lhs_sz$i = $94;
 $95 = $__lhs_sz$i;
 $96 = $53;
 $40 = $96;
 $97 = $40;
 $39 = $97;
 $98 = $39;
 $38 = $98;
 $99 = $38;
 $37 = $99;
 $100 = $37;
 $101 = HEAP8[$100>>0]|0;
 $102 = $101&255;
 $103 = $102 & 1;
 $104 = ($103|0)!=(0);
 if ($104) {
  $33 = $97;
  $105 = $33;
  $32 = $105;
  $106 = $32;
  $31 = $106;
  $107 = $31;
  $108 = ((($107)) + 4|0);
  $109 = HEAP32[$108>>2]|0;
  $117 = $109;
 } else {
  $36 = $97;
  $110 = $36;
  $35 = $110;
  $111 = $35;
  $34 = $111;
  $112 = $34;
  $113 = HEAP8[$112>>0]|0;
  $114 = $113&255;
  $115 = $114 >> 1;
  $117 = $115;
 }
 $116 = ($95|0)!=($117|0);
 do {
  if ($116) {
   $$expand_i1_val = 0;
   HEAP8[$51>>0] = $$expand_i1_val;
  } else {
   $118 = $52;
   $30 = $118;
   $119 = $30;
   $29 = $119;
   $120 = $29;
   $28 = $120;
   $121 = $28;
   $27 = $121;
   $122 = $27;
   $26 = $122;
   $123 = $26;
   $124 = HEAP8[$123>>0]|0;
   $125 = $124&255;
   $126 = $125 & 1;
   $127 = ($126|0)!=(0);
   if ($127) {
    $20 = $120;
    $128 = $20;
    $19 = $128;
    $129 = $19;
    $18 = $129;
    $130 = $18;
    $131 = ((($130)) + 8|0);
    $132 = HEAP32[$131>>2]|0;
    $139 = $132;
   } else {
    $25 = $120;
    $133 = $25;
    $24 = $133;
    $134 = $24;
    $23 = $134;
    $135 = $23;
    $136 = ((($135)) + 1|0);
    $22 = $136;
    $137 = $22;
    $21 = $137;
    $138 = $21;
    $139 = $138;
   }
   $17 = $139;
   $140 = $17;
   $__lp$i = $140;
   $141 = $53;
   $13 = $141;
   $142 = $13;
   $12 = $142;
   $143 = $12;
   $11 = $143;
   $144 = $11;
   $10 = $144;
   $145 = $10;
   $9 = $145;
   $146 = $9;
   $147 = HEAP8[$146>>0]|0;
   $148 = $147&255;
   $149 = $148 & 1;
   $150 = ($149|0)!=(0);
   if ($150) {
    $3 = $143;
    $151 = $3;
    $2 = $151;
    $152 = $2;
    $1 = $152;
    $153 = $1;
    $154 = ((($153)) + 8|0);
    $155 = HEAP32[$154>>2]|0;
    $162 = $155;
   } else {
    $8 = $143;
    $156 = $8;
    $7 = $156;
    $157 = $7;
    $6 = $157;
    $158 = $6;
    $159 = ((($158)) + 1|0);
    $5 = $159;
    $160 = $5;
    $4 = $160;
    $161 = $4;
    $162 = $161;
   }
   $0 = $162;
   $163 = $0;
   $__rp$i = $163;
   $164 = $52;
   $16 = $164;
   $165 = $16;
   $15 = $165;
   $166 = $15;
   $14 = $166;
   $167 = $14;
   $168 = HEAP8[$167>>0]|0;
   $169 = $168&255;
   $170 = $169 & 1;
   $171 = ($170|0)!=(0);
   if ($171) {
    $172 = $__lp$i;
    $173 = $__rp$i;
    $174 = $__lhs_sz$i;
    __THREW__ = 0;
    $175 = (invoke_iiii(386,($172|0),($173|0),($174|0))|0);
    $176 = __THREW__; __THREW__ = 0;
    $177 = $176&1;
    if ($177) {
     $194 = ___cxa_find_matching_catch(0|0)|0;
     $195 = tempRet0;
     ___clang_call_terminate($194);
     // unreachable;
    } else {
     $178 = ($175|0)==(0);
     $$expand_i1_val2 = $178&1;
     HEAP8[$51>>0] = $$expand_i1_val2;
     break;
    }
   }
   while(1) {
    $179 = $__lhs_sz$i;
    $180 = ($179|0)!=(0);
    if (!($180)) {
     label = 22;
     break;
    }
    $181 = $__lp$i;
    $182 = HEAP8[$181>>0]|0;
    $183 = $182 << 24 >> 24;
    $184 = $__rp$i;
    $185 = HEAP8[$184>>0]|0;
    $186 = $185 << 24 >> 24;
    $187 = ($183|0)!=($186|0);
    if ($187) {
     label = 20;
     break;
    }
    $188 = $__lhs_sz$i;
    $189 = (($188) + -1)|0;
    $__lhs_sz$i = $189;
    $190 = $__lp$i;
    $191 = ((($190)) + 1|0);
    $__lp$i = $191;
    $192 = $__rp$i;
    $193 = ((($192)) + 1|0);
    $__rp$i = $193;
   }
   if ((label|0) == 20) {
    $$expand_i1_val4 = 0;
    HEAP8[$51>>0] = $$expand_i1_val4;
    break;
   }
   else if ((label|0) == 22) {
    $$expand_i1_val6 = 1;
    HEAP8[$51>>0] = $$expand_i1_val6;
    break;
   }
  }
 } while(0);
 $$pre_trunc = HEAP8[$51>>0]|0;
 $196 = $$pre_trunc&1;
 if ($196) {
  $$expand_i1_val9 = 0;
  HEAP8[$59>>0] = $$expand_i1_val9;
  $62 = 1;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($pTagStr);
  $$pre_trunc13 = HEAP8[$59>>0]|0;
  $204 = $$pre_trunc13&1;
  STACKTOP = sp;return ($204|0);
 }
 $197 = ((($65)) + 72|0);
 __THREW__ = 0;
 (invoke_iii(391,($197|0),($pTagStr|0))|0);
 $198 = __THREW__; __THREW__ = 0;
 $199 = $198&1;
 if ($199) {
  $200 = ___cxa_find_matching_catch()|0;
  $201 = tempRet0;
  $63 = $200;
  $64 = $201;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($pTagStr);
  $202 = $63;
  $203 = $64;
  ___resumeException($202|0);
  // unreachable;
 }
 $$expand_i1_val11 = 1;
 HEAP8[$59>>0] = $$expand_i1_val11;
 $62 = 1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($pTagStr);
 $$pre_trunc13 = HEAP8[$59>>0]|0;
 $204 = $$pre_trunc13&1;
 STACKTOP = sp;return ($204|0);
}
function __ZN4NGIS4Data10INxUnknownC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 2360;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 HEAP32[$3>>2] = 1;
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data6Schema16INodeDescriptionD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4NGIS4Data6Schema16INodeDescriptionD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data10INxUnknownD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4NGIS4Data10INxUnknownD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIPN4NGIS4Data6Schema14IUdxNodeSchemaENS_9allocatorIS5_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 77|0;
 $11 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 1073741823;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNSt3__114__split_bufferIPN4NGIS4Data6Schema14IUdxNodeSchemaERNS_9allocatorIS5_EEEC2EjjS8_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 36|0;
 $20 = sp + 20|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = ((($26)) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = ((($34)) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = ((($42)) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = $51<<2;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + ($57<<2)|0);
 $59 = ((($26)) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = ((($26)) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + ($62<<2)|0);
 $11 = $26;
 $64 = $11;
 $65 = ((($64)) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPN4NGIS4Data6Schema14IUdxNodeSchemaENS_9allocatorIS5_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS5_RS7_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 120|0;
 $__t$i1 = sp + 96|0;
 $__t$i = sp + 48|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 __ZNKSt3__16vectorIPN4NGIS4Data6Schema14IUdxNodeSchemaENS_9allocatorIS5_EEE17__annotate_deleteEv($32);
 $29 = $32;
 $33 = $29;
 $34 = ((($33)) + 8|0);
 $28 = $34;
 $35 = $28;
 $27 = $35;
 $36 = $27;
 $37 = HEAP32[$32>>2]|0;
 $38 = ((($32)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = ((($40)) + 4|0);
 $22 = $36;
 $23 = $37;
 $24 = $39;
 $25 = $41;
 $42 = $24;
 $43 = $23;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = (($46|0) / 4)&-1;
 $_Np$i = $47;
 $48 = $_Np$i;
 $49 = $25;
 $50 = HEAP32[$49>>2]|0;
 $51 = (0 - ($48))|0;
 $52 = (($50) + ($51<<2)|0);
 HEAP32[$49>>2] = $52;
 $53 = $25;
 $54 = HEAP32[$53>>2]|0;
 $55 = $23;
 $56 = $_Np$i;
 $57 = $56<<2;
 _memcpy(($54|0),($55|0),($57|0))|0;
 $58 = $31;
 $59 = ((($58)) + 4|0);
 $3 = $32;
 $4 = $59;
 $60 = $3;
 $2 = $60;
 $61 = $2;
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$__t$i2>>2] = $62;
 $63 = $4;
 $0 = $63;
 $64 = $0;
 $65 = HEAP32[$64>>2]|0;
 $66 = $3;
 HEAP32[$66>>2] = $65;
 $1 = $__t$i2;
 $67 = $1;
 $68 = HEAP32[$67>>2]|0;
 $69 = $4;
 HEAP32[$69>>2] = $68;
 $70 = ((($32)) + 4|0);
 $71 = $31;
 $72 = ((($71)) + 8|0);
 $8 = $70;
 $9 = $72;
 $73 = $8;
 $7 = $73;
 $74 = $7;
 $75 = HEAP32[$74>>2]|0;
 HEAP32[$__t$i1>>2] = $75;
 $76 = $9;
 $5 = $76;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = $8;
 HEAP32[$79>>2] = $78;
 $6 = $__t$i1;
 $80 = $6;
 $81 = HEAP32[$80>>2]|0;
 $82 = $9;
 HEAP32[$82>>2] = $81;
 $12 = $32;
 $83 = $12;
 $84 = ((($83)) + 8|0);
 $11 = $84;
 $85 = $11;
 $10 = $85;
 $86 = $10;
 $87 = $31;
 $15 = $87;
 $88 = $15;
 $89 = ((($88)) + 12|0);
 $14 = $89;
 $90 = $14;
 $13 = $90;
 $91 = $13;
 $19 = $86;
 $20 = $91;
 $92 = $19;
 $18 = $92;
 $93 = $18;
 $94 = HEAP32[$93>>2]|0;
 HEAP32[$__t$i>>2] = $94;
 $95 = $20;
 $16 = $95;
 $96 = $16;
 $97 = HEAP32[$96>>2]|0;
 $98 = $19;
 HEAP32[$98>>2] = $97;
 $17 = $__t$i;
 $99 = $17;
 $100 = HEAP32[$99>>2]|0;
 $101 = $20;
 HEAP32[$101>>2] = $100;
 $102 = $31;
 $103 = ((($102)) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $31;
 HEAP32[$105>>2] = $104;
 $21 = $32;
 $106 = $21;
 $107 = ((($106)) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[$106>>2]|0;
 $110 = $108;
 $111 = $109;
 $112 = (($110) - ($111))|0;
 $113 = (($112|0) / 4)&-1;
 __ZNKSt3__16vectorIPN4NGIS4Data6Schema14IUdxNodeSchemaENS_9allocatorIS5_EEE14__annotate_newEj($32,$113);
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPN4NGIS4Data6Schema14IUdxNodeSchemaERNS_9allocatorIS5_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp + 8|0;
 $21 = sp + 133|0;
 $28 = sp;
 $31 = sp + 132|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = ((($40)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = ((($45)) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($40)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + -4|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
 }
 $59 = HEAP32[$34>>2]|0;
 $60 = ($59|0)!=(0|0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $61 = $13;
 $62 = ((($61)) + 12|0);
 $12 = $62;
 $63 = $12;
 $11 = $63;
 $64 = $11;
 $65 = ((($64)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$34>>2]|0;
 $3 = $34;
 $68 = $3;
 $2 = $68;
 $69 = $2;
 $70 = ((($69)) + 12|0);
 $1 = $70;
 $71 = $1;
 $0 = $71;
 $72 = $0;
 $73 = HEAP32[$72>>2]|0;
 $74 = HEAP32[$68>>2]|0;
 $75 = $73;
 $76 = $74;
 $77 = (($75) - ($76))|0;
 $78 = (($77|0) / 4)&-1;
 $8 = $66;
 $9 = $67;
 $10 = $78;
 $79 = $8;
 $80 = $9;
 $81 = $10;
 $5 = $79;
 $6 = $80;
 $7 = $81;
 $82 = $6;
 $4 = $82;
 $83 = $4;
 __ZdlPv($83);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIPN4NGIS4Data6Schema14IUdxNodeSchemaENS_9allocatorIS5_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 4)&-1;
 $51 = (($42) + ($50<<2)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 4)&-1;
 $67 = (($54) + ($66<<2)|0);
 __ZNKSt3__16vectorIPN4NGIS4Data6Schema14IUdxNodeSchemaENS_9allocatorIS5_EEE31__annotate_contiguous_containerEPKvSA_SA_SA_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIPN4NGIS4Data6Schema14IUdxNodeSchemaENS_9allocatorIS5_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 4)&-1;
 $55 = (($42) + ($54<<2)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + ($59<<2)|0);
 __ZNKSt3__16vectorIPN4NGIS4Data6Schema14IUdxNodeSchemaENS_9allocatorIS5_EEE31__annotate_contiguous_containerEPKvSA_SA_SA_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIPN4NGIS4Data6Schema14IUdxNodeSchemaENS_9allocatorIS5_EEE31__annotate_contiguous_containerEPKvSA_SA_SA_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIPN4NGIS4Data6Schema14IUdxNodeSchemaENS_9allocatorIS5_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -4|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
 }
 $6 = $30;
 $52 = $6;
 $53 = ((($52)) + 8|0);
 $5 = $53;
 $54 = $5;
 $4 = $54;
 $55 = $4;
 $56 = HEAP32[$30>>2]|0;
 $3 = $30;
 $57 = $3;
 $2 = $57;
 $58 = $2;
 $59 = ((($58)) + 8|0);
 $1 = $59;
 $60 = $1;
 $0 = $60;
 $61 = $0;
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$57>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $67 = (($66|0) / 4)&-1;
 $11 = $55;
 $12 = $56;
 $13 = $67;
 $68 = $11;
 $69 = $12;
 $70 = $13;
 $8 = $68;
 $9 = $69;
 $10 = $70;
 $71 = $9;
 $7 = $71;
 $72 = $7;
 __ZdlPv($72);
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data6Schema14IUdxNodeSchemaD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4NGIS4Data6Schema14IUdxNodeSchemaD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __Z4ws2sRKNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($agg$result,$ws) {
 $agg$result = $agg$result|0;
 $ws = $ws|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Dest = 0, $_Dsize = 0, $_Source = 0, $curLocale = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $curLocale = sp + 24|0;
 $53 = sp + 240|0;
 $50 = $ws;
 $55 = (_setlocale(6,0)|0);
 $48 = $curLocale;
 $49 = $55;
 $56 = $48;
 $47 = $56;
 $57 = $47;
 $46 = $57;
 $58 = $46;
 $45 = $58;
 $59 = $49;
 $60 = $49;
 $61 = (__ZNSt3__111char_traitsIcE6lengthEPKc($60)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($56,$59,$61);
 __THREW__ = 0;
 $62 = __THREW__; __THREW__ = 0;
 $63 = $62&1;
 if (!($63)) {
  $64 = $50;
  $44 = $64;
  $65 = $44;
  $43 = $65;
  $66 = $43;
  $42 = $66;
  $67 = $42;
  $41 = $67;
  $68 = $41;
  $40 = $68;
  $69 = $40;
  $39 = $69;
  $70 = $39;
  $71 = HEAP8[$70>>0]|0;
  $72 = $71&255;
  $73 = $72 & 1;
  $74 = ($73|0)!=(0);
  if ($74) {
   $33 = $67;
   $75 = $33;
   $32 = $75;
   $76 = $32;
   $31 = $76;
   $77 = $31;
   $78 = ((($77)) + 8|0);
   $79 = HEAP32[$78>>2]|0;
   $86 = $79;
  } else {
   $38 = $67;
   $80 = $38;
   $37 = $80;
   $81 = $37;
   $36 = $81;
   $82 = $36;
   $83 = ((($82)) + 4|0);
   $35 = $83;
   $84 = $35;
   $34 = $84;
   $85 = $34;
   $86 = $85;
  }
  $30 = $86;
  $87 = $30;
  $_Source = $87;
  $88 = $50;
  $29 = $88;
  $89 = $29;
  $28 = $89;
  $90 = $28;
  $27 = $90;
  $91 = $27;
  $26 = $91;
  $92 = $26;
  $93 = HEAP8[$92>>0]|0;
  $94 = $93&255;
  $95 = $94 & 1;
  $96 = ($95|0)!=(0);
  if ($96) {
   $22 = $89;
   $97 = $22;
   $21 = $97;
   $98 = $21;
   $20 = $98;
   $99 = $20;
   $100 = ((($99)) + 4|0);
   $101 = HEAP32[$100>>2]|0;
   $109 = $101;
  } else {
   $25 = $89;
   $102 = $25;
   $24 = $102;
   $103 = $24;
   $23 = $103;
   $104 = $23;
   $105 = HEAP8[$104>>0]|0;
   $106 = $105&255;
   $107 = $106 >> 1;
   $109 = $107;
  }
  $108 = $109<<1;
  $110 = (($108) + 1)|0;
  $_Dsize = $110;
  $111 = $_Dsize;
  __THREW__ = 0;
  $112 = (invoke_ii(392,($111|0))|0);
  $113 = __THREW__; __THREW__ = 0;
  $114 = $113&1;
  if (!($114)) {
   $_Dest = $112;
   $115 = $_Dest;
   $116 = $_Dsize;
   _memset(($115|0),0,($116|0))|0;
   $117 = $_Dest;
   $118 = $_Source;
   $119 = $_Dsize;
   __THREW__ = 0;
   (invoke_iiii(393,($117|0),($118|0),($119|0))|0);
   $120 = __THREW__; __THREW__ = 0;
   $121 = $120&1;
   if (!($121)) {
    $$expand_i1_val = 0;
    HEAP8[$53>>0] = $$expand_i1_val;
    $122 = $_Dest;
    $3 = $agg$result;
    $4 = $122;
    $123 = $3;
    $2 = $123;
    $124 = $2;
    $1 = $124;
    $125 = $1;
    $0 = $125;
    $126 = $4;
    $127 = $4;
    __THREW__ = 0;
    $128 = (invoke_ii(383,($127|0))|0);
    $129 = __THREW__; __THREW__ = 0;
    $130 = $129&1;
    if (!($130)) {
     __THREW__ = 0;
     invoke_viii(384,($123|0),($126|0),($128|0));
     $131 = __THREW__; __THREW__ = 0;
     $132 = $131&1;
     if (!($132)) {
      $133 = $_Dest;
      $134 = ($133|0)==(0|0);
      if (!($134)) {
       __ZdaPv($133);
      }
      $19 = $curLocale;
      $135 = $19;
      $18 = $135;
      $136 = $18;
      $17 = $136;
      $137 = $17;
      $16 = $137;
      $138 = $16;
      $15 = $138;
      $139 = $15;
      $14 = $139;
      $140 = $14;
      $141 = HEAP8[$140>>0]|0;
      $142 = $141&255;
      $143 = $142 & 1;
      $144 = ($143|0)!=(0);
      if ($144) {
       $8 = $137;
       $145 = $8;
       $7 = $145;
       $146 = $7;
       $6 = $146;
       $147 = $6;
       $148 = ((($147)) + 8|0);
       $149 = HEAP32[$148>>2]|0;
       $156 = $149;
      } else {
       $13 = $137;
       $150 = $13;
       $12 = $150;
       $151 = $12;
       $11 = $151;
       $152 = $11;
       $153 = ((($152)) + 1|0);
       $10 = $153;
       $154 = $10;
       $9 = $154;
       $155 = $9;
       $156 = $155;
      }
      $5 = $156;
      __THREW__ = 0;
      $157 = __THREW__; __THREW__ = 0;
      $158 = $157&1;
      if ($158) {
       $162 = ___cxa_find_matching_catch()|0;
       $163 = tempRet0;
       $51 = $162;
       $52 = $163;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($curLocale);
       $164 = $51;
       $165 = $52;
       ___resumeException($164|0);
       // unreachable;
      }
      $$expand_i1_val2 = 1;
      HEAP8[$53>>0] = $$expand_i1_val2;
      $54 = 1;
      $$pre_trunc = HEAP8[$53>>0]|0;
      $159 = $$pre_trunc&1;
      if ($159) {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($curLocale);
       STACKTOP = sp;return;
      }
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($curLocale);
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 $160 = ___cxa_find_matching_catch()|0;
 $161 = tempRet0;
 $51 = $160;
 $52 = $161;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($curLocale);
 $164 = $51;
 $165 = $52;
 ___resumeException($164|0);
 // unreachable;
}
function __Z4s2wsRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result,$s) {
 $agg$result = $agg$result|0;
 $s = $s|0;
 var $$arith = 0, $$expand_i1_val = 0, $$expand_i1_val3 = 0, $$overflow = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Dest = 0, $_Dsize = 0, $_Source = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $31 = sp + 148|0;
 $30 = $s;
 $35 = $30;
 $29 = $35;
 $36 = $29;
 $28 = $36;
 $37 = $28;
 $27 = $37;
 $38 = $27;
 $26 = $38;
 $39 = $26;
 $25 = $39;
 $40 = $25;
 $24 = $40;
 $41 = $24;
 $42 = HEAP8[$41>>0]|0;
 $43 = $42&255;
 $44 = $43 & 1;
 $45 = ($44|0)!=(0);
 if ($45) {
  $18 = $38;
  $46 = $18;
  $17 = $46;
  $47 = $17;
  $16 = $47;
  $48 = $16;
  $49 = ((($48)) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $57 = $50;
 } else {
  $23 = $38;
  $51 = $23;
  $22 = $51;
  $52 = $22;
  $21 = $52;
  $53 = $21;
  $54 = ((($53)) + 1|0);
  $20 = $54;
  $55 = $20;
  $19 = $55;
  $56 = $19;
  $57 = $56;
 }
 $15 = $57;
 $58 = $15;
 $_Source = $58;
 $59 = $30;
 $9 = $59;
 $60 = $9;
 $8 = $60;
 $61 = $8;
 $7 = $61;
 $62 = $7;
 $6 = $62;
 $63 = $6;
 $64 = HEAP8[$63>>0]|0;
 $65 = $64&255;
 $66 = $65 & 1;
 $67 = ($66|0)!=(0);
 if ($67) {
  $2 = $60;
  $68 = $2;
  $1 = $68;
  $69 = $1;
  $0 = $69;
  $70 = $0;
  $71 = ((($70)) + 4|0);
  $72 = HEAP32[$71>>2]|0;
  $80 = $72;
 } else {
  $5 = $60;
  $73 = $5;
  $4 = $73;
  $74 = $4;
  $3 = $74;
  $75 = $3;
  $76 = HEAP8[$75>>0]|0;
  $77 = $76&255;
  $78 = $77 >> 1;
  $80 = $78;
 }
 $79 = (($80) + 1)|0;
 $_Dsize = $79;
 $81 = $_Dsize;
 $$arith = $81<<2;
 $$overflow = ($81>>>0)>(1073741823);
 $82 = $$overflow ? -1 : $$arith;
 $83 = (__Znaj($82)|0);
 $_Dest = $83;
 $84 = $_Dest;
 $85 = $_Dsize;
 (_wmemset($84,0,$85)|0);
 $86 = $_Dest;
 $87 = $_Source;
 $88 = $_Dsize;
 (_mbstowcs($86,$87,$88)|0);
 $$expand_i1_val = 0;
 HEAP8[$31>>0] = $$expand_i1_val;
 $89 = $_Dest;
 $13 = $agg$result;
 $14 = $89;
 $90 = $13;
 $12 = $90;
 $91 = $12;
 $11 = $91;
 $92 = $11;
 $10 = $92;
 $93 = $14;
 $94 = $14;
 $95 = (__ZNSt3__111char_traitsIwE6lengthEPKw($94)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($90,$93,$95);
 $96 = $_Dest;
 $97 = ($96|0)==(0|0);
 if (!($97)) {
  __ZdaPv($96);
 }
 __THREW__ = 0;
 $98 = __THREW__; __THREW__ = 0;
 $99 = $98&1;
 if ($99) {
  $101 = ___cxa_find_matching_catch()|0;
  $102 = tempRet0;
  $32 = $101;
  $33 = $102;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($agg$result);
  $103 = $32;
  $104 = $33;
  ___resumeException($103|0);
  // unreachable;
 }
 $$expand_i1_val3 = 1;
 HEAP8[$31>>0] = $$expand_i1_val3;
 $34 = 1;
 $$pre_trunc = HEAP8[$31>>0]|0;
 $100 = $$pre_trunc&1;
 if ($100) {
  STACKTOP = sp;return;
 }
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($agg$result);
 STACKTOP = sp;return;
}
function __Z10getVersionv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return +1.1000000238418579;
}
function __Z7getInfov($agg$result) {
 $agg$result = $agg$result|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = $agg$result;
 $4 = 2448;
 $5 = $3;
 $2 = $5;
 $6 = $2;
 $1 = $6;
 $7 = $1;
 $0 = $7;
 $8 = $4;
 $9 = $4;
 $10 = (__ZNSt3__111char_traitsIwE6lengthEPKw($9)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($5,$8,$10);
 STACKTOP = sp;return;
}
function __Z22createUdxDatasetSchemav() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pUdxDatasetSchema = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = (__Znwj(52)|0);
 __THREW__ = 0;
 invoke_vii(394,($2|0),(7642|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  $0 = $13;
  $1 = $14;
  __ZdlPv($2);
  $15 = $0;
  $16 = $1;
  ___resumeException($15|0);
  // unreachable;
 }
 $5 = ($2|0)==(0|0);
 if ($5) {
  $10 = 0;
 } else {
  $6 = HEAP32[$2>>2]|0;
  $7 = ((($6)) + -36|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($2) + ($8)|0);
  $10 = $9;
 }
 $pUdxDatasetSchema = $10;
 $11 = $pUdxDatasetSchema;
 $12 = $11;
 STACKTOP = sp;return ($12|0);
}
function __Z24createUdxNodeDescriptionN4NGIS4Data6Schema15ESchemaNodeTypeENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE($pNodeType,$pNodeInfo) {
 $pNodeType = $pNodeType|0;
 $pNodeInfo = $pNodeInfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pNodeDescription = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $15 = $pNodeType;
 $18 = (__Znwj(84)|0);
 $19 = $15;
 $14 = $pNodeInfo;
 $20 = $14;
 $13 = $20;
 $21 = $13;
 $12 = $21;
 $22 = $12;
 $11 = $22;
 $23 = $11;
 $10 = $23;
 $24 = $10;
 $9 = $24;
 $25 = $9;
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&255;
 $28 = $27 & 1;
 $29 = ($28|0)!=(0);
 if ($29) {
  $3 = $22;
  $30 = $3;
  $2 = $30;
  $31 = $2;
  $1 = $31;
  $32 = $1;
  $33 = ((($32)) + 8|0);
  $34 = HEAP32[$33>>2]|0;
  $41 = $34;
 } else {
  $8 = $22;
  $35 = $8;
  $7 = $35;
  $36 = $7;
  $6 = $36;
  $37 = $6;
  $38 = ((($37)) + 1|0);
  $5 = $38;
  $39 = $5;
  $4 = $39;
  $40 = $4;
  $41 = $40;
 }
 $0 = $41;
 $42 = $0;
 __THREW__ = 0;
 invoke_viii(389,($18|0),($19|0),($42|0));
 $43 = __THREW__; __THREW__ = 0;
 $44 = $43&1;
 if ($44) {
  $47 = ___cxa_find_matching_catch()|0;
  $48 = tempRet0;
  $16 = $47;
  $17 = $48;
  __ZdlPv($18);
  $49 = $16;
  $50 = $17;
  ___resumeException($49|0);
  // unreachable;
 } else {
  $pNodeDescription = $18;
  $45 = $pNodeDescription;
  $46 = $45;
  STACKTOP = sp;return ($46|0);
 }
 return (0)|0;
}
function __Z23releaseUdxDatasetSchemai($pDatasetId) {
 $pDatasetId = $pDatasetId|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pDatasetNode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pDatasetId;
 $2 = $1;
 $3 = $2;
 $pDatasetNode = $3;
 $4 = $pDatasetNode;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $0 = -1;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 } else {
  $6 = $pDatasetNode;
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($7)) + -12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($6) + ($9)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  (FUNCTION_TABLE_ii[$13 & 1023]($10)|0);
  $0 = 0;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function __Z17getSchemaRootNodei($pDatasetId) {
 $pDatasetId = $pDatasetId|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pDatasetNode = 0, $pNode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pDatasetId;
 $2 = $1;
 $3 = $2;
 $pDatasetNode = $3;
 $4 = $pDatasetNode;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $0 = 0;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 }
 $6 = $pDatasetNode;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $12 = 0;
 } else {
  $8 = HEAP32[$6>>2]|0;
  $9 = ((($8)) + -12|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($6) + ($10)|0);
  $12 = $11;
 }
 $pNode = $12;
 $13 = $pNode;
 $14 = $13;
 $0 = $14;
 $15 = $0;
 STACKTOP = sp;return ($15|0);
}
function __Z18addSchemaChildNodeiNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4NGIS4Data6Schema15ESchemaNodeTypeENS0_IwNS1_IwEENS3_IwEEEE($pParentNodeId,$pNodeName,$pNodeType,$pNodeInfo) {
 $pParentNodeId = $pParentNodeId|0;
 $pNodeName = $pNodeName|0;
 $pNodeType = $pNodeType|0;
 $pNodeInfo = $pNodeInfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $pNode = 0, $pNodeInfoStr = 0, $pParentNode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pNodeInfoStr = sp + 16|0;
 $31 = $pParentNodeId;
 $32 = $pNodeType;
 $36 = $31;
 $37 = $36;
 $pParentNode = $37;
 $38 = $pParentNode;
 $39 = ($38|0)==(0|0);
 if ($39) {
  $30 = 0;
  $100 = $30;
  STACKTOP = sp;return ($100|0);
 }
 __Z4ws2sRKNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($pNodeInfoStr,$pNodeInfo);
 $40 = $pParentNode;
 $41 = HEAP32[$40>>2]|0;
 $42 = ((($41)) + 48|0);
 $43 = HEAP32[$42>>2]|0;
 $29 = $pNodeName;
 $44 = $29;
 $28 = $44;
 $45 = $28;
 $27 = $45;
 $46 = $27;
 $26 = $46;
 $47 = $26;
 $25 = $47;
 $48 = $25;
 $24 = $48;
 $49 = $24;
 $50 = HEAP8[$49>>0]|0;
 $51 = $50&255;
 $52 = $51 & 1;
 $53 = ($52|0)!=(0);
 if ($53) {
  $18 = $46;
  $54 = $18;
  $17 = $54;
  $55 = $17;
  $16 = $55;
  $56 = $16;
  $57 = ((($56)) + 8|0);
  $58 = HEAP32[$57>>2]|0;
  $65 = $58;
 } else {
  $23 = $46;
  $59 = $23;
  $22 = $59;
  $60 = $22;
  $21 = $60;
  $61 = $21;
  $62 = ((($61)) + 1|0);
  $20 = $62;
  $63 = $20;
  $19 = $63;
  $64 = $19;
  $65 = $64;
 }
 $15 = $65;
 $66 = $15;
 $67 = $32;
 $14 = $pNodeInfoStr;
 $68 = $14;
 $13 = $68;
 $69 = $13;
 $12 = $69;
 $70 = $12;
 $11 = $70;
 $71 = $11;
 $10 = $71;
 $72 = $10;
 $9 = $72;
 $73 = $9;
 $74 = HEAP8[$73>>0]|0;
 $75 = $74&255;
 $76 = $75 & 1;
 $77 = ($76|0)!=(0);
 if ($77) {
  $3 = $70;
  $78 = $3;
  $2 = $78;
  $79 = $2;
  $1 = $79;
  $80 = $1;
  $81 = ((($80)) + 8|0);
  $82 = HEAP32[$81>>2]|0;
  $89 = $82;
 } else {
  $8 = $70;
  $83 = $8;
  $7 = $83;
  $84 = $7;
  $6 = $84;
  $85 = $6;
  $86 = ((($85)) + 1|0);
  $5 = $86;
  $87 = $5;
  $4 = $87;
  $88 = $4;
  $89 = $88;
 }
 $0 = $89;
 $90 = $0;
 __THREW__ = 0;
 $91 = (invoke_iiiii($43|0,($40|0),($66|0),($67|0),($90|0))|0);
 $92 = __THREW__; __THREW__ = 0;
 $93 = $92&1;
 if ($93) {
  $96 = ___cxa_find_matching_catch()|0;
  $97 = tempRet0;
  $33 = $96;
  $34 = $97;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($pNodeInfoStr);
  $98 = $33;
  $99 = $34;
  ___resumeException($98|0);
  // unreachable;
 }
 $pNode = $91;
 $94 = $pNode;
 $95 = $94;
 $30 = $95;
 $35 = 1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($pNodeInfoStr);
 $100 = $30;
 STACKTOP = sp;return ($100|0);
}
function __Z21removeSchemaChildNodeii($parentId,$pNodeId) {
 $parentId = $parentId|0;
 $pNodeId = $pNodeId|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pNode = 0, $pParentNode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $parentId;
 $2 = $pNodeId;
 $3 = $1;
 $4 = $3;
 $pParentNode = $4;
 $5 = $2;
 $6 = $5;
 $pNode = $6;
 $7 = $pParentNode;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $pParentNode;
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($10)) + 52|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $pNode;
  (FUNCTION_TABLE_iii[$12 & 1023]($9,$13)|0);
  $0 = 0;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 } else {
  $0 = -1;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function __Z28removeSchemaChildNodeByIndexii($parentId,$idx) {
 $parentId = $parentId|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pParentNode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $parentId;
 $2 = $idx;
 $3 = $1;
 $4 = $3;
 $pParentNode = $4;
 $5 = $pParentNode;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $pParentNode;
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 56|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $2;
  (FUNCTION_TABLE_iii[$10 & 1023]($7,$11)|0);
  $0 = 0;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 } else {
  $0 = -1;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function __Z23getNodeSchemaChildCounti($pNodeId) {
 $pNodeId = $pNodeId|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $childNodeCount = 0, $pParentNode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pNodeId;
 $2 = $1;
 $3 = $2;
 $pParentNode = $3;
 $4 = $pParentNode;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $0 = 0;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 } else {
  $6 = $pParentNode;
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($7)) + 36|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (FUNCTION_TABLE_ii[$9 & 1023]($6)|0);
  $childNodeCount = $10;
  $11 = $childNodeCount;
  $0 = $11;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function __Z18getSchemaChildNodeii($pParentNodeId,$idx) {
 $pParentNodeId = $pParentNodeId|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pNode = 0, $pParentNode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pParentNodeId;
 $2 = $idx;
 $3 = $1;
 $4 = $3;
 $pParentNode = $4;
 $5 = $pParentNode;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $0 = 0;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 } else {
  $7 = $pParentNode;
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 40|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $2;
  $12 = (FUNCTION_TABLE_iii[$10 & 1023]($7,$11)|0);
  $pNode = $12;
  $13 = $pNode;
  $14 = $13;
  $0 = $14;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function __Z17getSchemaNodeNamei($agg$result,$pNodeId) {
 $agg$result = $agg$result|0;
 $pNodeId = $pNodeId|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pNode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp + 32|0;
 $5 = $pNodeId;
 $8 = $5;
 $9 = $8;
 $pNode = $9;
 $$expand_i1_val = 0;
 HEAP8[$6>>0] = $$expand_i1_val;
 $10 = $pNode;
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (FUNCTION_TABLE_ii[$13 & 1023]($10)|0);
 $3 = $agg$result;
 $4 = $14;
 $15 = $3;
 $2 = $15;
 $16 = $2;
 $1 = $16;
 $17 = $1;
 $0 = $17;
 $18 = $4;
 $19 = $4;
 $20 = (__ZNSt3__111char_traitsIcE6lengthEPKc($19)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($15,$18,$20);
 $$expand_i1_val2 = 1;
 HEAP8[$6>>0] = $$expand_i1_val2;
 $7 = 1;
 $$pre_trunc = HEAP8[$6>>0]|0;
 $21 = $$pre_trunc&1;
 if ($21) {
  STACKTOP = sp;return;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result);
 STACKTOP = sp;return;
}
function __Z21schemaNodeType2StringN4NGIS4Data6Schema15ESchemaNodeTypeE($agg$result,$pNodeType) {
 $agg$result = $agg$result|0;
 $pNodeType = $pNodeType|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp + 28|0;
 $5 = $pNodeType;
 $$expand_i1_val = 0;
 HEAP8[$6>>0] = $$expand_i1_val;
 $8 = $5;
 $9 = (__ZN4NGIS4Data6SchemaL21SchemaNodeType2StringENS1_15ESchemaNodeTypeE($8)|0);
 $3 = $agg$result;
 $4 = $9;
 $10 = $3;
 $2 = $10;
 $11 = $2;
 $1 = $11;
 $12 = $1;
 $0 = $12;
 $13 = $4;
 $14 = $4;
 $15 = (__ZNSt3__111char_traitsIcE6lengthEPKc($14)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($10,$13,$15);
 $$expand_i1_val2 = 1;
 HEAP8[$6>>0] = $$expand_i1_val2;
 $7 = 1;
 $$pre_trunc = HEAP8[$6>>0]|0;
 $16 = $$pre_trunc&1;
 if ($16) {
  STACKTOP = sp;return;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result);
 STACKTOP = sp;return;
}
function __Z17getSchemaNodeTypei($pNodeId) {
 $pNodeId = $pNodeId|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nodeType = 0, $pNode = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pNodeId;
 $2 = $1;
 $3 = $2;
 $pNode = $3;
 $4 = $pNode;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $0 = 128;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 } else {
  $6 = $pNode;
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($7)) + 24|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (FUNCTION_TABLE_ii[$9 & 1023]($6)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 20|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_ii[$13 & 1023]($10)|0);
  $nodeType = $14;
  $15 = $nodeType;
  $0 = $15;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function __Z24getSchemaNodeDescriptioni($agg$result,$pNodeId) {
 $agg$result = $agg$result|0;
 $pNodeId = $pNodeId|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $__a$i$i = 0, $__i$i$i = 0, $nodeDescription = 0, $nodeDescriptionStr = 0, $pNode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $17 = sp + 36|0;
 $nodeDescription = sp + 16|0;
 $nodeDescriptionStr = sp + 4|0;
 $16 = $pNodeId;
 $21 = $16;
 $22 = $21;
 $pNode = $22;
 $23 = $pNode;
 $24 = ($23|0)==(0|0);
 if ($24) {
  $14 = $17;
  $15 = 11786;
  $25 = $14;
  $13 = $25;
  $26 = $13;
  $12 = $26;
  $27 = $12;
  $11 = $27;
  $28 = $15;
  $29 = $15;
  $30 = (__ZNSt3__111char_traitsIcE6lengthEPKc($29)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($25,$28,$30);
  __THREW__ = 0;
  invoke_vii(395,($agg$result|0),($17|0));
  $31 = __THREW__; __THREW__ = 0;
  $32 = $31&1;
  if ($32) {
   $33 = ___cxa_find_matching_catch()|0;
   $34 = tempRet0;
   $18 = $33;
   $19 = $34;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($17);
   $68 = $18;
   $69 = $19;
   ___resumeException($68|0);
   // unreachable;
  } else {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($17);
   STACKTOP = sp;return;
  }
 }
 $35 = $pNode;
 $36 = HEAP32[$35>>2]|0;
 $37 = ((($36)) + 24|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (FUNCTION_TABLE_ii[$38 & 1023]($35)|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ((($40)) + 28|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (FUNCTION_TABLE_ii[$42 & 1023]($39)|0);
 $9 = $nodeDescription;
 $10 = $43;
 $44 = $9;
 $8 = $44;
 $45 = $8;
 $7 = $45;
 $46 = $7;
 $6 = $46;
 $47 = $10;
 $48 = $10;
 $49 = (__ZNSt3__111char_traitsIcE6lengthEPKc($48)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($44,$47,$49);
 __THREW__ = 0;
 invoke_vii(395,($nodeDescriptionStr|0),($nodeDescription|0));
 $50 = __THREW__; __THREW__ = 0;
 $51 = $50&1;
 if ($51) {
  $66 = ___cxa_find_matching_catch()|0;
  $67 = tempRet0;
  $18 = $66;
  $19 = $67;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($nodeDescription);
  $68 = $18;
  $69 = $19;
  ___resumeException($68|0);
  // unreachable;
 }
 $4 = $agg$result;
 $5 = $nodeDescriptionStr;
 $52 = $4;
 $53 = $5;
 $3 = $53;
 $54 = $3;
 ;HEAP32[$52>>2]=HEAP32[$54>>2]|0;HEAP32[$52+4>>2]=HEAP32[$54+4>>2]|0;HEAP32[$52+8>>2]=HEAP32[$54+8>>2]|0;
 $55 = $5;
 $2 = $55;
 $56 = $2;
 $1 = $56;
 $57 = $1;
 $0 = $57;
 $58 = $0;
 $__a$i$i = $58;
 $__i$i$i = 0;
 while(1) {
  $59 = $__i$i$i;
  $60 = ($59>>>0)<(3);
  if (!($60)) {
   break;
  }
  $61 = $__i$i$i;
  $62 = $__a$i$i;
  $63 = (($62) + ($61<<2)|0);
  HEAP32[$63>>2] = 0;
  $64 = $__i$i$i;
  $65 = (($64) + 1)|0;
  $__i$i$i = $65;
 }
 $20 = 1;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($nodeDescriptionStr);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($nodeDescription);
 STACKTOP = sp;return;
}
function __Z24getSchemaNodeConceptInfoi($agg$result,$pNodeId) {
 $agg$result = $agg$result|0;
 $pNodeId = $pNodeId|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a$i$i = 0, $__i$i$i = 0, $pNode = 0;
 var $tag = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tag = sp + 4|0;
 $16 = $pNodeId;
 $18 = $16;
 $19 = $18;
 $pNode = $19;
 $20 = $pNode;
 $21 = ($20|0)==(0|0);
 if ($21) {
  $14 = $agg$result;
  $15 = 11786;
  $22 = $14;
  $13 = $22;
  $23 = $13;
  $12 = $23;
  $24 = $12;
  $11 = $24;
  $25 = $15;
  $26 = $15;
  $27 = (__ZNSt3__111char_traitsIcE6lengthEPKc($26)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($22,$25,$27);
  STACKTOP = sp;return;
 }
 $28 = $pNode;
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($29)) + 24|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (FUNCTION_TABLE_ii[$31 & 1023]($28)|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($33)) + 36|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (FUNCTION_TABLE_ii[$35 & 1023]($32)|0);
 $9 = $tag;
 $10 = $36;
 $37 = $9;
 $8 = $37;
 $38 = $8;
 $7 = $38;
 $39 = $7;
 $6 = $39;
 $40 = $10;
 $41 = $10;
 $42 = (__ZNSt3__111char_traitsIcE6lengthEPKc($41)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($37,$40,$42);
 $4 = $agg$result;
 $5 = $tag;
 $43 = $4;
 $44 = $5;
 $3 = $44;
 $45 = $3;
 ;HEAP32[$43>>2]=HEAP32[$45>>2]|0;HEAP32[$43+4>>2]=HEAP32[$45+4>>2]|0;HEAP32[$43+8>>2]=HEAP32[$45+8>>2]|0;
 $46 = $5;
 $2 = $46;
 $47 = $2;
 $1 = $47;
 $48 = $1;
 $0 = $48;
 $49 = $0;
 $__a$i$i = $49;
 $__i$i$i = 0;
 while(1) {
  $50 = $__i$i$i;
  $51 = ($50>>>0)<(3);
  if (!($51)) {
   break;
  }
  $52 = $__i$i$i;
  $53 = $__a$i$i;
  $54 = (($53) + ($52<<2)|0);
  HEAP32[$54>>2] = 0;
  $55 = $__i$i$i;
  $56 = (($55) + 1)|0;
  $__i$i$i = $56;
 }
 $17 = 1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($tag);
 STACKTOP = sp;return;
}
function __Z27getSchemaNodeSpatialRefInfoi($agg$result,$pNodeId) {
 $agg$result = $agg$result|0;
 $pNodeId = $pNodeId|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a$i$i = 0, $__i$i$i = 0, $pNode = 0;
 var $tag = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tag = sp + 4|0;
 $16 = $pNodeId;
 $18 = $16;
 $19 = $18;
 $pNode = $19;
 $20 = $pNode;
 $21 = ($20|0)==(0|0);
 if ($21) {
  $14 = $agg$result;
  $15 = 11786;
  $22 = $14;
  $13 = $22;
  $23 = $13;
  $12 = $23;
  $24 = $12;
  $11 = $24;
  $25 = $15;
  $26 = $15;
  $27 = (__ZNSt3__111char_traitsIcE6lengthEPKc($26)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($22,$25,$27);
  STACKTOP = sp;return;
 }
 $28 = $pNode;
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($29)) + 24|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (FUNCTION_TABLE_ii[$31 & 1023]($28)|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($33)) + 60|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (FUNCTION_TABLE_ii[$35 & 1023]($32)|0);
 $9 = $tag;
 $10 = $36;
 $37 = $9;
 $8 = $37;
 $38 = $8;
 $7 = $38;
 $39 = $7;
 $6 = $39;
 $40 = $10;
 $41 = $10;
 $42 = (__ZNSt3__111char_traitsIcE6lengthEPKc($41)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($37,$40,$42);
 $4 = $agg$result;
 $5 = $tag;
 $43 = $4;
 $44 = $5;
 $3 = $44;
 $45 = $3;
 ;HEAP32[$43>>2]=HEAP32[$45>>2]|0;HEAP32[$43+4>>2]=HEAP32[$45+4>>2]|0;HEAP32[$43+8>>2]=HEAP32[$45+8>>2]|0;
 $46 = $5;
 $2 = $46;
 $47 = $2;
 $1 = $47;
 $48 = $1;
 $0 = $48;
 $49 = $0;
 $__a$i$i = $49;
 $__i$i$i = 0;
 while(1) {
  $50 = $__i$i$i;
  $51 = ($50>>>0)<(3);
  if (!($51)) {
   break;
  }
  $52 = $__i$i$i;
  $53 = $__a$i$i;
  $54 = (($53) + ($52<<2)|0);
  HEAP32[$54>>2] = 0;
  $55 = $__i$i$i;
  $56 = (($55) + 1)|0;
  $__i$i$i = $56;
 }
 $17 = 1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($tag);
 STACKTOP = sp;return;
}
function __Z21getSchemaNodeUnitInfoi($agg$result,$pNodeId) {
 $agg$result = $agg$result|0;
 $pNodeId = $pNodeId|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a$i$i = 0, $__i$i$i = 0, $pNode = 0;
 var $tag = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tag = sp + 4|0;
 $16 = $pNodeId;
 $18 = $16;
 $19 = $18;
 $pNode = $19;
 $20 = $pNode;
 $21 = ($20|0)==(0|0);
 if ($21) {
  $14 = $agg$result;
  $15 = 11786;
  $22 = $14;
  $13 = $22;
  $23 = $13;
  $12 = $23;
  $24 = $12;
  $11 = $24;
  $25 = $15;
  $26 = $15;
  $27 = (__ZNSt3__111char_traitsIcE6lengthEPKc($26)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($22,$25,$27);
  STACKTOP = sp;return;
 }
 $28 = $pNode;
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($29)) + 24|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (FUNCTION_TABLE_ii[$31 & 1023]($28)|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($33)) + 44|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (FUNCTION_TABLE_ii[$35 & 1023]($32)|0);
 $9 = $tag;
 $10 = $36;
 $37 = $9;
 $8 = $37;
 $38 = $8;
 $7 = $38;
 $39 = $7;
 $6 = $39;
 $40 = $10;
 $41 = $10;
 $42 = (__ZNSt3__111char_traitsIcE6lengthEPKc($41)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($37,$40,$42);
 $4 = $agg$result;
 $5 = $tag;
 $43 = $4;
 $44 = $5;
 $3 = $44;
 $45 = $3;
 ;HEAP32[$43>>2]=HEAP32[$45>>2]|0;HEAP32[$43+4>>2]=HEAP32[$45+4>>2]|0;HEAP32[$43+8>>2]=HEAP32[$45+8>>2]|0;
 $46 = $5;
 $2 = $46;
 $47 = $2;
 $1 = $47;
 $48 = $1;
 $0 = $48;
 $49 = $0;
 $__a$i$i = $49;
 $__i$i$i = 0;
 while(1) {
  $50 = $__i$i$i;
  $51 = ($50>>>0)<(3);
  if (!($51)) {
   break;
  }
  $52 = $__i$i$i;
  $53 = $__a$i$i;
  $54 = (($53) + ($52<<2)|0);
  HEAP32[$54>>2] = 0;
  $55 = $__i$i$i;
  $56 = (($55) + 1)|0;
  $__i$i$i = $56;
 }
 $17 = 1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($tag);
 STACKTOP = sp;return;
}
function __Z29getSchemaNodeDataTemplateInfoi($agg$result,$pNodeId) {
 $agg$result = $agg$result|0;
 $pNodeId = $pNodeId|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a$i$i = 0, $__i$i$i = 0, $pNode = 0;
 var $tag = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tag = sp + 4|0;
 $16 = $pNodeId;
 $18 = $16;
 $19 = $18;
 $pNode = $19;
 $20 = $pNode;
 $21 = ($20|0)==(0|0);
 if ($21) {
  $14 = $agg$result;
  $15 = 11786;
  $22 = $14;
  $13 = $22;
  $23 = $13;
  $12 = $23;
  $24 = $12;
  $11 = $24;
  $25 = $15;
  $26 = $15;
  $27 = (__ZNSt3__111char_traitsIcE6lengthEPKc($26)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($22,$25,$27);
  STACKTOP = sp;return;
 }
 $28 = $pNode;
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($29)) + 24|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (FUNCTION_TABLE_ii[$31 & 1023]($28)|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($33)) + 68|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (FUNCTION_TABLE_ii[$35 & 1023]($32)|0);
 $9 = $tag;
 $10 = $36;
 $37 = $9;
 $8 = $37;
 $38 = $8;
 $7 = $38;
 $39 = $7;
 $6 = $39;
 $40 = $10;
 $41 = $10;
 $42 = (__ZNSt3__111char_traitsIcE6lengthEPKc($41)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($37,$40,$42);
 $4 = $agg$result;
 $5 = $tag;
 $43 = $4;
 $44 = $5;
 $3 = $44;
 $45 = $3;
 ;HEAP32[$43>>2]=HEAP32[$45>>2]|0;HEAP32[$43+4>>2]=HEAP32[$45+4>>2]|0;HEAP32[$43+8>>2]=HEAP32[$45+8>>2]|0;
 $46 = $5;
 $2 = $46;
 $47 = $2;
 $1 = $47;
 $48 = $1;
 $0 = $48;
 $49 = $0;
 $__a$i$i = $49;
 $__i$i$i = 0;
 while(1) {
  $50 = $__i$i$i;
  $51 = ($50>>>0)<(3);
  if (!($51)) {
   break;
  }
  $52 = $__i$i$i;
  $53 = $__a$i$i;
  $54 = (($53) + ($52<<2)|0);
  HEAP32[$54>>2] = 0;
  $55 = $__i$i$i;
  $56 = (($55) + 1)|0;
  $__i$i$i = $56;
 }
 $17 = 1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($tag);
 STACKTOP = sp;return;
}
function __Z20modifySchemaNodeNameiNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($pNodeId,$nodeName) {
 $pNodeId = $pNodeId|0;
 $nodeName = $nodeName|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nodeNameStr = 0, $pNode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $nodeNameStr = sp + 8|0;
 $15 = $pNodeId;
 $18 = $15;
 $19 = $18;
 $pNode = $19;
 $20 = $pNode;
 $21 = ($20|0)!=(0|0);
 if (!($21)) {
  STACKTOP = sp;return 0;
 }
 __Z4ws2sRKNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($nodeNameStr,$nodeName);
 $22 = $pNode;
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($23)) + 28|0);
 $25 = HEAP32[$24>>2]|0;
 $14 = $nodeNameStr;
 $26 = $14;
 $13 = $26;
 $27 = $13;
 $12 = $27;
 $28 = $12;
 $11 = $28;
 $29 = $11;
 $10 = $29;
 $30 = $10;
 $9 = $30;
 $31 = $9;
 $32 = HEAP8[$31>>0]|0;
 $33 = $32&255;
 $34 = $33 & 1;
 $35 = ($34|0)!=(0);
 if ($35) {
  $3 = $28;
  $36 = $3;
  $2 = $36;
  $37 = $2;
  $1 = $37;
  $38 = $1;
  $39 = ((($38)) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  $47 = $40;
 } else {
  $8 = $28;
  $41 = $8;
  $7 = $41;
  $42 = $7;
  $6 = $42;
  $43 = $6;
  $44 = ((($43)) + 1|0);
  $5 = $44;
  $45 = $5;
  $4 = $45;
  $46 = $4;
  $47 = $46;
 }
 $0 = $47;
 $48 = $0;
 __THREW__ = 0;
 (invoke_iii($25|0,($22|0),($48|0))|0);
 $49 = __THREW__; __THREW__ = 0;
 $50 = $49&1;
 if ($50) {
  $51 = ___cxa_find_matching_catch()|0;
  $52 = tempRet0;
  $16 = $51;
  $17 = $52;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($nodeNameStr);
  $53 = $16;
  $54 = $17;
  ___resumeException($53|0);
  // unreachable;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($nodeNameStr);
 STACKTOP = sp;return 0;
}
function __Z27modifySchemaNodeDescriptioniNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($pNodeId,$descriptionInfo) {
 $pNodeId = $pNodeId|0;
 $descriptionInfo = $descriptionInfo|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $description = 0, $pNode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $15 = sp + 92|0;
 $description = sp + 12|0;
 $16 = $pNodeId;
 $20 = $16;
 $21 = $20;
 $pNode = $21;
 $22 = $pNode;
 $23 = ($22|0)!=(0|0);
 if (!($23)) {
  $$expand_i1_val2 = 0;
  HEAP8[$15>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$15>>0]|0;
  $64 = $$pre_trunc&1;
  STACKTOP = sp;return ($64|0);
 }
 __Z4ws2sRKNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($description,$descriptionInfo);
 $24 = $pNode;
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($25)) + 24|0);
 $27 = HEAP32[$26>>2]|0;
 __THREW__ = 0;
 $28 = (invoke_ii($27|0,($24|0))|0);
 $29 = __THREW__; __THREW__ = 0;
 $30 = $29&1;
 if ($30) {
  $60 = ___cxa_find_matching_catch()|0;
  $61 = tempRet0;
  $17 = $60;
  $18 = $61;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($description);
  $62 = $17;
  $63 = $18;
  ___resumeException($62|0);
  // unreachable;
 }
 $31 = HEAP32[$28>>2]|0;
 $32 = ((($31)) + 32|0);
 $33 = HEAP32[$32>>2]|0;
 $14 = $description;
 $34 = $14;
 $13 = $34;
 $35 = $13;
 $12 = $35;
 $36 = $12;
 $11 = $36;
 $37 = $11;
 $10 = $37;
 $38 = $10;
 $9 = $38;
 $39 = $9;
 $40 = HEAP8[$39>>0]|0;
 $41 = $40&255;
 $42 = $41 & 1;
 $43 = ($42|0)!=(0);
 if ($43) {
  $3 = $36;
  $44 = $3;
  $2 = $44;
  $45 = $2;
  $1 = $45;
  $46 = $1;
  $47 = ((($46)) + 8|0);
  $48 = HEAP32[$47>>2]|0;
  $55 = $48;
 } else {
  $8 = $36;
  $49 = $8;
  $7 = $49;
  $50 = $7;
  $6 = $50;
  $51 = $6;
  $52 = ((($51)) + 1|0);
  $5 = $52;
  $53 = $5;
  $4 = $53;
  $54 = $4;
  $55 = $54;
 }
 $0 = $55;
 $56 = $0;
 __THREW__ = 0;
 $57 = (invoke_iii($33|0,($28|0),($56|0))|0);
 $58 = __THREW__; __THREW__ = 0;
 $59 = $58&1;
 if ($59) {
  $60 = ___cxa_find_matching_catch()|0;
  $61 = tempRet0;
  $17 = $60;
  $18 = $61;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($description);
  $62 = $17;
  $63 = $18;
  ___resumeException($62|0);
  // unreachable;
 }
 $$expand_i1_val = $57&1;
 HEAP8[$15>>0] = $$expand_i1_val;
 $19 = 1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($description);
 $$pre_trunc = HEAP8[$15>>0]|0;
 $64 = $$pre_trunc&1;
 STACKTOP = sp;return ($64|0);
}
function __Z27modifySchemaNodeConceptInfoiNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($pNodeId,$tag) {
 $pNodeId = $pNodeId|0;
 $tag = $tag|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pNode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $15 = sp + 68|0;
 $16 = $pNodeId;
 $17 = $16;
 $18 = $17;
 $pNode = $18;
 $19 = $pNode;
 $20 = ($19|0)!=(0|0);
 if (!($20)) {
  $$expand_i1_val2 = 0;
  HEAP8[$15>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$15>>0]|0;
  $53 = $$pre_trunc&1;
  STACKTOP = sp;return ($53|0);
 }
 $21 = $pNode;
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($22)) + 24|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (FUNCTION_TABLE_ii[$24 & 1023]($21)|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($26)) + 40|0);
 $28 = HEAP32[$27>>2]|0;
 $14 = $tag;
 $29 = $14;
 $13 = $29;
 $30 = $13;
 $12 = $30;
 $31 = $12;
 $11 = $31;
 $32 = $11;
 $10 = $32;
 $33 = $10;
 $9 = $33;
 $34 = $9;
 $35 = HEAP8[$34>>0]|0;
 $36 = $35&255;
 $37 = $36 & 1;
 $38 = ($37|0)!=(0);
 if ($38) {
  $3 = $31;
  $39 = $3;
  $2 = $39;
  $40 = $2;
  $1 = $40;
  $41 = $1;
  $42 = ((($41)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $50 = $43;
 } else {
  $8 = $31;
  $44 = $8;
  $7 = $44;
  $45 = $7;
  $6 = $45;
  $46 = $6;
  $47 = ((($46)) + 1|0);
  $5 = $47;
  $48 = $5;
  $4 = $48;
  $49 = $4;
  $50 = $49;
 }
 $0 = $50;
 $51 = $0;
 $52 = (FUNCTION_TABLE_iii[$28 & 1023]($25,$51)|0);
 $$expand_i1_val = $52&1;
 HEAP8[$15>>0] = $$expand_i1_val;
 $$pre_trunc = HEAP8[$15>>0]|0;
 $53 = $$pre_trunc&1;
 STACKTOP = sp;return ($53|0);
}
function __Z30modifySchemaNodeSpatialRefInfoiNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($pNodeId,$tag) {
 $pNodeId = $pNodeId|0;
 $tag = $tag|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pNode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $15 = sp + 68|0;
 $16 = $pNodeId;
 $17 = $16;
 $18 = $17;
 $pNode = $18;
 $19 = $pNode;
 $20 = ($19|0)!=(0|0);
 if (!($20)) {
  $$expand_i1_val2 = 0;
  HEAP8[$15>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$15>>0]|0;
  $53 = $$pre_trunc&1;
  STACKTOP = sp;return ($53|0);
 }
 $21 = $pNode;
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($22)) + 24|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (FUNCTION_TABLE_ii[$24 & 1023]($21)|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($26)) + 64|0);
 $28 = HEAP32[$27>>2]|0;
 $14 = $tag;
 $29 = $14;
 $13 = $29;
 $30 = $13;
 $12 = $30;
 $31 = $12;
 $11 = $31;
 $32 = $11;
 $10 = $32;
 $33 = $10;
 $9 = $33;
 $34 = $9;
 $35 = HEAP8[$34>>0]|0;
 $36 = $35&255;
 $37 = $36 & 1;
 $38 = ($37|0)!=(0);
 if ($38) {
  $3 = $31;
  $39 = $3;
  $2 = $39;
  $40 = $2;
  $1 = $40;
  $41 = $1;
  $42 = ((($41)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $50 = $43;
 } else {
  $8 = $31;
  $44 = $8;
  $7 = $44;
  $45 = $7;
  $6 = $45;
  $46 = $6;
  $47 = ((($46)) + 1|0);
  $5 = $47;
  $48 = $5;
  $4 = $48;
  $49 = $4;
  $50 = $49;
 }
 $0 = $50;
 $51 = $0;
 $52 = (FUNCTION_TABLE_iii[$28 & 1023]($25,$51)|0);
 $$expand_i1_val = $52&1;
 HEAP8[$15>>0] = $$expand_i1_val;
 $$pre_trunc = HEAP8[$15>>0]|0;
 $53 = $$pre_trunc&1;
 STACKTOP = sp;return ($53|0);
}
function __Z24modifySchemaNodeUnitInfoiNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($pNodeId,$tag) {
 $pNodeId = $pNodeId|0;
 $tag = $tag|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pNode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $15 = sp + 68|0;
 $16 = $pNodeId;
 $17 = $16;
 $18 = $17;
 $pNode = $18;
 $19 = $pNode;
 $20 = ($19|0)!=(0|0);
 if (!($20)) {
  $$expand_i1_val2 = 0;
  HEAP8[$15>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$15>>0]|0;
  $53 = $$pre_trunc&1;
  STACKTOP = sp;return ($53|0);
 }
 $21 = $pNode;
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($22)) + 24|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (FUNCTION_TABLE_ii[$24 & 1023]($21)|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($26)) + 48|0);
 $28 = HEAP32[$27>>2]|0;
 $14 = $tag;
 $29 = $14;
 $13 = $29;
 $30 = $13;
 $12 = $30;
 $31 = $12;
 $11 = $31;
 $32 = $11;
 $10 = $32;
 $33 = $10;
 $9 = $33;
 $34 = $9;
 $35 = HEAP8[$34>>0]|0;
 $36 = $35&255;
 $37 = $36 & 1;
 $38 = ($37|0)!=(0);
 if ($38) {
  $3 = $31;
  $39 = $3;
  $2 = $39;
  $40 = $2;
  $1 = $40;
  $41 = $1;
  $42 = ((($41)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $50 = $43;
 } else {
  $8 = $31;
  $44 = $8;
  $7 = $44;
  $45 = $7;
  $6 = $45;
  $46 = $6;
  $47 = ((($46)) + 1|0);
  $5 = $47;
  $48 = $5;
  $4 = $48;
  $49 = $4;
  $50 = $49;
 }
 $0 = $50;
 $51 = $0;
 $52 = (FUNCTION_TABLE_iii[$28 & 1023]($25,$51)|0);
 $$expand_i1_val = $52&1;
 HEAP8[$15>>0] = $$expand_i1_val;
 $$pre_trunc = HEAP8[$15>>0]|0;
 $53 = $$pre_trunc&1;
 STACKTOP = sp;return ($53|0);
}
function __Z32modifySchemaNodeDataTemplateInfoiNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($pNodeId,$tag) {
 $pNodeId = $pNodeId|0;
 $tag = $tag|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pNode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $15 = sp + 68|0;
 $16 = $pNodeId;
 $17 = $16;
 $18 = $17;
 $pNode = $18;
 $19 = $pNode;
 $20 = ($19|0)!=(0|0);
 if (!($20)) {
  $$expand_i1_val2 = 0;
  HEAP8[$15>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$15>>0]|0;
  $53 = $$pre_trunc&1;
  STACKTOP = sp;return ($53|0);
 }
 $21 = $pNode;
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($22)) + 24|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (FUNCTION_TABLE_ii[$24 & 1023]($21)|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($26)) + 72|0);
 $28 = HEAP32[$27>>2]|0;
 $14 = $tag;
 $29 = $14;
 $13 = $29;
 $30 = $13;
 $12 = $30;
 $31 = $12;
 $11 = $31;
 $32 = $11;
 $10 = $32;
 $33 = $10;
 $9 = $33;
 $34 = $9;
 $35 = HEAP8[$34>>0]|0;
 $36 = $35&255;
 $37 = $36 & 1;
 $38 = ($37|0)!=(0);
 if ($38) {
  $3 = $31;
  $39 = $3;
  $2 = $39;
  $40 = $2;
  $1 = $40;
  $41 = $1;
  $42 = ((($41)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $50 = $43;
 } else {
  $8 = $31;
  $44 = $8;
  $7 = $44;
  $45 = $7;
  $6 = $45;
  $46 = $6;
  $47 = ((($46)) + 1|0);
  $5 = $47;
  $48 = $5;
  $4 = $48;
  $49 = $4;
  $50 = $49;
 }
 $0 = $50;
 $51 = $0;
 $52 = (FUNCTION_TABLE_iii[$28 & 1023]($25,$51)|0);
 $$expand_i1_val = $52&1;
 HEAP8[$15>>0] = $$expand_i1_val;
 $$pre_trunc = HEAP8[$15>>0]|0;
 $53 = $$pre_trunc&1;
 STACKTOP = sp;return ($53|0);
}
function __Z23loadSchemaFromXmlStreamiNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($agg$result,$datasetId,$xml_wstr) {
 $agg$result = $agg$result|0;
 $datasetId = $datasetId|0;
 $xml_wstr = $xml_wstr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $pDatasetNode = 0, $xml_str = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $xml_str = sp + 12|0;
 $30 = $datasetId;
 $34 = $30;
 $35 = $34;
 $pDatasetNode = $35;
 $36 = $pDatasetNode;
 $37 = ($36|0)!=(0|0);
 if (!($37)) {
  $13 = $agg$result;
  $14 = 7678;
  $92 = $13;
  $12 = $92;
  $93 = $12;
  $11 = $93;
  $94 = $11;
  $10 = $94;
  $95 = $14;
  $96 = $14;
  $97 = (__ZNSt3__111char_traitsIcE6lengthEPKc($96)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($92,$95,$97);
  STACKTOP = sp;return;
 }
 __Z4ws2sRKNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($xml_str,$xml_wstr);
 $38 = $pDatasetNode;
 $39 = HEAP32[$38>>2]|0;
 $40 = ((($39)) + 8|0);
 $41 = HEAP32[$40>>2]|0;
 $29 = $xml_str;
 $42 = $29;
 $28 = $42;
 $43 = $28;
 $27 = $43;
 $44 = $27;
 $26 = $44;
 $45 = $26;
 $25 = $45;
 $46 = $25;
 $24 = $46;
 $47 = $24;
 $48 = HEAP8[$47>>0]|0;
 $49 = $48&255;
 $50 = $49 & 1;
 $51 = ($50|0)!=(0);
 if ($51) {
  $18 = $44;
  $52 = $18;
  $17 = $52;
  $53 = $17;
  $16 = $53;
  $54 = $16;
  $55 = ((($54)) + 8|0);
  $56 = HEAP32[$55>>2]|0;
  $63 = $56;
 } else {
  $23 = $44;
  $57 = $23;
  $22 = $57;
  $58 = $22;
  $21 = $58;
  $59 = $21;
  $60 = ((($59)) + 1|0);
  $20 = $60;
  $61 = $20;
  $19 = $61;
  $62 = $19;
  $63 = $62;
 }
 $15 = $63;
 $64 = $15;
 __THREW__ = 0;
 $65 = (invoke_iii($41|0,($38|0),($64|0))|0);
 $66 = __THREW__; __THREW__ = 0;
 $67 = $66&1;
 do {
  if (!($67)) {
   if ($65) {
    $8 = $agg$result;
    $9 = 7657;
    $68 = $8;
    $7 = $68;
    $69 = $7;
    $6 = $69;
    $70 = $6;
    $5 = $70;
    $71 = $9;
    $72 = $9;
    __THREW__ = 0;
    $73 = (invoke_ii(383,($72|0))|0);
    $74 = __THREW__; __THREW__ = 0;
    $75 = $74&1;
    if ($75) {
     break;
    }
    __THREW__ = 0;
    invoke_viii(384,($68|0),($71|0),($73|0));
    $76 = __THREW__; __THREW__ = 0;
    $77 = $76&1;
    if ($77) {
     break;
    }
    $33 = 1;
   } else {
    $3 = $agg$result;
    $4 = 7666;
    $82 = $3;
    $2 = $82;
    $83 = $2;
    $1 = $83;
    $84 = $1;
    $0 = $84;
    $85 = $4;
    $86 = $4;
    __THREW__ = 0;
    $87 = (invoke_ii(383,($86|0))|0);
    $88 = __THREW__; __THREW__ = 0;
    $89 = $88&1;
    if ($89) {
     break;
    }
    __THREW__ = 0;
    invoke_viii(384,($82|0),($85|0),($87|0));
    $90 = __THREW__; __THREW__ = 0;
    $91 = $90&1;
    if ($91) {
     break;
    }
    $33 = 1;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($xml_str);
   STACKTOP = sp;return;
  }
 } while(0);
 $78 = ___cxa_find_matching_catch()|0;
 $79 = tempRet0;
 $31 = $78;
 $32 = $79;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($xml_str);
 $80 = $31;
 $81 = $32;
 ___resumeException($80|0);
 // unreachable;
}
function __Z23formatSchemaToXmlStreami($agg$result,$datasetId) {
 $agg$result = $agg$result|0;
 $datasetId = $datasetId|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pDatasetNode = 0, $xml_str = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $xml_str = sp + 12|0;
 $15 = $datasetId;
 $19 = $15;
 $20 = $19;
 $pDatasetNode = $20;
 $21 = $pDatasetNode;
 $22 = ($21|0)!=(0|0);
 if (!($22)) {
  $3 = $agg$result;
  $4 = 2540;
  $52 = $3;
  $2 = $52;
  $53 = $2;
  $1 = $53;
  $54 = $1;
  $0 = $54;
  $55 = $4;
  $56 = $4;
  $57 = (__ZNSt3__111char_traitsIwE6lengthEPKw($56)|0);
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($52,$55,$57);
  STACKTOP = sp;return;
 }
 $13 = $xml_str;
 $14 = 11786;
 $23 = $13;
 $12 = $23;
 $24 = $12;
 $11 = $24;
 $25 = $11;
 $10 = $25;
 $26 = $14;
 $27 = $14;
 $28 = (__ZNSt3__111char_traitsIcE6lengthEPKc($27)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($23,$26,$28);
 $29 = $pDatasetNode;
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($30)) + 12|0);
 $32 = HEAP32[$31>>2]|0;
 __THREW__ = 0;
 $33 = (invoke_iii($32|0,($29|0),($xml_str|0))|0);
 $34 = __THREW__; __THREW__ = 0;
 $35 = $34&1;
 do {
  if (!($35)) {
   if ($33) {
    __THREW__ = 0;
    invoke_vii(395,($agg$result|0),($xml_str|0));
    $36 = __THREW__; __THREW__ = 0;
    $37 = $36&1;
    if ($37) {
     break;
    }
    $18 = 1;
   } else {
    $8 = $agg$result;
    $9 = 2488;
    $42 = $8;
    $7 = $42;
    $43 = $7;
    $6 = $43;
    $44 = $6;
    $5 = $44;
    $45 = $9;
    $46 = $9;
    __THREW__ = 0;
    $47 = (invoke_ii(396,($46|0))|0);
    $48 = __THREW__; __THREW__ = 0;
    $49 = $48&1;
    if ($49) {
     break;
    }
    __THREW__ = 0;
    invoke_viii(397,($42|0),($45|0),($47|0));
    $50 = __THREW__; __THREW__ = 0;
    $51 = $50&1;
    if ($51) {
     break;
    }
    $18 = 1;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($xml_str);
   STACKTOP = sp;return;
  }
 } while(0);
 $38 = ___cxa_find_matching_catch()|0;
 $39 = tempRet0;
 $16 = $38;
 $17 = $39;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($xml_str);
 $40 = $16;
 $41 = $17;
 ___resumeException($40|0);
 // unreachable;
}
function __Z16createUdxDatasetv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pDataset = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = (__Znwj(52)|0);
 __THREW__ = 0;
 invoke_vii(398,($2|0),(11062|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  $0 = $13;
  $1 = $14;
  __ZdlPv($2);
  $15 = $0;
  $16 = $1;
  ___resumeException($15|0);
  // unreachable;
 }
 $5 = ($2|0)==(0|0);
 if ($5) {
  $10 = 0;
  $pDataset = $10;
  $11 = $pDataset;
  $12 = $11;
  STACKTOP = sp;return ($12|0);
 }
 $6 = HEAP32[$2>>2]|0;
 $7 = ((($6)) + -56|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($2) + ($8)|0);
 $10 = $9;
 $pDataset = $10;
 $11 = $pDataset;
 $12 = $11;
 STACKTOP = sp;return ($12|0);
}
function __Z14getDatasetNodei($dxID) {
 $dxID = $dxID|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pNode = 0, $parentNode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $dxID;
 $2 = $1;
 $3 = $2;
 $parentNode = $3;
 $4 = $parentNode;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $0 = -1;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 }
 $6 = $parentNode;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $12 = 0;
 } else {
  $8 = HEAP32[$6>>2]|0;
  $9 = ((($8)) + -12|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($6) + ($10)|0);
  $12 = $11;
 }
 $pNode = $12;
 $13 = $pNode;
 $14 = $13;
 $0 = $14;
 $15 = $0;
 STACKTOP = sp;return ($15|0);
}
function __Z14releaseDataseti($dxID) {
 $dxID = $dxID|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $parentNode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $dxID;
 $2 = $1;
 $3 = $2;
 $parentNode = $3;
 $4 = $parentNode;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $0 = -1;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 } else {
  $6 = $parentNode;
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($7)) + -12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($6) + ($9)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  (FUNCTION_TABLE_ii[$13 & 1023]($10)|0);
  $0 = 0;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function __Z17getNodeChildCounti($nxID) {
 $nxID = $nxID|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pNode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $nxID;
 $2 = $1;
 $3 = $2;
 $pNode = $3;
 $4 = $pNode;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $0 = 0;
  $11 = $0;
  STACKTOP = sp;return ($11|0);
 } else {
  $6 = $pNode;
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($7)) + 32|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (FUNCTION_TABLE_ii[$9 & 1023]($6)|0);
  $0 = $10;
  $11 = $0;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function __Z12getChildNodeii($nxID,$idx) {
 $nxID = $nxID|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count = 0, $pNode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $nxID;
 $2 = $idx;
 $3 = $1;
 $4 = $3;
 $pNode = $4;
 $5 = $pNode;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $0 = 0;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 }
 $7 = $pNode;
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 32|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 1023]($7)|0);
 $count = $11;
 $12 = $2;
 $13 = ($12|0)<(0);
 if (!($13)) {
  $14 = $2;
  $15 = $count;
  $16 = ($14|0)>=($15|0);
  if (!($16)) {
   $17 = $pNode;
   $18 = HEAP32[$17>>2]|0;
   $19 = ((($18)) + 36|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $2;
   $22 = (FUNCTION_TABLE_iii[$20 & 1023]($17,$21)|0);
   $23 = $22;
   $0 = $23;
   $24 = $0;
   STACKTOP = sp;return ($24|0);
  }
 }
 $0 = 0;
 $24 = $0;
 STACKTOP = sp;return ($24|0);
}
function __Z11getNodeNamei($agg$result,$nxID) {
 $agg$result = $agg$result|0;
 $nxID = $nxID|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pNode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $10 = $nxID;
 $11 = $10;
 $12 = $11;
 $pNode = $12;
 $13 = $pNode;
 $14 = ($13|0)==(0|0);
 if ($14) {
  $8 = $agg$result;
  $9 = 11786;
  $15 = $8;
  $7 = $15;
  $16 = $7;
  $6 = $16;
  $17 = $6;
  $5 = $17;
  $18 = $9;
  $19 = $9;
  $20 = (__ZNSt3__111char_traitsIcE6lengthEPKc($19)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($15,$18,$20);
  STACKTOP = sp;return;
 } else {
  $21 = $pNode;
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($22)) + 20|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (FUNCTION_TABLE_ii[$24 & 1023]($21)|0);
  $3 = $agg$result;
  $4 = $25;
  $26 = $3;
  $2 = $26;
  $27 = $2;
  $1 = $27;
  $28 = $1;
  $0 = $28;
  $29 = $4;
  $30 = $4;
  $31 = (__ZNSt3__111char_traitsIcE6lengthEPKc($30)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($26,$29,$31);
  STACKTOP = sp;return;
 }
}
function __Z11setNodeNameiNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($nxID,$pName) {
 $nxID = $nxID|0;
 $pName = $pName|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pNode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $15 = sp + 68|0;
 $16 = $nxID;
 $17 = $16;
 $18 = $17;
 $pNode = $18;
 $19 = $pNode;
 $20 = ($19|0)==(0|0);
 if ($20) {
  $$expand_i1_val = 0;
  HEAP8[$15>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$15>>0]|0;
  $48 = $$pre_trunc&1;
  STACKTOP = sp;return ($48|0);
 }
 $21 = $pNode;
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($22)) + 24|0);
 $24 = HEAP32[$23>>2]|0;
 $14 = $pName;
 $25 = $14;
 $13 = $25;
 $26 = $13;
 $12 = $26;
 $27 = $12;
 $11 = $27;
 $28 = $11;
 $10 = $28;
 $29 = $10;
 $9 = $29;
 $30 = $9;
 $31 = HEAP8[$30>>0]|0;
 $32 = $31&255;
 $33 = $32 & 1;
 $34 = ($33|0)!=(0);
 if ($34) {
  $3 = $27;
  $35 = $3;
  $2 = $35;
  $36 = $2;
  $1 = $36;
  $37 = $1;
  $38 = ((($37)) + 8|0);
  $39 = HEAP32[$38>>2]|0;
  $46 = $39;
 } else {
  $8 = $27;
  $40 = $8;
  $7 = $40;
  $41 = $7;
  $6 = $41;
  $42 = $6;
  $43 = ((($42)) + 1|0);
  $5 = $43;
  $44 = $5;
  $4 = $44;
  $45 = $4;
  $46 = $45;
 }
 $0 = $46;
 $47 = $0;
 FUNCTION_TABLE_vii[$24 & 1023]($21,$47);
 $$expand_i1_val2 = 1;
 HEAP8[$15>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$15>>0]|0;
 $48 = $$pre_trunc&1;
 STACKTOP = sp;return ($48|0);
}
function __Z11getNodeTypei($nxID) {
 $nxID = $nxID|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pNode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $nxID;
 $2 = $1;
 $3 = $2;
 $pNode = $3;
 $4 = $pNode;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $0 = 0;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 } else {
  $6 = $pNode;
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($7)) + 28|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (FUNCTION_TABLE_ii[$9 & 1023]($6)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 24|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_ii[$13 & 1023]($10)|0);
  $0 = $14;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function __Z13getNodeLengthi($nxID) {
 $nxID = $nxID|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $nxID;
 STACKTOP = sp;return 0;
}
function __Z17kerneltype2stringN4NGIS4Data11EKernelTypeE($agg$result,$pType) {
 $agg$result = $agg$result|0;
 $pType = $pType|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pType;
 $1 = $0;
 __ZN4NGIS4DataL17KernelType2StringENS0_11EKernelTypeE($agg$result,$1);
 STACKTOP = sp;return;
}
function __Z17string2kerneltypeNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($pStr) {
 $pStr = $pStr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 8|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($0,$pStr);
 __THREW__ = 0;
 $3 = (invoke_ii(399,($0|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
  STACKTOP = sp;return ($3|0);
 }
 return (0)|0;
}
function __Z12addChildNodeiNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4NGIS4Data11EKernelTypeE($nxID,$name,$type) {
 $nxID = $nxID|0;
 $name = $name|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pNode = 0, $parentNode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = $nxID;
 $17 = $type;
 $18 = $16;
 $19 = $18;
 $parentNode = $19;
 $20 = $parentNode;
 $21 = ($20|0)==(0|0);
 if ($21) {
  $15 = 0;
  $53 = $15;
  STACKTOP = sp;return ($53|0);
 }
 $22 = $parentNode;
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($23)) + 40|0);
 $25 = HEAP32[$24>>2]|0;
 $14 = $name;
 $26 = $14;
 $13 = $26;
 $27 = $13;
 $12 = $27;
 $28 = $12;
 $11 = $28;
 $29 = $11;
 $10 = $29;
 $30 = $10;
 $9 = $30;
 $31 = $9;
 $32 = HEAP8[$31>>0]|0;
 $33 = $32&255;
 $34 = $33 & 1;
 $35 = ($34|0)!=(0);
 if ($35) {
  $3 = $28;
  $36 = $3;
  $2 = $36;
  $37 = $2;
  $1 = $37;
  $38 = $1;
  $39 = ((($38)) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  $47 = $40;
 } else {
  $8 = $28;
  $41 = $8;
  $7 = $41;
  $42 = $7;
  $6 = $42;
  $43 = $6;
  $44 = ((($43)) + 1|0);
  $5 = $44;
  $45 = $5;
  $4 = $45;
  $46 = $4;
  $47 = $46;
 }
 $0 = $47;
 $48 = $0;
 $49 = $17;
 $50 = (FUNCTION_TABLE_iiii[$25 & 1023]($22,$48,$49)|0);
 $pNode = $50;
 $51 = $pNode;
 $52 = $51;
 $15 = $52;
 $53 = $15;
 STACKTOP = sp;return ($53|0);
}
function __Z22removeChildNodeByIndexii($parentId,$idx) {
 $parentId = $parentId|0;
 $idx = $idx|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $parentNode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 12|0;
 $1 = $parentId;
 $2 = $idx;
 $3 = $1;
 $4 = $3;
 $parentNode = $4;
 $5 = $parentNode;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $13 = $$pre_trunc&1;
  STACKTOP = sp;return ($13|0);
 } else {
  $7 = $parentNode;
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 48|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $2;
  $12 = (FUNCTION_TABLE_iii[$10 & 1023]($7,$11)|0);
  $$expand_i1_val2 = $12&1;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $13 = $$pre_trunc&1;
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function __Z15removeChildNodeii($parentId,$nodeId) {
 $parentId = $parentId|0;
 $nodeId = $nodeId|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $pNode = 0, $parentNode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 16|0;
 $1 = $parentId;
 $2 = $nodeId;
 $3 = $1;
 $4 = $3;
 $parentNode = $4;
 $5 = $parentNode;
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   $$expand_i1_val = 0;
   HEAP8[$0>>0] = $$expand_i1_val;
  } else {
   $7 = $2;
   $8 = $7;
   $pNode = $8;
   $9 = $pNode;
   $10 = ($9|0)==(0|0);
   if ($10) {
    $$expand_i1_val2 = 0;
    HEAP8[$0>>0] = $$expand_i1_val2;
    break;
   } else {
    $11 = $parentNode;
    $12 = HEAP32[$11>>2]|0;
    $13 = ((($12)) + 44|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $pNode;
    $16 = (FUNCTION_TABLE_iii[$14 & 1023]($11,$15)|0);
    $$expand_i1_val4 = $16&1;
    HEAP8[$0>>0] = $$expand_i1_val4;
    break;
   }
  }
 } while(0);
 $$pre_trunc = HEAP8[$0>>0]|0;
 $17 = $$pre_trunc&1;
 STACKTOP = sp;return ($17|0);
}
function __Z15setIntNodeValueii($nxID,$value) {
 $nxID = $nxID|0;
 $value = $value|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pNode = 0, $realKernel = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 16|0;
 $1 = $nxID;
 $2 = $value;
 $3 = $1;
 $4 = $3;
 $pNode = $4;
 $5 = $pNode;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $27 = $$pre_trunc&1;
  STACKTOP = sp;return ($27|0);
 }
 $7 = $pNode;
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 1023]($7)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (FUNCTION_TABLE_ii[$14 & 1023]($11)|0);
 $16 = ($15|0)!=(2);
 if ($16) {
  $$expand_i1_val2 = 0;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $27 = $$pre_trunc&1;
  STACKTOP = sp;return ($27|0);
 } else {
  $17 = $pNode;
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($18)) + 28|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (FUNCTION_TABLE_ii[$20 & 1023]($17)|0);
  $realKernel = $21;
  $22 = $realKernel;
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($23)) + 28|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $2;
  (FUNCTION_TABLE_iii[$25 & 1023]($22,$26)|0);
  $$expand_i1_val4 = 1;
  HEAP8[$0>>0] = $$expand_i1_val4;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $27 = $$pre_trunc&1;
  STACKTOP = sp;return ($27|0);
 }
 return (0)|0;
}
function __Z16setRealNodeValueid($nxID,$value) {
 $nxID = $nxID|0;
 $value = +$value;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pNode = 0, $realKernel = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 20|0;
 $1 = $nxID;
 $2 = $value;
 $3 = $1;
 $4 = $3;
 $pNode = $4;
 $5 = $pNode;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $27 = $$pre_trunc&1;
  STACKTOP = sp;return ($27|0);
 }
 $7 = $pNode;
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 1023]($7)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (FUNCTION_TABLE_ii[$14 & 1023]($11)|0);
 $16 = ($15|0)!=(4);
 if ($16) {
  $$expand_i1_val2 = 0;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $27 = $$pre_trunc&1;
  STACKTOP = sp;return ($27|0);
 } else {
  $17 = $pNode;
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($18)) + 28|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (FUNCTION_TABLE_ii[$20 & 1023]($17)|0);
  $realKernel = $21;
  $22 = $realKernel;
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($23)) + 28|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $2;
  (FUNCTION_TABLE_iid[$25 & 511]($22,$26)|0);
  $$expand_i1_val4 = 1;
  HEAP8[$0>>0] = $$expand_i1_val4;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $27 = $$pre_trunc&1;
  STACKTOP = sp;return ($27|0);
 }
 return (0)|0;
}
function __Z18setStringNodeValueiNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($nxID,$value) {
 $nxID = $nxID|0;
 $value = $value|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pNode = 0;
 var $realKernel = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 32|0;
 $2 = sp + 8|0;
 $1 = $nxID;
 $5 = $1;
 $6 = $5;
 $pNode = $6;
 $7 = $pNode;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $34 = $$pre_trunc&1;
  STACKTOP = sp;return ($34|0);
 }
 $9 = $pNode;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (FUNCTION_TABLE_ii[$12 & 1023]($9)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 24|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (FUNCTION_TABLE_ii[$16 & 1023]($13)|0);
 $18 = ($17|0)!=(8);
 if ($18) {
  $$expand_i1_val2 = 0;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $34 = $$pre_trunc&1;
  STACKTOP = sp;return ($34|0);
 }
 $19 = $pNode;
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($20)) + 28|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (FUNCTION_TABLE_ii[$22 & 1023]($19)|0);
 $realKernel = $23;
 $24 = $realKernel;
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($25)) + 28|0);
 $27 = HEAP32[$26>>2]|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($2,$value);
 __THREW__ = 0;
 (invoke_iii($27|0,($24|0),($2|0))|0);
 $28 = __THREW__; __THREW__ = 0;
 $29 = $28&1;
 if ($29) {
  $30 = ___cxa_find_matching_catch()|0;
  $31 = tempRet0;
  $3 = $30;
  $4 = $31;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2);
  $32 = $3;
  $33 = $4;
  ___resumeException($32|0);
  // unreachable;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2);
 $$expand_i1_val4 = 1;
 HEAP8[$0>>0] = $$expand_i1_val4;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $34 = $$pre_trunc&1;
 STACKTOP = sp;return ($34|0);
}
function __Z20setVector2dNodeValueidd($nxID,$x,$y) {
 $nxID = $nxID|0;
 $x = +$x;
 $y = +$y;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pNode = 0, $realKernel = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 28|0;
 $1 = $nxID;
 $2 = $x;
 $3 = $y;
 $4 = $1;
 $5 = $4;
 $pNode = $5;
 $6 = $pNode;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $29 = $$pre_trunc&1;
  STACKTOP = sp;return ($29|0);
 }
 $8 = $pNode;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_ii[$11 & 1023]($8)|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 24|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (FUNCTION_TABLE_ii[$15 & 1023]($12)|0);
 $17 = ($16|0)!=(16);
 if ($17) {
  $$expand_i1_val2 = 0;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $29 = $$pre_trunc&1;
  STACKTOP = sp;return ($29|0);
 } else {
  $18 = $pNode;
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($19)) + 28|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (FUNCTION_TABLE_ii[$21 & 1023]($18)|0);
  $realKernel = $22;
  $23 = $realKernel;
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($24)) + 28|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $2;
  $28 = $3;
  (FUNCTION_TABLE_iidd[$26 & 511]($23,$27,$28)|0);
  $$expand_i1_val4 = 1;
  HEAP8[$0>>0] = $$expand_i1_val4;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $29 = $$pre_trunc&1;
  STACKTOP = sp;return ($29|0);
 }
 return (0)|0;
}
function __Z20setVector3dNodeValueiddd($nxID,$x,$y,$z) {
 $nxID = $nxID|0;
 $x = +$x;
 $y = +$y;
 $z = +$z;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pNode = 0, $realKernel = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 36|0;
 $1 = $nxID;
 $2 = $x;
 $3 = $y;
 $4 = $z;
 $5 = $1;
 $6 = $5;
 $pNode = $6;
 $7 = $pNode;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $31 = $$pre_trunc&1;
  STACKTOP = sp;return ($31|0);
 }
 $9 = $pNode;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (FUNCTION_TABLE_ii[$12 & 1023]($9)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 24|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (FUNCTION_TABLE_ii[$16 & 1023]($13)|0);
 $18 = ($17|0)!=(32);
 if ($18) {
  $$expand_i1_val2 = 0;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $31 = $$pre_trunc&1;
  STACKTOP = sp;return ($31|0);
 } else {
  $19 = $pNode;
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($20)) + 28|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (FUNCTION_TABLE_ii[$22 & 1023]($19)|0);
  $realKernel = $23;
  $24 = $realKernel;
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($25)) + 28|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $2;
  $29 = $3;
  $30 = $4;
  (FUNCTION_TABLE_iiddd[$27 & 511]($24,$28,$29,$30)|0);
  $$expand_i1_val4 = 1;
  HEAP8[$0>>0] = $$expand_i1_val4;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $31 = $$pre_trunc&1;
  STACKTOP = sp;return ($31|0);
 }
 return (0)|0;
}
function __Z20setVector4dNodeValueidddd($nxID,$x,$y,$z,$m) {
 $nxID = $nxID|0;
 $x = +$x;
 $y = +$y;
 $z = +$z;
 $m = +$m;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pNode = 0, $realKernel = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 44|0;
 $1 = $nxID;
 $2 = $x;
 $3 = $y;
 $4 = $z;
 $5 = $m;
 $6 = $1;
 $7 = $6;
 $pNode = $7;
 $8 = $pNode;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $33 = $$pre_trunc&1;
  STACKTOP = sp;return ($33|0);
 }
 $10 = $pNode;
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (FUNCTION_TABLE_ii[$13 & 1023]($10)|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 24|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (FUNCTION_TABLE_ii[$17 & 1023]($14)|0);
 $19 = ($18|0)!=(64);
 if ($19) {
  $$expand_i1_val2 = 0;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $33 = $$pre_trunc&1;
  STACKTOP = sp;return ($33|0);
 } else {
  $20 = $pNode;
  $21 = HEAP32[$20>>2]|0;
  $22 = ((($21)) + 28|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (FUNCTION_TABLE_ii[$23 & 1023]($20)|0);
  $realKernel = $24;
  $25 = $realKernel;
  $26 = HEAP32[$25>>2]|0;
  $27 = ((($26)) + 28|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $2;
  $30 = $3;
  $31 = $4;
  $32 = $5;
  (FUNCTION_TABLE_iidddd[$28 & 511]($25,$29,$30,$31,$32)|0);
  $$expand_i1_val4 = 1;
  HEAP8[$0>>0] = $$expand_i1_val4;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $33 = $$pre_trunc&1;
  STACKTOP = sp;return ($33|0);
 }
 return (0)|0;
}
function __Z15addIntNodeValueiii($nxID,$value,$idx) {
 $nxID = $nxID|0;
 $value = $value|0;
 $idx = $idx|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pNode = 0, $realKernel = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 20|0;
 $1 = $nxID;
 $2 = $value;
 $3 = $idx;
 $4 = $1;
 $5 = $4;
 $pNode = $5;
 $6 = $pNode;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $40 = $$pre_trunc&1;
  STACKTOP = sp;return ($40|0);
 }
 $8 = $pNode;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_ii[$11 & 1023]($8)|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 24|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (FUNCTION_TABLE_ii[$15 & 1023]($12)|0);
 $17 = ($16|0)!=(258);
 if ($17) {
  $$expand_i1_val2 = 0;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $40 = $$pre_trunc&1;
  STACKTOP = sp;return ($40|0);
 }
 $18 = $pNode;
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($19)) + 28|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (FUNCTION_TABLE_ii[$21 & 1023]($18)|0);
 $realKernel = $22;
 $23 = $realKernel;
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($24)) + 40|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (FUNCTION_TABLE_ii[$26 & 1023]($23)|0);
 $28 = $3;
 $29 = ($27|0)>($28|0);
 $30 = $realKernel;
 if ($29) {
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($31)) + 36|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = $2;
  $35 = $3;
  (FUNCTION_TABLE_iiii[$33 & 1023]($30,$34,$35)|0);
 } else {
  $36 = HEAP32[$30>>2]|0;
  $37 = ((($36)) + 28|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $2;
  (FUNCTION_TABLE_iii[$38 & 1023]($30,$39)|0);
 }
 $$expand_i1_val4 = 1;
 HEAP8[$0>>0] = $$expand_i1_val4;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $40 = $$pre_trunc&1;
 STACKTOP = sp;return ($40|0);
}
function __Z16addRealNodeValueidi($nxID,$value,$idx) {
 $nxID = $nxID|0;
 $value = +$value;
 $idx = $idx|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pNode = 0, $realKernel = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 24|0;
 $1 = $nxID;
 $2 = $value;
 $3 = $idx;
 $4 = $1;
 $5 = $4;
 $pNode = $5;
 $6 = $pNode;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $40 = $$pre_trunc&1;
  STACKTOP = sp;return ($40|0);
 }
 $8 = $pNode;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_ii[$11 & 1023]($8)|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 24|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (FUNCTION_TABLE_ii[$15 & 1023]($12)|0);
 $17 = ($16|0)!=(260);
 if ($17) {
  $$expand_i1_val2 = 0;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $40 = $$pre_trunc&1;
  STACKTOP = sp;return ($40|0);
 }
 $18 = $pNode;
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($19)) + 28|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (FUNCTION_TABLE_ii[$21 & 1023]($18)|0);
 $realKernel = $22;
 $23 = $realKernel;
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($24)) + 40|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (FUNCTION_TABLE_ii[$26 & 1023]($23)|0);
 $28 = $3;
 $29 = ($27|0)>($28|0);
 $30 = $realKernel;
 if ($29) {
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($31)) + 36|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = $2;
  $35 = $3;
  (FUNCTION_TABLE_iidi[$33 & 511]($30,$34,$35)|0);
 } else {
  $36 = HEAP32[$30>>2]|0;
  $37 = ((($36)) + 28|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $2;
  (FUNCTION_TABLE_iid[$38 & 511]($30,$39)|0);
 }
 $$expand_i1_val4 = 1;
 HEAP8[$0>>0] = $$expand_i1_val4;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $40 = $$pre_trunc&1;
 STACKTOP = sp;return ($40|0);
}
function __Z18addStringNodeValueiNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEi($nxID,$value,$idx) {
 $nxID = $nxID|0;
 $value = $value|0;
 $idx = $idx|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pNode = 0, $realKernel = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 48|0;
 $3 = sp + 20|0;
 $6 = sp;
 $1 = $nxID;
 $2 = $idx;
 $7 = $1;
 $8 = $7;
 $pNode = $8;
 $9 = $pNode;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $49 = $$pre_trunc&1;
  STACKTOP = sp;return ($49|0);
 }
 $11 = $pNode;
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (FUNCTION_TABLE_ii[$14 & 1023]($11)|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($16)) + 24|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (FUNCTION_TABLE_ii[$18 & 1023]($15)|0);
 $20 = ($19|0)!=(264);
 if ($20) {
  $$expand_i1_val2 = 0;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $49 = $$pre_trunc&1;
  STACKTOP = sp;return ($49|0);
 }
 $21 = $pNode;
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($22)) + 28|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (FUNCTION_TABLE_ii[$24 & 1023]($21)|0);
 $realKernel = $25;
 $26 = $realKernel;
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($27)) + 40|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (FUNCTION_TABLE_ii[$29 & 1023]($26)|0);
 $31 = $2;
 $32 = ($30|0)>($31|0);
 $33 = $realKernel;
 do {
  if ($32) {
   $34 = HEAP32[$33>>2]|0;
   $35 = ((($34)) + 36|0);
   $36 = HEAP32[$35>>2]|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($3,$value);
   $37 = $2;
   __THREW__ = 0;
   (invoke_iiii($36|0,($33|0),($3|0),($37|0))|0);
   $38 = __THREW__; __THREW__ = 0;
   $39 = $38&1;
   if (!($39)) {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
    break;
   }
   $40 = ___cxa_find_matching_catch()|0;
   $41 = tempRet0;
   $4 = $40;
   $5 = $41;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
   $50 = $4;
   $51 = $5;
   ___resumeException($50|0);
   // unreachable;
  } else {
   $42 = HEAP32[$33>>2]|0;
   $43 = ((($42)) + 28|0);
   $44 = HEAP32[$43>>2]|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($6,$value);
   __THREW__ = 0;
   (invoke_iii($44|0,($33|0),($6|0))|0);
   $45 = __THREW__; __THREW__ = 0;
   $46 = $45&1;
   if (!($46)) {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6);
    break;
   }
   $47 = ___cxa_find_matching_catch()|0;
   $48 = tempRet0;
   $4 = $47;
   $5 = $48;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6);
   $50 = $4;
   $51 = $5;
   ___resumeException($50|0);
   // unreachable;
  }
 } while(0);
 $$expand_i1_val4 = 1;
 HEAP8[$0>>0] = $$expand_i1_val4;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $49 = $$pre_trunc&1;
 STACKTOP = sp;return ($49|0);
}
function __Z20addVector2dNodeValueiddi($nxID,$x,$y,$idx) {
 $nxID = $nxID|0;
 $x = +$x;
 $y = +$y;
 $idx = $idx|0;
 var $$byval_copy = 0, $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pNode = 0, $realKernel = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $0 = sp + 64|0;
 $5 = sp;
 $1 = $nxID;
 $2 = $x;
 $3 = $y;
 $4 = $idx;
 $6 = $1;
 $7 = $6;
 $pNode = $7;
 $8 = $pNode;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $44 = $$pre_trunc&1;
  STACKTOP = sp;return ($44|0);
 }
 $10 = $pNode;
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (FUNCTION_TABLE_ii[$13 & 1023]($10)|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 24|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (FUNCTION_TABLE_ii[$17 & 1023]($14)|0);
 $19 = ($18|0)!=(272);
 if ($19) {
  $$expand_i1_val2 = 0;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $44 = $$pre_trunc&1;
  STACKTOP = sp;return ($44|0);
 }
 $20 = $pNode;
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($21)) + 28|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (FUNCTION_TABLE_ii[$23 & 1023]($20)|0);
 $realKernel = $24;
 $25 = $realKernel;
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($26)) + 44|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (FUNCTION_TABLE_ii[$28 & 1023]($25)|0);
 $30 = $4;
 $31 = ($29|0)>($30|0);
 $32 = $realKernel;
 if ($31) {
  $33 = HEAP32[$32>>2]|0;
  $34 = ((($33)) + 40|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $2;
  $37 = $3;
  __ZN4NGIS4Data8Vector2dC2Edd($5,$36,$37);
  $38 = $4;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$5>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$5+12>>2]|0;
  (FUNCTION_TABLE_iiii[$35 & 1023]($32,$$byval_copy,$38)|0);
 } else {
  $39 = HEAP32[$32>>2]|0;
  $40 = ((($39)) + 28|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $2;
  $43 = $3;
  (FUNCTION_TABLE_iidd[$41 & 511]($32,$42,$43)|0);
 }
 $$expand_i1_val4 = 1;
 HEAP8[$0>>0] = $$expand_i1_val4;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $44 = $$pre_trunc&1;
 STACKTOP = sp;return ($44|0);
}
function __Z20addVector3dNodeValueidddi($nxID,$x,$y,$z,$idx) {
 $nxID = $nxID|0;
 $x = +$x;
 $y = +$y;
 $z = +$z;
 $idx = $idx|0;
 var $$byval_copy = 0, $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pNode = 0, $realKernel = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 48|0;
 $0 = sp + 88|0;
 $6 = sp;
 $1 = $nxID;
 $2 = $x;
 $3 = $y;
 $4 = $z;
 $5 = $idx;
 $7 = $1;
 $8 = $7;
 $pNode = $8;
 $9 = $pNode;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $47 = $$pre_trunc&1;
  STACKTOP = sp;return ($47|0);
 }
 $11 = $pNode;
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (FUNCTION_TABLE_ii[$14 & 1023]($11)|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($16)) + 24|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (FUNCTION_TABLE_ii[$18 & 1023]($15)|0);
 $20 = ($19|0)!=(288);
 if ($20) {
  $$expand_i1_val2 = 0;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $47 = $$pre_trunc&1;
  STACKTOP = sp;return ($47|0);
 }
 $21 = $pNode;
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($22)) + 28|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (FUNCTION_TABLE_ii[$24 & 1023]($21)|0);
 $realKernel = $25;
 $26 = $realKernel;
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($27)) + 44|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (FUNCTION_TABLE_ii[$29 & 1023]($26)|0);
 $31 = $5;
 $32 = ($30|0)>($31|0);
 $33 = $realKernel;
 if ($32) {
  $34 = HEAP32[$33>>2]|0;
  $35 = ((($34)) + 40|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $2;
  $38 = $3;
  $39 = $4;
  __ZN4NGIS4Data8Vector3dC2Eddd($6,$37,$38,$39);
  $40 = $5;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$6+12>>2]|0;HEAP32[$$byval_copy+16>>2]=HEAP32[$6+16>>2]|0;HEAP32[$$byval_copy+20>>2]=HEAP32[$6+20>>2]|0;
  (FUNCTION_TABLE_iiii[$36 & 1023]($33,$$byval_copy,$40)|0);
 } else {
  $41 = HEAP32[$33>>2]|0;
  $42 = ((($41)) + 28|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $2;
  $45 = $3;
  $46 = $4;
  (FUNCTION_TABLE_iiddd[$43 & 511]($33,$44,$45,$46)|0);
 }
 $$expand_i1_val4 = 1;
 HEAP8[$0>>0] = $$expand_i1_val4;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $47 = $$pre_trunc&1;
 STACKTOP = sp;return ($47|0);
}
function __Z20addVector4dNodeValueiddddi($nxID,$x,$y,$z,$m,$idx) {
 $nxID = $nxID|0;
 $x = +$x;
 $y = +$y;
 $z = +$z;
 $m = +$m;
 $idx = $idx|0;
 var $$byval_copy = 0, $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0.0;
 var $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pNode = 0, $realKernel = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 64|0;
 $0 = sp + 112|0;
 $7 = sp;
 $1 = $nxID;
 $2 = $x;
 $3 = $y;
 $4 = $z;
 $5 = $m;
 $6 = $idx;
 $8 = $1;
 $9 = $8;
 $pNode = $9;
 $10 = $pNode;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $50 = $$pre_trunc&1;
  STACKTOP = sp;return ($50|0);
 }
 $12 = $pNode;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 28|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (FUNCTION_TABLE_ii[$15 & 1023]($12)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($17)) + 24|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (FUNCTION_TABLE_ii[$19 & 1023]($16)|0);
 $21 = ($20|0)!=(320);
 if ($21) {
  $$expand_i1_val2 = 0;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $50 = $$pre_trunc&1;
  STACKTOP = sp;return ($50|0);
 }
 $22 = $pNode;
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($23)) + 28|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (FUNCTION_TABLE_ii[$25 & 1023]($22)|0);
 $realKernel = $26;
 $27 = $realKernel;
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($28)) + 44|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (FUNCTION_TABLE_ii[$30 & 1023]($27)|0);
 $32 = $6;
 $33 = ($31|0)>($32|0);
 $34 = $realKernel;
 if ($33) {
  $35 = HEAP32[$34>>2]|0;
  $36 = ((($35)) + 40|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $2;
  $39 = $3;
  $40 = $4;
  $41 = $5;
  __ZN4NGIS4Data8Vector4dC2Edddd($7,$38,$39,$40,$41);
  $42 = $6;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$7>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$7+12>>2]|0;HEAP32[$$byval_copy+16>>2]=HEAP32[$7+16>>2]|0;HEAP32[$$byval_copy+20>>2]=HEAP32[$7+20>>2]|0;HEAP32[$$byval_copy+24>>2]=HEAP32[$7+24>>2]|0;HEAP32[$$byval_copy+28>>2]=HEAP32[$7+28>>2]|0;
  (FUNCTION_TABLE_iiii[$37 & 1023]($34,$$byval_copy,$42)|0);
 } else {
  $43 = HEAP32[$34>>2]|0;
  $44 = ((($43)) + 28|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = $2;
  $47 = $3;
  $48 = $4;
  $49 = $5;
  (FUNCTION_TABLE_iidddd[$45 & 511]($34,$46,$47,$48,$49)|0);
 }
 $$expand_i1_val4 = 1;
 HEAP8[$0>>0] = $$expand_i1_val4;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $50 = $$pre_trunc&1;
 STACKTOP = sp;return ($50|0);
}
function __Z15getNodeIntValuei($node) {
 $node = $node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pNode = 0, $realKernel = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $node;
 $2 = $1;
 $3 = $2;
 $pNode = $3;
 $4 = $pNode;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $0 = 0;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 $6 = $pNode;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_ii[$9 & 1023]($6)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (FUNCTION_TABLE_ii[$13 & 1023]($10)|0);
 $15 = ($14|0)!=(2);
 if ($15) {
  $0 = 0;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 } else {
  $16 = $pNode;
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($17)) + 28|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (FUNCTION_TABLE_ii[$19 & 1023]($16)|0);
  $realKernel = $20;
  $21 = $realKernel;
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($22)) + 32|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (FUNCTION_TABLE_ii[$24 & 1023]($21)|0);
  $0 = $25;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function __Z16getNodeRealValuei($node) {
 $node = $node|0;
 var $0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pNode = 0, $realKernel = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $node;
 $2 = $1;
 $3 = $2;
 $pNode = $3;
 $4 = $pNode;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $0 = 0.0;
  $26 = $0;
  STACKTOP = sp;return (+$26);
 }
 $6 = $pNode;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_ii[$9 & 1023]($6)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (FUNCTION_TABLE_ii[$13 & 1023]($10)|0);
 $15 = ($14|0)!=(4);
 if ($15) {
  $0 = 0.0;
  $26 = $0;
  STACKTOP = sp;return (+$26);
 } else {
  $16 = $pNode;
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($17)) + 28|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (FUNCTION_TABLE_ii[$19 & 1023]($16)|0);
  $realKernel = $20;
  $21 = $realKernel;
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($22)) + 32|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (+FUNCTION_TABLE_di[$24 & 1023]($21));
  $0 = $25;
  $26 = $0;
  STACKTOP = sp;return (+$26);
 }
 return +(0.0);
}
function __Z18getNodeStringValuei($agg$result,$node) {
 $agg$result = $agg$result|0;
 $node = $node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pNode = 0, $realKernel = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $10 = $node;
 $11 = $10;
 $12 = $11;
 $pNode = $12;
 $13 = $pNode;
 $14 = ($13|0)==(0|0);
 if ($14) {
  $8 = $agg$result;
  $9 = 11786;
  $15 = $8;
  $7 = $15;
  $16 = $7;
  $6 = $16;
  $17 = $6;
  $5 = $17;
  $18 = $9;
  $19 = $9;
  $20 = (__ZNSt3__111char_traitsIcE6lengthEPKc($19)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($15,$18,$20);
  STACKTOP = sp;return;
 }
 $21 = $pNode;
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($22)) + 28|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (FUNCTION_TABLE_ii[$24 & 1023]($21)|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($26)) + 24|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (FUNCTION_TABLE_ii[$28 & 1023]($25)|0);
 $30 = ($29|0)!=(8);
 if ($30) {
  $3 = $agg$result;
  $4 = 11786;
  $31 = $3;
  $2 = $31;
  $32 = $2;
  $1 = $32;
  $33 = $1;
  $0 = $33;
  $34 = $4;
  $35 = $4;
  $36 = (__ZNSt3__111char_traitsIcE6lengthEPKc($35)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($31,$34,$36);
  STACKTOP = sp;return;
 } else {
  $37 = $pNode;
  $38 = HEAP32[$37>>2]|0;
  $39 = ((($38)) + 28|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = (FUNCTION_TABLE_ii[$40 & 1023]($37)|0);
  $realKernel = $41;
  $42 = $realKernel;
  $43 = HEAP32[$42>>2]|0;
  $44 = ((($43)) + 32|0);
  $45 = HEAP32[$44>>2]|0;
  FUNCTION_TABLE_vii[$45 & 1023]($agg$result,$42);
  STACKTOP = sp;return;
 }
}
function __Z20getNodeVector2dValuei($agg$result,$node) {
 $agg$result = $agg$result|0;
 $node = $node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pNode = 0, $realKernel = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $node;
 $1 = $0;
 $2 = $1;
 $pNode = $2;
 $3 = $pNode;
 $4 = ($3|0)==(0|0);
 if ($4) {
  __ZN4NGIS4Data8Vector2dC2Edd($agg$result,0.0,0.0);
  STACKTOP = sp;return;
 }
 $5 = $pNode;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (FUNCTION_TABLE_ii[$8 & 1023]($5)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (FUNCTION_TABLE_ii[$12 & 1023]($9)|0);
 $14 = ($13|0)!=(16);
 if ($14) {
  __ZN4NGIS4Data8Vector2dC2Edd($agg$result,0.0,0.0);
  STACKTOP = sp;return;
 } else {
  $15 = $pNode;
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($16)) + 28|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (FUNCTION_TABLE_ii[$18 & 1023]($15)|0);
  $realKernel = $19;
  $20 = $realKernel;
  $21 = HEAP32[$20>>2]|0;
  $22 = ((($21)) + 32|0);
  $23 = HEAP32[$22>>2]|0;
  FUNCTION_TABLE_vii[$23 & 1023]($agg$result,$20);
  STACKTOP = sp;return;
 }
}
function __Z20getNodeVector3dValuei($agg$result,$node) {
 $agg$result = $agg$result|0;
 $node = $node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pNode = 0, $realKernel = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $node;
 $1 = $0;
 $2 = $1;
 $pNode = $2;
 $3 = $pNode;
 $4 = ($3|0)==(0|0);
 if ($4) {
  __ZN4NGIS4Data8Vector3dC2Eddd($agg$result,0.0,0.0,0.0);
  STACKTOP = sp;return;
 }
 $5 = $pNode;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (FUNCTION_TABLE_ii[$8 & 1023]($5)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (FUNCTION_TABLE_ii[$12 & 1023]($9)|0);
 $14 = ($13|0)!=(32);
 if ($14) {
  __ZN4NGIS4Data8Vector3dC2Eddd($agg$result,0.0,0.0,0.0);
  STACKTOP = sp;return;
 } else {
  $15 = $pNode;
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($16)) + 28|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (FUNCTION_TABLE_ii[$18 & 1023]($15)|0);
  $realKernel = $19;
  $20 = $realKernel;
  $21 = HEAP32[$20>>2]|0;
  $22 = ((($21)) + 32|0);
  $23 = HEAP32[$22>>2]|0;
  FUNCTION_TABLE_vii[$23 & 1023]($agg$result,$20);
  STACKTOP = sp;return;
 }
}
function __Z20getNodeVector4dValuei($agg$result,$node) {
 $agg$result = $agg$result|0;
 $node = $node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pNode = 0, $realKernel = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $node;
 $1 = $0;
 $2 = $1;
 $pNode = $2;
 $3 = $pNode;
 $4 = ($3|0)==(0|0);
 if ($4) {
  __ZN4NGIS4Data8Vector4dC2Edddd($agg$result,0.0,0.0,0.0,0.0);
  STACKTOP = sp;return;
 }
 $5 = $pNode;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (FUNCTION_TABLE_ii[$8 & 1023]($5)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (FUNCTION_TABLE_ii[$12 & 1023]($9)|0);
 $14 = ($13|0)!=(64);
 if ($14) {
  __ZN4NGIS4Data8Vector4dC2Edddd($agg$result,0.0,0.0,0.0,0.0);
  STACKTOP = sp;return;
 } else {
  $15 = $pNode;
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($16)) + 28|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (FUNCTION_TABLE_ii[$18 & 1023]($15)|0);
  $realKernel = $19;
  $20 = $realKernel;
  $21 = HEAP32[$20>>2]|0;
  $22 = ((($21)) + 32|0);
  $23 = HEAP32[$22>>2]|0;
  FUNCTION_TABLE_vii[$23 & 1023]($agg$result,$20);
  STACKTOP = sp;return;
 }
}
function __Z20getNodeIntArrayCounti($node) {
 $node = $node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pNode = 0, $realKernel = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $node;
 $2 = $1;
 $3 = $2;
 $pNode = $3;
 $4 = $pNode;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $0 = 0;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 $6 = $pNode;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_ii[$9 & 1023]($6)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (FUNCTION_TABLE_ii[$13 & 1023]($10)|0);
 $15 = ($14|0)!=(258);
 if ($15) {
  $0 = 0;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 } else {
  $16 = $pNode;
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($17)) + 28|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (FUNCTION_TABLE_ii[$19 & 1023]($16)|0);
  $realKernel = $20;
  $21 = $realKernel;
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($22)) + 40|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (FUNCTION_TABLE_ii[$24 & 1023]($21)|0);
  $0 = $25;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function __Z21getNodeRealArrayCounti($node) {
 $node = $node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pNode = 0, $realKernel = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $node;
 $2 = $1;
 $3 = $2;
 $pNode = $3;
 $4 = $pNode;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $0 = 0;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 $6 = $pNode;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_ii[$9 & 1023]($6)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (FUNCTION_TABLE_ii[$13 & 1023]($10)|0);
 $15 = ($14|0)!=(260);
 if ($15) {
  $0 = 0;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 } else {
  $16 = $pNode;
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($17)) + 28|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (FUNCTION_TABLE_ii[$19 & 1023]($16)|0);
  $realKernel = $20;
  $21 = $realKernel;
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($22)) + 40|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (FUNCTION_TABLE_ii[$24 & 1023]($21)|0);
  $0 = $25;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function __Z23getNodeStringArrayCounti($node) {
 $node = $node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pNode = 0, $realKernel = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $node;
 $2 = $1;
 $3 = $2;
 $pNode = $3;
 $4 = $pNode;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $0 = 0;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 $6 = $pNode;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_ii[$9 & 1023]($6)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (FUNCTION_TABLE_ii[$13 & 1023]($10)|0);
 $15 = ($14|0)!=(264);
 if ($15) {
  $0 = 0;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 } else {
  $16 = $pNode;
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($17)) + 28|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (FUNCTION_TABLE_ii[$19 & 1023]($16)|0);
  $realKernel = $20;
  $21 = $realKernel;
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($22)) + 40|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (FUNCTION_TABLE_ii[$24 & 1023]($21)|0);
  $0 = $25;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function __Z25getNodeVector2dArrayCounti($node) {
 $node = $node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pNode = 0, $realKernel = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $node;
 $2 = $1;
 $3 = $2;
 $pNode = $3;
 $4 = $pNode;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $0 = 0;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 $6 = $pNode;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_ii[$9 & 1023]($6)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (FUNCTION_TABLE_ii[$13 & 1023]($10)|0);
 $15 = ($14|0)!=(272);
 if ($15) {
  $0 = 0;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 } else {
  $16 = $pNode;
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($17)) + 28|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (FUNCTION_TABLE_ii[$19 & 1023]($16)|0);
  $realKernel = $20;
  $21 = $realKernel;
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($22)) + 44|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (FUNCTION_TABLE_ii[$24 & 1023]($21)|0);
  $0 = $25;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function __Z25getNodeVector3dArrayCounti($node) {
 $node = $node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pNode = 0, $realKernel = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $node;
 $2 = $1;
 $3 = $2;
 $pNode = $3;
 $4 = $pNode;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $0 = 0;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 $6 = $pNode;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_ii[$9 & 1023]($6)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (FUNCTION_TABLE_ii[$13 & 1023]($10)|0);
 $15 = ($14|0)!=(288);
 if ($15) {
  $0 = 0;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 } else {
  $16 = $pNode;
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($17)) + 28|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (FUNCTION_TABLE_ii[$19 & 1023]($16)|0);
  $realKernel = $20;
  $21 = $realKernel;
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($22)) + 44|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (FUNCTION_TABLE_ii[$24 & 1023]($21)|0);
  $0 = $25;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function __Z25getNodeVector4dArrayCounti($node) {
 $node = $node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pNode = 0, $realKernel = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $node;
 $2 = $1;
 $3 = $2;
 $pNode = $3;
 $4 = $pNode;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $0 = 0;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 $6 = $pNode;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_ii[$9 & 1023]($6)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (FUNCTION_TABLE_ii[$13 & 1023]($10)|0);
 $15 = ($14|0)!=(320);
 if ($15) {
  $0 = 0;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 } else {
  $16 = $pNode;
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($17)) + 28|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (FUNCTION_TABLE_ii[$19 & 1023]($16)|0);
  $realKernel = $20;
  $21 = $realKernel;
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($22)) + 44|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (FUNCTION_TABLE_ii[$24 & 1023]($21)|0);
  $0 = $25;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function __Z20getNodeIntArrayValueii($node,$idx) {
 $node = $node|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pNode = 0, $realKernel = 0, $retVal = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $retVal = sp;
 $1 = $node;
 $2 = $idx;
 $3 = $1;
 $4 = $3;
 $pNode = $4;
 $5 = $pNode;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $0 = 0;
  $28 = $0;
  STACKTOP = sp;return ($28|0);
 }
 $7 = $pNode;
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 1023]($7)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (FUNCTION_TABLE_ii[$14 & 1023]($11)|0);
 $16 = ($15|0)!=(258);
 if ($16) {
  $0 = 0;
  $28 = $0;
  STACKTOP = sp;return ($28|0);
 } else {
  $17 = $pNode;
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($18)) + 28|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (FUNCTION_TABLE_ii[$20 & 1023]($17)|0);
  $realKernel = $21;
  HEAP32[$retVal>>2] = 0;
  $22 = $realKernel;
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($23)) + 32|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $2;
  (FUNCTION_TABLE_iiii[$25 & 1023]($22,$26,$retVal)|0);
  $27 = HEAP32[$retVal>>2]|0;
  $0 = $27;
  $28 = $0;
  STACKTOP = sp;return ($28|0);
 }
 return (0)|0;
}
function __Z21getNodeRealArrayValueii($node,$idx) {
 $node = $node|0;
 $idx = $idx|0;
 var $0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pNode = 0, $realKernel = 0, $retVal = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $retVal = sp;
 $1 = $node;
 $2 = $idx;
 $3 = $1;
 $4 = $3;
 $pNode = $4;
 $5 = $pNode;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $0 = 0.0;
  $28 = $0;
  STACKTOP = sp;return (+$28);
 }
 $7 = $pNode;
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 1023]($7)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (FUNCTION_TABLE_ii[$14 & 1023]($11)|0);
 $16 = ($15|0)!=(260);
 if ($16) {
  $0 = 0.0;
  $28 = $0;
  STACKTOP = sp;return (+$28);
 } else {
  $17 = $pNode;
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($18)) + 28|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (FUNCTION_TABLE_ii[$20 & 1023]($17)|0);
  $realKernel = $21;
  HEAPF64[$retVal>>3] = 0.0;
  $22 = $realKernel;
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($23)) + 32|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $2;
  (FUNCTION_TABLE_iiii[$25 & 1023]($22,$26,$retVal)|0);
  $27 = +HEAPF64[$retVal>>3];
  $0 = $27;
  $28 = $0;
  STACKTOP = sp;return (+$28);
 }
 return +(0.0);
}
function __Z23getNodeStringArrayValueii($agg$result,$node,$idx) {
 $agg$result = $agg$result|0;
 $node = $node|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $__a$i$i = 0, $__i$i$i = 0, $pNode = 0, $realKernel = 0, $retVal = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $retVal = sp + 12|0;
 $21 = $node;
 $22 = $idx;
 $26 = $21;
 $27 = $26;
 $pNode = $27;
 $28 = $pNode;
 $29 = ($28|0)==(0|0);
 if ($29) {
  $19 = $agg$result;
  $20 = 11786;
  $30 = $19;
  $18 = $30;
  $31 = $18;
  $17 = $31;
  $32 = $17;
  $16 = $32;
  $33 = $20;
  $34 = $20;
  $35 = (__ZNSt3__111char_traitsIcE6lengthEPKc($34)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($30,$33,$35);
  STACKTOP = sp;return;
 }
 $36 = $pNode;
 $37 = HEAP32[$36>>2]|0;
 $38 = ((($37)) + 28|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (FUNCTION_TABLE_ii[$39 & 1023]($36)|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ((($41)) + 24|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (FUNCTION_TABLE_ii[$43 & 1023]($40)|0);
 $45 = ($44|0)!=(264);
 if ($45) {
  $14 = $agg$result;
  $15 = 11786;
  $46 = $14;
  $13 = $46;
  $47 = $13;
  $12 = $47;
  $48 = $12;
  $11 = $48;
  $49 = $15;
  $50 = $15;
  $51 = (__ZNSt3__111char_traitsIcE6lengthEPKc($50)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($46,$49,$51);
  STACKTOP = sp;return;
 }
 $52 = $pNode;
 $53 = HEAP32[$52>>2]|0;
 $54 = ((($53)) + 28|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = (FUNCTION_TABLE_ii[$55 & 1023]($52)|0);
 $realKernel = $56;
 $9 = $retVal;
 $10 = 11786;
 $57 = $9;
 $8 = $57;
 $58 = $8;
 $7 = $58;
 $59 = $7;
 $6 = $59;
 $60 = $10;
 $61 = $10;
 $62 = (__ZNSt3__111char_traitsIcE6lengthEPKc($61)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($57,$60,$62);
 $63 = $realKernel;
 $64 = HEAP32[$63>>2]|0;
 $65 = ((($64)) + 32|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = $22;
 __THREW__ = 0;
 (invoke_iiii($66|0,($63|0),($67|0),($retVal|0))|0);
 $68 = __THREW__; __THREW__ = 0;
 $69 = $68&1;
 if ($69) {
  $84 = ___cxa_find_matching_catch()|0;
  $85 = tempRet0;
  $23 = $84;
  $24 = $85;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($retVal);
  $86 = $23;
  $87 = $24;
  ___resumeException($86|0);
  // unreachable;
 }
 $4 = $agg$result;
 $5 = $retVal;
 $70 = $4;
 $71 = $5;
 $3 = $71;
 $72 = $3;
 ;HEAP32[$70>>2]=HEAP32[$72>>2]|0;HEAP32[$70+4>>2]=HEAP32[$72+4>>2]|0;HEAP32[$70+8>>2]=HEAP32[$72+8>>2]|0;
 $73 = $5;
 $2 = $73;
 $74 = $2;
 $1 = $74;
 $75 = $1;
 $0 = $75;
 $76 = $0;
 $__a$i$i = $76;
 $__i$i$i = 0;
 while(1) {
  $77 = $__i$i$i;
  $78 = ($77>>>0)<(3);
  if (!($78)) {
   break;
  }
  $79 = $__i$i$i;
  $80 = $__a$i$i;
  $81 = (($80) + ($79<<2)|0);
  HEAP32[$81>>2] = 0;
  $82 = $__i$i$i;
  $83 = (($82) + 1)|0;
  $__i$i$i = $83;
 }
 $25 = 1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($retVal);
 STACKTOP = sp;return;
}
function __Z25getNodeVector2dArrayValueii($agg$result,$node,$idx) {
 $agg$result = $agg$result|0;
 $node = $node|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pNode = 0, $realKernel = 0, $retVal = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $retVal = sp;
 $0 = $node;
 $1 = $idx;
 $2 = $0;
 $3 = $2;
 $pNode = $3;
 $4 = $pNode;
 $5 = ($4|0)==(0|0);
 if ($5) {
  __ZN4NGIS4Data8Vector2dC2Edd($agg$result,0.0,0.0);
  STACKTOP = sp;return;
 }
 $6 = $pNode;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_ii[$9 & 1023]($6)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (FUNCTION_TABLE_ii[$13 & 1023]($10)|0);
 $15 = ($14|0)!=(272);
 if ($15) {
  __ZN4NGIS4Data8Vector2dC2Edd($agg$result,0.0,0.0);
  STACKTOP = sp;return;
 } else {
  $16 = $pNode;
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($17)) + 28|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (FUNCTION_TABLE_ii[$19 & 1023]($16)|0);
  $realKernel = $20;
  __ZN4NGIS4Data8Vector2dC2Ev($retVal);
  $21 = $realKernel;
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($22)) + 32|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $1;
  (FUNCTION_TABLE_iiii[$24 & 1023]($21,$25,$retVal)|0);
  ;HEAP32[$agg$result>>2]=HEAP32[$retVal>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$retVal+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$retVal+8>>2]|0;HEAP32[$agg$result+12>>2]=HEAP32[$retVal+12>>2]|0;
  STACKTOP = sp;return;
 }
}
function __Z25getNodeVector3dArrayValueii($agg$result,$node,$idx) {
 $agg$result = $agg$result|0;
 $node = $node|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pNode = 0, $realKernel = 0, $retVal = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $retVal = sp;
 $0 = $node;
 $1 = $idx;
 $2 = $0;
 $3 = $2;
 $pNode = $3;
 $4 = $pNode;
 $5 = ($4|0)==(0|0);
 if ($5) {
  __ZN4NGIS4Data8Vector3dC2Eddd($agg$result,0.0,0.0,0.0);
  STACKTOP = sp;return;
 }
 $6 = $pNode;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_ii[$9 & 1023]($6)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (FUNCTION_TABLE_ii[$13 & 1023]($10)|0);
 $15 = ($14|0)!=(288);
 if ($15) {
  __ZN4NGIS4Data8Vector3dC2Eddd($agg$result,0.0,0.0,0.0);
  STACKTOP = sp;return;
 } else {
  $16 = $pNode;
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($17)) + 28|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (FUNCTION_TABLE_ii[$19 & 1023]($16)|0);
  $realKernel = $20;
  __ZN4NGIS4Data8Vector3dC2Ev($retVal);
  $21 = $realKernel;
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($22)) + 32|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $1;
  (FUNCTION_TABLE_iiii[$24 & 1023]($21,$25,$retVal)|0);
  ;HEAP32[$agg$result>>2]=HEAP32[$retVal>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$retVal+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$retVal+8>>2]|0;HEAP32[$agg$result+12>>2]=HEAP32[$retVal+12>>2]|0;HEAP32[$agg$result+16>>2]=HEAP32[$retVal+16>>2]|0;HEAP32[$agg$result+20>>2]=HEAP32[$retVal+20>>2]|0;
  STACKTOP = sp;return;
 }
}
function __Z25getNodeVector4dArrayValueii($agg$result,$node,$idx) {
 $agg$result = $agg$result|0;
 $node = $node|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pNode = 0, $realKernel = 0, $retVal = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $retVal = sp;
 $0 = $node;
 $1 = $idx;
 $2 = $0;
 $3 = $2;
 $pNode = $3;
 $4 = $pNode;
 $5 = ($4|0)==(0|0);
 if ($5) {
  __ZN4NGIS4Data8Vector4dC2Edddd($agg$result,0.0,0.0,0.0,0.0);
  STACKTOP = sp;return;
 }
 $6 = $pNode;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_ii[$9 & 1023]($6)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (FUNCTION_TABLE_ii[$13 & 1023]($10)|0);
 $15 = ($14|0)!=(320);
 if ($15) {
  __ZN4NGIS4Data8Vector4dC2Edddd($agg$result,0.0,0.0,0.0,0.0);
  STACKTOP = sp;return;
 } else {
  $16 = $pNode;
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($17)) + 28|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (FUNCTION_TABLE_ii[$19 & 1023]($16)|0);
  $realKernel = $20;
  __ZN4NGIS4Data8Vector4dC2Ev($retVal);
  $21 = $realKernel;
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($22)) + 32|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $1;
  (FUNCTION_TABLE_iiii[$24 & 1023]($21,$25,$retVal)|0);
  ;HEAP32[$agg$result>>2]=HEAP32[$retVal>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$retVal+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$retVal+8>>2]|0;HEAP32[$agg$result+12>>2]=HEAP32[$retVal+12>>2]|0;HEAP32[$agg$result+16>>2]=HEAP32[$retVal+16>>2]|0;HEAP32[$agg$result+20>>2]=HEAP32[$retVal+20>>2]|0;HEAP32[$agg$result+24>>2]=HEAP32[$retVal+24>>2]|0;HEAP32[$agg$result+28>>2]=HEAP32[$retVal+28>>2]|0;
  STACKTOP = sp;return;
 }
}
function __Z28removeIntNodeArrayValueByIdxii($node,$idx) {
 $node = $node|0;
 $idx = $idx|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pNode = 0, $realKernel = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 16|0;
 $1 = $node;
 $2 = $idx;
 $3 = $1;
 $4 = $3;
 $pNode = $4;
 $5 = $pNode;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $28 = $$pre_trunc&1;
  STACKTOP = sp;return ($28|0);
 }
 $7 = $pNode;
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 1023]($7)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (FUNCTION_TABLE_ii[$14 & 1023]($11)|0);
 $16 = ($15|0)!=(258);
 if ($16) {
  $$expand_i1_val2 = 0;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $28 = $$pre_trunc&1;
  STACKTOP = sp;return ($28|0);
 } else {
  $17 = $pNode;
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($18)) + 28|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (FUNCTION_TABLE_ii[$20 & 1023]($17)|0);
  $realKernel = $21;
  $22 = $realKernel;
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($23)) + 48|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $2;
  $27 = (FUNCTION_TABLE_iii[$25 & 1023]($22,$26)|0);
  $$expand_i1_val4 = $27&1;
  HEAP8[$0>>0] = $$expand_i1_val4;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $28 = $$pre_trunc&1;
  STACKTOP = sp;return ($28|0);
 }
 return (0)|0;
}
function __Z29removeRealNodeArrayValueByIdxii($node,$idx) {
 $node = $node|0;
 $idx = $idx|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pNode = 0, $realKernel = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 16|0;
 $1 = $node;
 $2 = $idx;
 $3 = $1;
 $4 = $3;
 $pNode = $4;
 $5 = $pNode;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $28 = $$pre_trunc&1;
  STACKTOP = sp;return ($28|0);
 }
 $7 = $pNode;
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 1023]($7)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (FUNCTION_TABLE_ii[$14 & 1023]($11)|0);
 $16 = ($15|0)!=(260);
 if ($16) {
  $$expand_i1_val2 = 0;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $28 = $$pre_trunc&1;
  STACKTOP = sp;return ($28|0);
 } else {
  $17 = $pNode;
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($18)) + 28|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (FUNCTION_TABLE_ii[$20 & 1023]($17)|0);
  $realKernel = $21;
  $22 = $realKernel;
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($23)) + 48|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $2;
  $27 = (FUNCTION_TABLE_iii[$25 & 1023]($22,$26)|0);
  $$expand_i1_val4 = $27&1;
  HEAP8[$0>>0] = $$expand_i1_val4;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $28 = $$pre_trunc&1;
  STACKTOP = sp;return ($28|0);
 }
 return (0)|0;
}
function __Z31removeStringNodeArrayValueByIdxii($node,$idx) {
 $node = $node|0;
 $idx = $idx|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pNode = 0, $realKernel = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 16|0;
 $1 = $node;
 $2 = $idx;
 $3 = $1;
 $4 = $3;
 $pNode = $4;
 $5 = $pNode;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $28 = $$pre_trunc&1;
  STACKTOP = sp;return ($28|0);
 }
 $7 = $pNode;
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 1023]($7)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (FUNCTION_TABLE_ii[$14 & 1023]($11)|0);
 $16 = ($15|0)!=(264);
 if ($16) {
  $$expand_i1_val2 = 0;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $28 = $$pre_trunc&1;
  STACKTOP = sp;return ($28|0);
 } else {
  $17 = $pNode;
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($18)) + 28|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (FUNCTION_TABLE_ii[$20 & 1023]($17)|0);
  $realKernel = $21;
  $22 = $realKernel;
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($23)) + 48|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $2;
  $27 = (FUNCTION_TABLE_iii[$25 & 1023]($22,$26)|0);
  $$expand_i1_val4 = $27&1;
  HEAP8[$0>>0] = $$expand_i1_val4;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $28 = $$pre_trunc&1;
  STACKTOP = sp;return ($28|0);
 }
 return (0)|0;
}
function __Z33removeVector2dNodeArrayValueByIdxii($node,$idx) {
 $node = $node|0;
 $idx = $idx|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pNode = 0, $realKernel = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 16|0;
 $1 = $node;
 $2 = $idx;
 $3 = $1;
 $4 = $3;
 $pNode = $4;
 $5 = $pNode;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $28 = $$pre_trunc&1;
  STACKTOP = sp;return ($28|0);
 }
 $7 = $pNode;
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 1023]($7)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (FUNCTION_TABLE_ii[$14 & 1023]($11)|0);
 $16 = ($15|0)!=(272);
 if ($16) {
  $$expand_i1_val2 = 0;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $28 = $$pre_trunc&1;
  STACKTOP = sp;return ($28|0);
 } else {
  $17 = $pNode;
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($18)) + 28|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (FUNCTION_TABLE_ii[$20 & 1023]($17)|0);
  $realKernel = $21;
  $22 = $realKernel;
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($23)) + 52|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $2;
  $27 = (FUNCTION_TABLE_iii[$25 & 1023]($22,$26)|0);
  $$expand_i1_val4 = $27&1;
  HEAP8[$0>>0] = $$expand_i1_val4;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $28 = $$pre_trunc&1;
  STACKTOP = sp;return ($28|0);
 }
 return (0)|0;
}
function __Z33removeVector3dNodeArrayValueByIdxii($node,$idx) {
 $node = $node|0;
 $idx = $idx|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pNode = 0, $realKernel = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 16|0;
 $1 = $node;
 $2 = $idx;
 $3 = $1;
 $4 = $3;
 $pNode = $4;
 $5 = $pNode;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $28 = $$pre_trunc&1;
  STACKTOP = sp;return ($28|0);
 }
 $7 = $pNode;
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 1023]($7)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (FUNCTION_TABLE_ii[$14 & 1023]($11)|0);
 $16 = ($15|0)!=(288);
 if ($16) {
  $$expand_i1_val2 = 0;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $28 = $$pre_trunc&1;
  STACKTOP = sp;return ($28|0);
 } else {
  $17 = $pNode;
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($18)) + 28|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (FUNCTION_TABLE_ii[$20 & 1023]($17)|0);
  $realKernel = $21;
  $22 = $realKernel;
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($23)) + 52|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $2;
  $27 = (FUNCTION_TABLE_iii[$25 & 1023]($22,$26)|0);
  $$expand_i1_val4 = $27&1;
  HEAP8[$0>>0] = $$expand_i1_val4;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $28 = $$pre_trunc&1;
  STACKTOP = sp;return ($28|0);
 }
 return (0)|0;
}
function __Z33removeVector4dNodeArrayValueByIdxii($node,$idx) {
 $node = $node|0;
 $idx = $idx|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pNode = 0, $realKernel = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 16|0;
 $1 = $node;
 $2 = $idx;
 $3 = $1;
 $4 = $3;
 $pNode = $4;
 $5 = $pNode;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $28 = $$pre_trunc&1;
  STACKTOP = sp;return ($28|0);
 }
 $7 = $pNode;
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 1023]($7)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (FUNCTION_TABLE_ii[$14 & 1023]($11)|0);
 $16 = ($15|0)!=(320);
 if ($16) {
  $$expand_i1_val2 = 0;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $28 = $$pre_trunc&1;
  STACKTOP = sp;return ($28|0);
 } else {
  $17 = $pNode;
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($18)) + 28|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (FUNCTION_TABLE_ii[$20 & 1023]($17)|0);
  $realKernel = $21;
  $22 = $realKernel;
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($23)) + 52|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $2;
  $27 = (FUNCTION_TABLE_iii[$25 & 1023]($22,$26)|0);
  $$expand_i1_val4 = $27&1;
  HEAP8[$0>>0] = $$expand_i1_val4;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $28 = $$pre_trunc&1;
  STACKTOP = sp;return ($28|0);
 }
 return (0)|0;
}
function __Z14clearNodeArrayi($node) {
 $node = $node|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $pNode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 8|0;
 $1 = $node;
 $2 = $1;
 $3 = $2;
 $pNode = $3;
 $4 = $pNode;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $89 = $$pre_trunc&1;
  STACKTOP = sp;return ($89|0);
 }
 $6 = $pNode;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_ii[$9 & 1023]($6)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (FUNCTION_TABLE_ii[$13 & 1023]($10)|0);
 $15 = ($14|0)==(258);
 $16 = $pNode;
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($17)) + 28|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (FUNCTION_TABLE_ii[$19 & 1023]($16)|0);
 do {
  if ($15) {
   $21 = HEAP32[$20>>2]|0;
   $22 = ((($21)) + 44|0);
   $23 = HEAP32[$22>>2]|0;
   FUNCTION_TABLE_vi[$23 & 1023]($20);
  } else {
   $24 = HEAP32[$20>>2]|0;
   $25 = ((($24)) + 24|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (FUNCTION_TABLE_ii[$26 & 1023]($20)|0);
   $28 = ($27|0)==(260);
   $29 = $pNode;
   $30 = HEAP32[$29>>2]|0;
   $31 = ((($30)) + 28|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (FUNCTION_TABLE_ii[$32 & 1023]($29)|0);
   if ($28) {
    $34 = HEAP32[$33>>2]|0;
    $35 = ((($34)) + 44|0);
    $36 = HEAP32[$35>>2]|0;
    FUNCTION_TABLE_vi[$36 & 1023]($33);
    break;
   }
   $37 = HEAP32[$33>>2]|0;
   $38 = ((($37)) + 24|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (FUNCTION_TABLE_ii[$39 & 1023]($33)|0);
   $41 = ($40|0)==(264);
   $42 = $pNode;
   $43 = HEAP32[$42>>2]|0;
   $44 = ((($43)) + 28|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (FUNCTION_TABLE_ii[$45 & 1023]($42)|0);
   if ($41) {
    $47 = HEAP32[$46>>2]|0;
    $48 = ((($47)) + 44|0);
    $49 = HEAP32[$48>>2]|0;
    FUNCTION_TABLE_vi[$49 & 1023]($46);
    break;
   }
   $50 = HEAP32[$46>>2]|0;
   $51 = ((($50)) + 24|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (FUNCTION_TABLE_ii[$52 & 1023]($46)|0);
   $54 = ($53|0)==(272);
   $55 = $pNode;
   $56 = HEAP32[$55>>2]|0;
   $57 = ((($56)) + 28|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = (FUNCTION_TABLE_ii[$58 & 1023]($55)|0);
   if ($54) {
    $60 = HEAP32[$59>>2]|0;
    $61 = ((($60)) + 48|0);
    $62 = HEAP32[$61>>2]|0;
    FUNCTION_TABLE_vi[$62 & 1023]($59);
    break;
   }
   $63 = HEAP32[$59>>2]|0;
   $64 = ((($63)) + 24|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = (FUNCTION_TABLE_ii[$65 & 1023]($59)|0);
   $67 = ($66|0)==(288);
   $68 = $pNode;
   $69 = HEAP32[$68>>2]|0;
   $70 = ((($69)) + 28|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = (FUNCTION_TABLE_ii[$71 & 1023]($68)|0);
   if ($67) {
    $73 = HEAP32[$72>>2]|0;
    $74 = ((($73)) + 48|0);
    $75 = HEAP32[$74>>2]|0;
    FUNCTION_TABLE_vi[$75 & 1023]($72);
    break;
   }
   $76 = HEAP32[$72>>2]|0;
   $77 = ((($76)) + 24|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = (FUNCTION_TABLE_ii[$78 & 1023]($72)|0);
   $80 = ($79|0)==(320);
   if ($80) {
    $81 = $pNode;
    $82 = HEAP32[$81>>2]|0;
    $83 = ((($82)) + 28|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = (FUNCTION_TABLE_ii[$84 & 1023]($81)|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = ((($86)) + 48|0);
    $88 = HEAP32[$87>>2]|0;
    FUNCTION_TABLE_vi[$88 & 1023]($85);
    break;
   }
   $$expand_i1_val2 = 0;
   HEAP8[$0>>0] = $$expand_i1_val2;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $89 = $$pre_trunc&1;
   STACKTOP = sp;return ($89|0);
  }
 } while(0);
 $$expand_i1_val4 = 1;
 HEAP8[$0>>0] = $$expand_i1_val4;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $89 = $$pre_trunc&1;
 STACKTOP = sp;return ($89|0);
}
function __Z18udx_formatToXmlStri($agg$result,$dxObj) {
 $agg$result = $agg$result|0;
 $dxObj = $dxObj|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pNode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp + 40|0;
 $5 = $dxObj;
 $$expand_i1_val = 0;
 HEAP8[$6>>0] = $$expand_i1_val;
 $3 = $agg$result;
 $4 = 11786;
 $10 = $3;
 $2 = $10;
 $11 = $2;
 $1 = $11;
 $12 = $1;
 $0 = $12;
 $13 = $4;
 $14 = $4;
 $15 = (__ZNSt3__111char_traitsIcE6lengthEPKc($14)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($10,$13,$15);
 $16 = $5;
 $17 = $16;
 $pNode = $17;
 $18 = $pNode;
 $19 = ($18|0)!=(0|0);
 if ($19) {
  $20 = $pNode;
  $21 = HEAP32[$20>>2]|0;
  $22 = ((($21)) + 12|0);
  $23 = HEAP32[$22>>2]|0;
  __THREW__ = 0;
  (invoke_iii($23|0,($20|0),($agg$result|0))|0);
  $24 = __THREW__; __THREW__ = 0;
  $25 = $24&1;
  if ($25) {
   $26 = ___cxa_find_matching_catch()|0;
   $27 = tempRet0;
   $7 = $26;
   $8 = $27;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result);
   $28 = $7;
   $29 = $8;
   ___resumeException($28|0);
   // unreachable;
  }
 }
 $$expand_i1_val2 = 1;
 HEAP8[$6>>0] = $$expand_i1_val2;
 $9 = 1;
 $$pre_trunc = HEAP8[$6>>0]|0;
 $30 = $$pre_trunc&1;
 if ($30) {
  STACKTOP = sp;return;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result);
 STACKTOP = sp;return;
}
function __Z18udx_loadFromXmlStriNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($dxObj,$xml_str) {
 $dxObj = $dxObj|0;
 $xml_str = $xml_str|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pNode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $15 = sp + 68|0;
 $16 = $dxObj;
 $17 = $16;
 $18 = $17;
 $pNode = $18;
 $19 = $pNode;
 $20 = ($19|0)==(0|0);
 if ($20) {
  $$expand_i1_val = 0;
  HEAP8[$15>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$15>>0]|0;
  $49 = $$pre_trunc&1;
  STACKTOP = sp;return ($49|0);
 }
 $21 = $pNode;
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($22)) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $14 = $xml_str;
 $25 = $14;
 $13 = $25;
 $26 = $13;
 $12 = $26;
 $27 = $12;
 $11 = $27;
 $28 = $11;
 $10 = $28;
 $29 = $10;
 $9 = $29;
 $30 = $9;
 $31 = HEAP8[$30>>0]|0;
 $32 = $31&255;
 $33 = $32 & 1;
 $34 = ($33|0)!=(0);
 if ($34) {
  $3 = $27;
  $35 = $3;
  $2 = $35;
  $36 = $2;
  $1 = $36;
  $37 = $1;
  $38 = ((($37)) + 8|0);
  $39 = HEAP32[$38>>2]|0;
  $46 = $39;
 } else {
  $8 = $27;
  $40 = $8;
  $7 = $40;
  $41 = $7;
  $6 = $41;
  $42 = $6;
  $43 = ((($42)) + 1|0);
  $5 = $43;
  $44 = $5;
  $4 = $44;
  $45 = $4;
  $46 = $45;
 }
 $0 = $46;
 $47 = $0;
 $48 = (FUNCTION_TABLE_iii[$24 & 1023]($21,$47)|0);
 if ($48) {
  $$expand_i1_val2 = 1;
  HEAP8[$15>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$15>>0]|0;
  $49 = $$pre_trunc&1;
  STACKTOP = sp;return ($49|0);
 } else {
  $$expand_i1_val4 = 0;
  HEAP8[$15>>0] = $$expand_i1_val4;
  $$pre_trunc = HEAP8[$15>>0]|0;
  $49 = $$pre_trunc&1;
  STACKTOP = sp;return ($49|0);
 }
 return (0)|0;
}
function __ZN39EmscriptenBindingInitializer_udx_moduleC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 16|0;
 $2 = sp + 15|0;
 $3 = sp + 14|0;
 $6 = sp + 13|0;
 $7 = sp + 12|0;
 $0 = $this;
 __ZN10emscripten5enum_IN4NGIS4Data6Schema15ESchemaNodeTypeEEC2EPKc($1,7698);
 $8 = (__ZN10emscripten5enum_IN4NGIS4Data6Schema15ESchemaNodeTypeEE5valueEPKcS4_($1,7713,2)|0);
 $9 = (__ZN10emscripten5enum_IN4NGIS4Data6Schema15ESchemaNodeTypeEE5valueEPKcS4_($8,7723,4)|0);
 $10 = (__ZN10emscripten5enum_IN4NGIS4Data6Schema15ESchemaNodeTypeEE5valueEPKcS4_($9,7734,8)|0);
 $11 = (__ZN10emscripten5enum_IN4NGIS4Data6Schema15ESchemaNodeTypeEE5valueEPKcS4_($10,7748,16)|0);
 $12 = (__ZN10emscripten5enum_IN4NGIS4Data6Schema15ESchemaNodeTypeEE5valueEPKcS4_($11,7762,32)|0);
 $13 = (__ZN10emscripten5enum_IN4NGIS4Data6Schema15ESchemaNodeTypeEE5valueEPKcS4_($12,7776,64)|0);
 $14 = (__ZN10emscripten5enum_IN4NGIS4Data6Schema15ESchemaNodeTypeEE5valueEPKcS4_($13,7789,258)|0);
 $15 = (__ZN10emscripten5enum_IN4NGIS4Data6Schema15ESchemaNodeTypeEE5valueEPKcS4_($14,7804,260)|0);
 $16 = (__ZN10emscripten5enum_IN4NGIS4Data6Schema15ESchemaNodeTypeEE5valueEPKcS4_($15,7820,264)|0);
 $17 = (__ZN10emscripten5enum_IN4NGIS4Data6Schema15ESchemaNodeTypeEE5valueEPKcS4_($16,7839,272)|0);
 $18 = (__ZN10emscripten5enum_IN4NGIS4Data6Schema15ESchemaNodeTypeEE5valueEPKcS4_($17,7858,288)|0);
 $19 = (__ZN10emscripten5enum_IN4NGIS4Data6Schema15ESchemaNodeTypeEE5valueEPKcS4_($18,7877,320)|0);
 $20 = (__ZN10emscripten5enum_IN4NGIS4Data6Schema15ESchemaNodeTypeEE5valueEPKcS4_($19,7895,128)|0);
 $21 = (__ZN10emscripten5enum_IN4NGIS4Data6Schema15ESchemaNodeTypeEE5valueEPKcS4_($20,7906,256)|0);
 $22 = (__ZN10emscripten5enum_IN4NGIS4Data6Schema15ESchemaNodeTypeEE5valueEPKcS4_($21,7917,512)|0);
 (__ZN10emscripten5enum_IN4NGIS4Data6Schema15ESchemaNodeTypeEE5valueEPKcS4_($22,7927,1024)|0);
 __ZN10emscripten5enum_IN4NGIS4Data11EKernelTypeEEC2EPKc($2,7939);
 $23 = (__ZN10emscripten5enum_IN4NGIS4Data11EKernelTypeEE5valueEPKcS3_($2,7950,0)|0);
 $24 = (__ZN10emscripten5enum_IN4NGIS4Data11EKernelTypeEE5valueEPKcS3_($23,7959,2)|0);
 $25 = (__ZN10emscripten5enum_IN4NGIS4Data11EKernelTypeEE5valueEPKcS3_($24,7967,4)|0);
 $26 = (__ZN10emscripten5enum_IN4NGIS4Data11EKernelTypeEE5valueEPKcS3_($25,7976,8)|0);
 $27 = (__ZN10emscripten5enum_IN4NGIS4Data11EKernelTypeEE5valueEPKcS3_($26,7987,16)|0);
 $28 = (__ZN10emscripten5enum_IN4NGIS4Data11EKernelTypeEE5valueEPKcS3_($27,7999,32)|0);
 $29 = (__ZN10emscripten5enum_IN4NGIS4Data11EKernelTypeEE5valueEPKcS3_($28,8011,64)|0);
 $30 = (__ZN10emscripten5enum_IN4NGIS4Data11EKernelTypeEE5valueEPKcS3_($29,8023,128)|0);
 $31 = (__ZN10emscripten5enum_IN4NGIS4Data11EKernelTypeEE5valueEPKcS3_($30,8032,256)|0);
 $32 = (__ZN10emscripten5enum_IN4NGIS4Data11EKernelTypeEE5valueEPKcS3_($31,8041,512)|0);
 $33 = (__ZN10emscripten5enum_IN4NGIS4Data11EKernelTypeEE5valueEPKcS3_($32,8049,1024)|0);
 $34 = (__ZN10emscripten5enum_IN4NGIS4Data11EKernelTypeEE5valueEPKcS3_($33,8059,258)|0);
 $35 = (__ZN10emscripten5enum_IN4NGIS4Data11EKernelTypeEE5valueEPKcS3_($34,8072,260)|0);
 $36 = (__ZN10emscripten5enum_IN4NGIS4Data11EKernelTypeEE5valueEPKcS3_($35,8086,264)|0);
 $37 = (__ZN10emscripten5enum_IN4NGIS4Data11EKernelTypeEE5valueEPKcS3_($36,8102,272)|0);
 $38 = (__ZN10emscripten5enum_IN4NGIS4Data11EKernelTypeEE5valueEPKcS3_($37,8119,288)|0);
 $39 = (__ZN10emscripten5enum_IN4NGIS4Data11EKernelTypeEE5valueEPKcS3_($38,8136,320)|0);
 (__ZN10emscripten5enum_IN4NGIS4Data11EKernelTypeEE5valueEPKcS3_($39,8153,17)|0);
 __ZN10emscripten11value_arrayIN4NGIS4Data8Vector2dEEC2EPKc($3,8163);
 __THREW__ = 0;
 $40 = (invoke_iii(400,($3|0),0)|0);
 $41 = __THREW__; __THREW__ = 0;
 $42 = $41&1;
 if (!($42)) {
  __THREW__ = 0;
  (invoke_iii(400,($40|0),8)|0);
  $43 = __THREW__; __THREW__ = 0;
  $44 = $43&1;
  if (!($44)) {
   __ZN10emscripten11value_arrayIN4NGIS4Data8Vector2dEED2Ev($3);
   __ZN10emscripten11value_arrayIN4NGIS4Data8Vector3dEEC2EPKc($6,8172);
   __THREW__ = 0;
   $45 = (invoke_iii(401,($6|0),0)|0);
   $46 = __THREW__; __THREW__ = 0;
   $47 = $46&1;
   if (!($47)) {
    __THREW__ = 0;
    $48 = (invoke_iii(401,($45|0),8)|0);
    $49 = __THREW__; __THREW__ = 0;
    $50 = $49&1;
    if (!($50)) {
     __THREW__ = 0;
     (invoke_iii(401,($48|0),16)|0);
     $51 = __THREW__; __THREW__ = 0;
     $52 = $51&1;
     if (!($52)) {
      __ZN10emscripten11value_arrayIN4NGIS4Data8Vector3dEED2Ev($6);
      __ZN10emscripten11value_arrayIN4NGIS4Data8Vector4dEEC2EPKc($7,8181);
      __THREW__ = 0;
      $53 = (invoke_iii(402,($7|0),0)|0);
      $54 = __THREW__; __THREW__ = 0;
      $55 = $54&1;
      if (!($55)) {
       __THREW__ = 0;
       $56 = (invoke_iii(402,($53|0),8)|0);
       $57 = __THREW__; __THREW__ = 0;
       $58 = $57&1;
       if (!($58)) {
        __THREW__ = 0;
        $59 = (invoke_iii(402,($56|0),16)|0);
        $60 = __THREW__; __THREW__ = 0;
        $61 = $60&1;
        if (!($61)) {
         __THREW__ = 0;
         (invoke_iii(402,($59|0),24)|0);
         $62 = __THREW__; __THREW__ = 0;
         $63 = $62&1;
         if (!($63)) {
          __ZN10emscripten11value_arrayIN4NGIS4Data8Vector4dEED2Ev($7);
          __ZN10emscripten8functionIfJEJEEEvPKcPFT_DpT0_EDpT1_(8190,403);
          __ZN10emscripten8functionINSt3__112basic_stringIwNS1_11char_traitsIwEENS1_9allocatorIwEEEEJEJEEEvPKcPFT_DpT0_EDpT1_(8201,404);
          __ZN10emscripten8functionIiJEJEEEvPKcPFT_DpT0_EDpT1_(8209,405);
          __ZN10emscripten8functionIiJN4NGIS4Data6Schema15ESchemaNodeTypeENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEJEEEvPKcPFT_DpT0_EDpT1_(8232,406);
          __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(8257,407);
          __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(8281,408);
          __ZN10emscripten8functionIiJiNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN4NGIS4Data6Schema15ESchemaNodeTypeENS2_IwNS3_IwEENS5_IwEEEEEJEEEvPKcPFT_DpT0_EDpT1_(8299,409);
          __ZN10emscripten8functionIiJiiEJEEEvPKcPFT_DpT0_EDpT1_(8318,410);
          __ZN10emscripten8functionIiJiiEJEEEvPKcPFT_DpT0_EDpT1_(8340,411);
          __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(8369,412);
          __ZN10emscripten8functionIiJiiEJEEEvPKcPFT_DpT0_EDpT1_(8393,413);
          __ZN10emscripten8functionIN4NGIS4Data6Schema15ESchemaNodeTypeEJiEJEEEvPKcPFT_DpT0_EDpT1_(8412,414);
          __ZN10emscripten8functionINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJN4NGIS4Data6Schema15ESchemaNodeTypeEEJEEEvPKcPFT_DpT0_EDpT1_(8430,415);
          __ZN10emscripten8functionINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJiEJEEEvPKcPFT_DpT0_EDpT1_(8452,416);
          __ZN10emscripten8functionINSt3__112basic_stringIwNS1_11char_traitsIwEENS1_9allocatorIwEEEEJiEJEEEvPKcPFT_DpT0_EDpT1_(8470,417);
          __ZN10emscripten8functionINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJiEJEEEvPKcPFT_DpT0_EDpT1_(8495,418);
          __ZN10emscripten8functionINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJiEJEEEvPKcPFT_DpT0_EDpT1_(8520,419);
          __ZN10emscripten8functionINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJiEJEEEvPKcPFT_DpT0_EDpT1_(8548,420);
          __ZN10emscripten8functionINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJiEJEEEvPKcPFT_DpT0_EDpT1_(8570,421);
          __ZN10emscripten8functionIbJiNSt3__112basic_stringIwNS1_11char_traitsIwEENS1_9allocatorIwEEEEEJEEEvPKcPFT_DpT0_EDpT1_(8600,422);
          __ZN10emscripten8functionIbJiNSt3__112basic_stringIwNS1_11char_traitsIwEENS1_9allocatorIwEEEEEJEEEvPKcPFT_DpT0_EDpT1_(8621,423);
          __ZN10emscripten8functionIbJiNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEJEEEvPKcPFT_DpT0_EDpT1_(8649,424);
          __ZN10emscripten8functionIbJiNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEJEEEvPKcPFT_DpT0_EDpT1_(8677,425);
          __ZN10emscripten8functionIbJiNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEJEEEvPKcPFT_DpT0_EDpT1_(8708,426);
          __ZN10emscripten8functionIbJiNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEJEEEvPKcPFT_DpT0_EDpT1_(8733,427);
          __ZN10emscripten8functionINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJiNS2_IwNS3_IwEENS5_IwEEEEEJEEEvPKcPFT_DpT0_EDpT1_(8766,428);
          __ZN10emscripten8functionINSt3__112basic_stringIwNS1_11char_traitsIwEENS1_9allocatorIwEEEEJiEJEEEvPKcPFT_DpT0_EDpT1_(8790,429);
          __ZN10emscripten8functionIiJEJEEEvPKcPFT_DpT0_EDpT1_(8814,430);
          __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(8831,431);
          __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(8846,432);
          __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(8861,433);
          __ZN10emscripten8functionIiJiiEJEEEvPKcPFT_DpT0_EDpT1_(8879,434);
          __ZN10emscripten8functionINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJiEJEEEvPKcPFT_DpT0_EDpT1_(8892,435);
          __ZN10emscripten8functionIbJiNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEJEEEvPKcPFT_DpT0_EDpT1_(8904,436);
          __ZN10emscripten8functionIN4NGIS4Data11EKernelTypeEJiEJEEEvPKcPFT_DpT0_EDpT1_(8916,437);
          __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(8928,438);
          __ZN10emscripten8functionINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJN4NGIS4Data11EKernelTypeEEJEEEvPKcPFT_DpT0_EDpT1_(8942,439);
          __ZN10emscripten8functionIN4NGIS4Data11EKernelTypeEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEJEEEvPKcPFT_DpT0_EDpT1_(8960,440);
          __ZN10emscripten8functionIiJiNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN4NGIS4Data11EKernelTypeEEJEEEvPKcPFT_DpT0_EDpT1_(8978,441);
          __ZN10emscripten8functionIbJiiEJEEEvPKcPFT_DpT0_EDpT1_(8991,442);
          __ZN10emscripten8functionIbJiiEJEEEvPKcPFT_DpT0_EDpT1_(9014,443);
          __ZN10emscripten8functionIbJiiEJEEEvPKcPFT_DpT0_EDpT1_(9030,444);
          __ZN10emscripten8functionIbJidEJEEEvPKcPFT_DpT0_EDpT1_(9046,445);
          __ZN10emscripten8functionIbJiNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEJEEEvPKcPFT_DpT0_EDpT1_(9063,446);
          __ZN10emscripten8functionIbJiddEJEEEvPKcPFT_DpT0_EDpT1_(9082,447);
          __ZN10emscripten8functionIbJidddEJEEEvPKcPFT_DpT0_EDpT1_(9103,448);
          __ZN10emscripten8functionIbJiddddEJEEEvPKcPFT_DpT0_EDpT1_(9124,449);
          __ZN10emscripten8functionIbJiiiEJEEEvPKcPFT_DpT0_EDpT1_(9145,450);
          __ZN10emscripten8functionIbJidiEJEEEvPKcPFT_DpT0_EDpT1_(9161,451);
          __ZN10emscripten8functionIbJiNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEiEJEEEvPKcPFT_DpT0_EDpT1_(9178,452);
          __ZN10emscripten8functionIbJiddiEJEEEvPKcPFT_DpT0_EDpT1_(9197,453);
          __ZN10emscripten8functionIbJidddiEJEEEvPKcPFT_DpT0_EDpT1_(9218,454);
          __ZN10emscripten8functionIbJiddddiEJEEEvPKcPFT_DpT0_EDpT1_(9239,455);
          __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(9260,456);
          __ZN10emscripten8functionIdJiEJEEEvPKcPFT_DpT0_EDpT1_(9276,457);
          __ZN10emscripten8functionINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJiEJEEEvPKcPFT_DpT0_EDpT1_(9293,458);
          __ZN10emscripten8functionIN4NGIS4Data8Vector2dEJiEJEEEvPKcPFT_DpT0_EDpT1_(9312,459);
          __ZN10emscripten8functionIN4NGIS4Data8Vector3dEJiEJEEEvPKcPFT_DpT0_EDpT1_(9333,460);
          __ZN10emscripten8functionIN4NGIS4Data8Vector4dEJiEJEEEvPKcPFT_DpT0_EDpT1_(9354,461);
          __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(9375,462);
          __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(9396,463);
          __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(9418,464);
          __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(9442,465);
          __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(9468,466);
          __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(9494,467);
          __ZN10emscripten8functionIiJiiEJEEEvPKcPFT_DpT0_EDpT1_(9520,468);
          __ZN10emscripten8functionIdJiiEJEEEvPKcPFT_DpT0_EDpT1_(9541,469);
          __ZN10emscripten8functionINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJiiEJEEEvPKcPFT_DpT0_EDpT1_(9563,470);
          __ZN10emscripten8functionIN4NGIS4Data8Vector2dEJiiEJEEEvPKcPFT_DpT0_EDpT1_(9587,471);
          __ZN10emscripten8functionIN4NGIS4Data8Vector3dEJiiEJEEEvPKcPFT_DpT0_EDpT1_(9613,472);
          __ZN10emscripten8functionIN4NGIS4Data8Vector4dEJiiEJEEEvPKcPFT_DpT0_EDpT1_(9639,473);
          __ZN10emscripten8functionIbJiiEJEEEvPKcPFT_DpT0_EDpT1_(9665,474);
          __ZN10emscripten8functionIbJiiEJEEEvPKcPFT_DpT0_EDpT1_(9694,475);
          __ZN10emscripten8functionIbJiiEJEEEvPKcPFT_DpT0_EDpT1_(9724,476);
          __ZN10emscripten8functionIbJiiEJEEEvPKcPFT_DpT0_EDpT1_(9756,477);
          __ZN10emscripten8functionIbJiiEJEEEvPKcPFT_DpT0_EDpT1_(9790,478);
          __ZN10emscripten8functionIbJiiEJEEEvPKcPFT_DpT0_EDpT1_(9824,479);
          __ZN10emscripten8functionIbJiEJEEEvPKcPFT_DpT0_EDpT1_(9858,480);
          __ZN10emscripten8functionINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJiEJEEEvPKcPFT_DpT0_EDpT1_(9873,481);
          __ZN10emscripten8functionIbJiNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEJEEEvPKcPFT_DpT0_EDpT1_(9891,482);
          STACKTOP = sp;return;
         }
        }
       }
      }
      $68 = ___cxa_find_matching_catch()|0;
      $69 = tempRet0;
      $4 = $68;
      $5 = $69;
      __ZN10emscripten11value_arrayIN4NGIS4Data8Vector4dEED2Ev($7);
      $70 = $4;
      $71 = $5;
      ___resumeException($70|0);
      // unreachable;
     }
    }
   }
   $66 = ___cxa_find_matching_catch()|0;
   $67 = tempRet0;
   $4 = $66;
   $5 = $67;
   __ZN10emscripten11value_arrayIN4NGIS4Data8Vector3dEED2Ev($6);
   $70 = $4;
   $71 = $5;
   ___resumeException($70|0);
   // unreachable;
  }
 }
 $64 = ___cxa_find_matching_catch()|0;
 $65 = tempRet0;
 $4 = $64;
 $5 = $65;
 __ZN10emscripten11value_arrayIN4NGIS4Data8Vector2dEED2Ev($3);
 $70 = $4;
 $71 = $5;
 ___resumeException($70|0);
 // unreachable;
}
function __ZNSt3__111char_traitsIwE6lengthEPKw($__s) {
 $__s = $__s|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__s;
 $1 = $0;
 $2 = (_wcslen($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN4NGIS4Data6Schema17CUdxDatasetSchemaC1EPKc($this,$pName) {
 $this = $this|0;
 $pName = $pName|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $pName;
 $4 = $0;
 $5 = ((($4)) + 4|0);
 __ZN4NGIS4Data6Schema14IUdxNodeSchemaC2Ev($5);
 __THREW__ = 0;
 $6 = 3184;
 invoke_vii(483,($4|0),($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $29 = ___cxa_find_matching_catch()|0;
  $30 = tempRet0;
  $2 = $29;
  $3 = $30;
  $39 = ((($4)) + 4|0);
  __ZN4NGIS4Data6Schema14IUdxNodeSchemaD2Ev($39);
  $40 = $2;
  $41 = $3;
  ___resumeException($40|0);
  // unreachable;
 }
 $9 = ((($4)) + 12|0);
 $10 = $1;
 __THREW__ = 0;
 invoke_viiii(388,($9|0),(0|0),($10|0),(0|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $31 = ___cxa_find_matching_catch()|0;
  $32 = tempRet0;
  $2 = $31;
  $3 = $32;
 } else {
  $13 = 3232;
  HEAP32[$4>>2] = $13;
  $14 = 3232;
  HEAP32[$4>>2] = $14;
  $15 = ((($4)) + 4|0);
  $16 = 3360;
  HEAP32[$15>>2] = $16;
  $17 = ((($4)) + 12|0);
  $18 = 3484;
  HEAP32[$17>>2] = $18;
  __THREW__ = 0;
  $19 = (invoke_ii(484,84)|0);
  $20 = __THREW__; __THREW__ = 0;
  $21 = $20&1;
  do {
   if ($21) {
    $33 = ___cxa_find_matching_catch()|0;
    $34 = tempRet0;
    $2 = $33;
    $3 = $34;
   } else {
    __THREW__ = 0;
    invoke_vii(485,($19|0),128);
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if ($23) {
     $35 = ___cxa_find_matching_catch()|0;
     $36 = tempRet0;
     $2 = $35;
     $3 = $36;
     __ZdlPv($19);
     break;
    } else {
     $24 = HEAP32[$4>>2]|0;
     $25 = ((($24)) + -40|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = (($4) + ($26)|0);
     $28 = ((($27)) + 20|0);
     HEAP32[$28>>2] = $19;
     STACKTOP = sp;return;
    }
   }
  } while(0);
  $37 = ((($4)) + 12|0);
  __ZN4NGIS4Data6Schema14CUdxNodeSchemaD2Ev($37);
 }
 $38 = 3184;
 __ZN4NGIS4Data6Schema17IUdxDatasetSchemaD2Ev($4,$38);
 $39 = ((($4)) + 4|0);
 __ZN4NGIS4Data6Schema14IUdxNodeSchemaD2Ev($39);
 $40 = $2;
 $41 = $3;
 ___resumeException($40|0);
 // unreachable;
}
function __ZN4NGIS4Data6SchemaL21SchemaNodeType2StringENS1_15ESchemaNodeTypeE($pType) {
 $pType = $pType|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pType;
 $2 = $1;
 $3 = ($2|0)==(2);
 do {
  if ($3) {
   $0 = 10328;
  } else {
   $4 = $1;
   $5 = ($4|0)==(4);
   if ($5) {
    $0 = 10337;
    break;
   }
   $6 = $1;
   $7 = ($6|0)==(8);
   if ($7) {
    $0 = 10347;
    break;
   }
   $8 = $1;
   $9 = ($8|0)==(16);
   if ($9) {
    $0 = 10361;
    break;
   }
   $10 = $1;
   $11 = ($10|0)==(32);
   if ($11) {
    $0 = 10375;
    break;
   }
   $12 = $1;
   $13 = ($12|0)==(64);
   if ($13) {
    $0 = 10389;
    break;
   }
   $14 = $1;
   $15 = ($14|0)==(258);
   if ($15) {
    $0 = 10401;
    break;
   }
   $16 = $1;
   $17 = ($16|0)==(260);
   if ($17) {
    $0 = 10422;
    break;
   }
   $18 = $1;
   $19 = ($18|0)==(264);
   if ($19) {
    $0 = 10444;
    break;
   }
   $20 = $1;
   $21 = ($20|0)==(272);
   if ($21) {
    $0 = 10470;
    break;
   }
   $22 = $1;
   $23 = ($22|0)==(288);
   if ($23) {
    $0 = 10496;
    break;
   }
   $24 = $1;
   $25 = ($24|0)==(320);
   if ($25) {
    $0 = 10522;
    break;
   }
   $26 = $1;
   $27 = ($26|0)==(128);
   if ($27) {
    $0 = 10546;
    break;
   }
   $28 = $1;
   $29 = ($28|0)==(256);
   if ($29) {
    $0 = 10555;
    break;
   }
   $30 = $1;
   $31 = ($30|0)==(512);
   if ($31) {
    $0 = 10565;
    break;
   }
   $32 = $1;
   $33 = ($32|0)==(1024);
   if ($33) {
    $0 = 10574;
    break;
   } else {
    _llvm_trap();
    // unreachable;
   }
  }
 } while(0);
 $34 = $0;
 STACKTOP = sp;return ($34|0);
}
function __ZN4NGIS4Data11CUdxDatasetC1EPKc($this,$pName) {
 $this = $this|0;
 $pName = $pName|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $pName;
 $4 = $0;
 $5 = ((($4)) + 4|0);
 __ZN4NGIS4Data8IUdxNodeC2Ev($5);
 __THREW__ = 0;
 $6 = 4312;
 invoke_vii(486,($4|0),($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $24 = ___cxa_find_matching_catch()|0;
  $25 = tempRet0;
  $2 = $24;
  $3 = $25;
  $29 = ((($4)) + 4|0);
  __ZN4NGIS4Data8IUdxNodeD2Ev($29);
  $30 = $2;
  $31 = $3;
  ___resumeException($30|0);
  // unreachable;
 }
 $9 = ((($4)) + 12|0);
 $10 = $1;
 __THREW__ = 0;
 invoke_viiii(487,($9|0),(0|0),($10|0),128);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if (!($12)) {
  $13 = 3952;
  HEAP32[$4>>2] = $13;
  $14 = 3952;
  HEAP32[$4>>2] = $14;
  $15 = ((($4)) + 4|0);
  $16 = 4100;
  HEAP32[$15>>2] = $16;
  $17 = ((($4)) + 12|0);
  $18 = 4232;
  HEAP32[$17>>2] = $18;
  $19 = HEAP32[$4>>2]|0;
  $20 = ((($19)) + -60|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($4) + ($21)|0);
  $23 = ((($22)) + 36|0);
  HEAP32[$23>>2] = 0;
  STACKTOP = sp;return;
 }
 $26 = ___cxa_find_matching_catch()|0;
 $27 = tempRet0;
 $2 = $26;
 $3 = $27;
 $28 = 4312;
 __ZN4NGIS4Data11IUdxDatasetD2Ev($4,$28);
 $29 = ((($4)) + 4|0);
 __ZN4NGIS4Data8IUdxNodeD2Ev($29);
 $30 = $2;
 $31 = $3;
 ___resumeException($30|0);
 // unreachable;
}
function __ZN4NGIS4DataL17KernelType2StringENS0_11EKernelTypeE($agg$result,$pType) {
 $agg$result = $agg$result|0;
 $pType = $pType|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $95 = $pType;
 $96 = $95;
 $97 = ($96|0)==(0);
 if ($97) {
  $93 = $agg$result;
  $94 = 11786;
  $98 = $93;
  $92 = $98;
  $99 = $92;
  $91 = $99;
  $100 = $91;
  $90 = $100;
  $101 = $94;
  $102 = $94;
  $103 = (__ZNSt3__111char_traitsIcE6lengthEPKc($102)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($98,$101,$103);
  STACKTOP = sp;return;
 }
 $104 = $95;
 $105 = ($104|0)==(2);
 if ($105) {
  $88 = $agg$result;
  $89 = 11849;
  $106 = $88;
  $87 = $106;
  $107 = $87;
  $86 = $107;
  $108 = $86;
  $85 = $108;
  $109 = $89;
  $110 = $89;
  $111 = (__ZNSt3__111char_traitsIcE6lengthEPKc($110)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($106,$109,$111);
  STACKTOP = sp;return;
 }
 $112 = $95;
 $113 = ($112|0)==(4);
 if ($113) {
  $83 = $agg$result;
  $84 = 10885;
  $114 = $83;
  $82 = $114;
  $115 = $82;
  $81 = $115;
  $116 = $81;
  $80 = $116;
  $117 = $84;
  $118 = $84;
  $119 = (__ZNSt3__111char_traitsIcE6lengthEPKc($118)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($114,$117,$119);
  STACKTOP = sp;return;
 }
 $120 = $95;
 $121 = ($120|0)==(8);
 if ($121) {
  $78 = $agg$result;
  $79 = 10890;
  $122 = $78;
  $77 = $122;
  $123 = $77;
  $76 = $123;
  $124 = $76;
  $75 = $124;
  $125 = $79;
  $126 = $79;
  $127 = (__ZNSt3__111char_traitsIcE6lengthEPKc($126)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($122,$125,$127);
  STACKTOP = sp;return;
 }
 $128 = $95;
 $129 = ($128|0)==(16);
 if ($129) {
  $73 = $agg$result;
  $74 = 10897;
  $130 = $73;
  $72 = $130;
  $131 = $72;
  $71 = $131;
  $132 = $71;
  $70 = $132;
  $133 = $74;
  $134 = $74;
  $135 = (__ZNSt3__111char_traitsIcE6lengthEPKc($134)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($130,$133,$135);
  STACKTOP = sp;return;
 }
 $136 = $95;
 $137 = ($136|0)==(32);
 if ($137) {
  $68 = $agg$result;
  $69 = 10914;
  $138 = $68;
  $67 = $138;
  $139 = $67;
  $66 = $139;
  $140 = $66;
  $65 = $140;
  $141 = $69;
  $142 = $69;
  $143 = (__ZNSt3__111char_traitsIcE6lengthEPKc($142)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($138,$141,$143);
  STACKTOP = sp;return;
 }
 $144 = $95;
 $145 = ($144|0)==(64);
 if ($145) {
  $63 = $agg$result;
  $64 = 10935;
  $146 = $63;
  $62 = $146;
  $147 = $62;
  $61 = $147;
  $148 = $61;
  $60 = $148;
  $149 = $64;
  $150 = $64;
  $151 = (__ZNSt3__111char_traitsIcE6lengthEPKc($150)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($146,$149,$151);
  STACKTOP = sp;return;
 }
 $152 = $95;
 $153 = ($152|0)==(258);
 if ($153) {
  $58 = $agg$result;
  $59 = 10960;
  $154 = $58;
  $57 = $154;
  $155 = $57;
  $56 = $155;
  $156 = $56;
  $55 = $156;
  $157 = $59;
  $158 = $59;
  $159 = (__ZNSt3__111char_traitsIcE6lengthEPKc($158)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($154,$157,$159);
  STACKTOP = sp;return;
 }
 $160 = $95;
 $161 = ($160|0)==(260);
 if ($161) {
  $53 = $agg$result;
  $54 = 10972;
  $162 = $53;
  $52 = $162;
  $163 = $52;
  $51 = $163;
  $164 = $51;
  $50 = $164;
  $165 = $54;
  $166 = $54;
  $167 = (__ZNSt3__111char_traitsIcE6lengthEPKc($166)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($162,$165,$167);
  STACKTOP = sp;return;
 }
 $168 = $95;
 $169 = ($168|0)==(264);
 if ($169) {
  $48 = $agg$result;
  $49 = 10983;
  $170 = $48;
  $47 = $170;
  $171 = $47;
  $46 = $171;
  $172 = $46;
  $45 = $172;
  $173 = $49;
  $174 = $49;
  $175 = (__ZNSt3__111char_traitsIcE6lengthEPKc($174)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($170,$173,$175);
  STACKTOP = sp;return;
 }
 $176 = $95;
 $177 = ($176|0)==(272);
 if ($177) {
  $43 = $agg$result;
  $44 = 10998;
  $178 = $43;
  $42 = $178;
  $179 = $42;
  $41 = $179;
  $180 = $41;
  $40 = $180;
  $181 = $44;
  $182 = $44;
  $183 = (__ZNSt3__111char_traitsIcE6lengthEPKc($182)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($178,$181,$183);
  STACKTOP = sp;return;
 }
 $184 = $95;
 $185 = ($184|0)==(288);
 if ($185) {
  $38 = $agg$result;
  $39 = 11013;
  $186 = $38;
  $37 = $186;
  $187 = $37;
  $36 = $187;
  $188 = $36;
  $35 = $188;
  $189 = $39;
  $190 = $39;
  $191 = (__ZNSt3__111char_traitsIcE6lengthEPKc($190)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($186,$189,$191);
  STACKTOP = sp;return;
 }
 $192 = $95;
 $193 = ($192|0)==(320);
 if ($193) {
  $33 = $agg$result;
  $34 = 11028;
  $194 = $33;
  $32 = $194;
  $195 = $32;
  $31 = $195;
  $196 = $31;
  $30 = $196;
  $197 = $34;
  $198 = $34;
  $199 = (__ZNSt3__111char_traitsIcE6lengthEPKc($198)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($194,$197,$199);
  STACKTOP = sp;return;
 }
 $200 = $95;
 $201 = ($200|0)==(128);
 if ($201) {
  $28 = $agg$result;
  $29 = 11043;
  $202 = $28;
  $27 = $202;
  $203 = $27;
  $26 = $203;
  $204 = $26;
  $25 = $204;
  $205 = $29;
  $206 = $29;
  $207 = (__ZNSt3__111char_traitsIcE6lengthEPKc($206)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($202,$205,$207);
  STACKTOP = sp;return;
 }
 $208 = $95;
 $209 = ($208|0)==(256);
 if ($209) {
  $23 = $agg$result;
  $24 = 11047;
  $210 = $23;
  $22 = $210;
  $211 = $22;
  $21 = $211;
  $212 = $21;
  $20 = $212;
  $213 = $24;
  $214 = $24;
  $215 = (__ZNSt3__111char_traitsIcE6lengthEPKc($214)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($210,$213,$215);
  STACKTOP = sp;return;
 }
 $216 = $95;
 $217 = ($216|0)==(512);
 if ($217) {
  $18 = $agg$result;
  $19 = 11052;
  $218 = $18;
  $17 = $218;
  $219 = $17;
  $16 = $219;
  $220 = $16;
  $15 = $220;
  $221 = $19;
  $222 = $19;
  $223 = (__ZNSt3__111char_traitsIcE6lengthEPKc($222)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($218,$221,$223);
  STACKTOP = sp;return;
 }
 $224 = $95;
 $225 = ($224|0)==(1024);
 if ($225) {
  $13 = $agg$result;
  $14 = 11056;
  $226 = $13;
  $12 = $226;
  $227 = $12;
  $11 = $227;
  $228 = $11;
  $10 = $228;
  $229 = $14;
  $230 = $14;
  $231 = (__ZNSt3__111char_traitsIcE6lengthEPKc($230)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($226,$229,$231);
  STACKTOP = sp;return;
 }
 $232 = $95;
 $233 = ($232|0)==(17);
 if ($233) {
  $8 = $agg$result;
  $9 = 11786;
  $234 = $8;
  $7 = $234;
  $235 = $7;
  $6 = $235;
  $236 = $6;
  $5 = $236;
  $237 = $9;
  $238 = $9;
  $239 = (__ZNSt3__111char_traitsIcE6lengthEPKc($238)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($234,$237,$239);
  STACKTOP = sp;return;
 } else {
  $3 = $agg$result;
  $4 = 11786;
  $240 = $3;
  $2 = $240;
  $241 = $2;
  $1 = $241;
  $242 = $1;
  $0 = $242;
  $243 = $4;
  $244 = $4;
  $245 = (__ZNSt3__111char_traitsIcE6lengthEPKc($244)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($240,$243,$245);
  STACKTOP = sp;return;
 }
}
function __ZN4NGIS4DataL17String2KernelTypeENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($typeStr) {
 $typeStr = $typeStr|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $pType = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pType = sp + 4|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($pType,$typeStr);
 $56 = $pType;
 $57 = 11849;
 $60 = $56;
 $61 = $57;
 $62 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($60,$61)|0);
 $63 = ($62|0)==(0);
 do {
  if ($63) {
   $58 = 2;
   $59 = 1;
  } else {
   $54 = $pType;
   $55 = 10885;
   $64 = $54;
   $65 = $55;
   $66 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($64,$65)|0);
   $67 = ($66|0)==(0);
   if ($67) {
    $58 = 4;
    $59 = 1;
    break;
   }
   $52 = $pType;
   $53 = 10890;
   $68 = $52;
   $69 = $53;
   $70 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($68,$69)|0);
   $71 = ($70|0)==(0);
   if ($71) {
    $58 = 8;
    $59 = 1;
    break;
   }
   $50 = $pType;
   $51 = 10897;
   $72 = $50;
   $73 = $51;
   $74 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($72,$73)|0);
   $75 = ($74|0)==(0);
   if ($75) {
    $58 = 16;
    $59 = 1;
    break;
   }
   $48 = $pType;
   $49 = 10914;
   $76 = $48;
   $77 = $49;
   $78 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($76,$77)|0);
   $79 = ($78|0)==(0);
   if ($79) {
    $58 = 32;
    $59 = 1;
    break;
   }
   $46 = $pType;
   $47 = 10935;
   $80 = $46;
   $81 = $47;
   $82 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($80,$81)|0);
   $83 = ($82|0)==(0);
   if ($83) {
    $58 = 64;
    $59 = 1;
    break;
   }
   $44 = $pType;
   $45 = 10960;
   $84 = $44;
   $85 = $45;
   $86 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($84,$85)|0);
   $87 = ($86|0)==(0);
   if ($87) {
    $58 = 258;
    $59 = 1;
    break;
   }
   $42 = $pType;
   $43 = 10972;
   $88 = $42;
   $89 = $43;
   $90 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($88,$89)|0);
   $91 = ($90|0)==(0);
   if ($91) {
    $58 = 260;
    $59 = 1;
    break;
   }
   $40 = $pType;
   $41 = 10983;
   $92 = $40;
   $93 = $41;
   $94 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($92,$93)|0);
   $95 = ($94|0)==(0);
   if ($95) {
    $58 = 264;
    $59 = 1;
    break;
   }
   $38 = $pType;
   $39 = 10998;
   $96 = $38;
   $97 = $39;
   $98 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($96,$97)|0);
   $99 = ($98|0)==(0);
   if ($99) {
    $58 = 272;
    $59 = 1;
    break;
   }
   $36 = $pType;
   $37 = 11013;
   $100 = $36;
   $101 = $37;
   $102 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($100,$101)|0);
   $103 = ($102|0)==(0);
   if ($103) {
    $58 = 288;
    $59 = 1;
    break;
   }
   $34 = $pType;
   $35 = 11028;
   $104 = $34;
   $105 = $35;
   $106 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($104,$105)|0);
   $107 = ($106|0)==(0);
   if ($107) {
    $58 = 320;
    $59 = 1;
    break;
   }
   $32 = $pType;
   $33 = 11043;
   $108 = $32;
   $109 = $33;
   $110 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($108,$109)|0);
   $111 = ($110|0)==(0);
   if ($111) {
    $58 = 128;
    $59 = 1;
    break;
   }
   $30 = $pType;
   $31 = 11047;
   $112 = $30;
   $113 = $31;
   $114 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($112,$113)|0);
   $115 = ($114|0)==(0);
   if ($115) {
    $58 = 256;
    $59 = 1;
    break;
   }
   $28 = $pType;
   $29 = 11052;
   $116 = $28;
   $117 = $29;
   $118 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($116,$117)|0);
   $119 = ($118|0)==(0);
   if ($119) {
    $58 = 512;
    $59 = 1;
    break;
   }
   $26 = $pType;
   $27 = 11056;
   $120 = $26;
   $121 = $27;
   $122 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($120,$121)|0);
   $123 = ($122|0)==(0);
   if ($123) {
    $58 = 1024;
    $59 = 1;
    break;
   }
   $24 = $pType;
   $25 = 11849;
   $124 = $24;
   $125 = $25;
   $126 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($124,$125)|0);
   $127 = ($126|0)==(0);
   if ($127) {
    $58 = 2;
    $59 = 1;
    break;
   }
   $22 = $pType;
   $23 = 11885;
   $128 = $22;
   $129 = $23;
   $130 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($128,$129)|0);
   $131 = ($130|0)==(0);
   if ($131) {
    $58 = 4;
    $59 = 1;
    break;
   }
   $20 = $pType;
   $21 = 10890;
   $132 = $20;
   $133 = $21;
   $134 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($132,$133)|0);
   $135 = ($134|0)==(0);
   if ($135) {
    $58 = 8;
    $59 = 1;
    break;
   }
   $18 = $pType;
   $19 = 10897;
   $136 = $18;
   $137 = $19;
   $138 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($136,$137)|0);
   $139 = ($138|0)==(0);
   if ($139) {
    $58 = 16;
    $59 = 1;
    break;
   }
   $16 = $pType;
   $17 = 10914;
   $140 = $16;
   $141 = $17;
   $142 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($140,$141)|0);
   $143 = ($142|0)==(0);
   if ($143) {
    $58 = 32;
    $59 = 1;
    break;
   }
   $14 = $pType;
   $15 = 10935;
   $144 = $14;
   $145 = $15;
   $146 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($144,$145)|0);
   $147 = ($146|0)==(0);
   if ($147) {
    $58 = 64;
    $59 = 1;
    break;
   }
   $12 = $pType;
   $13 = 11190;
   $148 = $12;
   $149 = $13;
   $150 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($148,$149)|0);
   $151 = ($150|0)==(0);
   if ($151) {
    $58 = 258;
    $59 = 1;
    break;
   }
   $10 = $pType;
   $11 = 11200;
   $152 = $10;
   $153 = $11;
   $154 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($152,$153)|0);
   $155 = ($154|0)==(0);
   if ($155) {
    $58 = 260;
    $59 = 1;
    break;
   }
   $8 = $pType;
   $9 = 11212;
   $156 = $8;
   $157 = $9;
   $158 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($156,$157)|0);
   $159 = ($158|0)==(0);
   if ($159) {
    $58 = 264;
    $59 = 1;
    break;
   }
   $6 = $pType;
   $7 = 11225;
   $160 = $6;
   $161 = $7;
   $162 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($160,$161)|0);
   $163 = ($162|0)==(0);
   if ($163) {
    $58 = 272;
    $59 = 1;
    break;
   }
   $4 = $pType;
   $5 = 11240;
   $164 = $4;
   $165 = $5;
   $166 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($164,$165)|0);
   $167 = ($166|0)==(0);
   if ($167) {
    $58 = 288;
    $59 = 1;
    break;
   }
   $2 = $pType;
   $3 = 11255;
   $168 = $2;
   $169 = $3;
   $170 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($168,$169)|0);
   $171 = ($170|0)==(0);
   if ($171) {
    $58 = 320;
    $59 = 1;
    break;
   }
   $0 = $pType;
   $1 = 11270;
   $172 = $0;
   $173 = $1;
   $174 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($172,$173)|0);
   $175 = ($174|0)==(0);
   if ($175) {
    $58 = 128;
    $59 = 1;
    break;
   } else {
    $58 = 0;
    $59 = 1;
    break;
   }
  }
 } while(0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($pType);
 $176 = $58;
 STACKTOP = sp;return ($176|0);
}
function __ZN4NGIS4Data8Vector2dC2Edd($this,$_x,$_y) {
 $this = $this|0;
 $_x = +$_x;
 $_y = +$_y;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_x;
 $2 = $_y;
 $3 = $0;
 $4 = $1;
 HEAPF64[$3>>3] = $4;
 $5 = $2;
 $6 = ((($3)) + 8|0);
 HEAPF64[$6>>3] = $5;
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data8Vector3dC2Eddd($this,$_x,$_y,$_z) {
 $this = $this|0;
 $_x = +$_x;
 $_y = +$_y;
 $_z = +$_z;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_x;
 $2 = $_y;
 $3 = $_z;
 $4 = $0;
 $5 = $1;
 HEAPF64[$4>>3] = $5;
 $6 = $2;
 $7 = ((($4)) + 8|0);
 HEAPF64[$7>>3] = $6;
 $8 = $3;
 $9 = ((($4)) + 16|0);
 HEAPF64[$9>>3] = $8;
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data8Vector4dC2Edddd($this,$_x,$_y,$_z,$_m) {
 $this = $this|0;
 $_x = +$_x;
 $_y = +$_y;
 $_z = +$_z;
 $_m = +$_m;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_x;
 $2 = $_y;
 $3 = $_z;
 $4 = $_m;
 $5 = $0;
 $6 = $1;
 HEAPF64[$5>>3] = $6;
 $7 = $2;
 $8 = ((($5)) + 8|0);
 HEAPF64[$8>>3] = $7;
 $9 = $3;
 $10 = ((($5)) + 16|0);
 HEAPF64[$10>>3] = $9;
 $11 = $4;
 $12 = ((($5)) + 24|0);
 HEAPF64[$12>>3] = $11;
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data8Vector2dC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 HEAPF64[$1>>3] = 0.0;
 $2 = ((($1)) + 8|0);
 HEAPF64[$2>>3] = 0.0;
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data8Vector3dC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 HEAPF64[$1>>3] = 0.0;
 $2 = ((($1)) + 8|0);
 HEAPF64[$2>>3] = 0.0;
 $3 = ((($1)) + 16|0);
 HEAPF64[$3>>3] = 0.0;
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data8Vector4dC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 HEAPF64[$1>>3] = 0.0;
 $2 = ((($1)) + 8|0);
 HEAPF64[$2>>3] = 0.0;
 $3 = ((($1)) + 16|0);
 HEAPF64[$3>>3] = 0.0;
 STACKTOP = sp;return;
}
function __ZN10emscripten5enum_IN4NGIS4Data6Schema15ESchemaNodeTypeEEC2EPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $name;
 $2 = (__ZN10emscripten8internal6TypeIDIN4NGIS4Data6Schema15ESchemaNodeTypeEE3getEv()|0);
 $3 = $1;
 __embind_register_enum(($2|0),($3|0),4,0);
 STACKTOP = sp;return;
}
function __ZN10emscripten5enum_IN4NGIS4Data6Schema15ESchemaNodeTypeEE5valueEPKcS4_($this,$name,$value) {
 $this = $this|0;
 $name = $name|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $name;
 $2 = $value;
 $3 = $0;
 $4 = (__ZN10emscripten8internal6TypeIDIN4NGIS4Data6Schema15ESchemaNodeTypeEE3getEv()|0);
 $5 = $1;
 $6 = $2;
 __embind_register_enum_value(($4|0),($5|0),($6|0));
 STACKTOP = sp;return ($3|0);
}
function __ZN10emscripten5enum_IN4NGIS4Data11EKernelTypeEEC2EPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $name;
 $2 = (__ZN10emscripten8internal6TypeIDIN4NGIS4Data11EKernelTypeEE3getEv()|0);
 $3 = $1;
 __embind_register_enum(($2|0),($3|0),4,0);
 STACKTOP = sp;return;
}
function __ZN10emscripten5enum_IN4NGIS4Data11EKernelTypeEE5valueEPKcS3_($this,$name,$value) {
 $this = $this|0;
 $name = $name|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $name;
 $2 = $value;
 $3 = $0;
 $4 = (__ZN10emscripten8internal6TypeIDIN4NGIS4Data11EKernelTypeEE3getEv()|0);
 $5 = $1;
 $6 = $2;
 __embind_register_enum_value(($4|0),($5|0),($6|0));
 STACKTOP = sp;return ($3|0);
}
function __ZN10emscripten11value_arrayIN4NGIS4Data8Vector2dEEC2EPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $constructor = 0, $destructor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $this;
 $3 = $name;
 $6 = $2;
 __ZN10emscripten8internal11noncopyableC2Ev($6);
 $constructor = 488;
 $destructor = 489;
 __THREW__ = 0;
 $7 = (invoke_i(490)|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  $10 = $3;
  $11 = $constructor;
  $1 = $11;
  $12 = (__ZN10emscripten8internal19getGenericSignatureIJiEEEPKcv()|0);
  $13 = $constructor;
  $14 = $destructor;
  $0 = $14;
  $15 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
  $16 = $destructor;
  __THREW__ = 0;
  invoke_viiiiii(491,($7|0),($10|0),($12|0),($13|0),($15|0),($16|0));
  $17 = __THREW__; __THREW__ = 0;
  $18 = $17&1;
  if (!($18)) {
   STACKTOP = sp;return;
  }
 }
 $19 = ___cxa_find_matching_catch()|0;
 $20 = tempRet0;
 $4 = $19;
 $5 = $20;
 __ZN10emscripten8internal11noncopyableD2Ev($6);
 $21 = $4;
 $22 = $5;
 ___resumeException($21|0);
 // unreachable;
}
function __ZN10emscripten11value_arrayIN4NGIS4Data8Vector2dEE7elementIS3_dEERS4_MT_T0_($this,$field) {
 $this = $this|0;
 $field = $field|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $getter = 0, $setter = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 8|0;
 $2 = $this;
 HEAP32[$3>>2] = $field;
 $4 = $2;
 $getter = 492;
 $setter = 493;
 $5 = (__ZN10emscripten8internal6TypeIDIN4NGIS4Data8Vector2dEE3getEv()|0);
 $6 = (__ZN10emscripten8internal6TypeIDIdE3getEv()|0);
 $7 = $getter;
 $1 = $7;
 $8 = (__ZN10emscripten8internal19getGenericSignatureIJdiiEEEPKcv()|0);
 $9 = $getter;
 $10 = (__ZN10emscripten8internal10getContextIMN4NGIS4Data8Vector2dEdEEPT_RKS6_($3)|0);
 $11 = (__ZN10emscripten8internal6TypeIDIdE3getEv()|0);
 $12 = $setter;
 $0 = $12;
 $13 = (__ZN10emscripten8internal19getGenericSignatureIJviidEEEPKcv()|0);
 $14 = $setter;
 $15 = (__ZN10emscripten8internal10getContextIMN4NGIS4Data8Vector2dEdEEPT_RKS6_($3)|0);
 __embind_register_value_array_element(($5|0),($6|0),($8|0),($9|0),($10|0),($11|0),($13|0),($14|0),($15|0));
 STACKTOP = sp;return ($4|0);
}
function __ZN10emscripten11value_arrayIN4NGIS4Data8Vector2dEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 $4 = (invoke_i(490)|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __THREW__ = 0;
  invoke_vi(494,($4|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   __ZN10emscripten8internal11noncopyableD2Ev($3);
   STACKTOP = sp;return;
  }
 }
 $9 = ___cxa_find_matching_catch(0|0)|0;
 $10 = tempRet0;
 $1 = $9;
 $2 = $10;
 __ZN10emscripten8internal11noncopyableD2Ev($3);
 $11 = $1;
 ___clang_call_terminate($11);
 // unreachable;
}
function __ZN10emscripten11value_arrayIN4NGIS4Data8Vector3dEEC2EPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $constructor = 0, $destructor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $this;
 $3 = $name;
 $6 = $2;
 __ZN10emscripten8internal11noncopyableC2Ev($6);
 $constructor = 495;
 $destructor = 496;
 __THREW__ = 0;
 $7 = (invoke_i(497)|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  $10 = $3;
  $11 = $constructor;
  $1 = $11;
  $12 = (__ZN10emscripten8internal19getGenericSignatureIJiEEEPKcv()|0);
  $13 = $constructor;
  $14 = $destructor;
  $0 = $14;
  $15 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
  $16 = $destructor;
  __THREW__ = 0;
  invoke_viiiiii(491,($7|0),($10|0),($12|0),($13|0),($15|0),($16|0));
  $17 = __THREW__; __THREW__ = 0;
  $18 = $17&1;
  if (!($18)) {
   STACKTOP = sp;return;
  }
 }
 $19 = ___cxa_find_matching_catch()|0;
 $20 = tempRet0;
 $4 = $19;
 $5 = $20;
 __ZN10emscripten8internal11noncopyableD2Ev($6);
 $21 = $4;
 $22 = $5;
 ___resumeException($21|0);
 // unreachable;
}
function __ZN10emscripten11value_arrayIN4NGIS4Data8Vector3dEE7elementIS3_dEERS4_MT_T0_($this,$field) {
 $this = $this|0;
 $field = $field|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $getter = 0, $setter = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 8|0;
 $2 = $this;
 HEAP32[$3>>2] = $field;
 $4 = $2;
 $getter = 498;
 $setter = 499;
 $5 = (__ZN10emscripten8internal6TypeIDIN4NGIS4Data8Vector3dEE3getEv()|0);
 $6 = (__ZN10emscripten8internal6TypeIDIdE3getEv()|0);
 $7 = $getter;
 $1 = $7;
 $8 = (__ZN10emscripten8internal19getGenericSignatureIJdiiEEEPKcv()|0);
 $9 = $getter;
 $10 = (__ZN10emscripten8internal10getContextIMN4NGIS4Data8Vector3dEdEEPT_RKS6_($3)|0);
 $11 = (__ZN10emscripten8internal6TypeIDIdE3getEv()|0);
 $12 = $setter;
 $0 = $12;
 $13 = (__ZN10emscripten8internal19getGenericSignatureIJviidEEEPKcv()|0);
 $14 = $setter;
 $15 = (__ZN10emscripten8internal10getContextIMN4NGIS4Data8Vector3dEdEEPT_RKS6_($3)|0);
 __embind_register_value_array_element(($5|0),($6|0),($8|0),($9|0),($10|0),($11|0),($13|0),($14|0),($15|0));
 STACKTOP = sp;return ($4|0);
}
function __ZN10emscripten11value_arrayIN4NGIS4Data8Vector3dEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 $4 = (invoke_i(497)|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __THREW__ = 0;
  invoke_vi(494,($4|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   __ZN10emscripten8internal11noncopyableD2Ev($3);
   STACKTOP = sp;return;
  }
 }
 $9 = ___cxa_find_matching_catch(0|0)|0;
 $10 = tempRet0;
 $1 = $9;
 $2 = $10;
 __ZN10emscripten8internal11noncopyableD2Ev($3);
 $11 = $1;
 ___clang_call_terminate($11);
 // unreachable;
}
function __ZN10emscripten11value_arrayIN4NGIS4Data8Vector4dEEC2EPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $constructor = 0, $destructor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $this;
 $3 = $name;
 $6 = $2;
 __ZN10emscripten8internal11noncopyableC2Ev($6);
 $constructor = 500;
 $destructor = 501;
 __THREW__ = 0;
 $7 = (invoke_i(502)|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  $10 = $3;
  $11 = $constructor;
  $1 = $11;
  $12 = (__ZN10emscripten8internal19getGenericSignatureIJiEEEPKcv()|0);
  $13 = $constructor;
  $14 = $destructor;
  $0 = $14;
  $15 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
  $16 = $destructor;
  __THREW__ = 0;
  invoke_viiiiii(491,($7|0),($10|0),($12|0),($13|0),($15|0),($16|0));
  $17 = __THREW__; __THREW__ = 0;
  $18 = $17&1;
  if (!($18)) {
   STACKTOP = sp;return;
  }
 }
 $19 = ___cxa_find_matching_catch()|0;
 $20 = tempRet0;
 $4 = $19;
 $5 = $20;
 __ZN10emscripten8internal11noncopyableD2Ev($6);
 $21 = $4;
 $22 = $5;
 ___resumeException($21|0);
 // unreachable;
}
function __ZN10emscripten11value_arrayIN4NGIS4Data8Vector4dEE7elementIS3_dEERS4_MT_T0_($this,$field) {
 $this = $this|0;
 $field = $field|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $getter = 0, $setter = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 8|0;
 $2 = $this;
 HEAP32[$3>>2] = $field;
 $4 = $2;
 $getter = 503;
 $setter = 504;
 $5 = (__ZN10emscripten8internal6TypeIDIN4NGIS4Data8Vector4dEE3getEv()|0);
 $6 = (__ZN10emscripten8internal6TypeIDIdE3getEv()|0);
 $7 = $getter;
 $1 = $7;
 $8 = (__ZN10emscripten8internal19getGenericSignatureIJdiiEEEPKcv()|0);
 $9 = $getter;
 $10 = (__ZN10emscripten8internal10getContextIMN4NGIS4Data8Vector4dEdEEPT_RKS6_($3)|0);
 $11 = (__ZN10emscripten8internal6TypeIDIdE3getEv()|0);
 $12 = $setter;
 $0 = $12;
 $13 = (__ZN10emscripten8internal19getGenericSignatureIJviidEEEPKcv()|0);
 $14 = $setter;
 $15 = (__ZN10emscripten8internal10getContextIMN4NGIS4Data8Vector4dEdEEPT_RKS6_($3)|0);
 __embind_register_value_array_element(($5|0),($6|0),($8|0),($9|0),($10|0),($11|0),($13|0),($14|0),($15|0));
 STACKTOP = sp;return ($4|0);
}
function __ZN10emscripten11value_arrayIN4NGIS4Data8Vector4dEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 $4 = (invoke_i(502)|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __THREW__ = 0;
  invoke_vi(494,($4|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   __ZN10emscripten8internal11noncopyableD2Ev($3);
   STACKTOP = sp;return;
  }
 }
 $9 = ___cxa_find_matching_catch(0|0)|0;
 $10 = tempRet0;
 $1 = $9;
 $2 = $10;
 __ZN10emscripten8internal11noncopyableD2Ev($3);
 $11 = $1;
 ___clang_call_terminate($11);
 // unreachable;
}
function __ZN10emscripten8functionIfJEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 505;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJfEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJfEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJfiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionINSt3__112basic_stringIwNS1_11char_traitsIwEENS1_9allocatorIwEEEEJEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 506;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIiJEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 507;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIiJN4NGIS4Data6Schema15ESchemaNodeTypeENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 508;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiN4NGIS4Data6Schema15ESchemaNodeTypeENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiN4NGIS4Data6Schema15ESchemaNodeTypeENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 509;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIiJiNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN4NGIS4Data6Schema15ESchemaNodeTypeENS2_IwNS3_IwEENS5_IwEEEEEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 510;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEN4NGIS4Data6Schema15ESchemaNodeTypeENS5_IwNS6_IwEENS8_IwEEEEEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEN4NGIS4Data6Schema15ESchemaNodeTypeENS5_IwNS6_IwEENS8_IwEEEEEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiiiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIiJiiEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 511;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiiEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiiEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIN4NGIS4Data6Schema15ESchemaNodeTypeEJiEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 512;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4NGIS4Data6Schema15ESchemaNodeTypeEiEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4NGIS4Data6Schema15ESchemaNodeTypeEiEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJN4NGIS4Data6Schema15ESchemaNodeTypeEEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 513;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEN4NGIS4Data6Schema15ESchemaNodeTypeEEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEN4NGIS4Data6Schema15ESchemaNodeTypeEEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJiEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 514;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEiEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEiEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionINSt3__112basic_stringIwNS1_11char_traitsIwEENS1_9allocatorIwEEEEJiEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 515;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEiEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEiEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIbJiNSt3__112basic_stringIwNS1_11char_traitsIwEENS1_9allocatorIwEEEEEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 516;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIbJiNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 517;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJiNS2_IwNS3_IwEENS5_IwEEEEEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 518;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEiNS5_IwNS6_IwEENS8_IwEEEEEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEiNS5_IwNS6_IwEENS8_IwEEEEEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIN4NGIS4Data11EKernelTypeEJiEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 519;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4NGIS4Data11EKernelTypeEiEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4NGIS4Data11EKernelTypeEiEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJN4NGIS4Data11EKernelTypeEEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 520;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEN4NGIS4Data11EKernelTypeEEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEN4NGIS4Data11EKernelTypeEEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIN4NGIS4Data11EKernelTypeEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 521;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4NGIS4Data11EKernelTypeENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4NGIS4Data11EKernelTypeENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIiJiNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN4NGIS4Data11EKernelTypeEEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 522;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEN4NGIS4Data11EKernelTypeEEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEN4NGIS4Data11EKernelTypeEEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIbJiiEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 523;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiiEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiiEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIbJidEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 524;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbidEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbidEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiidEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIbJiddEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 525;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiddEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiddEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiiddEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIbJidddEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 526;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbidddEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbidddEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiidddEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIbJiddddEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 527;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiddddEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiddddEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiiddddEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIbJiiiEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 528;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiiiEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiiiEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIbJidiEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 529;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbidiEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbidiEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiidiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIbJiNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEiEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 530;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEiEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEiEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIbJiddiEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 531;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiddiEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiddiEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiiddiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIbJidddiEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 532;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbidddiEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbidddiEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiidddiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIbJiddddiEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 533;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiddddiEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiddddiEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiiddddiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIdJiEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 534;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdiEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdiEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJdiiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIN4NGIS4Data8Vector2dEJiEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 535;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4NGIS4Data8Vector2dEiEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4NGIS4Data8Vector2dEiEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIN4NGIS4Data8Vector3dEJiEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 536;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4NGIS4Data8Vector3dEiEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4NGIS4Data8Vector3dEiEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIN4NGIS4Data8Vector4dEJiEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 537;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4NGIS4Data8Vector4dEiEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4NGIS4Data8Vector4dEiEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIdJiiEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 538;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdiiEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdiiEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJdiiiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJiiEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 539;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEiiEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEiiEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIN4NGIS4Data8Vector2dEJiiEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 540;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4NGIS4Data8Vector2dEiiEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4NGIS4Data8Vector2dEiiEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIN4NGIS4Data8Vector3dEJiiEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 541;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4NGIS4Data8Vector3dEiiEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4NGIS4Data8Vector3dEiiEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIN4NGIS4Data8Vector4dEJiiEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 542;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4NGIS4Data8Vector4dEiiEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4NGIS4Data8Vector4dEiiEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIbJiEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 543;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __GLOBAL__sub_I_UdxDatasetSchema_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init();
 return;
}
function ___cxx_global_var_init() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN39EmscriptenBindingInitializer_udx_moduleC2Ev(9909);
 return;
}
function __ZN10emscripten8internal7InvokerIbJiEE6invokeEPFbiEi($fn,$args) {
 $fn = $fn|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fn;
 $1 = $args;
 $2 = $0;
 $3 = $1;
 $4 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($3)|0);
 $5 = (FUNCTION_TABLE_ii[$2 & 1023]($4)|0);
 $6 = (__ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($5)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbiEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (9910|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2620|0);
}
function __ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($b) {
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $b&1;
 $0 = $1;
 $2 = $0;
 $3 = $2&1;
 STACKTOP = sp;return ($3|0);
}
function __ZN10emscripten8internal7InvokerIN4NGIS4Data8Vector4dEJiiEE6invokeEPFS4_iiEii($fn,$args,$args1) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $0 = $fn;
 $1 = $args;
 $2 = $args1;
 $4 = $0;
 $5 = $1;
 $6 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($5)|0);
 $7 = $2;
 $8 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($7)|0);
 FUNCTION_TABLE_viii[$4 & 1023]($3,$6,$8);
 $9 = (__ZN10emscripten8internal18GenericBindingTypeIN4NGIS4Data8Vector4dEE10toWireTypeEOS4_($3)|0);
 STACKTOP = sp;return ($9|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4NGIS4Data8Vector4dEiiEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4NGIS4Data8Vector4dEiiEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJN4NGIS4Data8Vector4dEiiEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (9914|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJN4NGIS4Data8Vector4dEiiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2628|0);
}
function __ZN10emscripten8internal18GenericBindingTypeIN4NGIS4Data8Vector4dEE10toWireTypeEOS4_($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $v;
 $2 = (__Znwj(32)|0);
 $3 = $1;
 $0 = $3;
 $4 = $0;
 ;HEAP32[$2>>2]=HEAP32[$4>>2]|0;HEAP32[$2+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$2+12>>2]=HEAP32[$4+12>>2]|0;HEAP32[$2+16>>2]=HEAP32[$4+16>>2]|0;HEAP32[$2+20>>2]=HEAP32[$4+20>>2]|0;HEAP32[$2+24>>2]=HEAP32[$4+24>>2]|0;HEAP32[$2+28>>2]=HEAP32[$4+28>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal7InvokerIN4NGIS4Data8Vector3dEJiiEE6invokeEPFS4_iiEii($fn,$args,$args1) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $0 = $fn;
 $1 = $args;
 $2 = $args1;
 $4 = $0;
 $5 = $1;
 $6 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($5)|0);
 $7 = $2;
 $8 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($7)|0);
 FUNCTION_TABLE_viii[$4 & 1023]($3,$6,$8);
 $9 = (__ZN10emscripten8internal18GenericBindingTypeIN4NGIS4Data8Vector3dEE10toWireTypeEOS4_($3)|0);
 STACKTOP = sp;return ($9|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4NGIS4Data8Vector3dEiiEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4NGIS4Data8Vector3dEiiEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJN4NGIS4Data8Vector3dEiiEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJN4NGIS4Data8Vector3dEiiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2640|0);
}
function __ZN10emscripten8internal18GenericBindingTypeIN4NGIS4Data8Vector3dEE10toWireTypeEOS4_($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $v;
 $2 = (__Znwj(24)|0);
 $3 = $1;
 $0 = $3;
 $4 = $0;
 ;HEAP32[$2>>2]=HEAP32[$4>>2]|0;HEAP32[$2+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$2+12>>2]=HEAP32[$4+12>>2]|0;HEAP32[$2+16>>2]=HEAP32[$4+16>>2]|0;HEAP32[$2+20>>2]=HEAP32[$4+20>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal7InvokerIN4NGIS4Data8Vector2dEJiiEE6invokeEPFS4_iiEii($fn,$args,$args1) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $0 = $fn;
 $1 = $args;
 $2 = $args1;
 $4 = $0;
 $5 = $1;
 $6 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($5)|0);
 $7 = $2;
 $8 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($7)|0);
 FUNCTION_TABLE_viii[$4 & 1023]($3,$6,$8);
 $9 = (__ZN10emscripten8internal18GenericBindingTypeIN4NGIS4Data8Vector2dEE10toWireTypeEOS4_($3)|0);
 STACKTOP = sp;return ($9|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4NGIS4Data8Vector2dEiiEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4NGIS4Data8Vector2dEiiEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJN4NGIS4Data8Vector2dEiiEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJN4NGIS4Data8Vector2dEiiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2652|0);
}
function __ZN10emscripten8internal18GenericBindingTypeIN4NGIS4Data8Vector2dEE10toWireTypeEOS4_($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $v;
 $2 = (__Znwj(16)|0);
 $3 = $1;
 $0 = $3;
 $4 = $0;
 ;HEAP32[$2>>2]=HEAP32[$4>>2]|0;HEAP32[$2+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$2+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal7InvokerINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJiiEE6invokeEPFS8_iiEii($fn,$args,$args1) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 8|0;
 $0 = $fn;
 $1 = $args;
 $2 = $args1;
 $6 = $0;
 $7 = $1;
 $8 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($7)|0);
 $9 = $2;
 $10 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($9)|0);
 FUNCTION_TABLE_viii[$6 & 1023]($3,$8,$10);
 __THREW__ = 0;
 $11 = (invoke_ii(544,($3|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $14 = ___cxa_find_matching_catch()|0;
  $15 = tempRet0;
  $4 = $14;
  $5 = $15;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
  $16 = $4;
  $17 = $5;
  ___resumeException($16|0);
  // unreachable;
 } else {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEiiEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEiiEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEiiEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEiiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2664|0);
}
function __ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE10toWireTypeERKS8_($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $wt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $47 = $v;
 $48 = $47;
 $46 = $48;
 $49 = $46;
 $45 = $49;
 $50 = $45;
 $44 = $50;
 $51 = $44;
 $43 = $51;
 $52 = $43;
 $42 = $52;
 $53 = $42;
 $54 = HEAP8[$53>>0]|0;
 $55 = $54&255;
 $56 = $55 & 1;
 $57 = ($56|0)!=(0);
 if ($57) {
  $38 = $50;
  $58 = $38;
  $37 = $58;
  $59 = $37;
  $36 = $59;
  $60 = $36;
  $61 = ((($60)) + 4|0);
  $62 = HEAP32[$61>>2]|0;
  $70 = $62;
 } else {
  $41 = $50;
  $63 = $41;
  $40 = $63;
  $64 = $40;
  $39 = $64;
  $65 = $39;
  $66 = HEAP8[$65>>0]|0;
  $67 = $66&255;
  $68 = $67 >> 1;
  $70 = $68;
 }
 $69 = (4 + ($70))|0;
 $71 = (_malloc($69)|0);
 $wt = $71;
 $72 = $47;
 $10 = $72;
 $73 = $10;
 $9 = $73;
 $74 = $9;
 $8 = $74;
 $75 = $8;
 $7 = $75;
 $76 = $7;
 $6 = $76;
 $77 = $6;
 $78 = HEAP8[$77>>0]|0;
 $79 = $78&255;
 $80 = $79 & 1;
 $81 = ($80|0)!=(0);
 if ($81) {
  $2 = $74;
  $82 = $2;
  $1 = $82;
  $83 = $1;
  $0 = $83;
  $84 = $0;
  $85 = ((($84)) + 4|0);
  $86 = HEAP32[$85>>2]|0;
  $94 = $86;
 } else {
  $5 = $74;
  $87 = $5;
  $4 = $87;
  $88 = $4;
  $3 = $88;
  $89 = $3;
  $90 = HEAP8[$89>>0]|0;
  $91 = $90&255;
  $92 = $91 >> 1;
  $94 = $92;
 }
 $93 = $wt;
 HEAP32[$93>>2] = $94;
 $95 = $wt;
 $96 = ((($95)) + 4|0);
 $97 = $47;
 $24 = $97;
 $98 = $24;
 $23 = $98;
 $99 = $23;
 $22 = $99;
 $100 = $22;
 $21 = $100;
 $101 = $21;
 $20 = $101;
 $102 = $20;
 $103 = HEAP8[$102>>0]|0;
 $104 = $103&255;
 $105 = $104 & 1;
 $106 = ($105|0)!=(0);
 if ($106) {
  $14 = $99;
  $107 = $14;
  $13 = $107;
  $108 = $13;
  $12 = $108;
  $109 = $12;
  $110 = ((($109)) + 8|0);
  $111 = HEAP32[$110>>2]|0;
  $118 = $111;
 } else {
  $19 = $99;
  $112 = $19;
  $18 = $112;
  $113 = $18;
  $17 = $113;
  $114 = $17;
  $115 = ((($114)) + 1|0);
  $16 = $115;
  $116 = $16;
  $15 = $116;
  $117 = $15;
  $118 = $117;
 }
 $11 = $118;
 $119 = $11;
 $120 = $47;
 $35 = $120;
 $121 = $35;
 $34 = $121;
 $122 = $34;
 $33 = $122;
 $123 = $33;
 $32 = $123;
 $124 = $32;
 $31 = $124;
 $125 = $31;
 $126 = HEAP8[$125>>0]|0;
 $127 = $126&255;
 $128 = $127 & 1;
 $129 = ($128|0)!=(0);
 if ($129) {
  $27 = $122;
  $130 = $27;
  $26 = $130;
  $131 = $26;
  $25 = $131;
  $132 = $25;
  $133 = ((($132)) + 4|0);
  $134 = HEAP32[$133>>2]|0;
  $141 = $134;
  _memcpy(($96|0),($119|0),($141|0))|0;
  $142 = $wt;
  STACKTOP = sp;return ($142|0);
 } else {
  $30 = $122;
  $135 = $30;
  $29 = $135;
  $136 = $29;
  $28 = $136;
  $137 = $28;
  $138 = HEAP8[$137>>0]|0;
  $139 = $138&255;
  $140 = $139 >> 1;
  $141 = $140;
  _memcpy(($96|0),($119|0),($141|0))|0;
  $142 = $wt;
  STACKTOP = sp;return ($142|0);
 }
 return (0)|0;
}
function __ZN10emscripten8internal7InvokerIdJiiEE6invokeEPFdiiEii($fn,$args,$args1) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $0 = $fn;
 $1 = $args;
 $2 = $args1;
 $4 = $0;
 $5 = $1;
 $6 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($5)|0);
 $7 = $2;
 $8 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($7)|0);
 $9 = (+FUNCTION_TABLE_dii[$4 & 1023]($6,$8));
 HEAPF64[$3>>3] = $9;
 $10 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($3));
 STACKTOP = sp;return (+$10);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdiiEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdiiEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdiiEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJdiiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (10086|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdiiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2676|0);
}
function __ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $1 = $0;
 $2 = +HEAPF64[$1>>3];
 STACKTOP = sp;return (+$2);
}
function __ZN10emscripten8internal7InvokerIN4NGIS4Data8Vector4dEJiEE6invokeEPFS4_iEi($fn,$args) {
 $fn = $fn|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $0 = $fn;
 $1 = $args;
 $3 = $0;
 $4 = $1;
 $5 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($4)|0);
 FUNCTION_TABLE_vii[$3 & 1023]($2,$5);
 $6 = (__ZN10emscripten8internal18GenericBindingTypeIN4NGIS4Data8Vector4dEE10toWireTypeEOS4_($2)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4NGIS4Data8Vector4dEiEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4NGIS4Data8Vector4dEiEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJN4NGIS4Data8Vector4dEiEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJN4NGIS4Data8Vector4dEiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2688|0);
}
function __ZN10emscripten8internal7InvokerIN4NGIS4Data8Vector3dEJiEE6invokeEPFS4_iEi($fn,$args) {
 $fn = $fn|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $0 = $fn;
 $1 = $args;
 $3 = $0;
 $4 = $1;
 $5 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($4)|0);
 FUNCTION_TABLE_vii[$3 & 1023]($2,$5);
 $6 = (__ZN10emscripten8internal18GenericBindingTypeIN4NGIS4Data8Vector3dEE10toWireTypeEOS4_($2)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4NGIS4Data8Vector3dEiEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4NGIS4Data8Vector3dEiEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJN4NGIS4Data8Vector3dEiEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJN4NGIS4Data8Vector3dEiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2696|0);
}
function __ZN10emscripten8internal7InvokerIN4NGIS4Data8Vector2dEJiEE6invokeEPFS4_iEi($fn,$args) {
 $fn = $fn|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $0 = $fn;
 $1 = $args;
 $3 = $0;
 $4 = $1;
 $5 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($4)|0);
 FUNCTION_TABLE_vii[$3 & 1023]($2,$5);
 $6 = (__ZN10emscripten8internal18GenericBindingTypeIN4NGIS4Data8Vector2dEE10toWireTypeEOS4_($2)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4NGIS4Data8Vector2dEiEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4NGIS4Data8Vector2dEiEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJN4NGIS4Data8Vector2dEiEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJN4NGIS4Data8Vector2dEiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2704|0);
}
function __ZN10emscripten8internal7InvokerIdJiEE6invokeEPFdiEi($fn,$args) {
 $fn = $fn|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $0 = $fn;
 $1 = $args;
 $3 = $0;
 $4 = $1;
 $5 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($4)|0);
 $6 = (+FUNCTION_TABLE_di[$3 & 1023]($5));
 HEAPF64[$2>>3] = $6;
 $7 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($2));
 STACKTOP = sp;return (+$7);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdiEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdiEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdiEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJdiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (10091|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2712|0);
}
function __ZN10emscripten8internal7InvokerIbJiddddiEE6invokeEPFbiddddiEiddddi($fn,$args,$args1,$args2,$args3,$args4,$args5) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = +$args1;
 $args2 = +$args2;
 $args3 = +$args3;
 $args4 = +$args4;
 $args5 = $args5|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fn;
 $1 = $args;
 $2 = $args1;
 $3 = $args2;
 $4 = $args3;
 $5 = $args4;
 $6 = $args5;
 $7 = $0;
 $8 = $1;
 $9 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($8)|0);
 $10 = $2;
 $11 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($10));
 $12 = $3;
 $13 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($12));
 $14 = $4;
 $15 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($14));
 $16 = $5;
 $17 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($16));
 $18 = $6;
 $19 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($18)|0);
 $20 = (FUNCTION_TABLE_iiddddi[$7 & 511]($9,$11,$13,$15,$17,$19)|0);
 $21 = (__ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($20)|0);
 STACKTOP = sp;return ($21|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiddddiEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 7;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiddddiEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbiddddiEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiiddddiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (10095|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbiddddiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2720|0);
}
function __ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($v) {
 $v = +$v;
 var $0 = 0.0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $1 = $0;
 STACKTOP = sp;return (+$1);
}
function __ZN10emscripten8internal7InvokerIbJidddiEE6invokeEPFbidddiEidddi($fn,$args,$args1,$args2,$args3,$args4) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = +$args1;
 $args2 = +$args2;
 $args3 = +$args3;
 $args4 = $args4|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fn;
 $1 = $args;
 $2 = $args1;
 $3 = $args2;
 $4 = $args3;
 $5 = $args4;
 $6 = $0;
 $7 = $1;
 $8 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($7)|0);
 $9 = $2;
 $10 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($9));
 $11 = $3;
 $12 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($11));
 $13 = $4;
 $14 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($13));
 $15 = $5;
 $16 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($15)|0);
 $17 = (FUNCTION_TABLE_iidddi[$6 & 511]($8,$10,$12,$14,$16)|0);
 $18 = (__ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($17)|0);
 STACKTOP = sp;return ($18|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbidddiEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 6;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbidddiEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbidddiEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiidddiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (10104|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbidddiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2748|0);
}
function __ZN10emscripten8internal7InvokerIbJiddiEE6invokeEPFbiddiEiddi($fn,$args,$args1,$args2,$args3) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = +$args1;
 $args2 = +$args2;
 $args3 = $args3|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fn;
 $1 = $args;
 $2 = $args1;
 $3 = $args2;
 $4 = $args3;
 $5 = $0;
 $6 = $1;
 $7 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($6)|0);
 $8 = $2;
 $9 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($8));
 $10 = $3;
 $11 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($10));
 $12 = $4;
 $13 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($12)|0);
 $14 = (FUNCTION_TABLE_iiddi[$5 & 511]($7,$9,$11,$13)|0);
 $15 = (__ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($14)|0);
 STACKTOP = sp;return ($15|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiddiEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 5;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiddiEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbiddiEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiiddiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (10112|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbiddiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2772|0);
}
function __ZN10emscripten8internal7InvokerIbJiNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEiEE6invokeEPFbiS8_iEiPNS0_11BindingTypeIS8_EUt_Ei($fn,$args,$args1,$args2) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args2 = $args2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 8|0;
 $0 = $fn;
 $1 = $args;
 $2 = $args1;
 $3 = $args2;
 $7 = $0;
 $8 = $1;
 $9 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($8)|0);
 $10 = $2;
 __ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($4,$10);
 $11 = $3;
 __THREW__ = 0;
 $12 = (invoke_ii(545,($11|0))|0);
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if (!($14)) {
  __THREW__ = 0;
  $15 = (invoke_iiii($7|0,($9|0),($4|0),($12|0))|0);
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if (!($17)) {
   __THREW__ = 0;
   $18 = (invoke_ii(546,($15|0))|0);
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if (!($20)) {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
    STACKTOP = sp;return ($18|0);
   }
  }
 }
 $21 = ___cxa_find_matching_catch()|0;
 $22 = tempRet0;
 $5 = $21;
 $6 = $22;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
 $23 = $5;
 $24 = $6;
 ___resumeException($23|0);
 // unreachable;
 return (0)|0;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEiEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEiEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbiNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEiEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiiiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (10119|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbiNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2792|0);
}
function __ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($agg$result,$v) {
 $agg$result = $agg$result|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = $v;
 $7 = $6;
 $8 = ((($7)) + 4|0);
 $9 = $6;
 $10 = HEAP32[$9>>2]|0;
 $3 = $agg$result;
 $4 = $8;
 $5 = $10;
 $11 = $3;
 $2 = $11;
 $12 = $2;
 $1 = $12;
 $13 = $1;
 $0 = $13;
 $14 = $4;
 $15 = $5;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($11,$14,$15);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal7InvokerIbJidiEE6invokeEPFbidiEidi($fn,$args,$args1,$args2) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = +$args1;
 $args2 = $args2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fn;
 $1 = $args;
 $2 = $args1;
 $3 = $args2;
 $4 = $0;
 $5 = $1;
 $6 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($5)|0);
 $7 = $2;
 $8 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($7));
 $9 = $3;
 $10 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($9)|0);
 $11 = (FUNCTION_TABLE_iidi[$4 & 511]($6,$8,$10)|0);
 $12 = (__ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($11)|0);
 STACKTOP = sp;return ($12|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbidiEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbidiEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbidiEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiidiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (10125|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbidiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2808|0);
}
function __ZN10emscripten8internal7InvokerIbJiiiEE6invokeEPFbiiiEiii($fn,$args,$args1,$args2) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args2 = $args2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fn;
 $1 = $args;
 $2 = $args1;
 $3 = $args2;
 $4 = $0;
 $5 = $1;
 $6 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($5)|0);
 $7 = $2;
 $8 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($7)|0);
 $9 = $3;
 $10 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($9)|0);
 $11 = (FUNCTION_TABLE_iiii[$4 & 1023]($6,$8,$10)|0);
 $12 = (__ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($11)|0);
 STACKTOP = sp;return ($12|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiiiEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiiiEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbiiiEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbiiiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2824|0);
}
function __ZN10emscripten8internal7InvokerIbJiddddEE6invokeEPFbiddddEidddd($fn,$args,$args1,$args2,$args3,$args4) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = +$args1;
 $args2 = +$args2;
 $args3 = +$args3;
 $args4 = +$args4;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fn;
 $1 = $args;
 $2 = $args1;
 $3 = $args2;
 $4 = $args3;
 $5 = $args4;
 $6 = $0;
 $7 = $1;
 $8 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($7)|0);
 $9 = $2;
 $10 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($9));
 $11 = $3;
 $12 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($11));
 $13 = $4;
 $14 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($13));
 $15 = $5;
 $16 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($15));
 $17 = (FUNCTION_TABLE_iidddd[$6 & 511]($8,$10,$12,$14,$16)|0);
 $18 = (__ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($17)|0);
 STACKTOP = sp;return ($18|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiddddEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 6;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiddddEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbiddddEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiiddddEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (10131|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbiddddEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2840|0);
}
function __ZN10emscripten8internal7InvokerIbJidddEE6invokeEPFbidddEiddd($fn,$args,$args1,$args2,$args3) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = +$args1;
 $args2 = +$args2;
 $args3 = +$args3;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fn;
 $1 = $args;
 $2 = $args1;
 $3 = $args2;
 $4 = $args3;
 $5 = $0;
 $6 = $1;
 $7 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($6)|0);
 $8 = $2;
 $9 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($8));
 $10 = $3;
 $11 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($10));
 $12 = $4;
 $13 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($12));
 $14 = (FUNCTION_TABLE_iiddd[$5 & 511]($7,$9,$11,$13)|0);
 $15 = (__ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($14)|0);
 STACKTOP = sp;return ($15|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbidddEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 5;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbidddEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbidddEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiidddEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (10139|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbidddEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2864|0);
}
function __ZN10emscripten8internal7InvokerIbJiddEE6invokeEPFbiddEidd($fn,$args,$args1,$args2) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = +$args1;
 $args2 = +$args2;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fn;
 $1 = $args;
 $2 = $args1;
 $3 = $args2;
 $4 = $0;
 $5 = $1;
 $6 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($5)|0);
 $7 = $2;
 $8 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($7));
 $9 = $3;
 $10 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($9));
 $11 = (FUNCTION_TABLE_iidd[$4 & 511]($6,$8,$10)|0);
 $12 = (__ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($11)|0);
 STACKTOP = sp;return ($12|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiddEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiddEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbiddEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiiddEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (10146|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbiddEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2884|0);
}
function __ZN10emscripten8internal7InvokerIbJidEE6invokeEPFbidEid($fn,$args,$args1) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = +$args1;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fn;
 $1 = $args;
 $2 = $args1;
 $3 = $0;
 $4 = $1;
 $5 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($4)|0);
 $6 = $2;
 $7 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($6));
 $8 = (FUNCTION_TABLE_iid[$3 & 511]($5,$7)|0);
 $9 = (__ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($8)|0);
 STACKTOP = sp;return ($9|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbidEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbidEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbidEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiidEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (10152|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbidEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2900|0);
}
function __ZN10emscripten8internal7InvokerIbJiiEE6invokeEPFbiiEii($fn,$args,$args1) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fn;
 $1 = $args;
 $2 = $args1;
 $3 = $0;
 $4 = $1;
 $5 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($4)|0);
 $6 = $2;
 $7 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($6)|0);
 $8 = (FUNCTION_TABLE_iii[$3 & 1023]($5,$7)|0);
 $9 = (__ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($8)|0);
 STACKTOP = sp;return ($9|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiiEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiiEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbiiEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbiiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2912|0);
}
function __ZN10emscripten8internal7InvokerIiJiNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN4NGIS4Data11EKernelTypeEEE6invokeEPFiiS8_SB_EiPNS0_11BindingTypeIS8_EUt_ESB_($fn,$args,$args1,$args2) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args2 = $args2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 20|0;
 $5 = sp + 8|0;
 $0 = $fn;
 $1 = $args;
 $2 = $args1;
 $3 = $args2;
 $8 = $0;
 $9 = $1;
 $10 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($9)|0);
 $11 = $2;
 __ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($5,$11);
 $12 = $3;
 __THREW__ = 0;
 $13 = (invoke_ii(547,($12|0))|0);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if (!($15)) {
  __THREW__ = 0;
  $16 = (invoke_iiii($8|0,($10|0),($5|0),($13|0))|0);
  $17 = __THREW__; __THREW__ = 0;
  $18 = $17&1;
  if (!($18)) {
   HEAP32[$4>>2] = $16;
   __THREW__ = 0;
   $19 = (invoke_ii(548,($4|0))|0);
   $20 = __THREW__; __THREW__ = 0;
   $21 = $20&1;
   if (!($21)) {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
    STACKTOP = sp;return ($19|0);
   }
  }
 }
 $22 = ___cxa_find_matching_catch()|0;
 $23 = tempRet0;
 $6 = $22;
 $7 = $23;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
 $24 = $6;
 $25 = $7;
 ___resumeException($24|0);
 // unreachable;
 return (0)|0;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEN4NGIS4Data11EKernelTypeEEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEN4NGIS4Data11EKernelTypeEEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiiNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEN4NGIS4Data11EKernelTypeEEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiiNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEN4NGIS4Data11EKernelTypeEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2924|0);
}
function __ZN10emscripten8internal15EnumBindingTypeIN4NGIS4Data11EKernelTypeEE12fromWireTypeES4_($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal7InvokerIN4NGIS4Data11EKernelTypeEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE6invokeEPFS4_SB_EPNS0_11BindingTypeISB_EUt_E($fn,$args) {
 $fn = $fn|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $0 = $fn;
 $1 = $args;
 $5 = $0;
 $6 = $1;
 __ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($2,$6);
 __THREW__ = 0;
 $7 = (invoke_ii($5|0,($2|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  __THREW__ = 0;
  $10 = (invoke_ii(549,($7|0))|0);
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if (!($12)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2);
   STACKTOP = sp;return ($10|0);
  }
 }
 $13 = ___cxa_find_matching_catch()|0;
 $14 = tempRet0;
 $3 = $13;
 $4 = $14;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2);
 $15 = $3;
 $16 = $4;
 ___resumeException($15|0);
 // unreachable;
 return (0)|0;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4NGIS4Data11EKernelTypeENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4NGIS4Data11EKernelTypeENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJN4NGIS4Data11EKernelTypeENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJN4NGIS4Data11EKernelTypeENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2940|0);
}
function __ZN10emscripten8internal15EnumBindingTypeIN4NGIS4Data11EKernelTypeEE10toWireTypeES4_($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal7InvokerINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJN4NGIS4Data11EKernelTypeEEE6invokeEPFS8_SB_ESB_($fn,$args) {
 $fn = $fn|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $0 = $fn;
 $1 = $args;
 $5 = $0;
 $6 = $1;
 $7 = (__ZN10emscripten8internal15EnumBindingTypeIN4NGIS4Data11EKernelTypeEE12fromWireTypeES4_($6)|0);
 FUNCTION_TABLE_vii[$5 & 1023]($2,$7);
 __THREW__ = 0;
 $8 = (invoke_ii(544,($2|0))|0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  $3 = $11;
  $4 = $12;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2);
  $13 = $3;
  $14 = $4;
  ___resumeException($13|0);
  // unreachable;
 } else {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2);
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEN4NGIS4Data11EKernelTypeEEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEN4NGIS4Data11EKernelTypeEEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEN4NGIS4Data11EKernelTypeEEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEN4NGIS4Data11EKernelTypeEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2948|0);
}
function __ZN10emscripten8internal7InvokerIN4NGIS4Data11EKernelTypeEJiEE6invokeEPFS4_iEi($fn,$args) {
 $fn = $fn|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fn;
 $1 = $args;
 $2 = $0;
 $3 = $1;
 $4 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($3)|0);
 $5 = (FUNCTION_TABLE_ii[$2 & 1023]($4)|0);
 $6 = (__ZN10emscripten8internal15EnumBindingTypeIN4NGIS4Data11EKernelTypeEE10toWireTypeES4_($5)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4NGIS4Data11EKernelTypeEiEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4NGIS4Data11EKernelTypeEiEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJN4NGIS4Data11EKernelTypeEiEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJN4NGIS4Data11EKernelTypeEiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2956|0);
}
function __ZN10emscripten8internal7InvokerINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJiNS3_IwNS4_IwEENS6_IwEEEEEE6invokeEPFS8_iSB_EiPNS0_11BindingTypeISB_EUt_E($fn,$args,$args1) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 20|0;
 $4 = sp + 8|0;
 $0 = $fn;
 $1 = $args;
 $2 = $args1;
 $7 = $0;
 $8 = $1;
 $9 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($8)|0);
 $10 = $2;
 __ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE12fromWireTypeEPNS9_Ut_E($4,$10);
 __THREW__ = 0;
 invoke_viii($7|0,($3|0),($9|0),($4|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $16 = ___cxa_find_matching_catch()|0;
  $17 = tempRet0;
  $5 = $16;
  $6 = $17;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($4);
  $20 = $5;
  $21 = $6;
  ___resumeException($20|0);
  // unreachable;
 }
 __THREW__ = 0;
 $13 = (invoke_ii(544,($3|0))|0);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if (!($15)) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($4);
  STACKTOP = sp;return ($13|0);
 }
 $18 = ___cxa_find_matching_catch()|0;
 $19 = tempRet0;
 $5 = $18;
 $6 = $19;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($4);
 $20 = $5;
 $21 = $6;
 ___resumeException($20|0);
 // unreachable;
 return (0)|0;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEiNS5_IwNS6_IwEENS8_IwEEEEEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEiNS5_IwNS6_IwEENS8_IwEEEEEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEiNS4_IwNS5_IwEENS7_IwEEEEEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEiNS4_IwNS5_IwEENS7_IwEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2964|0);
}
function __ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE12fromWireTypeEPNS9_Ut_E($agg$result,$v) {
 $agg$result = $agg$result|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = $v;
 $7 = $6;
 $8 = ((($7)) + 4|0);
 $9 = $6;
 $10 = HEAP32[$9>>2]|0;
 $3 = $agg$result;
 $4 = $8;
 $5 = $10;
 $11 = $3;
 $2 = $11;
 $12 = $2;
 $1 = $12;
 $13 = $1;
 $0 = $13;
 $14 = $4;
 $15 = $5;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($11,$14,$15);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal7InvokerIbJiNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE6invokeEPFbiS8_EiPNS0_11BindingTypeIS8_EUt_E($fn,$args,$args1) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 8|0;
 $0 = $fn;
 $1 = $args;
 $2 = $args1;
 $6 = $0;
 $7 = $1;
 $8 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($7)|0);
 $9 = $2;
 __ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($3,$9);
 __THREW__ = 0;
 $10 = (invoke_iii($6|0,($8|0),($3|0))|0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if (!($12)) {
  __THREW__ = 0;
  $13 = (invoke_ii(546,($10|0))|0);
  $14 = __THREW__; __THREW__ = 0;
  $15 = $14&1;
  if (!($15)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
   STACKTOP = sp;return ($13|0);
  }
 }
 $16 = ___cxa_find_matching_catch()|0;
 $17 = tempRet0;
 $4 = $16;
 $5 = $17;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
 $18 = $4;
 $19 = $5;
 ___resumeException($18|0);
 // unreachable;
 return (0)|0;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbiNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbiNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2976|0);
}
function __ZN10emscripten8internal7InvokerIbJiNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEEE6invokeEPFbiS8_EiPNS0_11BindingTypeIS8_EUt_E($fn,$args,$args1) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 8|0;
 $0 = $fn;
 $1 = $args;
 $2 = $args1;
 $6 = $0;
 $7 = $1;
 $8 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($7)|0);
 $9 = $2;
 __ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE12fromWireTypeEPNS9_Ut_E($3,$9);
 __THREW__ = 0;
 $10 = (invoke_iii($6|0,($8|0),($3|0))|0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if (!($12)) {
  __THREW__ = 0;
  $13 = (invoke_ii(546,($10|0))|0);
  $14 = __THREW__; __THREW__ = 0;
  $15 = $14&1;
  if (!($15)) {
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($3);
   STACKTOP = sp;return ($13|0);
  }
 }
 $16 = ___cxa_find_matching_catch()|0;
 $17 = tempRet0;
 $4 = $16;
 $5 = $17;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($3);
 $18 = $4;
 $19 = $5;
 ___resumeException($18|0);
 // unreachable;
 return (0)|0;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbiNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbiNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2988|0);
}
function __ZN10emscripten8internal7InvokerINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEJiEE6invokeEPFS8_iEi($fn,$args) {
 $fn = $fn|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $0 = $fn;
 $1 = $args;
 $5 = $0;
 $6 = $1;
 $7 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($6)|0);
 FUNCTION_TABLE_vii[$5 & 1023]($2,$7);
 __THREW__ = 0;
 $8 = (invoke_ii(550,($2|0))|0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  $3 = $11;
  $4 = $12;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($2);
  $13 = $3;
  $14 = $4;
  ___resumeException($13|0);
  // unreachable;
 } else {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($2);
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEiEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEiEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEiEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3000|0);
}
function __ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE10toWireTypeERKS8_($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $wt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $47 = $v;
 $48 = $47;
 $46 = $48;
 $49 = $46;
 $45 = $49;
 $50 = $45;
 $44 = $50;
 $51 = $44;
 $43 = $51;
 $52 = $43;
 $42 = $52;
 $53 = $42;
 $54 = HEAP8[$53>>0]|0;
 $55 = $54&255;
 $56 = $55 & 1;
 $57 = ($56|0)!=(0);
 if ($57) {
  $38 = $50;
  $58 = $38;
  $37 = $58;
  $59 = $37;
  $36 = $59;
  $60 = $36;
  $61 = ((($60)) + 4|0);
  $62 = HEAP32[$61>>2]|0;
  $70 = $62;
 } else {
  $41 = $50;
  $63 = $41;
  $40 = $63;
  $64 = $40;
  $39 = $64;
  $65 = $39;
  $66 = HEAP8[$65>>0]|0;
  $67 = $66&255;
  $68 = $67 >> 1;
  $70 = $68;
 }
 $69 = $70<<2;
 $71 = (4 + ($69))|0;
 $72 = (_malloc($71)|0);
 $wt = $72;
 $73 = $47;
 $10 = $73;
 $74 = $10;
 $9 = $74;
 $75 = $9;
 $8 = $75;
 $76 = $8;
 $7 = $76;
 $77 = $7;
 $6 = $77;
 $78 = $6;
 $79 = HEAP8[$78>>0]|0;
 $80 = $79&255;
 $81 = $80 & 1;
 $82 = ($81|0)!=(0);
 if ($82) {
  $2 = $75;
  $83 = $2;
  $1 = $83;
  $84 = $1;
  $0 = $84;
  $85 = $0;
  $86 = ((($85)) + 4|0);
  $87 = HEAP32[$86>>2]|0;
  $95 = $87;
 } else {
  $5 = $75;
  $88 = $5;
  $4 = $88;
  $89 = $4;
  $3 = $89;
  $90 = $3;
  $91 = HEAP8[$90>>0]|0;
  $92 = $91&255;
  $93 = $92 >> 1;
  $95 = $93;
 }
 $94 = $wt;
 HEAP32[$94>>2] = $95;
 $96 = $wt;
 $97 = ((($96)) + 4|0);
 $98 = $47;
 $24 = $98;
 $99 = $24;
 $23 = $99;
 $100 = $23;
 $22 = $100;
 $101 = $22;
 $21 = $101;
 $102 = $21;
 $20 = $102;
 $103 = $20;
 $104 = HEAP8[$103>>0]|0;
 $105 = $104&255;
 $106 = $105 & 1;
 $107 = ($106|0)!=(0);
 if ($107) {
  $14 = $100;
  $108 = $14;
  $13 = $108;
  $109 = $13;
  $12 = $109;
  $110 = $12;
  $111 = ((($110)) + 8|0);
  $112 = HEAP32[$111>>2]|0;
  $119 = $112;
 } else {
  $19 = $100;
  $113 = $19;
  $18 = $113;
  $114 = $18;
  $17 = $114;
  $115 = $17;
  $116 = ((($115)) + 4|0);
  $16 = $116;
  $117 = $16;
  $15 = $117;
  $118 = $15;
  $119 = $118;
 }
 $11 = $119;
 $120 = $11;
 $121 = $47;
 $35 = $121;
 $122 = $35;
 $34 = $122;
 $123 = $34;
 $33 = $123;
 $124 = $33;
 $32 = $124;
 $125 = $32;
 $31 = $125;
 $126 = $31;
 $127 = HEAP8[$126>>0]|0;
 $128 = $127&255;
 $129 = $128 & 1;
 $130 = ($129|0)!=(0);
 if ($130) {
  $27 = $123;
  $131 = $27;
  $26 = $131;
  $132 = $26;
  $25 = $132;
  $133 = $25;
  $134 = ((($133)) + 4|0);
  $135 = HEAP32[$134>>2]|0;
  $142 = $135;
  (_wmemcpy($97,$120,$142)|0);
  $143 = $wt;
  STACKTOP = sp;return ($143|0);
 } else {
  $30 = $123;
  $136 = $30;
  $29 = $136;
  $137 = $29;
  $28 = $137;
  $138 = $28;
  $139 = HEAP8[$138>>0]|0;
  $140 = $139&255;
  $141 = $140 >> 1;
  $142 = $141;
  (_wmemcpy($97,$120,$142)|0);
  $143 = $wt;
  STACKTOP = sp;return ($143|0);
 }
 return (0)|0;
}
function __ZN10emscripten8internal7InvokerINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJiEE6invokeEPFS8_iEi($fn,$args) {
 $fn = $fn|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $0 = $fn;
 $1 = $args;
 $5 = $0;
 $6 = $1;
 $7 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($6)|0);
 FUNCTION_TABLE_vii[$5 & 1023]($2,$7);
 __THREW__ = 0;
 $8 = (invoke_ii(544,($2|0))|0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  $3 = $11;
  $4 = $12;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2);
  $13 = $3;
  $14 = $4;
  ___resumeException($13|0);
  // unreachable;
 } else {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2);
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEiEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEiEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEiEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3008|0);
}
function __ZN10emscripten8internal7InvokerINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJN4NGIS4Data6Schema15ESchemaNodeTypeEEE6invokeEPFS8_SC_ESC_($fn,$args) {
 $fn = $fn|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $0 = $fn;
 $1 = $args;
 $5 = $0;
 $6 = $1;
 $7 = (__ZN10emscripten8internal15EnumBindingTypeIN4NGIS4Data6Schema15ESchemaNodeTypeEE12fromWireTypeES5_($6)|0);
 FUNCTION_TABLE_vii[$5 & 1023]($2,$7);
 __THREW__ = 0;
 $8 = (invoke_ii(544,($2|0))|0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  $3 = $11;
  $4 = $12;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2);
  $13 = $3;
  $14 = $4;
  ___resumeException($13|0);
  // unreachable;
 } else {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2);
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEN4NGIS4Data6Schema15ESchemaNodeTypeEEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEN4NGIS4Data6Schema15ESchemaNodeTypeEEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEN4NGIS4Data6Schema15ESchemaNodeTypeEEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEN4NGIS4Data6Schema15ESchemaNodeTypeEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3016|0);
}
function __ZN10emscripten8internal15EnumBindingTypeIN4NGIS4Data6Schema15ESchemaNodeTypeEE12fromWireTypeES5_($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal7InvokerIN4NGIS4Data6Schema15ESchemaNodeTypeEJiEE6invokeEPFS5_iEi($fn,$args) {
 $fn = $fn|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fn;
 $1 = $args;
 $2 = $0;
 $3 = $1;
 $4 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($3)|0);
 $5 = (FUNCTION_TABLE_ii[$2 & 1023]($4)|0);
 $6 = (__ZN10emscripten8internal15EnumBindingTypeIN4NGIS4Data6Schema15ESchemaNodeTypeEE10toWireTypeES5_($5)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4NGIS4Data6Schema15ESchemaNodeTypeEiEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4NGIS4Data6Schema15ESchemaNodeTypeEiEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJN4NGIS4Data6Schema15ESchemaNodeTypeEiEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJN4NGIS4Data6Schema15ESchemaNodeTypeEiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3024|0);
}
function __ZN10emscripten8internal15EnumBindingTypeIN4NGIS4Data6Schema15ESchemaNodeTypeEE10toWireTypeES5_($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal7InvokerIiJiiEE6invokeEPFiiiEii($fn,$args,$args1) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $0 = $fn;
 $1 = $args;
 $2 = $args1;
 $4 = $0;
 $5 = $1;
 $6 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($5)|0);
 $7 = $2;
 $8 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($7)|0);
 $9 = (FUNCTION_TABLE_iii[$4 & 1023]($6,$8)|0);
 HEAP32[$3>>2] = $9;
 $10 = (__ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($3)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiiEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiiEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiiiEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiiiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3032|0);
}
function __ZN10emscripten8internal7InvokerIiJiNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN4NGIS4Data6Schema15ESchemaNodeTypeENS3_IwNS4_IwEENS6_IwEEEEEE6invokeEPFiiS8_SC_SF_EiPNS0_11BindingTypeIS8_EUt_ESC_PNSJ_ISF_EUt_E($fn,$args,$args1,$args2,$args3) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args2 = $args2|0;
 $args3 = $args3|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 32|0;
 $6 = sp + 20|0;
 $9 = sp;
 $0 = $fn;
 $1 = $args;
 $2 = $args1;
 $3 = $args2;
 $4 = $args3;
 $10 = $0;
 $11 = $1;
 $12 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($11)|0);
 $13 = $2;
 __ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($6,$13);
 $14 = $3;
 __THREW__ = 0;
 $15 = (invoke_ii(551,($14|0))|0);
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if (!($17)) {
  $18 = $4;
  __THREW__ = 0;
  invoke_vii(552,($9|0),($18|0));
  $19 = __THREW__; __THREW__ = 0;
  $20 = $19&1;
  if (!($20)) {
   __THREW__ = 0;
   $21 = (invoke_iiiii($10|0,($12|0),($6|0),($15|0),($9|0))|0);
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if (!($23)) {
    HEAP32[$5>>2] = $21;
    __THREW__ = 0;
    $24 = (invoke_ii(548,($5|0))|0);
    $25 = __THREW__; __THREW__ = 0;
    $26 = $25&1;
    if (!($26)) {
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($9);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6);
     STACKTOP = sp;return ($24|0);
    }
   }
   $29 = ___cxa_find_matching_catch()|0;
   $30 = tempRet0;
   $7 = $29;
   $8 = $30;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($9);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6);
   $31 = $7;
   $32 = $8;
   ___resumeException($31|0);
   // unreachable;
  }
 }
 $27 = ___cxa_find_matching_catch()|0;
 $28 = tempRet0;
 $7 = $27;
 $8 = $28;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6);
 $31 = $7;
 $32 = $8;
 ___resumeException($31|0);
 // unreachable;
 return (0)|0;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEN4NGIS4Data6Schema15ESchemaNodeTypeENS5_IwNS6_IwEENS8_IwEEEEEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 5;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEN4NGIS4Data6Schema15ESchemaNodeTypeENS5_IwNS6_IwEENS8_IwEEEEEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiiNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEN4NGIS4Data6Schema15ESchemaNodeTypeENS4_IwNS5_IwEENS7_IwEEEEEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiiiiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (10283|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiiNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEN4NGIS4Data6Schema15ESchemaNodeTypeENS4_IwNS5_IwEENS7_IwEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3044|0);
}
function __ZN10emscripten8internal7InvokerIiJiEE6invokeEPFiiEi($fn,$args) {
 $fn = $fn|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $0 = $fn;
 $1 = $args;
 $3 = $0;
 $4 = $1;
 $5 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($4)|0);
 $6 = (FUNCTION_TABLE_ii[$3 & 1023]($5)|0);
 HEAP32[$2>>2] = $6;
 $7 = (__ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($2)|0);
 STACKTOP = sp;return ($7|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiiEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3064|0);
}
function __ZN10emscripten8internal7InvokerIiJN4NGIS4Data6Schema15ESchemaNodeTypeENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEE6invokeEPFiS5_SC_ES5_PNS0_11BindingTypeISC_EUt_E($fn,$args,$args1) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 20|0;
 $4 = sp + 8|0;
 $0 = $fn;
 $1 = $args;
 $2 = $args1;
 $7 = $0;
 $8 = $1;
 $9 = (__ZN10emscripten8internal15EnumBindingTypeIN4NGIS4Data6Schema15ESchemaNodeTypeEE12fromWireTypeES5_($8)|0);
 $10 = $2;
 __ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($4,$10);
 __THREW__ = 0;
 $11 = (invoke_iii($7|0,($9|0),($4|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if (!($13)) {
  HEAP32[$3>>2] = $11;
  __THREW__ = 0;
  $14 = (invoke_ii(548,($3|0))|0);
  $15 = __THREW__; __THREW__ = 0;
  $16 = $15&1;
  if (!($16)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
   STACKTOP = sp;return ($14|0);
  }
 }
 $17 = ___cxa_find_matching_catch()|0;
 $18 = tempRet0;
 $5 = $17;
 $6 = $18;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
 $19 = $5;
 $20 = $6;
 ___resumeException($19|0);
 // unreachable;
 return (0)|0;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiN4NGIS4Data6Schema15ESchemaNodeTypeENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiN4NGIS4Data6Schema15ESchemaNodeTypeENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiN4NGIS4Data6Schema15ESchemaNodeTypeENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiN4NGIS4Data6Schema15ESchemaNodeTypeENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3072|0);
}
function __ZN10emscripten8internal7InvokerIiJEE6invokeEPFivE($fn) {
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp;
 $0 = $fn;
 $2 = $0;
 $3 = (FUNCTION_TABLE_i[$2 & 1023]()|0);
 HEAP32[$1>>2] = $3;
 $4 = (__ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($1)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (10290|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3084|0);
}
function __ZN10emscripten8internal7InvokerINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEJEE6invokeEPFS8_vE($fn) {
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 8|0;
 $0 = $fn;
 $4 = $0;
 FUNCTION_TABLE_vi[$4 & 1023]($1);
 __THREW__ = 0;
 $5 = (invoke_ii(550,($1|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  $2 = $8;
  $3 = $9;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($1);
  $10 = $2;
  $11 = $3;
  ___resumeException($10|0);
  // unreachable;
 } else {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($1);
  STACKTOP = sp;return ($5|0);
 }
 return (0)|0;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3088|0);
}
function __ZN10emscripten8internal7InvokerIfJEE6invokeEPFfvE($fn) {
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp;
 $0 = $fn;
 $2 = $0;
 $3 = (+FUNCTION_TABLE_d[$2 & 511]());
 HEAPF32[$1>>2] = $3;
 $4 = (+__ZN10emscripten8internal11BindingTypeIfE10toWireTypeERKf($1));
 STACKTOP = sp;return (+$4);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJfEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJfEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJfEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJfiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (10293|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJfEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3092|0);
}
function __ZN10emscripten8internal11BindingTypeIfE10toWireTypeERKf($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $1 = $0;
 $2 = +HEAPF32[$1>>2];
 STACKTOP = sp;return (+$2);
}
function __ZN10emscripten8internal6TypeIDIN4NGIS4Data8Vector4dEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIN4NGIS4Data8Vector4dEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11noncopyableD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal11LightTypeIDIN4NGIS4Data8Vector4dEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (288|0);
}
function __ZN10emscripten8internal12MemberAccessIN4NGIS4Data8Vector4dEdE7getWireIS4_EEdRKMS4_dRKT_($field,$ptr) {
 $field = $field|0;
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $field;
 $1 = $ptr;
 $2 = $1;
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + ($4)|0);
 $6 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($5));
 STACKTOP = sp;return (+$6);
}
function __ZN10emscripten8internal12MemberAccessIN4NGIS4Data8Vector4dEdE7setWireIS4_EEvRKMS4_dRT_d($field,$ptr,$value) {
 $field = $field|0;
 $ptr = $ptr|0;
 $value = +$value;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $field;
 $1 = $ptr;
 $2 = $value;
 $3 = $2;
 $4 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($3));
 $5 = $1;
 $6 = $0;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + ($7)|0);
 HEAPF64[$8>>3] = $4;
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDIdE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIdE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal10getContextIMN4NGIS4Data8Vector4dEdEEPT_RKS6_($t) {
 $t = $t|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $t;
 $1 = (__Znwj(4)|0);
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$1>>2] = $3;
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJviidEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (10296|0);
}
function __ZN10emscripten8internal11LightTypeIDIdE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1088|0);
}
function __ZN10emscripten8internal11noncopyableC2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal15raw_constructorIN4NGIS4Data8Vector4dEJEEEPT_DpNS0_11BindingTypeIT0_E8WireTypeE() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = (__Znwj(32)|0);
 __THREW__ = 0;
 invoke_vi(553,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch()|0;
  $6 = tempRet0;
  $0 = $5;
  $1 = $6;
  __ZdlPv($2);
  $7 = $0;
  $8 = $1;
  ___resumeException($7|0);
  // unreachable;
 } else {
  STACKTOP = sp;return ($2|0);
 }
 return (0)|0;
}
function __ZN10emscripten8internal14raw_destructorIN4NGIS4Data8Vector4dEEEvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ptr;
 $1 = $0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  __ZdlPv($1);
 }
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal19getGenericSignatureIJiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (10304|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (10301|0);
}
function __ZN10emscripten8internal6TypeIDIN4NGIS4Data8Vector3dEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIN4NGIS4Data8Vector3dEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIN4NGIS4Data8Vector3dEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (296|0);
}
function __ZN10emscripten8internal12MemberAccessIN4NGIS4Data8Vector3dEdE7getWireIS4_EEdRKMS4_dRKT_($field,$ptr) {
 $field = $field|0;
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $field;
 $1 = $ptr;
 $2 = $1;
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + ($4)|0);
 $6 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($5));
 STACKTOP = sp;return (+$6);
}
function __ZN10emscripten8internal12MemberAccessIN4NGIS4Data8Vector3dEdE7setWireIS4_EEvRKMS4_dRT_d($field,$ptr,$value) {
 $field = $field|0;
 $ptr = $ptr|0;
 $value = +$value;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $field;
 $1 = $ptr;
 $2 = $value;
 $3 = $2;
 $4 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($3));
 $5 = $1;
 $6 = $0;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + ($7)|0);
 HEAPF64[$8>>3] = $4;
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal10getContextIMN4NGIS4Data8Vector3dEdEEPT_RKS6_($t) {
 $t = $t|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $t;
 $1 = (__Znwj(4)|0);
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$1>>2] = $3;
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal15raw_constructorIN4NGIS4Data8Vector3dEJEEEPT_DpNS0_11BindingTypeIT0_E8WireTypeE() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = (__Znwj(24)|0);
 __THREW__ = 0;
 invoke_vi(554,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch()|0;
  $6 = tempRet0;
  $0 = $5;
  $1 = $6;
  __ZdlPv($2);
  $7 = $0;
  $8 = $1;
  ___resumeException($7|0);
  // unreachable;
 } else {
  STACKTOP = sp;return ($2|0);
 }
 return (0)|0;
}
function __ZN10emscripten8internal14raw_destructorIN4NGIS4Data8Vector3dEEEvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ptr;
 $1 = $0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  __ZdlPv($1);
 }
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDIN4NGIS4Data8Vector2dEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIN4NGIS4Data8Vector2dEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIN4NGIS4Data8Vector2dEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (304|0);
}
function __ZN10emscripten8internal12MemberAccessIN4NGIS4Data8Vector2dEdE7getWireIS4_EEdRKMS4_dRKT_($field,$ptr) {
 $field = $field|0;
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $field;
 $1 = $ptr;
 $2 = $1;
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + ($4)|0);
 $6 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($5));
 STACKTOP = sp;return (+$6);
}
function __ZN10emscripten8internal12MemberAccessIN4NGIS4Data8Vector2dEdE7setWireIS4_EEvRKMS4_dRT_d($field,$ptr,$value) {
 $field = $field|0;
 $ptr = $ptr|0;
 $value = +$value;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $field;
 $1 = $ptr;
 $2 = $value;
 $3 = $2;
 $4 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($3));
 $5 = $1;
 $6 = $0;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + ($7)|0);
 HEAPF64[$8>>3] = $4;
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal10getContextIMN4NGIS4Data8Vector2dEdEEPT_RKS6_($t) {
 $t = $t|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $t;
 $1 = (__Znwj(4)|0);
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$1>>2] = $3;
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal15raw_constructorIN4NGIS4Data8Vector2dEJEEEPT_DpNS0_11BindingTypeIT0_E8WireTypeE() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = (__Znwj(16)|0);
 __THREW__ = 0;
 invoke_vi(555,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch()|0;
  $6 = tempRet0;
  $0 = $5;
  $1 = $6;
  __ZdlPv($2);
  $7 = $0;
  $8 = $1;
  ___resumeException($7|0);
  // unreachable;
 } else {
  STACKTOP = sp;return ($2|0);
 }
 return (0)|0;
}
function __ZN10emscripten8internal14raw_destructorIN4NGIS4Data8Vector2dEEEvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ptr;
 $1 = $0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  __ZdlPv($1);
 }
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDIN4NGIS4Data11EKernelTypeEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIN4NGIS4Data11EKernelTypeEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIN4NGIS4Data11EKernelTypeEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (344|0);
}
function __ZN10emscripten8internal6TypeIDIN4NGIS4Data6Schema15ESchemaNodeTypeEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIN4NGIS4Data6Schema15ESchemaNodeTypeEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIN4NGIS4Data6Schema15ESchemaNodeTypeEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (376|0);
}
function __ZN4NGIS4Data8IUdxNodeC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4NGIS4Data10INxUnknownC2Ev($1);
 $2 = 3104;
 HEAP32[$1>>2] = $2;
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data11IUdxDatasetC2Ev($this,$vtt) {
 $this = $this|0;
 $vtt = $vtt|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $vtt;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$2>>2] = $4;
 $5 = ((($3)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$2>>2]|0;
 $8 = ((($7)) + -12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($2) + ($9)|0);
 HEAP32[$10>>2] = $6;
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data11IUdxDatasetD2Ev($this,$vtt) {
 $this = $this|0;
 $vtt = $vtt|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $vtt;
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data8IUdxNodeD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4NGIS4Data10INxUnknownD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data8IUdxNodeD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4NGIS4Data8IUdxNodeD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data6Schema17IUdxDatasetSchemaC2Ev($this,$vtt) {
 $this = $this|0;
 $vtt = $vtt|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $vtt;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$2>>2] = $4;
 $5 = ((($3)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$2>>2]|0;
 $8 = ((($7)) + -12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($2) + ($9)|0);
 HEAP32[$10>>2] = $6;
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data6Schema21CUdxSchemaDescriptionC2ENS1_15ESchemaNodeTypeE($this,$pKernelType) {
 $this = $this|0;
 $pKernelType = $pKernelType|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__a$i$i = 0, $__a$i$i1 = 0, $__a$i$i12 = 0, $__a$i$i16 = 0, $__a$i$i4 = 0, $__a$i$i8 = 0, $__i$i$i = 0, $__i$i$i13 = 0, $__i$i$i17 = 0, $__i$i$i2 = 0, $__i$i$i5 = 0, $__i$i$i9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $54 = $this;
 $55 = $pKernelType;
 $58 = $54;
 __ZN4NGIS4Data6Schema16INodeDescriptionC2Ev($58);
 $59 = 2192;
 HEAP32[$58>>2] = $59;
 $60 = ((($58)) + 12|0);
 $53 = $60;
 $61 = $53;
 $52 = $61;
 $62 = $52;
 $51 = $62;
 $63 = $51;
 $50 = $63;
 $49 = $61;
 $64 = $49;
 $48 = $64;
 $65 = $48;
 $47 = $65;
 $66 = $47;
 $__a$i$i = $66;
 $__i$i$i = 0;
 while(1) {
  $67 = $__i$i$i;
  $68 = ($67>>>0)<(3);
  if (!($68)) {
   break;
  }
  $69 = $__i$i$i;
  $70 = $__a$i$i;
  $71 = (($70) + ($69<<2)|0);
  HEAP32[$71>>2] = 0;
  $72 = $__i$i$i;
  $73 = (($72) + 1)|0;
  $__i$i$i = $73;
 }
 $74 = ((($58)) + 24|0);
 $46 = $74;
 $75 = $46;
 $45 = $75;
 $76 = $45;
 $44 = $76;
 $77 = $44;
 $43 = $77;
 $42 = $75;
 $78 = $42;
 $41 = $78;
 $79 = $41;
 $40 = $79;
 $80 = $40;
 $__a$i$i1 = $80;
 $__i$i$i2 = 0;
 while(1) {
  $81 = $__i$i$i2;
  $82 = ($81>>>0)<(3);
  if (!($82)) {
   break;
  }
  $83 = $__i$i$i2;
  $84 = $__a$i$i1;
  $85 = (($84) + ($83<<2)|0);
  HEAP32[$85>>2] = 0;
  $86 = $__i$i$i2;
  $87 = (($86) + 1)|0;
  $__i$i$i2 = $87;
 }
 $88 = ((($58)) + 36|0);
 $37 = $88;
 $89 = $37;
 $36 = $89;
 $90 = $36;
 $35 = $90;
 $91 = $35;
 $34 = $91;
 $33 = $89;
 $92 = $33;
 $32 = $92;
 $93 = $32;
 $31 = $93;
 $94 = $31;
 $__a$i$i4 = $94;
 $__i$i$i5 = 0;
 while(1) {
  $95 = $__i$i$i5;
  $96 = ($95>>>0)<(3);
  if (!($96)) {
   break;
  }
  $97 = $__i$i$i5;
  $98 = $__a$i$i4;
  $99 = (($98) + ($97<<2)|0);
  HEAP32[$99>>2] = 0;
  $100 = $__i$i$i5;
  $101 = (($100) + 1)|0;
  $__i$i$i5 = $101;
 }
 $102 = ((($58)) + 48|0);
 $28 = $102;
 $103 = $28;
 $27 = $103;
 $104 = $27;
 $26 = $104;
 $105 = $26;
 $25 = $105;
 $24 = $103;
 $106 = $24;
 $23 = $106;
 $107 = $23;
 $22 = $107;
 $108 = $22;
 $__a$i$i8 = $108;
 $__i$i$i9 = 0;
 while(1) {
  $109 = $__i$i$i9;
  $110 = ($109>>>0)<(3);
  if (!($110)) {
   break;
  }
  $111 = $__i$i$i9;
  $112 = $__a$i$i8;
  $113 = (($112) + ($111<<2)|0);
  HEAP32[$113>>2] = 0;
  $114 = $__i$i$i9;
  $115 = (($114) + 1)|0;
  $__i$i$i9 = $115;
 }
 $116 = ((($58)) + 60|0);
 $19 = $116;
 $117 = $19;
 $18 = $117;
 $118 = $18;
 $17 = $118;
 $119 = $17;
 $16 = $119;
 $15 = $117;
 $120 = $15;
 $14 = $120;
 $121 = $14;
 $13 = $121;
 $122 = $13;
 $__a$i$i12 = $122;
 $__i$i$i13 = 0;
 while(1) {
  $123 = $__i$i$i13;
  $124 = ($123>>>0)<(3);
  if (!($124)) {
   break;
  }
  $125 = $__i$i$i13;
  $126 = $__a$i$i12;
  $127 = (($126) + ($125<<2)|0);
  HEAP32[$127>>2] = 0;
  $128 = $__i$i$i13;
  $129 = (($128) + 1)|0;
  $__i$i$i13 = $129;
 }
 $130 = ((($58)) + 72|0);
 $10 = $130;
 $131 = $10;
 $9 = $131;
 $132 = $9;
 $8 = $132;
 $133 = $8;
 $7 = $133;
 $6 = $131;
 $134 = $6;
 $5 = $134;
 $135 = $5;
 $4 = $135;
 $136 = $4;
 $__a$i$i16 = $136;
 $__i$i$i17 = 0;
 while(1) {
  $137 = $__i$i$i17;
  $138 = ($137>>>0)<(3);
  if (!($138)) {
   break;
  }
  $139 = $__i$i$i17;
  $140 = $__a$i$i16;
  $141 = (($140) + ($139<<2)|0);
  HEAP32[$141>>2] = 0;
  $142 = $__i$i$i17;
  $143 = (($142) + 1)|0;
  $__i$i$i17 = $143;
 }
 $144 = $55;
 $145 = ((($58)) + 8|0);
 HEAP32[$145>>2] = $144;
 $146 = ((($58)) + 12|0);
 $0 = $146;
 $1 = 11786;
 $147 = $0;
 $148 = $1;
 __THREW__ = 0;
 (invoke_iii(387,($147|0),($148|0))|0);
 $149 = __THREW__; __THREW__ = 0;
 $150 = $149&1;
 if (!($150)) {
  $151 = ((($58)) + 24|0);
  $2 = $151;
  $3 = 11786;
  $152 = $2;
  $153 = $3;
  __THREW__ = 0;
  (invoke_iii(387,($152|0),($153|0))|0);
  $154 = __THREW__; __THREW__ = 0;
  $155 = $154&1;
  if (!($155)) {
   $156 = ((($58)) + 36|0);
   $11 = $156;
   $12 = 11786;
   $157 = $11;
   $158 = $12;
   __THREW__ = 0;
   (invoke_iii(387,($157|0),($158|0))|0);
   $159 = __THREW__; __THREW__ = 0;
   $160 = $159&1;
   if (!($160)) {
    $161 = ((($58)) + 48|0);
    $20 = $161;
    $21 = 11786;
    $162 = $20;
    $163 = $21;
    __THREW__ = 0;
    (invoke_iii(387,($162|0),($163|0))|0);
    $164 = __THREW__; __THREW__ = 0;
    $165 = $164&1;
    if (!($165)) {
     $166 = ((($58)) + 60|0);
     $29 = $166;
     $30 = 11786;
     $167 = $29;
     $168 = $30;
     __THREW__ = 0;
     (invoke_iii(387,($167|0),($168|0))|0);
     $169 = __THREW__; __THREW__ = 0;
     $170 = $169&1;
     if (!($170)) {
      $171 = ((($58)) + 72|0);
      $38 = $171;
      $39 = 11786;
      $172 = $38;
      $173 = $39;
      __THREW__ = 0;
      (invoke_iii(387,($172|0),($173|0))|0);
      $174 = __THREW__; __THREW__ = 0;
      $175 = $174&1;
      if (!($175)) {
       STACKTOP = sp;return;
      }
     }
    }
   }
  }
 }
 $176 = ___cxa_find_matching_catch()|0;
 $177 = tempRet0;
 $56 = $176;
 $57 = $177;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($130);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($116);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($102);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($88);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($74);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($60);
 __ZN4NGIS4Data6Schema16INodeDescriptionD2Ev($58);
 $178 = $56;
 $179 = $57;
 ___resumeException($178|0);
 // unreachable;
}
function __ZN4NGIS4Data6Schema17IUdxDatasetSchemaD2Ev($this,$vtt) {
 $this = $this|0;
 $vtt = $vtt|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $vtt;
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data6Schema17CUdxDatasetSchema15LoadFromXmlFileEPKc($this,$fileName) {
 $this = $this|0;
 $fileName = $fileName|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $childEle = 0, $dataNode = 0, $dataNode12 = 0, $dataNode4 = 0, $dataNode8 = 0, $dataset_description = 0, $dataset_name = 0, $doc = 0, $ele = 0, $ele_name = 0, $infoEle = 0, $infoEle1 = 0, $infoEle5 = 0, $infoEle9 = 0, $nodeId = 0, $nodeId10 = 0, $nodeId2 = 0, $nodeId6 = 0;
 var $resourceId = 0, $resourceId11 = 0, $resourceId3 = 0, $resourceId7 = 0, $rootEle = 0, $semanticEle = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1184|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $doc = sp + 240|0;
 $dataset_name = sp + 216|0;
 $dataset_description = sp + 204|0;
 $ele_name = sp + 180|0;
 $nodeId = sp + 164|0;
 $resourceId = sp + 152|0;
 $142 = sp + 136|0;
 $nodeId2 = sp + 120|0;
 $resourceId3 = sp + 108|0;
 $143 = sp + 92|0;
 $nodeId6 = sp + 76|0;
 $resourceId7 = sp + 64|0;
 $144 = sp + 48|0;
 $nodeId10 = sp + 32|0;
 $resourceId11 = sp + 20|0;
 $145 = sp + 4|0;
 $138 = $this;
 $139 = $fileName;
 $147 = $138;
 __ZN8tinyxml211XMLDocumentC2EbNS_10WhitespaceE($doc,1,0);
 $148 = $139;
 __THREW__ = 0;
 (invoke_iii(556,($doc|0),($148|0))|0);
 $149 = __THREW__; __THREW__ = 0;
 $150 = $149&1;
 if (!($150)) {
  __THREW__ = 0;
  $151 = (invoke_ii(557,($doc|0))|0);
  $152 = __THREW__; __THREW__ = 0;
  $153 = $152&1;
  if (!($153)) {
   $rootEle = $151;
   $154 = $rootEle;
   __THREW__ = 0;
   $155 = (invoke_iiii(558,($154|0),(10874|0),(0|0))|0);
   $156 = __THREW__; __THREW__ = 0;
   $157 = $156&1;
   if (!($157)) {
    $136 = $dataset_name;
    $137 = $155;
    $158 = $136;
    $135 = $158;
    $159 = $135;
    $134 = $159;
    $160 = $134;
    $133 = $160;
    $161 = $137;
    $162 = $137;
    __THREW__ = 0;
    $163 = (invoke_ii(383,($162|0))|0);
    $164 = __THREW__; __THREW__ = 0;
    $165 = $164&1;
    if (!($165)) {
     __THREW__ = 0;
     invoke_viii(384,($158|0),($161|0),($163|0));
     $166 = __THREW__; __THREW__ = 0;
     $167 = $166&1;
     if (!($167)) {
      $168 = $rootEle;
      __THREW__ = 0;
      $169 = (invoke_iiii(558,($168|0),(10585|0),(0|0))|0);
      $170 = __THREW__; __THREW__ = 0;
      $171 = $170&1;
      if ($171) {
       label = 23;
      } else {
       $131 = $dataset_description;
       $132 = $169;
       $172 = $131;
       $130 = $172;
       $173 = $130;
       $129 = $173;
       $174 = $129;
       $128 = $174;
       $175 = $132;
       $176 = $132;
       __THREW__ = 0;
       $177 = (invoke_ii(383,($176|0))|0);
       $178 = __THREW__; __THREW__ = 0;
       $179 = $178&1;
       if ($179) {
        label = 23;
       } else {
        __THREW__ = 0;
        invoke_viii(384,($172|0),($175|0),($177|0));
        $180 = __THREW__; __THREW__ = 0;
        $181 = $180&1;
        if ($181) {
         label = 23;
        } else {
         $182 = HEAP32[$147>>2]|0;
         $183 = ((($182)) + -40|0);
         $184 = HEAP32[$183>>2]|0;
         $185 = (($147) + ($184)|0);
         $186 = ((($185)) + 8|0);
         __THREW__ = 0;
         (invoke_iii(391,($186|0),($dataset_name|0))|0);
         $187 = __THREW__; __THREW__ = 0;
         $188 = $187&1;
         L11: do {
          if ($188) {
           label = 24;
          } else {
           $189 = HEAP32[$147>>2]|0;
           $190 = ((($189)) + 28|0);
           $191 = HEAP32[$190>>2]|0;
           __THREW__ = 0;
           $192 = (invoke_ii($191|0,($147|0))|0);
           $193 = __THREW__; __THREW__ = 0;
           $194 = $193&1;
           if ($194) {
            label = 24;
           } else {
            $195 = HEAP32[$192>>2]|0;
            $196 = ((($195)) + 32|0);
            $197 = HEAP32[$196>>2]|0;
            $127 = $dataset_description;
            $198 = $127;
            $126 = $198;
            $199 = $126;
            $125 = $199;
            $200 = $125;
            $124 = $200;
            $201 = $124;
            $123 = $201;
            $202 = $123;
            $122 = $202;
            $203 = $122;
            $204 = HEAP8[$203>>0]|0;
            $205 = $204&255;
            $206 = $205 & 1;
            $207 = ($206|0)!=(0);
            if ($207) {
             $116 = $200;
             $208 = $116;
             $115 = $208;
             $209 = $115;
             $114 = $209;
             $210 = $114;
             $211 = ((($210)) + 8|0);
             $212 = HEAP32[$211>>2]|0;
             $219 = $212;
            } else {
             $121 = $200;
             $213 = $121;
             $120 = $213;
             $214 = $120;
             $119 = $214;
             $215 = $119;
             $216 = ((($215)) + 1|0);
             $118 = $216;
             $217 = $118;
             $117 = $217;
             $218 = $117;
             $219 = $218;
            }
            $113 = $219;
            $220 = $113;
            __THREW__ = 0;
            (invoke_iii($197|0,($192|0),($220|0))|0);
            $221 = __THREW__; __THREW__ = 0;
            $222 = $221&1;
            if ($222) {
             label = 24;
            } else {
             $223 = $rootEle;
             __THREW__ = 0;
             $224 = (invoke_iii(559,($223|0),(0|0))|0);
             $225 = __THREW__; __THREW__ = 0;
             $226 = $225&1;
             if ($226) {
              label = 24;
             } else {
              $rootEle = $224;
              $227 = $rootEle;
              __THREW__ = 0;
              $228 = (invoke_iii(559,($227|0),(0|0))|0);
              $229 = __THREW__; __THREW__ = 0;
              $230 = $229&1;
              if ($230) {
               label = 24;
              } else {
               $ele = $228;
               while(1) {
                $231 = $ele;
                $232 = ($231|0)!=(0|0);
                if (!($232)) {
                 break;
                }
                $233 = HEAP32[$147>>2]|0;
                $234 = ((($233)) + -40|0);
                $235 = HEAP32[$234>>2]|0;
                $236 = (($147) + ($235)|0);
                $237 = $ele;
                __THREW__ = 0;
                invoke_viii(560,($147|0),($236|0),($237|0));
                $238 = __THREW__; __THREW__ = 0;
                $239 = $238&1;
                if ($239) {
                 label = 24;
                 break L11;
                }
                $240 = $ele;
                __THREW__ = 0;
                $241 = (invoke_iii(561,($240|0),(0|0))|0);
                $242 = __THREW__; __THREW__ = 0;
                $243 = $242&1;
                if ($243) {
                 label = 24;
                 break L11;
                }
                $ele = $241;
               }
               __THREW__ = 0;
               $250 = (invoke_ii(557,($doc|0))|0);
               $251 = __THREW__; __THREW__ = 0;
               $252 = $251&1;
               if ($252) {
                label = 24;
               } else {
                __THREW__ = 0;
                $253 = (invoke_iii(559,($250|0),(10610|0))|0);
                $254 = __THREW__; __THREW__ = 0;
                $255 = $254&1;
                if ($255) {
                 label = 24;
                } else {
                 $semanticEle = $253;
                 $256 = $semanticEle;
                 $257 = ($256|0)!=(0|0);
                 if (!($257)) {
                  $146 = 1;
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($dataset_description);
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($dataset_name);
                  __ZN8tinyxml211XMLDocumentD2Ev($doc);
                  STACKTOP = sp;return 1;
                 }
                 $258 = $semanticEle;
                 __THREW__ = 0;
                 $259 = (invoke_iii(559,($258|0),(0|0))|0);
                 $260 = __THREW__; __THREW__ = 0;
                 $261 = $260&1;
                 if ($261) {
                  label = 24;
                  break;
                 }
                 $childEle = $259;
                 L33: while(1) {
                  $262 = $childEle;
                  $263 = ($262|0)!=(0|0);
                  if (!($263)) {
                   label = 138;
                   break;
                  }
                  $264 = $childEle;
                  __THREW__ = 0;
                  $265 = (invoke_ii(365,($264|0))|0);
                  $266 = __THREW__; __THREW__ = 0;
                  $267 = $266&1;
                  if ($267) {
                   label = 24;
                   break L11;
                  }
                  $111 = $ele_name;
                  $112 = $265;
                  $268 = $111;
                  $110 = $268;
                  $269 = $110;
                  $109 = $269;
                  $270 = $109;
                  $108 = $270;
                  $271 = $112;
                  $272 = $112;
                  __THREW__ = 0;
                  $273 = (invoke_ii(383,($272|0))|0);
                  $274 = __THREW__; __THREW__ = 0;
                  $275 = $274&1;
                  if ($275) {
                   label = 24;
                   break L11;
                  }
                  __THREW__ = 0;
                  invoke_viii(384,($268|0),($271|0),($273|0));
                  $276 = __THREW__; __THREW__ = 0;
                  $277 = $276&1;
                  if ($277) {
                   label = 24;
                   break L11;
                  }
                  $106 = $ele_name;
                  $107 = 10629;
                  $278 = $106;
                  $279 = $107;
                  $280 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($278,$279)|0);
                  $281 = ($280|0)==(0);
                  L39: do {
                   if ($281) {
                    $282 = $childEle;
                    __THREW__ = 0;
                    $283 = (invoke_iii(559,($282|0),(0|0))|0);
                    $284 = __THREW__; __THREW__ = 0;
                    $285 = $284&1;
                    if ($285) {
                     label = 52;
                     break L33;
                    }
                    $infoEle = $283;
                    while(1) {
                     $286 = $infoEle;
                     $287 = ($286|0)!=(0|0);
                     if (!($287)) {
                      break L39;
                     }
                     $288 = $infoEle;
                     __THREW__ = 0;
                     $289 = (invoke_iiii(558,($288|0),(10678|0),(0|0))|0);
                     $290 = __THREW__; __THREW__ = 0;
                     $291 = $290&1;
                     if ($291) {
                      label = 52;
                      break L33;
                     }
                     $104 = $nodeId;
                     $105 = $289;
                     $292 = $104;
                     $103 = $292;
                     $293 = $103;
                     $102 = $293;
                     $294 = $102;
                     $101 = $294;
                     $295 = $105;
                     $296 = $105;
                     __THREW__ = 0;
                     $297 = (invoke_ii(383,($296|0))|0);
                     $298 = __THREW__; __THREW__ = 0;
                     $299 = $298&1;
                     if ($299) {
                      label = 52;
                      break L33;
                     }
                     __THREW__ = 0;
                     invoke_viii(384,($292|0),($295|0),($297|0));
                     $300 = __THREW__; __THREW__ = 0;
                     $301 = $300&1;
                     if ($301) {
                      label = 52;
                      break L33;
                     }
                     $302 = $infoEle;
                     __THREW__ = 0;
                     $303 = (invoke_iiii(558,($302|0),(10685|0),(0|0))|0);
                     $304 = __THREW__; __THREW__ = 0;
                     $305 = $304&1;
                     if ($305) {
                      label = 53;
                      break L33;
                     }
                     $99 = $resourceId;
                     $100 = $303;
                     $306 = $99;
                     $98 = $306;
                     $307 = $98;
                     $97 = $307;
                     $308 = $97;
                     $96 = $308;
                     $309 = $100;
                     $310 = $100;
                     __THREW__ = 0;
                     $311 = (invoke_ii(383,($310|0))|0);
                     $312 = __THREW__; __THREW__ = 0;
                     $313 = $312&1;
                     if ($313) {
                      label = 53;
                      break L33;
                     }
                     __THREW__ = 0;
                     invoke_viii(384,($306|0),($309|0),($311|0));
                     $314 = __THREW__; __THREW__ = 0;
                     $315 = $314&1;
                     if ($315) {
                      label = 53;
                      break L33;
                     }
                     __THREW__ = 0;
                     invoke_vii(562,($142|0),($nodeId|0));
                     $316 = __THREW__; __THREW__ = 0;
                     $317 = $316&1;
                     if ($317) {
                      label = 54;
                      break L33;
                     }
                     $318 = HEAP32[$147>>2]|0;
                     $319 = ((($318)) + -40|0);
                     $320 = HEAP32[$319>>2]|0;
                     $321 = (($147) + ($320)|0);
                     __THREW__ = 0;
                     $322 = (invoke_iiii(563,($147|0),($142|0),($321|0))|0);
                     $323 = __THREW__; __THREW__ = 0;
                     $324 = $323&1;
                     if ($324) {
                      label = 55;
                      break L33;
                     }
                     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($142);
                     $dataNode = $322;
                     $325 = $dataNode;
                     $326 = ($325|0)!=(0|0);
                     if ($326) {
                      $327 = $dataNode;
                      $328 = HEAP32[$327>>2]|0;
                      $329 = ((($328)) + 24|0);
                      $330 = HEAP32[$329>>2]|0;
                      __THREW__ = 0;
                      $331 = (invoke_ii($330|0,($327|0))|0);
                      $332 = __THREW__; __THREW__ = 0;
                      $333 = $332&1;
                      if ($333) {
                       label = 54;
                       break L33;
                      }
                      $334 = HEAP32[$331>>2]|0;
                      $335 = ((($334)) + 40|0);
                      $336 = HEAP32[$335>>2]|0;
                      $95 = $resourceId;
                      $337 = $95;
                      $94 = $337;
                      $338 = $94;
                      $93 = $338;
                      $339 = $93;
                      $92 = $339;
                      $340 = $92;
                      $91 = $340;
                      $341 = $91;
                      $90 = $341;
                      $342 = $90;
                      $343 = HEAP8[$342>>0]|0;
                      $344 = $343&255;
                      $345 = $344 & 1;
                      $346 = ($345|0)!=(0);
                      if ($346) {
                       $84 = $339;
                       $347 = $84;
                       $83 = $347;
                       $348 = $83;
                       $82 = $348;
                       $349 = $82;
                       $350 = ((($349)) + 8|0);
                       $351 = HEAP32[$350>>2]|0;
                       $358 = $351;
                      } else {
                       $89 = $339;
                       $352 = $89;
                       $88 = $352;
                       $353 = $88;
                       $87 = $353;
                       $354 = $87;
                       $355 = ((($354)) + 1|0);
                       $86 = $355;
                       $356 = $86;
                       $85 = $356;
                       $357 = $85;
                       $358 = $357;
                      }
                      $81 = $358;
                      $359 = $81;
                      __THREW__ = 0;
                      (invoke_iii($336|0,($331|0),($359|0))|0);
                      $360 = __THREW__; __THREW__ = 0;
                      $361 = $360&1;
                      if ($361) {
                       label = 54;
                       break L33;
                      }
                     }
                     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($resourceId);
                     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($nodeId);
                     $370 = $infoEle;
                     __THREW__ = 0;
                     $371 = (invoke_iii(561,($370|0),(0|0))|0);
                     $372 = __THREW__; __THREW__ = 0;
                     $373 = $372&1;
                     if ($373) {
                      label = 52;
                      break L33;
                     }
                     $infoEle = $371;
                    }
                   } else {
                    $79 = $ele_name;
                    $80 = 10638;
                    $374 = $79;
                    $375 = $80;
                    $376 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($374,$375)|0);
                    $377 = ($376|0)==(0);
                    if ($377) {
                     $378 = $childEle;
                     __THREW__ = 0;
                     $379 = (invoke_iii(559,($378|0),(0|0))|0);
                     $380 = __THREW__; __THREW__ = 0;
                     $381 = $380&1;
                     if ($381) {
                      label = 52;
                      break L33;
                     }
                     $infoEle1 = $379;
                     while(1) {
                      $382 = $infoEle1;
                      $383 = ($382|0)!=(0|0);
                      if (!($383)) {
                       break L39;
                      }
                      $384 = $infoEle1;
                      __THREW__ = 0;
                      $385 = (invoke_iiii(558,($384|0),(10678|0),(0|0))|0);
                      $386 = __THREW__; __THREW__ = 0;
                      $387 = $386&1;
                      if ($387) {
                       label = 52;
                       break L33;
                      }
                      $77 = $nodeId2;
                      $78 = $385;
                      $388 = $77;
                      $76 = $388;
                      $389 = $76;
                      $75 = $389;
                      $390 = $75;
                      $74 = $390;
                      $391 = $78;
                      $392 = $78;
                      __THREW__ = 0;
                      $393 = (invoke_ii(383,($392|0))|0);
                      $394 = __THREW__; __THREW__ = 0;
                      $395 = $394&1;
                      if ($395) {
                       label = 52;
                       break L33;
                      }
                      __THREW__ = 0;
                      invoke_viii(384,($388|0),($391|0),($393|0));
                      $396 = __THREW__; __THREW__ = 0;
                      $397 = $396&1;
                      if ($397) {
                       label = 52;
                       break L33;
                      }
                      $398 = $infoEle1;
                      __THREW__ = 0;
                      $399 = (invoke_iiii(558,($398|0),(10706|0),(0|0))|0);
                      $400 = __THREW__; __THREW__ = 0;
                      $401 = $400&1;
                      if ($401) {
                       label = 78;
                       break L33;
                      }
                      $72 = $resourceId3;
                      $73 = $399;
                      $402 = $72;
                      $71 = $402;
                      $403 = $71;
                      $70 = $403;
                      $404 = $70;
                      $69 = $404;
                      $405 = $73;
                      $406 = $73;
                      __THREW__ = 0;
                      $407 = (invoke_ii(383,($406|0))|0);
                      $408 = __THREW__; __THREW__ = 0;
                      $409 = $408&1;
                      if ($409) {
                       label = 78;
                       break L33;
                      }
                      __THREW__ = 0;
                      invoke_viii(384,($402|0),($405|0),($407|0));
                      $410 = __THREW__; __THREW__ = 0;
                      $411 = $410&1;
                      if ($411) {
                       label = 78;
                       break L33;
                      }
                      __THREW__ = 0;
                      invoke_vii(562,($143|0),($nodeId2|0));
                      $412 = __THREW__; __THREW__ = 0;
                      $413 = $412&1;
                      if ($413) {
                       label = 79;
                       break L33;
                      }
                      $414 = HEAP32[$147>>2]|0;
                      $415 = ((($414)) + -40|0);
                      $416 = HEAP32[$415>>2]|0;
                      $417 = (($147) + ($416)|0);
                      __THREW__ = 0;
                      $418 = (invoke_iiii(563,($147|0),($143|0),($417|0))|0);
                      $419 = __THREW__; __THREW__ = 0;
                      $420 = $419&1;
                      if ($420) {
                       label = 80;
                       break L33;
                      }
                      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($143);
                      $dataNode4 = $418;
                      $421 = $dataNode4;
                      $422 = ($421|0)!=(0|0);
                      if ($422) {
                       $423 = $dataNode4;
                       $424 = HEAP32[$423>>2]|0;
                       $425 = ((($424)) + 24|0);
                       $426 = HEAP32[$425>>2]|0;
                       __THREW__ = 0;
                       $427 = (invoke_ii($426|0,($423|0))|0);
                       $428 = __THREW__; __THREW__ = 0;
                       $429 = $428&1;
                       if ($429) {
                        label = 79;
                        break L33;
                       }
                       $430 = HEAP32[$427>>2]|0;
                       $431 = ((($430)) + 64|0);
                       $432 = HEAP32[$431>>2]|0;
                       $68 = $resourceId3;
                       $433 = $68;
                       $67 = $433;
                       $434 = $67;
                       $66 = $434;
                       $435 = $66;
                       $65 = $435;
                       $436 = $65;
                       $64 = $436;
                       $437 = $64;
                       $63 = $437;
                       $438 = $63;
                       $439 = HEAP8[$438>>0]|0;
                       $440 = $439&255;
                       $441 = $440 & 1;
                       $442 = ($441|0)!=(0);
                       if ($442) {
                        $57 = $435;
                        $443 = $57;
                        $56 = $443;
                        $444 = $56;
                        $55 = $444;
                        $445 = $55;
                        $446 = ((($445)) + 8|0);
                        $447 = HEAP32[$446>>2]|0;
                        $454 = $447;
                       } else {
                        $62 = $435;
                        $448 = $62;
                        $61 = $448;
                        $449 = $61;
                        $60 = $449;
                        $450 = $60;
                        $451 = ((($450)) + 1|0);
                        $59 = $451;
                        $452 = $59;
                        $58 = $452;
                        $453 = $58;
                        $454 = $453;
                       }
                       $54 = $454;
                       $455 = $54;
                       __THREW__ = 0;
                       (invoke_iii($432|0,($427|0),($455|0))|0);
                       $456 = __THREW__; __THREW__ = 0;
                       $457 = $456&1;
                       if ($457) {
                        label = 79;
                        break L33;
                       }
                      }
                      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($resourceId3);
                      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($nodeId2);
                      $464 = $infoEle1;
                      __THREW__ = 0;
                      $465 = (invoke_iii(561,($464|0),(0|0))|0);
                      $466 = __THREW__; __THREW__ = 0;
                      $467 = $466&1;
                      if ($467) {
                       label = 52;
                       break L33;
                      }
                      $infoEle1 = $465;
                     }
                    }
                    $52 = $ele_name;
                    $53 = 10650;
                    $468 = $52;
                    $469 = $53;
                    $470 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($468,$469)|0);
                    $471 = ($470|0)==(0);
                    if ($471) {
                     $472 = $childEle;
                     __THREW__ = 0;
                     $473 = (invoke_iii(559,($472|0),(0|0))|0);
                     $474 = __THREW__; __THREW__ = 0;
                     $475 = $474&1;
                     if ($475) {
                      label = 52;
                      break L33;
                     }
                     $infoEle5 = $473;
                     while(1) {
                      $476 = $infoEle5;
                      $477 = ($476|0)!=(0|0);
                      if (!($477)) {
                       break L39;
                      }
                      $478 = $infoEle5;
                      __THREW__ = 0;
                      $479 = (invoke_iiii(558,($478|0),(10678|0),(0|0))|0);
                      $480 = __THREW__; __THREW__ = 0;
                      $481 = $480&1;
                      if ($481) {
                       label = 52;
                       break L33;
                      }
                      $50 = $nodeId6;
                      $51 = $479;
                      $482 = $50;
                      $49 = $482;
                      $483 = $49;
                      $48 = $483;
                      $484 = $48;
                      $47 = $484;
                      $485 = $51;
                      $486 = $51;
                      __THREW__ = 0;
                      $487 = (invoke_ii(383,($486|0))|0);
                      $488 = __THREW__; __THREW__ = 0;
                      $489 = $488&1;
                      if ($489) {
                       label = 52;
                       break L33;
                      }
                      __THREW__ = 0;
                      invoke_viii(384,($482|0),($485|0),($487|0));
                      $490 = __THREW__; __THREW__ = 0;
                      $491 = $490&1;
                      if ($491) {
                       label = 52;
                       break L33;
                      }
                      $492 = $infoEle5;
                      __THREW__ = 0;
                      $493 = (invoke_iiii(558,($492|0),(10724|0),(0|0))|0);
                      $494 = __THREW__; __THREW__ = 0;
                      $495 = $494&1;
                      if ($495) {
                       label = 103;
                       break L33;
                      }
                      $45 = $resourceId7;
                      $46 = $493;
                      $496 = $45;
                      $44 = $496;
                      $497 = $44;
                      $43 = $497;
                      $498 = $43;
                      $42 = $498;
                      $499 = $46;
                      $500 = $46;
                      __THREW__ = 0;
                      $501 = (invoke_ii(383,($500|0))|0);
                      $502 = __THREW__; __THREW__ = 0;
                      $503 = $502&1;
                      if ($503) {
                       label = 103;
                       break L33;
                      }
                      __THREW__ = 0;
                      invoke_viii(384,($496|0),($499|0),($501|0));
                      $504 = __THREW__; __THREW__ = 0;
                      $505 = $504&1;
                      if ($505) {
                       label = 103;
                       break L33;
                      }
                      __THREW__ = 0;
                      invoke_vii(562,($144|0),($nodeId6|0));
                      $506 = __THREW__; __THREW__ = 0;
                      $507 = $506&1;
                      if ($507) {
                       label = 104;
                       break L33;
                      }
                      $508 = HEAP32[$147>>2]|0;
                      $509 = ((($508)) + -40|0);
                      $510 = HEAP32[$509>>2]|0;
                      $511 = (($147) + ($510)|0);
                      __THREW__ = 0;
                      $512 = (invoke_iiii(563,($147|0),($144|0),($511|0))|0);
                      $513 = __THREW__; __THREW__ = 0;
                      $514 = $513&1;
                      if ($514) {
                       label = 105;
                       break L33;
                      }
                      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($144);
                      $dataNode8 = $512;
                      $515 = $dataNode8;
                      $516 = ($515|0)!=(0|0);
                      if ($516) {
                       $517 = $dataNode8;
                       $518 = HEAP32[$517>>2]|0;
                       $519 = ((($518)) + 24|0);
                       $520 = HEAP32[$519>>2]|0;
                       __THREW__ = 0;
                       $521 = (invoke_ii($520|0,($517|0))|0);
                       $522 = __THREW__; __THREW__ = 0;
                       $523 = $522&1;
                       if ($523) {
                        label = 104;
                        break L33;
                       }
                       $524 = HEAP32[$521>>2]|0;
                       $525 = ((($524)) + 48|0);
                       $526 = HEAP32[$525>>2]|0;
                       $41 = $resourceId7;
                       $527 = $41;
                       $40 = $527;
                       $528 = $40;
                       $39 = $528;
                       $529 = $39;
                       $38 = $529;
                       $530 = $38;
                       $37 = $530;
                       $531 = $37;
                       $36 = $531;
                       $532 = $36;
                       $533 = HEAP8[$532>>0]|0;
                       $534 = $533&255;
                       $535 = $534 & 1;
                       $536 = ($535|0)!=(0);
                       if ($536) {
                        $30 = $529;
                        $537 = $30;
                        $29 = $537;
                        $538 = $29;
                        $28 = $538;
                        $539 = $28;
                        $540 = ((($539)) + 8|0);
                        $541 = HEAP32[$540>>2]|0;
                        $548 = $541;
                       } else {
                        $35 = $529;
                        $542 = $35;
                        $34 = $542;
                        $543 = $34;
                        $33 = $543;
                        $544 = $33;
                        $545 = ((($544)) + 1|0);
                        $32 = $545;
                        $546 = $32;
                        $31 = $546;
                        $547 = $31;
                        $548 = $547;
                       }
                       $27 = $548;
                       $549 = $27;
                       __THREW__ = 0;
                       (invoke_iii($526|0,($521|0),($549|0))|0);
                       $550 = __THREW__; __THREW__ = 0;
                       $551 = $550&1;
                       if ($551) {
                        label = 104;
                        break L33;
                       }
                      }
                      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($resourceId7);
                      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($nodeId6);
                      $558 = $infoEle5;
                      __THREW__ = 0;
                      $559 = (invoke_iii(561,($558|0),(0|0))|0);
                      $560 = __THREW__; __THREW__ = 0;
                      $561 = $560&1;
                      if ($561) {
                       label = 52;
                       break L33;
                      }
                      $infoEle5 = $559;
                     }
                    }
                    $25 = $ele_name;
                    $26 = 10656;
                    $562 = $25;
                    $563 = $26;
                    $564 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($562,$563)|0);
                    $565 = ($564|0)==(0);
                    if (!($565)) {
                     break;
                    }
                    $566 = $childEle;
                    __THREW__ = 0;
                    $567 = (invoke_iii(559,($566|0),(0|0))|0);
                    $568 = __THREW__; __THREW__ = 0;
                    $569 = $568&1;
                    if ($569) {
                     label = 52;
                     break L33;
                    }
                    $infoEle9 = $567;
                    while(1) {
                     $570 = $infoEle9;
                     $571 = ($570|0)!=(0|0);
                     if (!($571)) {
                      break L39;
                     }
                     $572 = $infoEle9;
                     __THREW__ = 0;
                     $573 = (invoke_iiii(558,($572|0),(10678|0),(0|0))|0);
                     $574 = __THREW__; __THREW__ = 0;
                     $575 = $574&1;
                     if ($575) {
                      label = 52;
                      break L33;
                     }
                     $23 = $nodeId10;
                     $24 = $573;
                     $576 = $23;
                     $22 = $576;
                     $577 = $22;
                     $21 = $577;
                     $578 = $21;
                     $20 = $578;
                     $579 = $24;
                     $580 = $24;
                     __THREW__ = 0;
                     $581 = (invoke_ii(383,($580|0))|0);
                     $582 = __THREW__; __THREW__ = 0;
                     $583 = $582&1;
                     if ($583) {
                      label = 52;
                      break L33;
                     }
                     __THREW__ = 0;
                     invoke_viii(384,($576|0),($579|0),($581|0));
                     $584 = __THREW__; __THREW__ = 0;
                     $585 = $584&1;
                     if ($585) {
                      label = 52;
                      break L33;
                     }
                     $586 = $infoEle9;
                     __THREW__ = 0;
                     $587 = (invoke_iiii(558,($586|0),(10744|0),(0|0))|0);
                     $588 = __THREW__; __THREW__ = 0;
                     $589 = $588&1;
                     if ($589) {
                      label = 128;
                      break L33;
                     }
                     $18 = $resourceId11;
                     $19 = $587;
                     $590 = $18;
                     $17 = $590;
                     $591 = $17;
                     $16 = $591;
                     $592 = $16;
                     $15 = $592;
                     $593 = $19;
                     $594 = $19;
                     __THREW__ = 0;
                     $595 = (invoke_ii(383,($594|0))|0);
                     $596 = __THREW__; __THREW__ = 0;
                     $597 = $596&1;
                     if ($597) {
                      label = 128;
                      break L33;
                     }
                     __THREW__ = 0;
                     invoke_viii(384,($590|0),($593|0),($595|0));
                     $598 = __THREW__; __THREW__ = 0;
                     $599 = $598&1;
                     if ($599) {
                      label = 128;
                      break L33;
                     }
                     __THREW__ = 0;
                     invoke_vii(562,($145|0),($nodeId10|0));
                     $600 = __THREW__; __THREW__ = 0;
                     $601 = $600&1;
                     if ($601) {
                      label = 129;
                      break L33;
                     }
                     $602 = HEAP32[$147>>2]|0;
                     $603 = ((($602)) + -40|0);
                     $604 = HEAP32[$603>>2]|0;
                     $605 = (($147) + ($604)|0);
                     __THREW__ = 0;
                     $606 = (invoke_iiii(563,($147|0),($145|0),($605|0))|0);
                     $607 = __THREW__; __THREW__ = 0;
                     $608 = $607&1;
                     if ($608) {
                      label = 130;
                      break L33;
                     }
                     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($145);
                     $dataNode12 = $606;
                     $609 = $dataNode12;
                     $610 = ($609|0)!=(0|0);
                     if ($610) {
                      $611 = $dataNode12;
                      $612 = HEAP32[$611>>2]|0;
                      $613 = ((($612)) + 24|0);
                      $614 = HEAP32[$613>>2]|0;
                      __THREW__ = 0;
                      $615 = (invoke_ii($614|0,($611|0))|0);
                      $616 = __THREW__; __THREW__ = 0;
                      $617 = $616&1;
                      if ($617) {
                       label = 129;
                       break L33;
                      }
                      $618 = HEAP32[$615>>2]|0;
                      $619 = ((($618)) + 72|0);
                      $620 = HEAP32[$619>>2]|0;
                      $14 = $resourceId11;
                      $621 = $14;
                      $13 = $621;
                      $622 = $13;
                      $12 = $622;
                      $623 = $12;
                      $11 = $623;
                      $624 = $11;
                      $10 = $624;
                      $625 = $10;
                      $9 = $625;
                      $626 = $9;
                      $627 = HEAP8[$626>>0]|0;
                      $628 = $627&255;
                      $629 = $628 & 1;
                      $630 = ($629|0)!=(0);
                      if ($630) {
                       $3 = $623;
                       $631 = $3;
                       $2 = $631;
                       $632 = $2;
                       $1 = $632;
                       $633 = $1;
                       $634 = ((($633)) + 8|0);
                       $635 = HEAP32[$634>>2]|0;
                       $642 = $635;
                      } else {
                       $8 = $623;
                       $636 = $8;
                       $7 = $636;
                       $637 = $7;
                       $6 = $637;
                       $638 = $6;
                       $639 = ((($638)) + 1|0);
                       $5 = $639;
                       $640 = $5;
                       $4 = $640;
                       $641 = $4;
                       $642 = $641;
                      }
                      $0 = $642;
                      $643 = $0;
                      __THREW__ = 0;
                      (invoke_iii($620|0,($615|0),($643|0))|0);
                      $644 = __THREW__; __THREW__ = 0;
                      $645 = $644&1;
                      if ($645) {
                       label = 129;
                       break L33;
                      }
                     }
                     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($resourceId11);
                     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($nodeId10);
                     $652 = $infoEle9;
                     __THREW__ = 0;
                     $653 = (invoke_iii(561,($652|0),(0|0))|0);
                     $654 = __THREW__; __THREW__ = 0;
                     $655 = $654&1;
                     if ($655) {
                      label = 52;
                      break L33;
                     }
                     $infoEle9 = $653;
                    }
                   }
                  } while(0);
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ele_name);
                  $656 = $childEle;
                  __THREW__ = 0;
                  $657 = (invoke_iii(561,($656|0),(0|0))|0);
                  $658 = __THREW__; __THREW__ = 0;
                  $659 = $658&1;
                  if ($659) {
                   label = 24;
                   break L11;
                  }
                  $childEle = $657;
                 }
                 switch (label|0) {
                  case 52: {
                   $362 = ___cxa_find_matching_catch()|0;
                   $363 = tempRet0;
                   $140 = $362;
                   $141 = $363;
                   break;
                  }
                  case 53: {
                   $364 = ___cxa_find_matching_catch()|0;
                   $365 = tempRet0;
                   $140 = $364;
                   $141 = $365;
                   label = 59;
                   break;
                  }
                  case 54: {
                   $366 = ___cxa_find_matching_catch()|0;
                   $367 = tempRet0;
                   $140 = $366;
                   $141 = $367;
                   label = 58;
                   break;
                  }
                  case 55: {
                   $368 = ___cxa_find_matching_catch()|0;
                   $369 = tempRet0;
                   $140 = $368;
                   $141 = $369;
                   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($142);
                   label = 58;
                   break;
                  }
                  case 78: {
                   $458 = ___cxa_find_matching_catch()|0;
                   $459 = tempRet0;
                   $140 = $458;
                   $141 = $459;
                   label = 84;
                   break;
                  }
                  case 79: {
                   $460 = ___cxa_find_matching_catch()|0;
                   $461 = tempRet0;
                   $140 = $460;
                   $141 = $461;
                   label = 83;
                   break;
                  }
                  case 80: {
                   $462 = ___cxa_find_matching_catch()|0;
                   $463 = tempRet0;
                   $140 = $462;
                   $141 = $463;
                   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($143);
                   label = 83;
                   break;
                  }
                  case 103: {
                   $552 = ___cxa_find_matching_catch()|0;
                   $553 = tempRet0;
                   $140 = $552;
                   $141 = $553;
                   label = 109;
                   break;
                  }
                  case 104: {
                   $554 = ___cxa_find_matching_catch()|0;
                   $555 = tempRet0;
                   $140 = $554;
                   $141 = $555;
                   label = 108;
                   break;
                  }
                  case 105: {
                   $556 = ___cxa_find_matching_catch()|0;
                   $557 = tempRet0;
                   $140 = $556;
                   $141 = $557;
                   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($144);
                   label = 108;
                   break;
                  }
                  case 128: {
                   $646 = ___cxa_find_matching_catch()|0;
                   $647 = tempRet0;
                   $140 = $646;
                   $141 = $647;
                   label = 134;
                   break;
                  }
                  case 129: {
                   $648 = ___cxa_find_matching_catch()|0;
                   $649 = tempRet0;
                   $140 = $648;
                   $141 = $649;
                   label = 133;
                   break;
                  }
                  case 130: {
                   $650 = ___cxa_find_matching_catch()|0;
                   $651 = tempRet0;
                   $140 = $650;
                   $141 = $651;
                   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($145);
                   label = 133;
                   break;
                  }
                  case 138: {
                   $146 = 1;
                   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($dataset_description);
                   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($dataset_name);
                   __ZN8tinyxml211XMLDocumentD2Ev($doc);
                   STACKTOP = sp;return 1;
                   break;
                  }
                 }
                 if ((label|0) == 58) {
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($resourceId);
                  label = 59;
                 }
                 else if ((label|0) == 83) {
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($resourceId3);
                  label = 84;
                 }
                 else if ((label|0) == 108) {
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($resourceId7);
                  label = 109;
                 }
                 else if ((label|0) == 133) {
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($resourceId11);
                  label = 134;
                 }
                 if ((label|0) == 59) {
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($nodeId);
                 }
                 else if ((label|0) == 84) {
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($nodeId2);
                 }
                 else if ((label|0) == 109) {
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($nodeId6);
                 }
                 else if ((label|0) == 134) {
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($nodeId10);
                 }
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ele_name);
                }
               }
              }
             }
            }
           }
          }
         } while(0);
         if ((label|0) == 24) {
          $248 = ___cxa_find_matching_catch()|0;
          $249 = tempRet0;
          $140 = $248;
          $141 = $249;
         }
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($dataset_description);
        }
       }
      }
      if ((label|0) == 23) {
       $246 = ___cxa_find_matching_catch()|0;
       $247 = tempRet0;
       $140 = $246;
       $141 = $247;
      }
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($dataset_name);
      __ZN8tinyxml211XMLDocumentD2Ev($doc);
      $660 = $140;
      $661 = $141;
      ___resumeException($660|0);
      // unreachable;
     }
    }
   }
  }
 }
 $244 = ___cxa_find_matching_catch()|0;
 $245 = tempRet0;
 $140 = $244;
 $141 = $245;
 __ZN8tinyxml211XMLDocumentD2Ev($doc);
 $660 = $140;
 $661 = $141;
 ___resumeException($660|0);
 // unreachable;
 return (0)|0;
}
function __ZN4NGIS4Data6Schema17CUdxDatasetSchema15FormatToXmlFileEPKc($this,$fileName) {
 $this = $this|0;
 $fileName = $fileName|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $count = 0, $doc = 0, $element = 0, $iNode = 0, $rootEle = 0, $tempNode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $doc = sp + 32|0;
 $0 = $this;
 $1 = $fileName;
 $5 = $0;
 __ZN8tinyxml211XMLDocumentC2EbNS_10WhitespaceE($doc,1,0);
 __THREW__ = 0;
 $6 = (invoke_iii(564,($doc|0),(7642|0))|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 L1: do {
  if (!($8)) {
   $element = $6;
   $9 = $element;
   __THREW__ = 0;
   (invoke_iii(565,($doc|0),($9|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    $12 = $element;
    $13 = HEAP32[$5>>2]|0;
    $14 = ((($13)) + 24|0);
    $15 = HEAP32[$14>>2]|0;
    __THREW__ = 0;
    $16 = (invoke_ii($15|0,($5|0))|0);
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if (!($18)) {
     __THREW__ = 0;
     invoke_viii(566,($12|0),(10874|0),($16|0));
     $19 = __THREW__; __THREW__ = 0;
     $20 = $19&1;
     if (!($20)) {
      $21 = $element;
      $22 = HEAP32[$5>>2]|0;
      $23 = ((($22)) + 28|0);
      $24 = HEAP32[$23>>2]|0;
      __THREW__ = 0;
      $25 = (invoke_ii($24|0,($5|0))|0);
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if (!($27)) {
       $28 = HEAP32[$25>>2]|0;
       $29 = ((($28)) + 28|0);
       $30 = HEAP32[$29>>2]|0;
       __THREW__ = 0;
       $31 = (invoke_ii($30|0,($25|0))|0);
       $32 = __THREW__; __THREW__ = 0;
       $33 = $32&1;
       if (!($33)) {
        __THREW__ = 0;
        invoke_viii(566,($21|0),(10585|0),($31|0));
        $34 = __THREW__; __THREW__ = 0;
        $35 = $34&1;
        if (!($35)) {
         __THREW__ = 0;
         $36 = (invoke_iii(564,($doc|0),(10597|0))|0);
         $37 = __THREW__; __THREW__ = 0;
         $38 = $37&1;
         if (!($38)) {
          $rootEle = $36;
          $39 = $element;
          $40 = $rootEle;
          __THREW__ = 0;
          (invoke_iii(565,($39|0),($40|0))|0);
          $41 = __THREW__; __THREW__ = 0;
          $42 = $41&1;
          if (!($42)) {
           $43 = HEAP32[$5>>2]|0;
           $44 = ((($43)) + 40|0);
           $45 = HEAP32[$44>>2]|0;
           __THREW__ = 0;
           $46 = (invoke_ii($45|0,($5|0))|0);
           $47 = __THREW__; __THREW__ = 0;
           $48 = $47&1;
           if (!($48)) {
            $count = $46;
            $iNode = 0;
            while(1) {
             $49 = $iNode;
             $50 = $count;
             $51 = ($49|0)<($50|0);
             if (!($51)) {
              break;
             }
             $52 = HEAP32[$5>>2]|0;
             $53 = ((($52)) + 44|0);
             $54 = HEAP32[$53>>2]|0;
             $55 = $iNode;
             __THREW__ = 0;
             $56 = (invoke_iii($54|0,($5|0),($55|0))|0);
             $57 = __THREW__; __THREW__ = 0;
             $58 = $57&1;
             if ($58) {
              break L1;
             }
             $tempNode = $56;
             $59 = $tempNode;
             $60 = $rootEle;
             __THREW__ = 0;
             invoke_viii(567,($5|0),($59|0),($60|0));
             $61 = __THREW__; __THREW__ = 0;
             $62 = $61&1;
             if ($62) {
              break L1;
             }
             $63 = $iNode;
             $64 = (($63) + 1)|0;
             $iNode = $64;
            }
            $69 = $1;
            __THREW__ = 0;
            (invoke_iiii(568,($doc|0),($69|0),0)|0);
            $70 = __THREW__; __THREW__ = 0;
            $71 = $70&1;
            if (!($71)) {
             $4 = 1;
             __ZN8tinyxml211XMLDocumentD2Ev($doc);
             STACKTOP = sp;return 1;
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $65 = ___cxa_find_matching_catch()|0;
 $66 = tempRet0;
 $2 = $65;
 $3 = $66;
 __ZN8tinyxml211XMLDocumentD2Ev($doc);
 $67 = $2;
 $68 = $3;
 ___resumeException($67|0);
 // unreachable;
 return (0)|0;
}
function __ZN4NGIS4Data6Schema17CUdxDatasetSchema17LoadFromXmlStreamEPKc($this,$xmlStr) {
 $this = $this|0;
 $xmlStr = $xmlStr|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $childEle = 0, $dataNode = 0, $dataNode12 = 0, $dataNode4 = 0, $dataNode8 = 0, $dataset_description = 0, $dataset_name = 0, $doc = 0, $ele = 0, $ele_name = 0, $infoEle = 0, $infoEle1 = 0, $infoEle5 = 0, $infoEle9 = 0, $nodeId = 0, $nodeId10 = 0, $nodeId2 = 0, $nodeId6 = 0;
 var $resourceId = 0, $resourceId11 = 0, $resourceId3 = 0, $resourceId7 = 0, $rootEle = 0, $semanticEle = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1184|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $doc = sp + 240|0;
 $dataset_name = sp + 216|0;
 $dataset_description = sp + 204|0;
 $ele_name = sp + 180|0;
 $nodeId = sp + 164|0;
 $resourceId = sp + 152|0;
 $142 = sp + 136|0;
 $nodeId2 = sp + 120|0;
 $resourceId3 = sp + 108|0;
 $143 = sp + 92|0;
 $nodeId6 = sp + 76|0;
 $resourceId7 = sp + 64|0;
 $144 = sp + 48|0;
 $nodeId10 = sp + 32|0;
 $resourceId11 = sp + 20|0;
 $145 = sp + 4|0;
 $138 = $this;
 $139 = $xmlStr;
 $147 = $138;
 __ZN8tinyxml211XMLDocumentC2EbNS_10WhitespaceE($doc,1,0);
 $148 = $139;
 __THREW__ = 0;
 (invoke_iiii(569,($doc|0),($148|0),-1)|0);
 $149 = __THREW__; __THREW__ = 0;
 $150 = $149&1;
 if (!($150)) {
  __THREW__ = 0;
  $151 = (invoke_ii(557,($doc|0))|0);
  $152 = __THREW__; __THREW__ = 0;
  $153 = $152&1;
  if (!($153)) {
   $rootEle = $151;
   $154 = $rootEle;
   __THREW__ = 0;
   $155 = (invoke_iiii(558,($154|0),(10874|0),(0|0))|0);
   $156 = __THREW__; __THREW__ = 0;
   $157 = $156&1;
   if (!($157)) {
    $136 = $dataset_name;
    $137 = $155;
    $158 = $136;
    $135 = $158;
    $159 = $135;
    $134 = $159;
    $160 = $134;
    $133 = $160;
    $161 = $137;
    $162 = $137;
    __THREW__ = 0;
    $163 = (invoke_ii(383,($162|0))|0);
    $164 = __THREW__; __THREW__ = 0;
    $165 = $164&1;
    if (!($165)) {
     __THREW__ = 0;
     invoke_viii(384,($158|0),($161|0),($163|0));
     $166 = __THREW__; __THREW__ = 0;
     $167 = $166&1;
     if (!($167)) {
      $168 = $rootEle;
      __THREW__ = 0;
      $169 = (invoke_iiii(558,($168|0),(10585|0),(0|0))|0);
      $170 = __THREW__; __THREW__ = 0;
      $171 = $170&1;
      if ($171) {
       label = 23;
      } else {
       $131 = $dataset_description;
       $132 = $169;
       $172 = $131;
       $130 = $172;
       $173 = $130;
       $129 = $173;
       $174 = $129;
       $128 = $174;
       $175 = $132;
       $176 = $132;
       __THREW__ = 0;
       $177 = (invoke_ii(383,($176|0))|0);
       $178 = __THREW__; __THREW__ = 0;
       $179 = $178&1;
       if ($179) {
        label = 23;
       } else {
        __THREW__ = 0;
        invoke_viii(384,($172|0),($175|0),($177|0));
        $180 = __THREW__; __THREW__ = 0;
        $181 = $180&1;
        if ($181) {
         label = 23;
        } else {
         $182 = HEAP32[$147>>2]|0;
         $183 = ((($182)) + -40|0);
         $184 = HEAP32[$183>>2]|0;
         $185 = (($147) + ($184)|0);
         $186 = ((($185)) + 8|0);
         __THREW__ = 0;
         (invoke_iii(391,($186|0),($dataset_name|0))|0);
         $187 = __THREW__; __THREW__ = 0;
         $188 = $187&1;
         L11: do {
          if ($188) {
           label = 24;
          } else {
           $189 = HEAP32[$147>>2]|0;
           $190 = ((($189)) + 28|0);
           $191 = HEAP32[$190>>2]|0;
           __THREW__ = 0;
           $192 = (invoke_ii($191|0,($147|0))|0);
           $193 = __THREW__; __THREW__ = 0;
           $194 = $193&1;
           if ($194) {
            label = 24;
           } else {
            $195 = HEAP32[$192>>2]|0;
            $196 = ((($195)) + 32|0);
            $197 = HEAP32[$196>>2]|0;
            $127 = $dataset_description;
            $198 = $127;
            $126 = $198;
            $199 = $126;
            $125 = $199;
            $200 = $125;
            $124 = $200;
            $201 = $124;
            $123 = $201;
            $202 = $123;
            $122 = $202;
            $203 = $122;
            $204 = HEAP8[$203>>0]|0;
            $205 = $204&255;
            $206 = $205 & 1;
            $207 = ($206|0)!=(0);
            if ($207) {
             $116 = $200;
             $208 = $116;
             $115 = $208;
             $209 = $115;
             $114 = $209;
             $210 = $114;
             $211 = ((($210)) + 8|0);
             $212 = HEAP32[$211>>2]|0;
             $219 = $212;
            } else {
             $121 = $200;
             $213 = $121;
             $120 = $213;
             $214 = $120;
             $119 = $214;
             $215 = $119;
             $216 = ((($215)) + 1|0);
             $118 = $216;
             $217 = $118;
             $117 = $217;
             $218 = $117;
             $219 = $218;
            }
            $113 = $219;
            $220 = $113;
            __THREW__ = 0;
            (invoke_iii($197|0,($192|0),($220|0))|0);
            $221 = __THREW__; __THREW__ = 0;
            $222 = $221&1;
            if ($222) {
             label = 24;
            } else {
             $223 = $rootEle;
             __THREW__ = 0;
             $224 = (invoke_iii(559,($223|0),(0|0))|0);
             $225 = __THREW__; __THREW__ = 0;
             $226 = $225&1;
             if ($226) {
              label = 24;
             } else {
              $rootEle = $224;
              $227 = $rootEle;
              __THREW__ = 0;
              $228 = (invoke_iii(559,($227|0),(0|0))|0);
              $229 = __THREW__; __THREW__ = 0;
              $230 = $229&1;
              if ($230) {
               label = 24;
              } else {
               $ele = $228;
               while(1) {
                $231 = $ele;
                $232 = ($231|0)!=(0|0);
                if (!($232)) {
                 break;
                }
                $233 = HEAP32[$147>>2]|0;
                $234 = ((($233)) + -40|0);
                $235 = HEAP32[$234>>2]|0;
                $236 = (($147) + ($235)|0);
                $237 = $ele;
                __THREW__ = 0;
                invoke_viii(560,($147|0),($236|0),($237|0));
                $238 = __THREW__; __THREW__ = 0;
                $239 = $238&1;
                if ($239) {
                 label = 24;
                 break L11;
                }
                $240 = $ele;
                __THREW__ = 0;
                $241 = (invoke_iii(561,($240|0),(0|0))|0);
                $242 = __THREW__; __THREW__ = 0;
                $243 = $242&1;
                if ($243) {
                 label = 24;
                 break L11;
                }
                $ele = $241;
               }
               __THREW__ = 0;
               $250 = (invoke_ii(557,($doc|0))|0);
               $251 = __THREW__; __THREW__ = 0;
               $252 = $251&1;
               if ($252) {
                label = 24;
               } else {
                __THREW__ = 0;
                $253 = (invoke_iii(559,($250|0),(10610|0))|0);
                $254 = __THREW__; __THREW__ = 0;
                $255 = $254&1;
                if ($255) {
                 label = 24;
                } else {
                 $semanticEle = $253;
                 $256 = $semanticEle;
                 $257 = ($256|0)!=(0|0);
                 if (!($257)) {
                  $146 = 1;
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($dataset_description);
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($dataset_name);
                  __ZN8tinyxml211XMLDocumentD2Ev($doc);
                  STACKTOP = sp;return 1;
                 }
                 $258 = $semanticEle;
                 __THREW__ = 0;
                 $259 = (invoke_iii(559,($258|0),(0|0))|0);
                 $260 = __THREW__; __THREW__ = 0;
                 $261 = $260&1;
                 if ($261) {
                  label = 24;
                  break;
                 }
                 $childEle = $259;
                 L33: while(1) {
                  $262 = $childEle;
                  $263 = ($262|0)!=(0|0);
                  if (!($263)) {
                   label = 138;
                   break;
                  }
                  $264 = $childEle;
                  __THREW__ = 0;
                  $265 = (invoke_ii(365,($264|0))|0);
                  $266 = __THREW__; __THREW__ = 0;
                  $267 = $266&1;
                  if ($267) {
                   label = 24;
                   break L11;
                  }
                  $111 = $ele_name;
                  $112 = $265;
                  $268 = $111;
                  $110 = $268;
                  $269 = $110;
                  $109 = $269;
                  $270 = $109;
                  $108 = $270;
                  $271 = $112;
                  $272 = $112;
                  __THREW__ = 0;
                  $273 = (invoke_ii(383,($272|0))|0);
                  $274 = __THREW__; __THREW__ = 0;
                  $275 = $274&1;
                  if ($275) {
                   label = 24;
                   break L11;
                  }
                  __THREW__ = 0;
                  invoke_viii(384,($268|0),($271|0),($273|0));
                  $276 = __THREW__; __THREW__ = 0;
                  $277 = $276&1;
                  if ($277) {
                   label = 24;
                   break L11;
                  }
                  $106 = $ele_name;
                  $107 = 10629;
                  $278 = $106;
                  $279 = $107;
                  $280 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($278,$279)|0);
                  $281 = ($280|0)==(0);
                  L39: do {
                   if ($281) {
                    $282 = $childEle;
                    __THREW__ = 0;
                    $283 = (invoke_iii(559,($282|0),(0|0))|0);
                    $284 = __THREW__; __THREW__ = 0;
                    $285 = $284&1;
                    if ($285) {
                     label = 52;
                     break L33;
                    }
                    $infoEle = $283;
                    while(1) {
                     $286 = $infoEle;
                     $287 = ($286|0)!=(0|0);
                     if (!($287)) {
                      break L39;
                     }
                     $288 = $infoEle;
                     __THREW__ = 0;
                     $289 = (invoke_iiii(558,($288|0),(10678|0),(0|0))|0);
                     $290 = __THREW__; __THREW__ = 0;
                     $291 = $290&1;
                     if ($291) {
                      label = 52;
                      break L33;
                     }
                     $104 = $nodeId;
                     $105 = $289;
                     $292 = $104;
                     $103 = $292;
                     $293 = $103;
                     $102 = $293;
                     $294 = $102;
                     $101 = $294;
                     $295 = $105;
                     $296 = $105;
                     __THREW__ = 0;
                     $297 = (invoke_ii(383,($296|0))|0);
                     $298 = __THREW__; __THREW__ = 0;
                     $299 = $298&1;
                     if ($299) {
                      label = 52;
                      break L33;
                     }
                     __THREW__ = 0;
                     invoke_viii(384,($292|0),($295|0),($297|0));
                     $300 = __THREW__; __THREW__ = 0;
                     $301 = $300&1;
                     if ($301) {
                      label = 52;
                      break L33;
                     }
                     $302 = $infoEle;
                     __THREW__ = 0;
                     $303 = (invoke_iiii(558,($302|0),(10685|0),(0|0))|0);
                     $304 = __THREW__; __THREW__ = 0;
                     $305 = $304&1;
                     if ($305) {
                      label = 53;
                      break L33;
                     }
                     $99 = $resourceId;
                     $100 = $303;
                     $306 = $99;
                     $98 = $306;
                     $307 = $98;
                     $97 = $307;
                     $308 = $97;
                     $96 = $308;
                     $309 = $100;
                     $310 = $100;
                     __THREW__ = 0;
                     $311 = (invoke_ii(383,($310|0))|0);
                     $312 = __THREW__; __THREW__ = 0;
                     $313 = $312&1;
                     if ($313) {
                      label = 53;
                      break L33;
                     }
                     __THREW__ = 0;
                     invoke_viii(384,($306|0),($309|0),($311|0));
                     $314 = __THREW__; __THREW__ = 0;
                     $315 = $314&1;
                     if ($315) {
                      label = 53;
                      break L33;
                     }
                     __THREW__ = 0;
                     invoke_vii(562,($142|0),($nodeId|0));
                     $316 = __THREW__; __THREW__ = 0;
                     $317 = $316&1;
                     if ($317) {
                      label = 54;
                      break L33;
                     }
                     $318 = HEAP32[$147>>2]|0;
                     $319 = ((($318)) + -40|0);
                     $320 = HEAP32[$319>>2]|0;
                     $321 = (($147) + ($320)|0);
                     __THREW__ = 0;
                     $322 = (invoke_iiii(563,($147|0),($142|0),($321|0))|0);
                     $323 = __THREW__; __THREW__ = 0;
                     $324 = $323&1;
                     if ($324) {
                      label = 55;
                      break L33;
                     }
                     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($142);
                     $dataNode = $322;
                     $325 = $dataNode;
                     $326 = ($325|0)!=(0|0);
                     if ($326) {
                      $327 = $dataNode;
                      $328 = HEAP32[$327>>2]|0;
                      $329 = ((($328)) + 24|0);
                      $330 = HEAP32[$329>>2]|0;
                      __THREW__ = 0;
                      $331 = (invoke_ii($330|0,($327|0))|0);
                      $332 = __THREW__; __THREW__ = 0;
                      $333 = $332&1;
                      if ($333) {
                       label = 54;
                       break L33;
                      }
                      $334 = HEAP32[$331>>2]|0;
                      $335 = ((($334)) + 40|0);
                      $336 = HEAP32[$335>>2]|0;
                      $95 = $resourceId;
                      $337 = $95;
                      $94 = $337;
                      $338 = $94;
                      $93 = $338;
                      $339 = $93;
                      $92 = $339;
                      $340 = $92;
                      $91 = $340;
                      $341 = $91;
                      $90 = $341;
                      $342 = $90;
                      $343 = HEAP8[$342>>0]|0;
                      $344 = $343&255;
                      $345 = $344 & 1;
                      $346 = ($345|0)!=(0);
                      if ($346) {
                       $84 = $339;
                       $347 = $84;
                       $83 = $347;
                       $348 = $83;
                       $82 = $348;
                       $349 = $82;
                       $350 = ((($349)) + 8|0);
                       $351 = HEAP32[$350>>2]|0;
                       $358 = $351;
                      } else {
                       $89 = $339;
                       $352 = $89;
                       $88 = $352;
                       $353 = $88;
                       $87 = $353;
                       $354 = $87;
                       $355 = ((($354)) + 1|0);
                       $86 = $355;
                       $356 = $86;
                       $85 = $356;
                       $357 = $85;
                       $358 = $357;
                      }
                      $81 = $358;
                      $359 = $81;
                      __THREW__ = 0;
                      (invoke_iii($336|0,($331|0),($359|0))|0);
                      $360 = __THREW__; __THREW__ = 0;
                      $361 = $360&1;
                      if ($361) {
                       label = 54;
                       break L33;
                      }
                     }
                     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($resourceId);
                     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($nodeId);
                     $370 = $infoEle;
                     __THREW__ = 0;
                     $371 = (invoke_iii(561,($370|0),(0|0))|0);
                     $372 = __THREW__; __THREW__ = 0;
                     $373 = $372&1;
                     if ($373) {
                      label = 52;
                      break L33;
                     }
                     $infoEle = $371;
                    }
                   } else {
                    $79 = $ele_name;
                    $80 = 10638;
                    $374 = $79;
                    $375 = $80;
                    $376 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($374,$375)|0);
                    $377 = ($376|0)==(0);
                    if ($377) {
                     $378 = $childEle;
                     __THREW__ = 0;
                     $379 = (invoke_iii(559,($378|0),(0|0))|0);
                     $380 = __THREW__; __THREW__ = 0;
                     $381 = $380&1;
                     if ($381) {
                      label = 52;
                      break L33;
                     }
                     $infoEle1 = $379;
                     while(1) {
                      $382 = $infoEle1;
                      $383 = ($382|0)!=(0|0);
                      if (!($383)) {
                       break L39;
                      }
                      $384 = $infoEle1;
                      __THREW__ = 0;
                      $385 = (invoke_iiii(558,($384|0),(10678|0),(0|0))|0);
                      $386 = __THREW__; __THREW__ = 0;
                      $387 = $386&1;
                      if ($387) {
                       label = 52;
                       break L33;
                      }
                      $77 = $nodeId2;
                      $78 = $385;
                      $388 = $77;
                      $76 = $388;
                      $389 = $76;
                      $75 = $389;
                      $390 = $75;
                      $74 = $390;
                      $391 = $78;
                      $392 = $78;
                      __THREW__ = 0;
                      $393 = (invoke_ii(383,($392|0))|0);
                      $394 = __THREW__; __THREW__ = 0;
                      $395 = $394&1;
                      if ($395) {
                       label = 52;
                       break L33;
                      }
                      __THREW__ = 0;
                      invoke_viii(384,($388|0),($391|0),($393|0));
                      $396 = __THREW__; __THREW__ = 0;
                      $397 = $396&1;
                      if ($397) {
                       label = 52;
                       break L33;
                      }
                      $398 = $infoEle1;
                      __THREW__ = 0;
                      $399 = (invoke_iiii(558,($398|0),(10706|0),(0|0))|0);
                      $400 = __THREW__; __THREW__ = 0;
                      $401 = $400&1;
                      if ($401) {
                       label = 78;
                       break L33;
                      }
                      $72 = $resourceId3;
                      $73 = $399;
                      $402 = $72;
                      $71 = $402;
                      $403 = $71;
                      $70 = $403;
                      $404 = $70;
                      $69 = $404;
                      $405 = $73;
                      $406 = $73;
                      __THREW__ = 0;
                      $407 = (invoke_ii(383,($406|0))|0);
                      $408 = __THREW__; __THREW__ = 0;
                      $409 = $408&1;
                      if ($409) {
                       label = 78;
                       break L33;
                      }
                      __THREW__ = 0;
                      invoke_viii(384,($402|0),($405|0),($407|0));
                      $410 = __THREW__; __THREW__ = 0;
                      $411 = $410&1;
                      if ($411) {
                       label = 78;
                       break L33;
                      }
                      __THREW__ = 0;
                      invoke_vii(562,($143|0),($nodeId2|0));
                      $412 = __THREW__; __THREW__ = 0;
                      $413 = $412&1;
                      if ($413) {
                       label = 79;
                       break L33;
                      }
                      $414 = HEAP32[$147>>2]|0;
                      $415 = ((($414)) + -40|0);
                      $416 = HEAP32[$415>>2]|0;
                      $417 = (($147) + ($416)|0);
                      __THREW__ = 0;
                      $418 = (invoke_iiii(563,($147|0),($143|0),($417|0))|0);
                      $419 = __THREW__; __THREW__ = 0;
                      $420 = $419&1;
                      if ($420) {
                       label = 80;
                       break L33;
                      }
                      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($143);
                      $dataNode4 = $418;
                      $421 = $dataNode4;
                      $422 = ($421|0)!=(0|0);
                      if ($422) {
                       $423 = $dataNode4;
                       $424 = HEAP32[$423>>2]|0;
                       $425 = ((($424)) + 24|0);
                       $426 = HEAP32[$425>>2]|0;
                       __THREW__ = 0;
                       $427 = (invoke_ii($426|0,($423|0))|0);
                       $428 = __THREW__; __THREW__ = 0;
                       $429 = $428&1;
                       if ($429) {
                        label = 79;
                        break L33;
                       }
                       $430 = HEAP32[$427>>2]|0;
                       $431 = ((($430)) + 64|0);
                       $432 = HEAP32[$431>>2]|0;
                       $68 = $resourceId3;
                       $433 = $68;
                       $67 = $433;
                       $434 = $67;
                       $66 = $434;
                       $435 = $66;
                       $65 = $435;
                       $436 = $65;
                       $64 = $436;
                       $437 = $64;
                       $63 = $437;
                       $438 = $63;
                       $439 = HEAP8[$438>>0]|0;
                       $440 = $439&255;
                       $441 = $440 & 1;
                       $442 = ($441|0)!=(0);
                       if ($442) {
                        $57 = $435;
                        $443 = $57;
                        $56 = $443;
                        $444 = $56;
                        $55 = $444;
                        $445 = $55;
                        $446 = ((($445)) + 8|0);
                        $447 = HEAP32[$446>>2]|0;
                        $454 = $447;
                       } else {
                        $62 = $435;
                        $448 = $62;
                        $61 = $448;
                        $449 = $61;
                        $60 = $449;
                        $450 = $60;
                        $451 = ((($450)) + 1|0);
                        $59 = $451;
                        $452 = $59;
                        $58 = $452;
                        $453 = $58;
                        $454 = $453;
                       }
                       $54 = $454;
                       $455 = $54;
                       __THREW__ = 0;
                       (invoke_iii($432|0,($427|0),($455|0))|0);
                       $456 = __THREW__; __THREW__ = 0;
                       $457 = $456&1;
                       if ($457) {
                        label = 79;
                        break L33;
                       }
                      }
                      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($resourceId3);
                      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($nodeId2);
                      $464 = $infoEle1;
                      __THREW__ = 0;
                      $465 = (invoke_iii(561,($464|0),(0|0))|0);
                      $466 = __THREW__; __THREW__ = 0;
                      $467 = $466&1;
                      if ($467) {
                       label = 52;
                       break L33;
                      }
                      $infoEle1 = $465;
                     }
                    }
                    $52 = $ele_name;
                    $53 = 10650;
                    $468 = $52;
                    $469 = $53;
                    $470 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($468,$469)|0);
                    $471 = ($470|0)==(0);
                    if ($471) {
                     $472 = $childEle;
                     __THREW__ = 0;
                     $473 = (invoke_iii(559,($472|0),(0|0))|0);
                     $474 = __THREW__; __THREW__ = 0;
                     $475 = $474&1;
                     if ($475) {
                      label = 52;
                      break L33;
                     }
                     $infoEle5 = $473;
                     while(1) {
                      $476 = $infoEle5;
                      $477 = ($476|0)!=(0|0);
                      if (!($477)) {
                       break L39;
                      }
                      $478 = $infoEle5;
                      __THREW__ = 0;
                      $479 = (invoke_iiii(558,($478|0),(10678|0),(0|0))|0);
                      $480 = __THREW__; __THREW__ = 0;
                      $481 = $480&1;
                      if ($481) {
                       label = 52;
                       break L33;
                      }
                      $50 = $nodeId6;
                      $51 = $479;
                      $482 = $50;
                      $49 = $482;
                      $483 = $49;
                      $48 = $483;
                      $484 = $48;
                      $47 = $484;
                      $485 = $51;
                      $486 = $51;
                      __THREW__ = 0;
                      $487 = (invoke_ii(383,($486|0))|0);
                      $488 = __THREW__; __THREW__ = 0;
                      $489 = $488&1;
                      if ($489) {
                       label = 52;
                       break L33;
                      }
                      __THREW__ = 0;
                      invoke_viii(384,($482|0),($485|0),($487|0));
                      $490 = __THREW__; __THREW__ = 0;
                      $491 = $490&1;
                      if ($491) {
                       label = 52;
                       break L33;
                      }
                      $492 = $infoEle5;
                      __THREW__ = 0;
                      $493 = (invoke_iiii(558,($492|0),(10724|0),(0|0))|0);
                      $494 = __THREW__; __THREW__ = 0;
                      $495 = $494&1;
                      if ($495) {
                       label = 103;
                       break L33;
                      }
                      $45 = $resourceId7;
                      $46 = $493;
                      $496 = $45;
                      $44 = $496;
                      $497 = $44;
                      $43 = $497;
                      $498 = $43;
                      $42 = $498;
                      $499 = $46;
                      $500 = $46;
                      __THREW__ = 0;
                      $501 = (invoke_ii(383,($500|0))|0);
                      $502 = __THREW__; __THREW__ = 0;
                      $503 = $502&1;
                      if ($503) {
                       label = 103;
                       break L33;
                      }
                      __THREW__ = 0;
                      invoke_viii(384,($496|0),($499|0),($501|0));
                      $504 = __THREW__; __THREW__ = 0;
                      $505 = $504&1;
                      if ($505) {
                       label = 103;
                       break L33;
                      }
                      __THREW__ = 0;
                      invoke_vii(562,($144|0),($nodeId6|0));
                      $506 = __THREW__; __THREW__ = 0;
                      $507 = $506&1;
                      if ($507) {
                       label = 104;
                       break L33;
                      }
                      $508 = HEAP32[$147>>2]|0;
                      $509 = ((($508)) + -40|0);
                      $510 = HEAP32[$509>>2]|0;
                      $511 = (($147) + ($510)|0);
                      __THREW__ = 0;
                      $512 = (invoke_iiii(563,($147|0),($144|0),($511|0))|0);
                      $513 = __THREW__; __THREW__ = 0;
                      $514 = $513&1;
                      if ($514) {
                       label = 105;
                       break L33;
                      }
                      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($144);
                      $dataNode8 = $512;
                      $515 = $dataNode8;
                      $516 = ($515|0)!=(0|0);
                      if ($516) {
                       $517 = $dataNode8;
                       $518 = HEAP32[$517>>2]|0;
                       $519 = ((($518)) + 24|0);
                       $520 = HEAP32[$519>>2]|0;
                       __THREW__ = 0;
                       $521 = (invoke_ii($520|0,($517|0))|0);
                       $522 = __THREW__; __THREW__ = 0;
                       $523 = $522&1;
                       if ($523) {
                        label = 104;
                        break L33;
                       }
                       $524 = HEAP32[$521>>2]|0;
                       $525 = ((($524)) + 48|0);
                       $526 = HEAP32[$525>>2]|0;
                       $41 = $resourceId7;
                       $527 = $41;
                       $40 = $527;
                       $528 = $40;
                       $39 = $528;
                       $529 = $39;
                       $38 = $529;
                       $530 = $38;
                       $37 = $530;
                       $531 = $37;
                       $36 = $531;
                       $532 = $36;
                       $533 = HEAP8[$532>>0]|0;
                       $534 = $533&255;
                       $535 = $534 & 1;
                       $536 = ($535|0)!=(0);
                       if ($536) {
                        $30 = $529;
                        $537 = $30;
                        $29 = $537;
                        $538 = $29;
                        $28 = $538;
                        $539 = $28;
                        $540 = ((($539)) + 8|0);
                        $541 = HEAP32[$540>>2]|0;
                        $548 = $541;
                       } else {
                        $35 = $529;
                        $542 = $35;
                        $34 = $542;
                        $543 = $34;
                        $33 = $543;
                        $544 = $33;
                        $545 = ((($544)) + 1|0);
                        $32 = $545;
                        $546 = $32;
                        $31 = $546;
                        $547 = $31;
                        $548 = $547;
                       }
                       $27 = $548;
                       $549 = $27;
                       __THREW__ = 0;
                       (invoke_iii($526|0,($521|0),($549|0))|0);
                       $550 = __THREW__; __THREW__ = 0;
                       $551 = $550&1;
                       if ($551) {
                        label = 104;
                        break L33;
                       }
                      }
                      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($resourceId7);
                      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($nodeId6);
                      $558 = $infoEle5;
                      __THREW__ = 0;
                      $559 = (invoke_iii(561,($558|0),(0|0))|0);
                      $560 = __THREW__; __THREW__ = 0;
                      $561 = $560&1;
                      if ($561) {
                       label = 52;
                       break L33;
                      }
                      $infoEle5 = $559;
                     }
                    }
                    $25 = $ele_name;
                    $26 = 10656;
                    $562 = $25;
                    $563 = $26;
                    $564 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($562,$563)|0);
                    $565 = ($564|0)==(0);
                    if (!($565)) {
                     break;
                    }
                    $566 = $childEle;
                    __THREW__ = 0;
                    $567 = (invoke_iii(559,($566|0),(0|0))|0);
                    $568 = __THREW__; __THREW__ = 0;
                    $569 = $568&1;
                    if ($569) {
                     label = 52;
                     break L33;
                    }
                    $infoEle9 = $567;
                    while(1) {
                     $570 = $infoEle9;
                     $571 = ($570|0)!=(0|0);
                     if (!($571)) {
                      break L39;
                     }
                     $572 = $infoEle9;
                     __THREW__ = 0;
                     $573 = (invoke_iiii(558,($572|0),(10678|0),(0|0))|0);
                     $574 = __THREW__; __THREW__ = 0;
                     $575 = $574&1;
                     if ($575) {
                      label = 52;
                      break L33;
                     }
                     $23 = $nodeId10;
                     $24 = $573;
                     $576 = $23;
                     $22 = $576;
                     $577 = $22;
                     $21 = $577;
                     $578 = $21;
                     $20 = $578;
                     $579 = $24;
                     $580 = $24;
                     __THREW__ = 0;
                     $581 = (invoke_ii(383,($580|0))|0);
                     $582 = __THREW__; __THREW__ = 0;
                     $583 = $582&1;
                     if ($583) {
                      label = 52;
                      break L33;
                     }
                     __THREW__ = 0;
                     invoke_viii(384,($576|0),($579|0),($581|0));
                     $584 = __THREW__; __THREW__ = 0;
                     $585 = $584&1;
                     if ($585) {
                      label = 52;
                      break L33;
                     }
                     $586 = $infoEle9;
                     __THREW__ = 0;
                     $587 = (invoke_iiii(558,($586|0),(10744|0),(0|0))|0);
                     $588 = __THREW__; __THREW__ = 0;
                     $589 = $588&1;
                     if ($589) {
                      label = 128;
                      break L33;
                     }
                     $18 = $resourceId11;
                     $19 = $587;
                     $590 = $18;
                     $17 = $590;
                     $591 = $17;
                     $16 = $591;
                     $592 = $16;
                     $15 = $592;
                     $593 = $19;
                     $594 = $19;
                     __THREW__ = 0;
                     $595 = (invoke_ii(383,($594|0))|0);
                     $596 = __THREW__; __THREW__ = 0;
                     $597 = $596&1;
                     if ($597) {
                      label = 128;
                      break L33;
                     }
                     __THREW__ = 0;
                     invoke_viii(384,($590|0),($593|0),($595|0));
                     $598 = __THREW__; __THREW__ = 0;
                     $599 = $598&1;
                     if ($599) {
                      label = 128;
                      break L33;
                     }
                     __THREW__ = 0;
                     invoke_vii(562,($145|0),($nodeId10|0));
                     $600 = __THREW__; __THREW__ = 0;
                     $601 = $600&1;
                     if ($601) {
                      label = 129;
                      break L33;
                     }
                     $602 = HEAP32[$147>>2]|0;
                     $603 = ((($602)) + -40|0);
                     $604 = HEAP32[$603>>2]|0;
                     $605 = (($147) + ($604)|0);
                     __THREW__ = 0;
                     $606 = (invoke_iiii(563,($147|0),($145|0),($605|0))|0);
                     $607 = __THREW__; __THREW__ = 0;
                     $608 = $607&1;
                     if ($608) {
                      label = 130;
                      break L33;
                     }
                     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($145);
                     $dataNode12 = $606;
                     $609 = $dataNode12;
                     $610 = ($609|0)!=(0|0);
                     if ($610) {
                      $611 = $dataNode12;
                      $612 = HEAP32[$611>>2]|0;
                      $613 = ((($612)) + 24|0);
                      $614 = HEAP32[$613>>2]|0;
                      __THREW__ = 0;
                      $615 = (invoke_ii($614|0,($611|0))|0);
                      $616 = __THREW__; __THREW__ = 0;
                      $617 = $616&1;
                      if ($617) {
                       label = 129;
                       break L33;
                      }
                      $618 = HEAP32[$615>>2]|0;
                      $619 = ((($618)) + 72|0);
                      $620 = HEAP32[$619>>2]|0;
                      $14 = $resourceId11;
                      $621 = $14;
                      $13 = $621;
                      $622 = $13;
                      $12 = $622;
                      $623 = $12;
                      $11 = $623;
                      $624 = $11;
                      $10 = $624;
                      $625 = $10;
                      $9 = $625;
                      $626 = $9;
                      $627 = HEAP8[$626>>0]|0;
                      $628 = $627&255;
                      $629 = $628 & 1;
                      $630 = ($629|0)!=(0);
                      if ($630) {
                       $3 = $623;
                       $631 = $3;
                       $2 = $631;
                       $632 = $2;
                       $1 = $632;
                       $633 = $1;
                       $634 = ((($633)) + 8|0);
                       $635 = HEAP32[$634>>2]|0;
                       $642 = $635;
                      } else {
                       $8 = $623;
                       $636 = $8;
                       $7 = $636;
                       $637 = $7;
                       $6 = $637;
                       $638 = $6;
                       $639 = ((($638)) + 1|0);
                       $5 = $639;
                       $640 = $5;
                       $4 = $640;
                       $641 = $4;
                       $642 = $641;
                      }
                      $0 = $642;
                      $643 = $0;
                      __THREW__ = 0;
                      (invoke_iii($620|0,($615|0),($643|0))|0);
                      $644 = __THREW__; __THREW__ = 0;
                      $645 = $644&1;
                      if ($645) {
                       label = 129;
                       break L33;
                      }
                     }
                     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($resourceId11);
                     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($nodeId10);
                     $652 = $infoEle9;
                     __THREW__ = 0;
                     $653 = (invoke_iii(561,($652|0),(0|0))|0);
                     $654 = __THREW__; __THREW__ = 0;
                     $655 = $654&1;
                     if ($655) {
                      label = 52;
                      break L33;
                     }
                     $infoEle9 = $653;
                    }
                   }
                  } while(0);
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ele_name);
                  $656 = $childEle;
                  __THREW__ = 0;
                  $657 = (invoke_iii(561,($656|0),(0|0))|0);
                  $658 = __THREW__; __THREW__ = 0;
                  $659 = $658&1;
                  if ($659) {
                   label = 24;
                   break L11;
                  }
                  $childEle = $657;
                 }
                 switch (label|0) {
                  case 52: {
                   $362 = ___cxa_find_matching_catch()|0;
                   $363 = tempRet0;
                   $140 = $362;
                   $141 = $363;
                   break;
                  }
                  case 53: {
                   $364 = ___cxa_find_matching_catch()|0;
                   $365 = tempRet0;
                   $140 = $364;
                   $141 = $365;
                   label = 59;
                   break;
                  }
                  case 54: {
                   $366 = ___cxa_find_matching_catch()|0;
                   $367 = tempRet0;
                   $140 = $366;
                   $141 = $367;
                   label = 58;
                   break;
                  }
                  case 55: {
                   $368 = ___cxa_find_matching_catch()|0;
                   $369 = tempRet0;
                   $140 = $368;
                   $141 = $369;
                   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($142);
                   label = 58;
                   break;
                  }
                  case 78: {
                   $458 = ___cxa_find_matching_catch()|0;
                   $459 = tempRet0;
                   $140 = $458;
                   $141 = $459;
                   label = 84;
                   break;
                  }
                  case 79: {
                   $460 = ___cxa_find_matching_catch()|0;
                   $461 = tempRet0;
                   $140 = $460;
                   $141 = $461;
                   label = 83;
                   break;
                  }
                  case 80: {
                   $462 = ___cxa_find_matching_catch()|0;
                   $463 = tempRet0;
                   $140 = $462;
                   $141 = $463;
                   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($143);
                   label = 83;
                   break;
                  }
                  case 103: {
                   $552 = ___cxa_find_matching_catch()|0;
                   $553 = tempRet0;
                   $140 = $552;
                   $141 = $553;
                   label = 109;
                   break;
                  }
                  case 104: {
                   $554 = ___cxa_find_matching_catch()|0;
                   $555 = tempRet0;
                   $140 = $554;
                   $141 = $555;
                   label = 108;
                   break;
                  }
                  case 105: {
                   $556 = ___cxa_find_matching_catch()|0;
                   $557 = tempRet0;
                   $140 = $556;
                   $141 = $557;
                   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($144);
                   label = 108;
                   break;
                  }
                  case 128: {
                   $646 = ___cxa_find_matching_catch()|0;
                   $647 = tempRet0;
                   $140 = $646;
                   $141 = $647;
                   label = 134;
                   break;
                  }
                  case 129: {
                   $648 = ___cxa_find_matching_catch()|0;
                   $649 = tempRet0;
                   $140 = $648;
                   $141 = $649;
                   label = 133;
                   break;
                  }
                  case 130: {
                   $650 = ___cxa_find_matching_catch()|0;
                   $651 = tempRet0;
                   $140 = $650;
                   $141 = $651;
                   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($145);
                   label = 133;
                   break;
                  }
                  case 138: {
                   $146 = 1;
                   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($dataset_description);
                   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($dataset_name);
                   __ZN8tinyxml211XMLDocumentD2Ev($doc);
                   STACKTOP = sp;return 1;
                   break;
                  }
                 }
                 if ((label|0) == 58) {
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($resourceId);
                  label = 59;
                 }
                 else if ((label|0) == 83) {
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($resourceId3);
                  label = 84;
                 }
                 else if ((label|0) == 108) {
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($resourceId7);
                  label = 109;
                 }
                 else if ((label|0) == 133) {
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($resourceId11);
                  label = 134;
                 }
                 if ((label|0) == 59) {
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($nodeId);
                 }
                 else if ((label|0) == 84) {
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($nodeId2);
                 }
                 else if ((label|0) == 109) {
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($nodeId6);
                 }
                 else if ((label|0) == 134) {
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($nodeId10);
                 }
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ele_name);
                }
               }
              }
             }
            }
           }
          }
         } while(0);
         if ((label|0) == 24) {
          $248 = ___cxa_find_matching_catch()|0;
          $249 = tempRet0;
          $140 = $248;
          $141 = $249;
         }
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($dataset_description);
        }
       }
      }
      if ((label|0) == 23) {
       $246 = ___cxa_find_matching_catch()|0;
       $247 = tempRet0;
       $140 = $246;
       $141 = $247;
      }
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($dataset_name);
      __ZN8tinyxml211XMLDocumentD2Ev($doc);
      $660 = $140;
      $661 = $141;
      ___resumeException($660|0);
      // unreachable;
     }
    }
   }
  }
 }
 $244 = ___cxa_find_matching_catch()|0;
 $245 = tempRet0;
 $140 = $244;
 $141 = $245;
 __ZN8tinyxml211XMLDocumentD2Ev($doc);
 $660 = $140;
 $661 = $141;
 ___resumeException($660|0);
 // unreachable;
 return (0)|0;
}
function __ZN4NGIS4Data6Schema17CUdxDatasetSchema17FormatToXmlStreamERNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE($this,$xmlStr) {
 $this = $this|0;
 $xmlStr = $xmlStr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $count = 0, $doc = 0, $element = 0, $iNode = 0, $printer = 0, $rootEle = 0, $tempNode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 672|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $doc = sp + 280|0;
 $printer = sp + 8|0;
 $2 = $this;
 $3 = $xmlStr;
 $7 = $2;
 __ZN8tinyxml211XMLDocumentC2EbNS_10WhitespaceE($doc,1,0);
 __THREW__ = 0;
 $8 = (invoke_iii(564,($doc|0),(7642|0))|0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 L1: do {
  if (!($10)) {
   $element = $8;
   $11 = $element;
   __THREW__ = 0;
   (invoke_iii(565,($doc|0),($11|0))|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if (!($13)) {
    $14 = $element;
    $15 = HEAP32[$7>>2]|0;
    $16 = ((($15)) + 24|0);
    $17 = HEAP32[$16>>2]|0;
    __THREW__ = 0;
    $18 = (invoke_ii($17|0,($7|0))|0);
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if (!($20)) {
     __THREW__ = 0;
     invoke_viii(566,($14|0),(10874|0),($18|0));
     $21 = __THREW__; __THREW__ = 0;
     $22 = $21&1;
     if (!($22)) {
      $23 = $element;
      $24 = HEAP32[$7>>2]|0;
      $25 = ((($24)) + 28|0);
      $26 = HEAP32[$25>>2]|0;
      __THREW__ = 0;
      $27 = (invoke_ii($26|0,($7|0))|0);
      $28 = __THREW__; __THREW__ = 0;
      $29 = $28&1;
      if (!($29)) {
       $30 = HEAP32[$27>>2]|0;
       $31 = ((($30)) + 28|0);
       $32 = HEAP32[$31>>2]|0;
       __THREW__ = 0;
       $33 = (invoke_ii($32|0,($27|0))|0);
       $34 = __THREW__; __THREW__ = 0;
       $35 = $34&1;
       if (!($35)) {
        __THREW__ = 0;
        invoke_viii(566,($23|0),(10585|0),($33|0));
        $36 = __THREW__; __THREW__ = 0;
        $37 = $36&1;
        if (!($37)) {
         __THREW__ = 0;
         $38 = (invoke_iii(564,($doc|0),(10597|0))|0);
         $39 = __THREW__; __THREW__ = 0;
         $40 = $39&1;
         if (!($40)) {
          $rootEle = $38;
          $41 = $element;
          $42 = $rootEle;
          __THREW__ = 0;
          (invoke_iii(565,($41|0),($42|0))|0);
          $43 = __THREW__; __THREW__ = 0;
          $44 = $43&1;
          if (!($44)) {
           $45 = HEAP32[$7>>2]|0;
           $46 = ((($45)) + 40|0);
           $47 = HEAP32[$46>>2]|0;
           __THREW__ = 0;
           $48 = (invoke_ii($47|0,($7|0))|0);
           $49 = __THREW__; __THREW__ = 0;
           $50 = $49&1;
           if (!($50)) {
            $count = $48;
            $iNode = 0;
            while(1) {
             $51 = $iNode;
             $52 = $count;
             $53 = ($51|0)<($52|0);
             if (!($53)) {
              break;
             }
             $54 = HEAP32[$7>>2]|0;
             $55 = ((($54)) + 44|0);
             $56 = HEAP32[$55>>2]|0;
             $57 = $iNode;
             __THREW__ = 0;
             $58 = (invoke_iii($56|0,($7|0),($57|0))|0);
             $59 = __THREW__; __THREW__ = 0;
             $60 = $59&1;
             if ($60) {
              break L1;
             }
             $tempNode = $58;
             $61 = $tempNode;
             $62 = $rootEle;
             __THREW__ = 0;
             invoke_viii(567,($7|0),($61|0),($62|0));
             $63 = __THREW__; __THREW__ = 0;
             $64 = $63&1;
             if ($64) {
              break L1;
             }
             $65 = $iNode;
             $66 = (($65) + 1)|0;
             $iNode = $66;
            }
            __THREW__ = 0;
            invoke_viiii(570,($printer|0),(0|0),0,0);
            $69 = __THREW__; __THREW__ = 0;
            $70 = $69&1;
            if (!($70)) {
             __THREW__ = 0;
             invoke_vii(379,($doc|0),($printer|0));
             $71 = __THREW__; __THREW__ = 0;
             $72 = $71&1;
             if (!($72)) {
              $73 = $3;
              __THREW__ = 0;
              $74 = (invoke_ii(571,($printer|0))|0);
              $75 = __THREW__; __THREW__ = 0;
              $76 = $75&1;
              if (!($76)) {
               $0 = $73;
               $1 = $74;
               $77 = $0;
               $78 = $1;
               __THREW__ = 0;
               (invoke_iii(387,($77|0),($78|0))|0);
               $79 = __THREW__; __THREW__ = 0;
               $80 = $79&1;
               if (!($80)) {
                $6 = 1;
                __ZN8tinyxml210XMLPrinterD2Ev($printer);
                __ZN8tinyxml211XMLDocumentD2Ev($doc);
                STACKTOP = sp;return 1;
               }
              }
             }
             $81 = ___cxa_find_matching_catch()|0;
             $82 = tempRet0;
             $4 = $81;
             $5 = $82;
             __ZN8tinyxml210XMLPrinterD2Ev($printer);
             __ZN8tinyxml211XMLDocumentD2Ev($doc);
             $83 = $4;
             $84 = $5;
             ___resumeException($83|0);
             // unreachable;
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $67 = ___cxa_find_matching_catch()|0;
 $68 = tempRet0;
 $4 = $67;
 $5 = $68;
 __ZN8tinyxml211XMLDocumentD2Ev($doc);
 $83 = $4;
 $84 = $5;
 ___resumeException($83|0);
 // unreachable;
 return (0)|0;
}
function __ZN4NGIS4Data6Schema17CUdxDatasetSchemaD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4NGIS4Data6Schema17CUdxDatasetSchemaD2Ev($1,3168);
 $2 = ((($1)) + 12|0);
 __ZN4NGIS4Data6Schema14CUdxNodeSchemaD2Ev($2);
 $3 = 3184;
 __ZN4NGIS4Data6Schema17IUdxDatasetSchemaD2Ev($1,$3);
 $4 = ((($1)) + 4|0);
 __ZN4NGIS4Data6Schema14IUdxNodeSchemaD2Ev($4);
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data6Schema17CUdxDatasetSchemaD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4NGIS4Data6Schema17CUdxDatasetSchemaD1Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data6Schema17CUdxDatasetSchema7getNameEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + -40|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + ($4)|0);
 $6 = (__ZN4NGIS4Data6Schema14CUdxNodeSchema7getNameEv($5)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZN4NGIS4Data6Schema17CUdxDatasetSchema14getDescriptionEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + -40|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + ($4)|0);
 $6 = (__ZN4NGIS4Data6Schema14CUdxNodeSchema14getDescriptionEv($5)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZN4NGIS4Data6Schema17CUdxDatasetSchema10modifyNameEPKc($this,$pName) {
 $this = $this|0;
 $pName = $pName|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $pName;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + -40|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($2) + ($5)|0);
 $7 = $1;
 $8 = (__ZN4NGIS4Data6Schema14CUdxNodeSchema10modifyNameEPKc($6,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function __ZN4NGIS4Data6Schema17CUdxDatasetSchema13getParentNodeEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return (0|0);
}
function __ZN4NGIS4Data6Schema17CUdxDatasetSchema17getChildNodeCountEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + -40|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + ($4)|0);
 $6 = (__ZN4NGIS4Data6Schema14CUdxNodeSchema17getChildNodeCountEv($5)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZN4NGIS4Data6Schema17CUdxDatasetSchema12getChildNodeEi($this,$idx) {
 $this = $this|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $idx;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + -40|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($2) + ($5)|0);
 $7 = $1;
 $8 = (__ZN4NGIS4Data6Schema14CUdxNodeSchema12getChildNodeEi($6,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function __ZN4NGIS4Data6Schema17CUdxDatasetSchema12addChildNodeEPKcPNS1_16INodeDescriptionE($this,$pName,$pDescription) {
 $this = $this|0;
 $pName = $pName|0;
 $pDescription = $pDescription|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $pName;
 $2 = $pDescription;
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + -40|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($3) + ($6)|0);
 $8 = $1;
 $9 = $2;
 $10 = (__ZN4NGIS4Data6Schema14CUdxNodeSchema12addChildNodeEPKcPNS1_16INodeDescriptionE($7,$8,$9)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZN4NGIS4Data6Schema17CUdxDatasetSchema12addChildNodeEPKciS4_($this,$pName,$pNodeType,$pNodeInfo) {
 $this = $this|0;
 $pName = $pName|0;
 $pNodeType = $pNodeType|0;
 $pNodeInfo = $pNodeInfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $pName;
 $2 = $pNodeType;
 $3 = $pNodeInfo;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + -40|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($4) + ($7)|0);
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = (__ZN4NGIS4Data6Schema14CUdxNodeSchema12addChildNodeEPKciS4_($8,$9,$10,$11)|0);
 STACKTOP = sp;return ($12|0);
}
function __ZN4NGIS4Data6Schema17CUdxDatasetSchema15removeChildNodeEPNS1_14IUdxNodeSchemaE($this,$pNode) {
 $this = $this|0;
 $pNode = $pNode|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $pNode;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + -40|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($2) + ($5)|0);
 $7 = $1;
 $8 = (__ZN4NGIS4Data6Schema14CUdxNodeSchema15removeChildNodeEPNS1_14IUdxNodeSchemaE($6,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function __ZN4NGIS4Data6Schema17CUdxDatasetSchema15removeChildNodeEi($this,$idx) {
 $this = $this|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $idx;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + -40|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($2) + ($5)|0);
 $7 = $1;
 $8 = (__ZN4NGIS4Data6Schema14CUdxNodeSchema15removeChildNodeEi($6,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function __ZTv0_n12_N4NGIS4Data6Schema17CUdxDatasetSchemaD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + ($4)|0);
 __ZN4NGIS4Data6Schema17CUdxDatasetSchemaD1Ev($5);
 STACKTOP = sp;return;
}
function __ZTv0_n12_N4NGIS4Data6Schema17CUdxDatasetSchemaD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + ($4)|0);
 __ZN4NGIS4Data6Schema17CUdxDatasetSchemaD0Ev($5);
 STACKTOP = sp;return;
}
function __ZTv0_n28_N4NGIS4Data6Schema17CUdxDatasetSchema7getNameEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + -28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + ($4)|0);
 $6 = (__ZN4NGIS4Data6Schema17CUdxDatasetSchema7getNameEv($5)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZTv0_n32_N4NGIS4Data6Schema17CUdxDatasetSchema14getDescriptionEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + -32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + ($4)|0);
 $6 = (__ZN4NGIS4Data6Schema17CUdxDatasetSchema14getDescriptionEv($5)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZTv0_n36_N4NGIS4Data6Schema17CUdxDatasetSchema10modifyNameEPKc($this,$pName) {
 $this = $this|0;
 $pName = $pName|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $pName;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + -36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($2) + ($5)|0);
 $7 = $1;
 $8 = (__ZN4NGIS4Data6Schema17CUdxDatasetSchema10modifyNameEPKc($6,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function __ZTv0_n40_N4NGIS4Data6Schema17CUdxDatasetSchema13getParentNodeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + -40|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + ($4)|0);
 $6 = (__ZN4NGIS4Data6Schema17CUdxDatasetSchema13getParentNodeEv($5)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZTv0_n44_N4NGIS4Data6Schema17CUdxDatasetSchema17getChildNodeCountEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + -44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + ($4)|0);
 $6 = (__ZN4NGIS4Data6Schema17CUdxDatasetSchema17getChildNodeCountEv($5)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZTv0_n48_N4NGIS4Data6Schema17CUdxDatasetSchema12getChildNodeEi($this,$idx) {
 $this = $this|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $idx;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + -48|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($2) + ($5)|0);
 $7 = $1;
 $8 = (__ZN4NGIS4Data6Schema17CUdxDatasetSchema12getChildNodeEi($6,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function __ZTv0_n52_N4NGIS4Data6Schema17CUdxDatasetSchema12addChildNodeEPKcPNS1_16INodeDescriptionE($this,$pName,$pDescription) {
 $this = $this|0;
 $pName = $pName|0;
 $pDescription = $pDescription|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $pName;
 $2 = $pDescription;
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + -52|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($3) + ($6)|0);
 $8 = $1;
 $9 = $2;
 $10 = (__ZN4NGIS4Data6Schema17CUdxDatasetSchema12addChildNodeEPKcPNS1_16INodeDescriptionE($7,$8,$9)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZTv0_n56_N4NGIS4Data6Schema17CUdxDatasetSchema12addChildNodeEPKciS4_($this,$pName,$pNodeType,$pNodeInfo) {
 $this = $this|0;
 $pName = $pName|0;
 $pNodeType = $pNodeType|0;
 $pNodeInfo = $pNodeInfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $pName;
 $2 = $pNodeType;
 $3 = $pNodeInfo;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + -56|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($4) + ($7)|0);
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = (__ZN4NGIS4Data6Schema17CUdxDatasetSchema12addChildNodeEPKciS4_($8,$9,$10,$11)|0);
 STACKTOP = sp;return ($12|0);
}
function __ZTv0_n60_N4NGIS4Data6Schema17CUdxDatasetSchema15removeChildNodeEPNS1_14IUdxNodeSchemaE($this,$pNode) {
 $this = $this|0;
 $pNode = $pNode|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $pNode;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + -60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($2) + ($5)|0);
 $7 = $1;
 $8 = (__ZN4NGIS4Data6Schema17CUdxDatasetSchema15removeChildNodeEPNS1_14IUdxNodeSchemaE($6,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function __ZTv0_n64_N4NGIS4Data6Schema17CUdxDatasetSchema15removeChildNodeEi($this,$idx) {
 $this = $this|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $idx;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + -64|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($2) + ($5)|0);
 $7 = $1;
 $8 = (__ZN4NGIS4Data6Schema17CUdxDatasetSchema15removeChildNodeEi($6,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function __ZN4NGIS4Data6Schema17CUdxDatasetSchemaD2Ev($this,$vtt) {
 $this = $this|0;
 $vtt = $vtt|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $vtt;
 STACKTOP = sp;return;
}
function __ZN8tinyxml27XMLNode12LinkEndChildEPS0_($this,$addThis) {
 $this = $this|0;
 $addThis = $addThis|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $addThis;
 $2 = $0;
 $3 = $1;
 $4 = (__ZN8tinyxml27XMLNode14InsertEndChildEPS0_($2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN4NGIS4Data6Schema17CUdxDatasetSchema9FormatXDOEPNS1_14IUdxNodeSchemaEPN8tinyxml210XMLElementE($this,$pNode,$element) {
 $this = $this|0;
 $pNode = $pNode|0;
 $element = $element|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $childEle = 0, $conceptInfo = 0, $conceptsEle = 0, $count = 0, $dataTemplateInfo = 0, $dataTemplatesEle = 0, $doc = 0, $iNode = 0, $kernelType = 0, $name = 0, $nodeInfo = 0, $nodeType = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $s_node = 0, $s_node1 = 0;
 var $s_node2 = 0, $s_node3 = 0, $semanticNode = 0, $spatialRefInfo = 0, $spatialRefsEle = 0, $tempNode = 0, $unitInfo = 0, $unitsEle = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $conceptInfo = sp + 72|0;
 $spatialRefInfo = sp + 60|0;
 $unitInfo = sp + 40|0;
 $dataTemplateInfo = sp + 28|0;
 $96 = $this;
 $97 = $pNode;
 $98 = $element;
 $101 = $96;
 $102 = $97;
 $103 = HEAP32[$102>>2]|0;
 $104 = ((($103)) + 24|0);
 $105 = HEAP32[$104>>2]|0;
 $106 = (FUNCTION_TABLE_ii[$105 & 1023]($102)|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = ((($107)) + 20|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = (FUNCTION_TABLE_ii[$109 & 1023]($106)|0);
 $kernelType = $110;
 $111 = $97;
 $112 = HEAP32[$111>>2]|0;
 $113 = ((($112)) + 20|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = (FUNCTION_TABLE_ii[$114 & 1023]($111)|0);
 $name = $115;
 $116 = $kernelType;
 $117 = (__ZN4NGIS4Data6SchemaL21SchemaNodeType2StringENS1_15ESchemaNodeTypeE($116)|0);
 $nodeType = $117;
 $118 = $97;
 $119 = HEAP32[$118>>2]|0;
 $120 = ((($119)) + 24|0);
 $121 = HEAP32[$120>>2]|0;
 $122 = (FUNCTION_TABLE_ii[$121 & 1023]($118)|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = ((($123)) + 28|0);
 $125 = HEAP32[$124>>2]|0;
 $126 = (FUNCTION_TABLE_ii[$125 & 1023]($122)|0);
 $nodeInfo = $126;
 $127 = $98;
 $128 = (__ZN8tinyxml27XMLNode11GetDocumentEv($127)|0);
 $doc = $128;
 $129 = $doc;
 $130 = (__ZN8tinyxml211XMLDocument10NewElementEPKc($129,10597)|0);
 $childEle = $130;
 $131 = $98;
 $132 = $childEle;
 (__ZN8tinyxml27XMLNode12LinkEndChildEPS0_($131,$132)|0);
 $133 = $childEle;
 $134 = $name;
 __ZN8tinyxml210XMLElement12SetAttributeEPKcS2_($133,10874,$134);
 $135 = $childEle;
 $136 = $nodeType;
 __ZN8tinyxml210XMLElement12SetAttributeEPKcS2_($135,10605,$136);
 $137 = $childEle;
 $138 = $nodeInfo;
 __ZN8tinyxml210XMLElement12SetAttributeEPKcS2_($137,10585,$138);
 $139 = $doc;
 $140 = (__ZN8tinyxml211XMLDocument11RootElementEv($139)|0);
 $141 = (__ZN8tinyxml27XMLNode17FirstChildElementEPKc($140,10610)|0);
 $semanticNode = $141;
 $conceptsEle = 0;
 $spatialRefsEle = 0;
 $unitsEle = 0;
 $dataTemplatesEle = 0;
 $142 = $semanticNode;
 $143 = ($142|0)==(0|0);
 if ($143) {
  $144 = $doc;
  $145 = (__ZN8tinyxml211XMLDocument10NewElementEPKc($144,10610)|0);
  $semanticNode = $145;
  $146 = $doc;
  $147 = (__ZN8tinyxml211XMLDocument11RootElementEv($146)|0);
  $148 = $semanticNode;
  (__ZN8tinyxml27XMLNode12LinkEndChildEPS0_($147,$148)|0);
  $149 = $doc;
  $150 = (__ZN8tinyxml211XMLDocument10NewElementEPKc($149,10629)|0);
  $conceptsEle = $150;
  $151 = $semanticNode;
  $152 = $conceptsEle;
  (__ZN8tinyxml27XMLNode12LinkEndChildEPS0_($151,$152)|0);
  $153 = $doc;
  $154 = (__ZN8tinyxml211XMLDocument10NewElementEPKc($153,10638)|0);
  $spatialRefsEle = $154;
  $155 = $semanticNode;
  $156 = $spatialRefsEle;
  (__ZN8tinyxml27XMLNode12LinkEndChildEPS0_($155,$156)|0);
  $157 = $doc;
  $158 = (__ZN8tinyxml211XMLDocument10NewElementEPKc($157,10650)|0);
  $unitsEle = $158;
  $159 = $semanticNode;
  $160 = $unitsEle;
  (__ZN8tinyxml27XMLNode12LinkEndChildEPS0_($159,$160)|0);
  $161 = $doc;
  $162 = (__ZN8tinyxml211XMLDocument10NewElementEPKc($161,10656)|0);
  $dataTemplatesEle = $162;
  $163 = $semanticNode;
  $164 = $dataTemplatesEle;
  (__ZN8tinyxml27XMLNode12LinkEndChildEPS0_($163,$164)|0);
 } else {
  $165 = $semanticNode;
  $166 = (__ZN8tinyxml27XMLNode17FirstChildElementEPKc($165,10629)|0);
  $conceptsEle = $166;
  $167 = $semanticNode;
  $168 = (__ZN8tinyxml27XMLNode17FirstChildElementEPKc($167,10638)|0);
  $spatialRefsEle = $168;
  $169 = $semanticNode;
  $170 = (__ZN8tinyxml27XMLNode17FirstChildElementEPKc($169,10650)|0);
  $unitsEle = $170;
  $171 = $semanticNode;
  $172 = (__ZN8tinyxml27XMLNode17FirstChildElementEPKc($171,10656)|0);
  $dataTemplatesEle = $172;
  $173 = $conceptsEle;
  $174 = ($173|0)==(0|0);
  if ($174) {
   $175 = $doc;
   $176 = (__ZN8tinyxml211XMLDocument10NewElementEPKc($175,10629)|0);
   $conceptsEle = $176;
   $177 = $semanticNode;
   $178 = $conceptsEle;
   (__ZN8tinyxml27XMLNode12LinkEndChildEPS0_($177,$178)|0);
  }
  $179 = $spatialRefsEle;
  $180 = ($179|0)==(0|0);
  if ($180) {
   $181 = $doc;
   $182 = (__ZN8tinyxml211XMLDocument10NewElementEPKc($181,10638)|0);
   $spatialRefsEle = $182;
   $183 = $semanticNode;
   $184 = $spatialRefsEle;
   (__ZN8tinyxml27XMLNode12LinkEndChildEPS0_($183,$184)|0);
  }
  $185 = $unitsEle;
  $186 = ($185|0)==(0|0);
  if ($186) {
   $187 = $doc;
   $188 = (__ZN8tinyxml211XMLDocument10NewElementEPKc($187,10650)|0);
   $unitsEle = $188;
   $189 = $semanticNode;
   $190 = $unitsEle;
   (__ZN8tinyxml27XMLNode12LinkEndChildEPS0_($189,$190)|0);
  }
  $191 = $dataTemplatesEle;
  $192 = ($191|0)==(0|0);
  if ($192) {
   $193 = $doc;
   $194 = (__ZN8tinyxml211XMLDocument10NewElementEPKc($193,10656)|0);
   $dataTemplatesEle = $194;
   $195 = $semanticNode;
   $196 = $dataTemplatesEle;
   (__ZN8tinyxml27XMLNode12LinkEndChildEPS0_($195,$196)|0);
  }
 }
 $197 = $97;
 $198 = HEAP32[$197>>2]|0;
 $199 = ((($198)) + 24|0);
 $200 = HEAP32[$199>>2]|0;
 $201 = (FUNCTION_TABLE_ii[$200 & 1023]($197)|0);
 $202 = HEAP32[$201>>2]|0;
 $203 = ((($202)) + 36|0);
 $204 = HEAP32[$203>>2]|0;
 $205 = (FUNCTION_TABLE_ii[$204 & 1023]($201)|0);
 $94 = $conceptInfo;
 $95 = $205;
 $206 = $94;
 $93 = $206;
 $207 = $93;
 $92 = $207;
 $208 = $92;
 $91 = $208;
 $209 = $95;
 $210 = $95;
 $211 = (__ZNSt3__111char_traitsIcE6lengthEPKc($210)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($206,$209,$211);
 $212 = $97;
 $213 = HEAP32[$212>>2]|0;
 $214 = ((($213)) + 24|0);
 $215 = HEAP32[$214>>2]|0;
 __THREW__ = 0;
 $216 = (invoke_ii($215|0,($212|0))|0);
 $217 = __THREW__; __THREW__ = 0;
 $218 = $217&1;
 if (!($218)) {
  $219 = HEAP32[$216>>2]|0;
  $220 = ((($219)) + 60|0);
  $221 = HEAP32[$220>>2]|0;
  __THREW__ = 0;
  $222 = (invoke_ii($221|0,($216|0))|0);
  $223 = __THREW__; __THREW__ = 0;
  $224 = $223&1;
  if (!($224)) {
   $89 = $spatialRefInfo;
   $90 = $222;
   $225 = $89;
   $88 = $225;
   $226 = $88;
   $87 = $226;
   $227 = $87;
   $86 = $227;
   $228 = $90;
   $229 = $90;
   __THREW__ = 0;
   $230 = (invoke_ii(383,($229|0))|0);
   $231 = __THREW__; __THREW__ = 0;
   $232 = $231&1;
   if (!($232)) {
    __THREW__ = 0;
    invoke_viii(384,($225|0),($228|0),($230|0));
    $233 = __THREW__; __THREW__ = 0;
    $234 = $233&1;
    if (!($234)) {
     $235 = $97;
     $236 = HEAP32[$235>>2]|0;
     $237 = ((($236)) + 24|0);
     $238 = HEAP32[$237>>2]|0;
     __THREW__ = 0;
     $239 = (invoke_ii($238|0,($235|0))|0);
     $240 = __THREW__; __THREW__ = 0;
     $241 = $240&1;
     if ($241) {
      label = 32;
     } else {
      $242 = HEAP32[$239>>2]|0;
      $243 = ((($242)) + 44|0);
      $244 = HEAP32[$243>>2]|0;
      __THREW__ = 0;
      $245 = (invoke_ii($244|0,($239|0))|0);
      $246 = __THREW__; __THREW__ = 0;
      $247 = $246&1;
      if ($247) {
       label = 32;
      } else {
       $84 = $unitInfo;
       $85 = $245;
       $248 = $84;
       $83 = $248;
       $249 = $83;
       $82 = $249;
       $250 = $82;
       $81 = $250;
       $251 = $85;
       $252 = $85;
       __THREW__ = 0;
       $253 = (invoke_ii(383,($252|0))|0);
       $254 = __THREW__; __THREW__ = 0;
       $255 = $254&1;
       if ($255) {
        label = 32;
       } else {
        __THREW__ = 0;
        invoke_viii(384,($248|0),($251|0),($253|0));
        $256 = __THREW__; __THREW__ = 0;
        $257 = $256&1;
        if ($257) {
         label = 32;
        } else {
         $258 = $97;
         $259 = HEAP32[$258>>2]|0;
         $260 = ((($259)) + 24|0);
         $261 = HEAP32[$260>>2]|0;
         __THREW__ = 0;
         $262 = (invoke_ii($261|0,($258|0))|0);
         $263 = __THREW__; __THREW__ = 0;
         $264 = $263&1;
         if ($264) {
          label = 33;
         } else {
          $265 = HEAP32[$262>>2]|0;
          $266 = ((($265)) + 68|0);
          $267 = HEAP32[$266>>2]|0;
          __THREW__ = 0;
          $268 = (invoke_ii($267|0,($262|0))|0);
          $269 = __THREW__; __THREW__ = 0;
          $270 = $269&1;
          if ($270) {
           label = 33;
          } else {
           $79 = $dataTemplateInfo;
           $80 = $268;
           $271 = $79;
           $78 = $271;
           $272 = $78;
           $77 = $272;
           $273 = $77;
           $76 = $273;
           $274 = $80;
           $275 = $80;
           __THREW__ = 0;
           $276 = (invoke_ii(383,($275|0))|0);
           $277 = __THREW__; __THREW__ = 0;
           $278 = $277&1;
           if ($278) {
            label = 33;
           } else {
            __THREW__ = 0;
            invoke_viii(384,($271|0),($274|0),($276|0));
            $279 = __THREW__; __THREW__ = 0;
            $280 = $279&1;
            if ($280) {
             label = 33;
            } else {
             $74 = $conceptInfo;
             $75 = 11786;
             $281 = $74;
             $282 = $75;
             $72 = $281;
             $73 = $282;
             $283 = $72;
             $284 = $73;
             $285 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($283,$284)|0);
             $286 = ($285|0)==(0);
             $287 = $286 ^ 1;
             do {
              if ($287) {
               $288 = $doc;
               __THREW__ = 0;
               $289 = (invoke_iii(564,($288|0),(10670|0))|0);
               $290 = __THREW__; __THREW__ = 0;
               $291 = $290&1;
               if (!($291)) {
                $s_node = $289;
                $292 = $conceptsEle;
                $293 = $s_node;
                __THREW__ = 0;
                (invoke_iii(565,($292|0),($293|0))|0);
                $294 = __THREW__; __THREW__ = 0;
                $295 = $294&1;
                if (!($295)) {
                 $296 = $s_node;
                 $297 = $name;
                 __THREW__ = 0;
                 invoke_viii(566,($296|0),(10678|0),($297|0));
                 $298 = __THREW__; __THREW__ = 0;
                 $299 = $298&1;
                 if ($299) {
                  break;
                 }
                 $300 = $s_node;
                 $71 = $conceptInfo;
                 $301 = $71;
                 $70 = $301;
                 $302 = $70;
                 $69 = $302;
                 $303 = $69;
                 $68 = $303;
                 $304 = $68;
                 $67 = $304;
                 $305 = $67;
                 $66 = $305;
                 $306 = $66;
                 $307 = HEAP8[$306>>0]|0;
                 $308 = $307&255;
                 $309 = $308 & 1;
                 $310 = ($309|0)!=(0);
                 if ($310) {
                  $60 = $303;
                  $311 = $60;
                  $59 = $311;
                  $312 = $59;
                  $58 = $312;
                  $313 = $58;
                  $314 = ((($313)) + 8|0);
                  $315 = HEAP32[$314>>2]|0;
                  $322 = $315;
                 } else {
                  $65 = $303;
                  $316 = $65;
                  $64 = $316;
                  $317 = $64;
                  $63 = $317;
                  $318 = $63;
                  $319 = ((($318)) + 1|0);
                  $62 = $319;
                  $320 = $62;
                  $61 = $320;
                  $321 = $61;
                  $322 = $321;
                 }
                 $57 = $322;
                 $323 = $57;
                 __THREW__ = 0;
                 invoke_viii(566,($300|0),(10685|0),($323|0));
                 $324 = __THREW__; __THREW__ = 0;
                 $325 = $324&1;
                 if (!($325)) {
                  label = 35;
                 }
                }
               }
              } else {
               label = 35;
              }
             } while(0);
             L39: do {
              if ((label|0) == 35) {
               $55 = $spatialRefInfo;
               $56 = 11786;
               $334 = $55;
               $335 = $56;
               $53 = $334;
               $54 = $335;
               $336 = $53;
               $337 = $54;
               $338 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($336,$337)|0);
               $339 = ($338|0)==(0);
               $340 = $339 ^ 1;
               if ($340) {
                $341 = $doc;
                __THREW__ = 0;
                $342 = (invoke_iii(564,($341|0),(10695|0))|0);
                $343 = __THREW__; __THREW__ = 0;
                $344 = $343&1;
                if ($344) {
                 break;
                }
                $s_node1 = $342;
                $345 = $spatialRefsEle;
                $346 = $s_node1;
                __THREW__ = 0;
                (invoke_iii(565,($345|0),($346|0))|0);
                $347 = __THREW__; __THREW__ = 0;
                $348 = $347&1;
                if ($348) {
                 break;
                }
                $349 = $s_node1;
                $350 = $name;
                __THREW__ = 0;
                invoke_viii(566,($349|0),(10678|0),($350|0));
                $351 = __THREW__; __THREW__ = 0;
                $352 = $351&1;
                if ($352) {
                 break;
                }
                $353 = $s_node1;
                $52 = $spatialRefInfo;
                $354 = $52;
                $51 = $354;
                $355 = $51;
                $50 = $355;
                $356 = $50;
                $49 = $356;
                $357 = $49;
                $48 = $357;
                $358 = $48;
                $47 = $358;
                $359 = $47;
                $360 = HEAP8[$359>>0]|0;
                $361 = $360&255;
                $362 = $361 & 1;
                $363 = ($362|0)!=(0);
                if ($363) {
                 $41 = $356;
                 $364 = $41;
                 $40 = $364;
                 $365 = $40;
                 $39 = $365;
                 $366 = $39;
                 $367 = ((($366)) + 8|0);
                 $368 = HEAP32[$367>>2]|0;
                 $375 = $368;
                } else {
                 $46 = $356;
                 $369 = $46;
                 $45 = $369;
                 $370 = $45;
                 $44 = $370;
                 $371 = $44;
                 $372 = ((($371)) + 1|0);
                 $43 = $372;
                 $373 = $43;
                 $42 = $373;
                 $374 = $42;
                 $375 = $374;
                }
                $38 = $375;
                $376 = $38;
                __THREW__ = 0;
                invoke_viii(566,($353|0),(10706|0),($376|0));
                $377 = __THREW__; __THREW__ = 0;
                $378 = $377&1;
                if ($378) {
                 break;
                }
               }
               $36 = $unitInfo;
               $37 = 11786;
               $379 = $36;
               $380 = $37;
               $34 = $379;
               $35 = $380;
               $381 = $34;
               $382 = $35;
               $383 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($381,$382)|0);
               $384 = ($383|0)==(0);
               $385 = $384 ^ 1;
               if ($385) {
                $386 = $doc;
                __THREW__ = 0;
                $387 = (invoke_iii(564,($386|0),(10719|0))|0);
                $388 = __THREW__; __THREW__ = 0;
                $389 = $388&1;
                if ($389) {
                 break;
                }
                $s_node2 = $387;
                $390 = $unitsEle;
                $391 = $s_node2;
                __THREW__ = 0;
                (invoke_iii(565,($390|0),($391|0))|0);
                $392 = __THREW__; __THREW__ = 0;
                $393 = $392&1;
                if ($393) {
                 break;
                }
                $394 = $s_node2;
                $395 = $name;
                __THREW__ = 0;
                invoke_viii(566,($394|0),(10678|0),($395|0));
                $396 = __THREW__; __THREW__ = 0;
                $397 = $396&1;
                if ($397) {
                 break;
                }
                $398 = $s_node2;
                $33 = $unitInfo;
                $399 = $33;
                $32 = $399;
                $400 = $32;
                $31 = $400;
                $401 = $31;
                $30 = $401;
                $402 = $30;
                $29 = $402;
                $403 = $29;
                $28 = $403;
                $404 = $28;
                $405 = HEAP8[$404>>0]|0;
                $406 = $405&255;
                $407 = $406 & 1;
                $408 = ($407|0)!=(0);
                if ($408) {
                 $22 = $401;
                 $409 = $22;
                 $21 = $409;
                 $410 = $21;
                 $20 = $410;
                 $411 = $20;
                 $412 = ((($411)) + 8|0);
                 $413 = HEAP32[$412>>2]|0;
                 $420 = $413;
                } else {
                 $27 = $401;
                 $414 = $27;
                 $26 = $414;
                 $415 = $26;
                 $25 = $415;
                 $416 = $25;
                 $417 = ((($416)) + 1|0);
                 $24 = $417;
                 $418 = $24;
                 $23 = $418;
                 $419 = $23;
                 $420 = $419;
                }
                $19 = $420;
                $421 = $19;
                __THREW__ = 0;
                invoke_viii(566,($398|0),(10724|0),($421|0));
                $422 = __THREW__; __THREW__ = 0;
                $423 = $422&1;
                if ($423) {
                 break;
                }
               }
               $17 = $dataTemplateInfo;
               $18 = 11786;
               $424 = $17;
               $425 = $18;
               $15 = $424;
               $16 = $425;
               $426 = $15;
               $427 = $16;
               $428 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($426,$427)|0);
               $429 = ($428|0)==(0);
               $430 = $429 ^ 1;
               if ($430) {
                $431 = $doc;
                __THREW__ = 0;
                $432 = (invoke_iii(564,($431|0),(10731|0))|0);
                $433 = __THREW__; __THREW__ = 0;
                $434 = $433&1;
                if ($434) {
                 break;
                }
                $s_node3 = $432;
                $435 = $dataTemplatesEle;
                $436 = $s_node3;
                __THREW__ = 0;
                (invoke_iii(565,($435|0),($436|0))|0);
                $437 = __THREW__; __THREW__ = 0;
                $438 = $437&1;
                if ($438) {
                 break;
                }
                $439 = $s_node3;
                $440 = $name;
                __THREW__ = 0;
                invoke_viii(566,($439|0),(10678|0),($440|0));
                $441 = __THREW__; __THREW__ = 0;
                $442 = $441&1;
                if ($442) {
                 break;
                }
                $443 = $s_node3;
                $14 = $dataTemplateInfo;
                $444 = $14;
                $13 = $444;
                $445 = $13;
                $12 = $445;
                $446 = $12;
                $11 = $446;
                $447 = $11;
                $10 = $447;
                $448 = $10;
                $9 = $448;
                $449 = $9;
                $450 = HEAP8[$449>>0]|0;
                $451 = $450&255;
                $452 = $451 & 1;
                $453 = ($452|0)!=(0);
                if ($453) {
                 $3 = $446;
                 $454 = $3;
                 $2 = $454;
                 $455 = $2;
                 $1 = $455;
                 $456 = $1;
                 $457 = ((($456)) + 8|0);
                 $458 = HEAP32[$457>>2]|0;
                 $465 = $458;
                } else {
                 $8 = $446;
                 $459 = $8;
                 $7 = $459;
                 $460 = $7;
                 $6 = $460;
                 $461 = $6;
                 $462 = ((($461)) + 1|0);
                 $5 = $462;
                 $463 = $5;
                 $4 = $463;
                 $464 = $4;
                 $465 = $464;
                }
                $0 = $465;
                $466 = $0;
                __THREW__ = 0;
                invoke_viii(566,($443|0),(10744|0),($466|0));
                $467 = __THREW__; __THREW__ = 0;
                $468 = $467&1;
                if ($468) {
                 break;
                }
               }
               $469 = $kernelType;
               $470 = ($469|0)==(128);
               $471 = $kernelType;
               $472 = ($471|0)==(256);
               $or$cond = $470 | $472;
               $473 = $kernelType;
               $474 = ($473|0)==(512);
               $or$cond3 = $or$cond | $474;
               $475 = $kernelType;
               $476 = ($475|0)==(1024);
               $or$cond5 = $or$cond3 | $476;
               if (!($or$cond5)) {
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($dataTemplateInfo);
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($unitInfo);
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($spatialRefInfo);
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($conceptInfo);
                STACKTOP = sp;return;
               }
               $477 = $97;
               $478 = HEAP32[$477>>2]|0;
               $479 = ((($478)) + 36|0);
               $480 = HEAP32[$479>>2]|0;
               __THREW__ = 0;
               $481 = (invoke_ii($480|0,($477|0))|0);
               $482 = __THREW__; __THREW__ = 0;
               $483 = $482&1;
               if ($483) {
                break;
               }
               $count = $481;
               $iNode = 0;
               while(1) {
                $484 = $iNode;
                $485 = $count;
                $486 = ($484|0)<($485|0);
                if (!($486)) {
                 break;
                }
                $487 = $97;
                $488 = HEAP32[$487>>2]|0;
                $489 = ((($488)) + 40|0);
                $490 = HEAP32[$489>>2]|0;
                $491 = $iNode;
                __THREW__ = 0;
                $492 = (invoke_iii($490|0,($487|0),($491|0))|0);
                $493 = __THREW__; __THREW__ = 0;
                $494 = $493&1;
                if ($494) {
                 break L39;
                }
                $tempNode = $492;
                $495 = $tempNode;
                $496 = $childEle;
                __THREW__ = 0;
                invoke_viii(567,($101|0),($495|0),($496|0));
                $497 = __THREW__; __THREW__ = 0;
                $498 = $497&1;
                if ($498) {
                 break L39;
                }
                $499 = $iNode;
                $500 = (($499) + 1)|0;
                $iNode = $500;
               }
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($dataTemplateInfo);
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($unitInfo);
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($spatialRefInfo);
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($conceptInfo);
               STACKTOP = sp;return;
              }
             } while(0);
             $332 = ___cxa_find_matching_catch()|0;
             $333 = tempRet0;
             $99 = $332;
             $100 = $333;
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($dataTemplateInfo);
            }
           }
          }
         }
         if ((label|0) == 33) {
          $330 = ___cxa_find_matching_catch()|0;
          $331 = tempRet0;
          $99 = $330;
          $100 = $331;
         }
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($unitInfo);
        }
       }
      }
     }
     if ((label|0) == 32) {
      $328 = ___cxa_find_matching_catch()|0;
      $329 = tempRet0;
      $99 = $328;
      $100 = $329;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($spatialRefInfo);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($conceptInfo);
     $501 = $99;
     $502 = $100;
     ___resumeException($501|0);
     // unreachable;
    }
   }
  }
 }
 $326 = ___cxa_find_matching_catch()|0;
 $327 = tempRet0;
 $99 = $326;
 $100 = $327;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($conceptInfo);
 $501 = $99;
 $502 = $100;
 ___resumeException($501|0);
 // unreachable;
}
function __ZNK8tinyxml210XMLPrinter4CStrEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 208|0);
 $3 = (__ZNK8tinyxml28DynArrayIcLi20EE3MemEv($2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZNK8tinyxml28DynArrayIcLi20EE3MemEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN8tinyxml211XMLDocument11RootElementEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (__ZN8tinyxml27XMLNode17FirstChildElementEPKc($1,0)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN8tinyxml27XMLNode17FirstChildElementEPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $name;
 $2 = $0;
 $3 = $1;
 $4 = (__ZNK8tinyxml27XMLNode17FirstChildElementEPKc($2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN4NGIS4Data6Schema17CUdxDatasetSchema8ParseXDOEPNS1_14IUdxNodeSchemaEPN8tinyxml210XMLElementE($this,$containerNode,$element) {
 $this = $this|0;
 $containerNode = $containerNode|0;
 $element = $element|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $childEle = 0, $description = 0, $kernelType = 0, $name = 0, $node = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0;
 var $typeStr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $name = sp + 44|0;
 $description = sp + 32|0;
 $typeStr = sp + 12|0;
 $60 = $this;
 $61 = $containerNode;
 $62 = $element;
 $65 = $60;
 $66 = $62;
 $67 = (__ZNK8tinyxml210XMLElement9AttributeEPKcS2_($66,10874,0)|0);
 $58 = $name;
 $59 = $67;
 $68 = $58;
 $57 = $68;
 $69 = $57;
 $56 = $69;
 $70 = $56;
 $55 = $70;
 $71 = $59;
 $72 = $59;
 $73 = (__ZNSt3__111char_traitsIcE6lengthEPKc($72)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($68,$71,$73);
 $74 = $62;
 __THREW__ = 0;
 $75 = (invoke_iiii(558,($74|0),(10585|0),(0|0))|0);
 $76 = __THREW__; __THREW__ = 0;
 $77 = $76&1;
 if (!($77)) {
  $53 = $description;
  $54 = $75;
  $78 = $53;
  $52 = $78;
  $79 = $52;
  $51 = $79;
  $80 = $51;
  $50 = $80;
  $81 = $54;
  $82 = $54;
  __THREW__ = 0;
  $83 = (invoke_ii(383,($82|0))|0);
  $84 = __THREW__; __THREW__ = 0;
  $85 = $84&1;
  if (!($85)) {
   __THREW__ = 0;
   invoke_viii(384,($78|0),($81|0),($83|0));
   $86 = __THREW__; __THREW__ = 0;
   $87 = $86&1;
   if (!($87)) {
    $88 = $62;
    __THREW__ = 0;
    $89 = (invoke_iiii(558,($88|0),(10605|0),(0|0))|0);
    $90 = __THREW__; __THREW__ = 0;
    $91 = $90&1;
    if ($91) {
     label = 26;
    } else {
     $48 = $typeStr;
     $49 = $89;
     $92 = $48;
     $47 = $92;
     $93 = $47;
     $46 = $93;
     $94 = $46;
     $45 = $94;
     $95 = $49;
     $96 = $49;
     __THREW__ = 0;
     $97 = (invoke_ii(383,($96|0))|0);
     $98 = __THREW__; __THREW__ = 0;
     $99 = $98&1;
     if ($99) {
      label = 26;
     } else {
      __THREW__ = 0;
      invoke_viii(384,($92|0),($95|0),($97|0));
      $100 = __THREW__; __THREW__ = 0;
      $101 = $100&1;
      if ($101) {
       label = 26;
      } else {
       $44 = $typeStr;
       $102 = $44;
       $43 = $102;
       $103 = $43;
       $42 = $103;
       $104 = $42;
       $41 = $104;
       $105 = $41;
       $40 = $105;
       $106 = $40;
       $39 = $106;
       $107 = $39;
       $108 = HEAP8[$107>>0]|0;
       $109 = $108&255;
       $110 = $109 & 1;
       $111 = ($110|0)!=(0);
       if ($111) {
        $33 = $104;
        $112 = $33;
        $32 = $112;
        $113 = $32;
        $31 = $113;
        $114 = $31;
        $115 = ((($114)) + 8|0);
        $116 = HEAP32[$115>>2]|0;
        $123 = $116;
       } else {
        $38 = $104;
        $117 = $38;
        $37 = $117;
        $118 = $37;
        $36 = $118;
        $119 = $36;
        $120 = ((($119)) + 1|0);
        $35 = $120;
        $121 = $35;
        $34 = $121;
        $122 = $34;
        $123 = $122;
       }
       $30 = $123;
       $124 = $30;
       __THREW__ = 0;
       $125 = (invoke_ii(572,($124|0))|0);
       $126 = __THREW__; __THREW__ = 0;
       $127 = $126&1;
       L13: do {
        if (!($127)) {
         $kernelType = $125;
         $128 = $61;
         $129 = HEAP32[$128>>2]|0;
         $130 = ((($129)) + 48|0);
         $131 = HEAP32[$130>>2]|0;
         $29 = $name;
         $132 = $29;
         $28 = $132;
         $133 = $28;
         $27 = $133;
         $134 = $27;
         $26 = $134;
         $135 = $26;
         $25 = $135;
         $136 = $25;
         $24 = $136;
         $137 = $24;
         $138 = HEAP8[$137>>0]|0;
         $139 = $138&255;
         $140 = $139 & 1;
         $141 = ($140|0)!=(0);
         if ($141) {
          $18 = $134;
          $142 = $18;
          $17 = $142;
          $143 = $17;
          $16 = $143;
          $144 = $16;
          $145 = ((($144)) + 8|0);
          $146 = HEAP32[$145>>2]|0;
          $153 = $146;
         } else {
          $23 = $134;
          $147 = $23;
          $22 = $147;
          $148 = $22;
          $21 = $148;
          $149 = $21;
          $150 = ((($149)) + 1|0);
          $20 = $150;
          $151 = $20;
          $19 = $151;
          $152 = $19;
          $153 = $152;
         }
         $15 = $153;
         $154 = $15;
         $155 = $kernelType;
         $14 = $description;
         $156 = $14;
         $13 = $156;
         $157 = $13;
         $12 = $157;
         $158 = $12;
         $11 = $158;
         $159 = $11;
         $10 = $159;
         $160 = $10;
         $9 = $160;
         $161 = $9;
         $162 = HEAP8[$161>>0]|0;
         $163 = $162&255;
         $164 = $163 & 1;
         $165 = ($164|0)!=(0);
         if ($165) {
          $3 = $158;
          $166 = $3;
          $2 = $166;
          $167 = $2;
          $1 = $167;
          $168 = $1;
          $169 = ((($168)) + 8|0);
          $170 = HEAP32[$169>>2]|0;
          $177 = $170;
         } else {
          $8 = $158;
          $171 = $8;
          $7 = $171;
          $172 = $7;
          $6 = $172;
          $173 = $6;
          $174 = ((($173)) + 1|0);
          $5 = $174;
          $175 = $5;
          $4 = $175;
          $176 = $4;
          $177 = $176;
         }
         $0 = $177;
         $178 = $0;
         __THREW__ = 0;
         $179 = (invoke_iiiii($131|0,($128|0),($154|0),($155|0),($178|0))|0);
         $180 = __THREW__; __THREW__ = 0;
         $181 = $180&1;
         if (!($181)) {
          $node = $179;
          $182 = $kernelType;
          $183 = ($182|0)==(128);
          $184 = $kernelType;
          $185 = ($184|0)==(256);
          $or$cond = $183 | $185;
          $186 = $kernelType;
          $187 = ($186|0)==(512);
          $or$cond3 = $or$cond | $187;
          $188 = $kernelType;
          $189 = ($188|0)==(1024);
          $or$cond5 = $or$cond3 | $189;
          if (!($or$cond5)) {
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($typeStr);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($description);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($name);
           STACKTOP = sp;return;
          }
          $190 = $62;
          __THREW__ = 0;
          $191 = (invoke_iii(559,($190|0),(0|0))|0);
          $192 = __THREW__; __THREW__ = 0;
          $193 = $192&1;
          if (!($193)) {
           $childEle = $191;
           while(1) {
            $194 = $childEle;
            $195 = ($194|0)!=(0|0);
            if (!($195)) {
             break;
            }
            $196 = $node;
            $197 = $childEle;
            __THREW__ = 0;
            invoke_viii(560,($65|0),($196|0),($197|0));
            $198 = __THREW__; __THREW__ = 0;
            $199 = $198&1;
            if ($199) {
             break L13;
            }
            $200 = $childEle;
            __THREW__ = 0;
            $201 = (invoke_iii(561,($200|0),(0|0))|0);
            $202 = __THREW__; __THREW__ = 0;
            $203 = $202&1;
            if ($203) {
             break L13;
            }
            $childEle = $201;
           }
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($typeStr);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($description);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($name);
           STACKTOP = sp;return;
          }
         }
        }
       } while(0);
       $208 = ___cxa_find_matching_catch()|0;
       $209 = tempRet0;
       $63 = $208;
       $64 = $209;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($typeStr);
      }
     }
    }
    if ((label|0) == 26) {
     $206 = ___cxa_find_matching_catch()|0;
     $207 = tempRet0;
     $63 = $206;
     $64 = $207;
    }
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($description);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($name);
    $210 = $63;
    $211 = $64;
    ___resumeException($210|0);
    // unreachable;
   }
  }
 }
 $204 = ___cxa_find_matching_catch()|0;
 $205 = tempRet0;
 $63 = $204;
 $64 = $205;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($name);
 $210 = $63;
 $211 = $64;
 ___resumeException($210|0);
 // unreachable;
}
function __ZN8tinyxml27XMLNode18NextSiblingElementEPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $name;
 $2 = $0;
 $3 = $1;
 $4 = (__ZNK8tinyxml27XMLNode18NextSiblingElementEPKc($2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN4NGIS4Data6Schema17CUdxDatasetSchema13getNodeWithIdENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPNS1_14IUdxNodeSchemaE($this,$pNodeId,$pParentNode) {
 $this = $this|0;
 $pNodeId = $pNodeId|0;
 $pParentNode = $pParentNode|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__lhs_sz$i = 0;
 var $__lp$i = 0, $__rp$i = 0, $cleanup$dest = 0, $count = 0, $iNode = 0, $switch = 0, $tempNode = 0, $temp_name = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $51 = sp + 304|0;
 $temp_name = sp + 24|0;
 $63 = sp + 8|0;
 $60 = $this;
 $61 = $pParentNode;
 $66 = $60;
 $67 = $61;
 $68 = HEAP32[$67>>2]|0;
 $69 = ((($68)) + 36|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = (FUNCTION_TABLE_ii[$70 & 1023]($67)|0);
 $count = $71;
 $iNode = 0;
 L1: while(1) {
  $72 = $iNode;
  $73 = $count;
  $74 = ($72|0)<($73|0);
  if (!($74)) {
   label = 38;
   break;
  }
  $75 = $61;
  $76 = HEAP32[$75>>2]|0;
  $77 = ((($76)) + 40|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = $iNode;
  $80 = (FUNCTION_TABLE_iii[$78 & 1023]($75,$79)|0);
  $tempNode = $80;
  $81 = $tempNode;
  $82 = HEAP32[$81>>2]|0;
  $83 = ((($82)) + 20|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = (FUNCTION_TABLE_ii[$84 & 1023]($81)|0);
  $57 = $temp_name;
  $58 = $85;
  $86 = $57;
  $56 = $86;
  $87 = $56;
  $55 = $87;
  $88 = $55;
  $54 = $88;
  $89 = $58;
  $90 = $58;
  $91 = (__ZNSt3__111char_traitsIcE6lengthEPKc($90)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($86,$89,$91);
  $52 = $temp_name;
  $53 = $pNodeId;
  $92 = $52;
  $50 = $92;
  $93 = $50;
  $49 = $93;
  $94 = $49;
  $48 = $94;
  $95 = $48;
  $47 = $95;
  $96 = $47;
  $97 = HEAP8[$96>>0]|0;
  $98 = $97&255;
  $99 = $98 & 1;
  $100 = ($99|0)!=(0);
  if ($100) {
   $43 = $93;
   $101 = $43;
   $42 = $101;
   $102 = $42;
   $41 = $102;
   $103 = $41;
   $104 = ((($103)) + 4|0);
   $105 = HEAP32[$104>>2]|0;
   $112 = $105;
  } else {
   $46 = $93;
   $106 = $46;
   $45 = $106;
   $107 = $45;
   $44 = $107;
   $108 = $44;
   $109 = HEAP8[$108>>0]|0;
   $110 = $109&255;
   $111 = $110 >> 1;
   $112 = $111;
  }
  $__lhs_sz$i = $112;
  $113 = $__lhs_sz$i;
  $114 = $53;
  $40 = $114;
  $115 = $40;
  $39 = $115;
  $116 = $39;
  $38 = $116;
  $117 = $38;
  $37 = $117;
  $118 = $37;
  $119 = HEAP8[$118>>0]|0;
  $120 = $119&255;
  $121 = $120 & 1;
  $122 = ($121|0)!=(0);
  if ($122) {
   $33 = $115;
   $123 = $33;
   $32 = $123;
   $124 = $32;
   $31 = $124;
   $125 = $31;
   $126 = ((($125)) + 4|0);
   $127 = HEAP32[$126>>2]|0;
   $135 = $127;
  } else {
   $36 = $115;
   $128 = $36;
   $35 = $128;
   $129 = $35;
   $34 = $129;
   $130 = $34;
   $131 = HEAP8[$130>>0]|0;
   $132 = $131&255;
   $133 = $132 >> 1;
   $135 = $133;
  }
  $134 = ($113|0)!=($135|0);
  do {
   if ($134) {
    $$expand_i1_val = 0;
    HEAP8[$51>>0] = $$expand_i1_val;
   } else {
    $136 = $52;
    $30 = $136;
    $137 = $30;
    $29 = $137;
    $138 = $29;
    $28 = $138;
    $139 = $28;
    $27 = $139;
    $140 = $27;
    $26 = $140;
    $141 = $26;
    $142 = HEAP8[$141>>0]|0;
    $143 = $142&255;
    $144 = $143 & 1;
    $145 = ($144|0)!=(0);
    if ($145) {
     $20 = $138;
     $146 = $20;
     $19 = $146;
     $147 = $19;
     $18 = $147;
     $148 = $18;
     $149 = ((($148)) + 8|0);
     $150 = HEAP32[$149>>2]|0;
     $157 = $150;
    } else {
     $25 = $138;
     $151 = $25;
     $24 = $151;
     $152 = $24;
     $23 = $152;
     $153 = $23;
     $154 = ((($153)) + 1|0);
     $22 = $154;
     $155 = $22;
     $21 = $155;
     $156 = $21;
     $157 = $156;
    }
    $17 = $157;
    $158 = $17;
    $__lp$i = $158;
    $159 = $53;
    $13 = $159;
    $160 = $13;
    $12 = $160;
    $161 = $12;
    $11 = $161;
    $162 = $11;
    $10 = $162;
    $163 = $10;
    $9 = $163;
    $164 = $9;
    $165 = HEAP8[$164>>0]|0;
    $166 = $165&255;
    $167 = $166 & 1;
    $168 = ($167|0)!=(0);
    if ($168) {
     $3 = $161;
     $169 = $3;
     $2 = $169;
     $170 = $2;
     $1 = $170;
     $171 = $1;
     $172 = ((($171)) + 8|0);
     $173 = HEAP32[$172>>2]|0;
     $180 = $173;
    } else {
     $8 = $161;
     $174 = $8;
     $7 = $174;
     $175 = $7;
     $6 = $175;
     $176 = $6;
     $177 = ((($176)) + 1|0);
     $5 = $177;
     $178 = $5;
     $4 = $178;
     $179 = $4;
     $180 = $179;
    }
    $0 = $180;
    $181 = $0;
    $__rp$i = $181;
    $182 = $52;
    $16 = $182;
    $183 = $16;
    $15 = $183;
    $184 = $15;
    $14 = $184;
    $185 = $14;
    $186 = HEAP8[$185>>0]|0;
    $187 = $186&255;
    $188 = $187 & 1;
    $189 = ($188|0)!=(0);
    if ($189) {
     $190 = $__lp$i;
     $191 = $__rp$i;
     $192 = $__lhs_sz$i;
     __THREW__ = 0;
     $193 = (invoke_iiii(386,($190|0),($191|0),($192|0))|0);
     $194 = __THREW__; __THREW__ = 0;
     $195 = $194&1;
     if ($195) {
      label = 25;
      break L1;
     }
     $196 = ($193|0)==(0);
     $$expand_i1_val2 = $196&1;
     HEAP8[$51>>0] = $$expand_i1_val2;
     break;
    }
    while(1) {
     $197 = $__lhs_sz$i;
     $198 = ($197|0)!=(0);
     if (!($198)) {
      label = 24;
      break;
     }
     $199 = $__lp$i;
     $200 = HEAP8[$199>>0]|0;
     $201 = $200 << 24 >> 24;
     $202 = $__rp$i;
     $203 = HEAP8[$202>>0]|0;
     $204 = $203 << 24 >> 24;
     $205 = ($201|0)!=($204|0);
     if ($205) {
      label = 22;
      break;
     }
     $206 = $__lhs_sz$i;
     $207 = (($206) + -1)|0;
     $__lhs_sz$i = $207;
     $208 = $__lp$i;
     $209 = ((($208)) + 1|0);
     $__lp$i = $209;
     $210 = $__rp$i;
     $211 = ((($210)) + 1|0);
     $__rp$i = $211;
    }
    if ((label|0) == 22) {
     label = 0;
     $$expand_i1_val4 = 0;
     HEAP8[$51>>0] = $$expand_i1_val4;
     break;
    }
    else if ((label|0) == 24) {
     label = 0;
     $$expand_i1_val6 = 1;
     HEAP8[$51>>0] = $$expand_i1_val6;
     break;
    }
   }
  } while(0);
  $$pre_trunc = HEAP8[$51>>0]|0;
  $214 = $$pre_trunc&1;
  do {
   if ($214) {
    $215 = $tempNode;
    $59 = $215;
    $62 = 1;
   } else {
    __THREW__ = 0;
    invoke_vii(562,($63|0),($pNodeId|0));
    $216 = __THREW__; __THREW__ = 0;
    $217 = $216&1;
    if ($217) {
     label = 32;
     break L1;
    }
    $218 = $tempNode;
    __THREW__ = 0;
    $219 = (invoke_iiii(563,($66|0),($63|0),($218|0))|0);
    $220 = __THREW__; __THREW__ = 0;
    $221 = $220&1;
    if ($221) {
     label = 33;
     break L1;
    }
    $tempNode = $219;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($63);
    $222 = $tempNode;
    $223 = ($222|0)!=(0|0);
    if ($223) {
     $224 = $tempNode;
     $59 = $224;
     $62 = 1;
     break;
    } else {
     $62 = 0;
     break;
    }
   }
  } while(0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($temp_name);
  $cleanup$dest = $62;
  $switch = ($cleanup$dest>>>0)<(1);
  if (!($switch)) {
   label = 39;
   break;
  }
  $229 = $iNode;
  $230 = (($229) + 1)|0;
  $iNode = $230;
 }
 if ((label|0) == 25) {
  $212 = ___cxa_find_matching_catch(0|0)|0;
  $213 = tempRet0;
  ___clang_call_terminate($212);
  // unreachable;
 }
 else if ((label|0) == 32) {
  $225 = ___cxa_find_matching_catch()|0;
  $226 = tempRet0;
  $64 = $225;
  $65 = $226;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($temp_name);
  $231 = $64;
  $232 = $65;
  ___resumeException($231|0);
  // unreachable;
 }
 else if ((label|0) == 33) {
  $227 = ___cxa_find_matching_catch()|0;
  $228 = tempRet0;
  $64 = $227;
  $65 = $228;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($63);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($temp_name);
  $231 = $64;
  $232 = $65;
  ___resumeException($231|0);
  // unreachable;
 }
 else if ((label|0) == 38) {
  $59 = 0;
  $233 = $59;
  STACKTOP = sp;return ($233|0);
 }
 else if ((label|0) == 39) {
  $233 = $59;
  STACKTOP = sp;return ($233|0);
 }
 return (0)|0;
}
function __ZN4NGIS4Data6SchemaL21String2SchemaNodeTypeEPKc($pType) {
 $pType = $pType|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $pNodeType = 0, $pTypeStr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pTypeStr = sp + 8|0;
 $37 = $pType;
 $39 = $37;
 $35 = $pTypeStr;
 $36 = $39;
 $40 = $35;
 $34 = $40;
 $41 = $34;
 $33 = $41;
 $42 = $33;
 $32 = $42;
 $43 = $36;
 $44 = $36;
 $45 = (__ZNSt3__111char_traitsIcE6lengthEPKc($44)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($40,$43,$45);
 $pNodeType = 128;
 $30 = $pTypeStr;
 $31 = 10328;
 $46 = $30;
 $47 = $31;
 $48 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($46,$47)|0);
 $49 = ($48|0)==(0);
 do {
  if ($49) {
   $pNodeType = 2;
  } else {
   $28 = $pTypeStr;
   $29 = 10337;
   $50 = $28;
   $51 = $29;
   $52 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($50,$51)|0);
   $53 = ($52|0)==(0);
   if ($53) {
    $pNodeType = 4;
    break;
   }
   $26 = $pTypeStr;
   $27 = 10347;
   $54 = $26;
   $55 = $27;
   $56 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($54,$55)|0);
   $57 = ($56|0)==(0);
   if ($57) {
    $pNodeType = 8;
    break;
   }
   $24 = $pTypeStr;
   $25 = 10361;
   $58 = $24;
   $59 = $25;
   $60 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($58,$59)|0);
   $61 = ($60|0)==(0);
   if ($61) {
    $pNodeType = 16;
    break;
   }
   $22 = $pTypeStr;
   $23 = 10375;
   $62 = $22;
   $63 = $23;
   $64 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($62,$63)|0);
   $65 = ($64|0)==(0);
   if ($65) {
    $pNodeType = 32;
    break;
   }
   $20 = $pTypeStr;
   $21 = 10389;
   $66 = $20;
   $67 = $21;
   $68 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($66,$67)|0);
   $69 = ($68|0)==(0);
   if ($69) {
    $pNodeType = 64;
    break;
   }
   $18 = $pTypeStr;
   $19 = 10401;
   $70 = $18;
   $71 = $19;
   $72 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($70,$71)|0);
   $73 = ($72|0)==(0);
   if ($73) {
    $pNodeType = 258;
    break;
   }
   $16 = $pTypeStr;
   $17 = 10422;
   $74 = $16;
   $75 = $17;
   $76 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($74,$75)|0);
   $77 = ($76|0)==(0);
   if ($77) {
    $pNodeType = 260;
    break;
   }
   $14 = $pTypeStr;
   $15 = 10444;
   $78 = $14;
   $79 = $15;
   $80 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($78,$79)|0);
   $81 = ($80|0)==(0);
   if ($81) {
    $pNodeType = 264;
    break;
   }
   $12 = $pTypeStr;
   $13 = 10470;
   $82 = $12;
   $83 = $13;
   $84 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($82,$83)|0);
   $85 = ($84|0)==(0);
   if ($85) {
    $pNodeType = 272;
    break;
   }
   $10 = $pTypeStr;
   $11 = 10496;
   $86 = $10;
   $87 = $11;
   $88 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($86,$87)|0);
   $89 = ($88|0)==(0);
   if ($89) {
    $pNodeType = 288;
    break;
   }
   $8 = $pTypeStr;
   $9 = 10522;
   $90 = $8;
   $91 = $9;
   $92 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($90,$91)|0);
   $93 = ($92|0)==(0);
   if ($93) {
    $pNodeType = 320;
    break;
   }
   $6 = $pTypeStr;
   $7 = 10546;
   $94 = $6;
   $95 = $7;
   $96 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($94,$95)|0);
   $97 = ($96|0)==(0);
   if ($97) {
    $pNodeType = 128;
    break;
   }
   $4 = $pTypeStr;
   $5 = 10555;
   $98 = $4;
   $99 = $5;
   $100 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($98,$99)|0);
   $101 = ($100|0)==(0);
   if ($101) {
    $pNodeType = 256;
    break;
   }
   $2 = $pTypeStr;
   $3 = 10565;
   $102 = $2;
   $103 = $3;
   $104 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($102,$103)|0);
   $105 = ($104|0)==(0);
   if ($105) {
    $pNodeType = 512;
    break;
   }
   $0 = $pTypeStr;
   $1 = 10574;
   $106 = $0;
   $107 = $1;
   $108 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($106,$107)|0);
   $109 = ($108|0)==(0);
   if ($109) {
    $pNodeType = 1024;
   }
  }
 } while(0);
 $110 = $pNodeType;
 $38 = 1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($pTypeStr);
 STACKTOP = sp;return ($110|0);
}
function __ZN4NGIS4Data6Schema17IUdxDatasetSchemaD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4NGIS4Data6Schema17IUdxDatasetSchemaD2Ev($1,3724);
 $2 = ((($1)) + 4|0);
 __ZN4NGIS4Data6Schema14IUdxNodeSchemaD2Ev($2);
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data6Schema17IUdxDatasetSchemaD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4NGIS4Data6Schema17IUdxDatasetSchemaD1Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZTv0_n12_N4NGIS4Data6Schema17IUdxDatasetSchemaD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + ($4)|0);
 __ZN4NGIS4Data6Schema17IUdxDatasetSchemaD1Ev($5);
 STACKTOP = sp;return;
}
function __ZTv0_n12_N4NGIS4Data6Schema17IUdxDatasetSchemaD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + ($4)|0);
 __ZN4NGIS4Data6Schema17IUdxDatasetSchemaD0Ev($5);
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data11CUdxDataset15LoadFromXmlFileEPKc($this,$fileName) {
 $this = $this|0;
 $fileName = $fileName|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $doc = 0, $ele = 0, $rootEle = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $doc = sp + 24|0;
 $0 = $this;
 $1 = $fileName;
 $5 = $0;
 __ZN8tinyxml211XMLDocumentC2EbNS_10WhitespaceE($doc,1,0);
 $6 = $1;
 __THREW__ = 0;
 (invoke_iii(556,($doc|0),($6|0))|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 L1: do {
  if (!($8)) {
   __THREW__ = 0;
   $9 = (invoke_ii(557,($doc|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    $rootEle = $9;
    $12 = $rootEle;
    __THREW__ = 0;
    $13 = (invoke_iii(559,($12|0),(0|0))|0);
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if (!($15)) {
     $ele = $13;
     while(1) {
      $16 = $ele;
      $17 = ($16|0)!=(0|0);
      if (!($17)) {
       break;
      }
      $18 = HEAP32[$5>>2]|0;
      $19 = ((($18)) + -60|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = (($5) + ($20)|0);
      $22 = $ele;
      __THREW__ = 0;
      invoke_viii(573,($5|0),($21|0),($22|0));
      $23 = __THREW__; __THREW__ = 0;
      $24 = $23&1;
      if ($24) {
       break L1;
      }
      $25 = $ele;
      __THREW__ = 0;
      $26 = (invoke_iii(561,($25|0),(0|0))|0);
      $27 = __THREW__; __THREW__ = 0;
      $28 = $27&1;
      if ($28) {
       break L1;
      }
      $ele = $26;
     }
     $4 = 1;
     __ZN8tinyxml211XMLDocumentD2Ev($doc);
     STACKTOP = sp;return 1;
    }
   }
  }
 } while(0);
 $29 = ___cxa_find_matching_catch()|0;
 $30 = tempRet0;
 $2 = $29;
 $3 = $30;
 __ZN8tinyxml211XMLDocumentD2Ev($doc);
 $31 = $2;
 $32 = $3;
 ___resumeException($31|0);
 // unreachable;
 return (0)|0;
}
function __ZN4NGIS4Data11CUdxDataset8ParseXDOEPNS0_8IUdxNodeEPN8tinyxml210XMLElementE($this,$containerNode,$element) {
 $this = $this|0;
 $containerNode = $containerNode|0;
 $element = $element|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0.0, $1017 = 0.0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0.0, $1129 = 0.0, $113 = 0, $1130 = 0.0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0.0, $1243 = 0.0, $1244 = 0.0, $1245 = 0.0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0.0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0.0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0.0;
 var $5 = 0, $50 = 0, $500 = 0.0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0.0;
 var $535 = 0.0, $536 = 0.0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0.0;
 var $571 = 0.0, $572 = 0.0, $573 = 0.0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0.0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0;
 var $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0;
 var $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0;
 var $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0;
 var $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0;
 var $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0;
 var $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0;
 var $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $childEle = 0, $count = 0, $count25 = 0, $count31 = 0, $count37 = 0;
 var $count45 = 0, $count54 = 0, $iVal = 0, $iVal28 = 0, $iVal34 = 0, $iVal40 = 0, $iVal48 = 0, $iVal57 = 0, $kernelType = 0, $m = 0, $m61 = 0, $name = 0, $node = 0, $node10 = 0, $node15 = 0, $node2 = 0, $node21 = 0, $node26 = 0, $node32 = 0, $node38 = 0;
 var $node46 = 0, $node5 = 0, $node55 = 0, $node62 = 0, $node7 = 0, $realKernel = 0, $realKernel11 = 0, $realKernel16 = 0, $realKernel22 = 0, $realKernel27 = 0, $realKernel3 = 0, $realKernel33 = 0, $realKernel39 = 0, $realKernel47 = 0, $realKernel56 = 0, $realKernel6 = 0, $realKernel8 = 0, $ret = 0, $ret24 = 0, $ret30 = 0;
 var $ret36 = 0, $ret44 = 0, $ret53 = 0, $typeStr = 0, $val = 0, $val1 = 0.0, $val4 = 0, $valStr = 0, $valStr14 = 0, $valStr20 = 0, $valStr23 = 0, $valStr29 = 0, $valStr35 = 0, $valStr43 = 0, $valStr52 = 0, $valStr9 = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer17 = 0, $vararg_buffer2 = 0;
 var $vararg_buffer22 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, $vararg_ptr25 = 0, $vararg_ptr26 = 0, $vararg_ptr27 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $x = 0, $x12 = 0, $x17 = 0, $x41 = 0, $x49 = 0, $x58 = 0;
 var $y = 0, $y13 = 0, $y18 = 0, $y42 = 0, $y50 = 0, $y59 = 0, $z = 0, $z19 = 0, $z51 = 0, $z60 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1888|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer22 = sp + 216|0;
 $vararg_buffer17 = sp + 200|0;
 $vararg_buffer13 = sp + 192|0;
 $vararg_buffer7 = sp + 176|0;
 $vararg_buffer2 = sp + 160|0;
 $vararg_buffer = sp + 152|0;
 $28 = sp + 1764|0;
 $31 = sp + 1752|0;
 $77 = sp + 1568|0;
 $80 = sp + 1556|0;
 $114 = sp + 1420|0;
 $117 = sp + 1408|0;
 $159 = sp + 1240|0;
 $162 = sp + 1228|0;
 $199 = sp + 1080|0;
 $202 = sp + 1068|0;
 $239 = sp + 920|0;
 $242 = sp + 908|0;
 $typeStr = sp + 676|0;
 $300 = sp + 648|0;
 $301 = sp + 604|0;
 $x = sp + 136|0;
 $y = sp + 128|0;
 $x12 = sp + 120|0;
 $y13 = sp + 112|0;
 $z = sp + 104|0;
 $x17 = sp + 96|0;
 $y18 = sp + 88|0;
 $z19 = sp + 80|0;
 $m = sp + 72|0;
 $valStr20 = sp + 556|0;
 $ret = sp + 544|0;
 $302 = sp + 532|0;
 $valStr23 = sp + 504|0;
 $ret24 = sp + 492|0;
 $303 = sp + 480|0;
 $valStr29 = sp + 452|0;
 $ret30 = sp + 440|0;
 $304 = sp + 428|0;
 $305 = sp + 400|0;
 $valStr35 = sp + 388|0;
 $ret36 = sp + 376|0;
 $306 = sp + 364|0;
 $x41 = sp + 64|0;
 $y42 = sp + 56|0;
 $ret44 = sp + 332|0;
 $307 = sp + 320|0;
 $308 = sp + 308|0;
 $x49 = sp + 48|0;
 $y50 = sp + 40|0;
 $z51 = sp + 32|0;
 $valStr52 = sp + 280|0;
 $ret53 = sp + 268|0;
 $309 = sp + 256|0;
 $x58 = sp + 24|0;
 $y59 = sp + 16|0;
 $z60 = sp + 8|0;
 $m61 = sp;
 $295 = $this;
 $296 = $containerNode;
 $297 = $element;
 $310 = $295;
 $311 = $297;
 $312 = (__ZNK8tinyxml210XMLElement9AttributeEPKcS2_($311,10863,0)|0);
 $293 = $typeStr;
 $294 = $312;
 $313 = $293;
 $292 = $313;
 $314 = $292;
 $291 = $314;
 $315 = $291;
 $290 = $315;
 $316 = $294;
 $317 = $294;
 $318 = (__ZNSt3__111char_traitsIcE6lengthEPKc($317)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($313,$316,$318);
 $319 = $297;
 __THREW__ = 0;
 $320 = (invoke_iiii(558,($319|0),(10874|0),(0|0))|0);
 $321 = __THREW__; __THREW__ = 0;
 $322 = $321&1;
 L1: do {
  if (!($322)) {
   $name = $320;
   $289 = $typeStr;
   $323 = $289;
   $288 = $323;
   $324 = $288;
   $287 = $324;
   $325 = $287;
   $286 = $325;
   $326 = $286;
   $285 = $326;
   $327 = $285;
   $284 = $327;
   $328 = $284;
   $329 = HEAP8[$328>>0]|0;
   $330 = $329&255;
   $331 = $330 & 1;
   $332 = ($331|0)!=(0);
   if ($332) {
    $278 = $325;
    $333 = $278;
    $277 = $333;
    $334 = $277;
    $276 = $334;
    $335 = $276;
    $336 = ((($335)) + 8|0);
    $337 = HEAP32[$336>>2]|0;
    $344 = $337;
   } else {
    $283 = $325;
    $338 = $283;
    $282 = $338;
    $339 = $282;
    $281 = $339;
    $340 = $281;
    $341 = ((($340)) + 1|0);
    $280 = $341;
    $342 = $280;
    $279 = $342;
    $343 = $279;
    $344 = $343;
   }
   $275 = $344;
   $345 = $275;
   $273 = $300;
   $274 = $345;
   $346 = $273;
   $272 = $346;
   $347 = $272;
   $271 = $347;
   $348 = $271;
   $270 = $348;
   $349 = $274;
   $350 = $274;
   __THREW__ = 0;
   $351 = (invoke_ii(383,($350|0))|0);
   $352 = __THREW__; __THREW__ = 0;
   $353 = $352&1;
   if (!($353)) {
    __THREW__ = 0;
    invoke_viii(384,($346|0),($349|0),($351|0));
    $354 = __THREW__; __THREW__ = 0;
    $355 = $354&1;
    if (!($355)) {
     __THREW__ = 0;
     $356 = (invoke_ii(574,($300|0))|0);
     $357 = __THREW__; __THREW__ = 0;
     $358 = $357&1;
     if ($358) {
      $392 = ___cxa_find_matching_catch()|0;
      $393 = tempRet0;
      $298 = $392;
      $299 = $393;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($300);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($typeStr);
      $1293 = $298;
      $1294 = $299;
      ___resumeException($1293|0);
      // unreachable;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($300);
     $kernelType = $356;
     $268 = $typeStr;
     $269 = 11849;
     $359 = $268;
     $360 = $269;
     $361 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($359,$360)|0);
     $362 = ($361|0)==(0);
     if ($362) {
      $363 = $297;
      __THREW__ = 0;
      $364 = (invoke_iii(575,($363|0),(10879|0))|0);
      $365 = __THREW__; __THREW__ = 0;
      $366 = $365&1;
      if ($366) {
       break;
      }
      $val = $364;
      $367 = $296;
      $368 = HEAP32[$367>>2]|0;
      $369 = ((($368)) + 40|0);
      $370 = HEAP32[$369>>2]|0;
      $371 = $name;
      $372 = $kernelType;
      __THREW__ = 0;
      $373 = (invoke_iiii($370|0,($367|0),($371|0),($372|0))|0);
      $374 = __THREW__; __THREW__ = 0;
      $375 = $374&1;
      if ($375) {
       break;
      }
      $node = $373;
      $376 = $node;
      $377 = HEAP32[$376>>2]|0;
      $378 = ((($377)) + 28|0);
      $379 = HEAP32[$378>>2]|0;
      __THREW__ = 0;
      $380 = (invoke_ii($379|0,($376|0))|0);
      $381 = __THREW__; __THREW__ = 0;
      $382 = $381&1;
      if ($382) {
       break;
      }
      $realKernel = $380;
      $383 = $realKernel;
      $384 = HEAP32[$383>>2]|0;
      $385 = ((($384)) + 28|0);
      $386 = HEAP32[$385>>2]|0;
      $387 = $val;
      __THREW__ = 0;
      (invoke_iii($386|0,($383|0),($387|0))|0);
      $388 = __THREW__; __THREW__ = 0;
      $389 = $388&1;
      if ($389) {
       break;
      }
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($typeStr);
      STACKTOP = sp;return;
     }
     $266 = $typeStr;
     $267 = 10885;
     $394 = $266;
     $395 = $267;
     $396 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($394,$395)|0);
     $397 = ($396|0)==(0);
     if ($397) {
      $398 = $297;
      __THREW__ = 0;
      $399 = (+invoke_dii(576,($398|0),(10879|0)));
      $400 = __THREW__; __THREW__ = 0;
      $401 = $400&1;
      if ($401) {
       break;
      }
      $val1 = $399;
      $402 = $296;
      $403 = HEAP32[$402>>2]|0;
      $404 = ((($403)) + 40|0);
      $405 = HEAP32[$404>>2]|0;
      $406 = $name;
      $407 = $kernelType;
      __THREW__ = 0;
      $408 = (invoke_iiii($405|0,($402|0),($406|0),($407|0))|0);
      $409 = __THREW__; __THREW__ = 0;
      $410 = $409&1;
      if ($410) {
       break;
      }
      $node2 = $408;
      $411 = $node2;
      $412 = HEAP32[$411>>2]|0;
      $413 = ((($412)) + 28|0);
      $414 = HEAP32[$413>>2]|0;
      __THREW__ = 0;
      $415 = (invoke_ii($414|0,($411|0))|0);
      $416 = __THREW__; __THREW__ = 0;
      $417 = $416&1;
      if ($417) {
       break;
      }
      $realKernel3 = $415;
      $418 = $realKernel3;
      $419 = HEAP32[$418>>2]|0;
      $420 = ((($419)) + 28|0);
      $421 = HEAP32[$420>>2]|0;
      $422 = $val1;
      __THREW__ = 0;
      (invoke_iid($421|0,($418|0),(+$422))|0);
      $423 = __THREW__; __THREW__ = 0;
      $424 = $423&1;
      if ($424) {
       break;
      }
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($typeStr);
      STACKTOP = sp;return;
     }
     $264 = $typeStr;
     $265 = 10890;
     $425 = $264;
     $426 = $265;
     $427 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($425,$426)|0);
     $428 = ($427|0)==(0);
     if ($428) {
      $429 = $297;
      __THREW__ = 0;
      $430 = (invoke_iiii(558,($429|0),(10879|0),(0|0))|0);
      $431 = __THREW__; __THREW__ = 0;
      $432 = $431&1;
      if ($432) {
       break;
      }
      $val4 = $430;
      $433 = $296;
      $434 = HEAP32[$433>>2]|0;
      $435 = ((($434)) + 40|0);
      $436 = HEAP32[$435>>2]|0;
      $437 = $name;
      $438 = $kernelType;
      __THREW__ = 0;
      $439 = (invoke_iiii($436|0,($433|0),($437|0),($438|0))|0);
      $440 = __THREW__; __THREW__ = 0;
      $441 = $440&1;
      if ($441) {
       break;
      }
      $node5 = $439;
      $442 = $node5;
      $443 = HEAP32[$442>>2]|0;
      $444 = ((($443)) + 28|0);
      $445 = HEAP32[$444>>2]|0;
      __THREW__ = 0;
      $446 = (invoke_ii($445|0,($442|0))|0);
      $447 = __THREW__; __THREW__ = 0;
      $448 = $447&1;
      if ($448) {
       break;
      }
      $realKernel6 = $446;
      $449 = $realKernel6;
      $450 = HEAP32[$449>>2]|0;
      $451 = ((($450)) + 28|0);
      $452 = HEAP32[$451>>2]|0;
      $453 = $val4;
      $262 = $301;
      $263 = $453;
      $454 = $262;
      $261 = $454;
      $455 = $261;
      $260 = $455;
      $456 = $260;
      $259 = $456;
      $457 = $263;
      $458 = $263;
      __THREW__ = 0;
      $459 = (invoke_ii(383,($458|0))|0);
      $460 = __THREW__; __THREW__ = 0;
      $461 = $460&1;
      if ($461) {
       break;
      }
      __THREW__ = 0;
      invoke_viii(384,($454|0),($457|0),($459|0));
      $462 = __THREW__; __THREW__ = 0;
      $463 = $462&1;
      if ($463) {
       break;
      }
      __THREW__ = 0;
      (invoke_iii($452|0,($449|0),($301|0))|0);
      $464 = __THREW__; __THREW__ = 0;
      $465 = $464&1;
      if ($465) {
       $466 = ___cxa_find_matching_catch()|0;
       $467 = tempRet0;
       $298 = $466;
       $299 = $467;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($301);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($typeStr);
       $1293 = $298;
       $1294 = $299;
       ___resumeException($1293|0);
       // unreachable;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($301);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($typeStr);
       STACKTOP = sp;return;
      }
     }
     $257 = $typeStr;
     $258 = 10897;
     $468 = $257;
     $469 = $258;
     $470 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($468,$469)|0);
     $471 = ($470|0)==(0);
     if ($471) {
      $472 = $297;
      __THREW__ = 0;
      $473 = (invoke_iiii(558,($472|0),(10879|0),(0|0))|0);
      $474 = __THREW__; __THREW__ = 0;
      $475 = $474&1;
      if ($475) {
       break;
      }
      $valStr = $473;
      $476 = $296;
      $477 = HEAP32[$476>>2]|0;
      $478 = ((($477)) + 40|0);
      $479 = HEAP32[$478>>2]|0;
      $480 = $name;
      $481 = $kernelType;
      __THREW__ = 0;
      $482 = (invoke_iiii($479|0,($476|0),($480|0),($481|0))|0);
      $483 = __THREW__; __THREW__ = 0;
      $484 = $483&1;
      if ($484) {
       break;
      }
      $node7 = $482;
      $485 = $node7;
      $486 = HEAP32[$485>>2]|0;
      $487 = ((($486)) + 28|0);
      $488 = HEAP32[$487>>2]|0;
      __THREW__ = 0;
      $489 = (invoke_ii($488|0,($485|0))|0);
      $490 = __THREW__; __THREW__ = 0;
      $491 = $490&1;
      if ($491) {
       break;
      }
      $realKernel8 = $489;
      $492 = $valStr;
      __THREW__ = 0;
      HEAP32[$vararg_buffer>>2] = $x;
      $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
      HEAP32[$vararg_ptr1>>2] = $y;
      (invoke_iiii(577,($492|0),(10906|0),($vararg_buffer|0))|0);
      $493 = __THREW__; __THREW__ = 0;
      $494 = $493&1;
      if ($494) {
       break;
      }
      $495 = $realKernel8;
      $496 = HEAP32[$495>>2]|0;
      $497 = ((($496)) + 28|0);
      $498 = HEAP32[$497>>2]|0;
      $499 = +HEAPF64[$x>>3];
      $500 = +HEAPF64[$y>>3];
      __THREW__ = 0;
      (invoke_iidd($498|0,($495|0),(+$499),(+$500))|0);
      $501 = __THREW__; __THREW__ = 0;
      $502 = $501&1;
      if ($502) {
       break;
      }
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($typeStr);
      STACKTOP = sp;return;
     }
     $255 = $typeStr;
     $256 = 10914;
     $503 = $255;
     $504 = $256;
     $505 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($503,$504)|0);
     $506 = ($505|0)==(0);
     if ($506) {
      $507 = $297;
      __THREW__ = 0;
      $508 = (invoke_iiii(558,($507|0),(10879|0),(0|0))|0);
      $509 = __THREW__; __THREW__ = 0;
      $510 = $509&1;
      if ($510) {
       break;
      }
      $valStr9 = $508;
      $511 = $296;
      $512 = HEAP32[$511>>2]|0;
      $513 = ((($512)) + 40|0);
      $514 = HEAP32[$513>>2]|0;
      $515 = $name;
      $516 = $kernelType;
      __THREW__ = 0;
      $517 = (invoke_iiii($514|0,($511|0),($515|0),($516|0))|0);
      $518 = __THREW__; __THREW__ = 0;
      $519 = $518&1;
      if ($519) {
       break;
      }
      $node10 = $517;
      $520 = $node10;
      $521 = HEAP32[$520>>2]|0;
      $522 = ((($521)) + 28|0);
      $523 = HEAP32[$522>>2]|0;
      __THREW__ = 0;
      $524 = (invoke_ii($523|0,($520|0))|0);
      $525 = __THREW__; __THREW__ = 0;
      $526 = $525&1;
      if ($526) {
       break;
      }
      $realKernel11 = $524;
      $527 = $valStr9;
      __THREW__ = 0;
      HEAP32[$vararg_buffer2>>2] = $x12;
      $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
      HEAP32[$vararg_ptr5>>2] = $y13;
      $vararg_ptr6 = ((($vararg_buffer2)) + 8|0);
      HEAP32[$vararg_ptr6>>2] = $z;
      (invoke_iiii(577,($527|0),(10923|0),($vararg_buffer2|0))|0);
      $528 = __THREW__; __THREW__ = 0;
      $529 = $528&1;
      if ($529) {
       break;
      }
      $530 = $realKernel11;
      $531 = HEAP32[$530>>2]|0;
      $532 = ((($531)) + 28|0);
      $533 = HEAP32[$532>>2]|0;
      $534 = +HEAPF64[$x12>>3];
      $535 = +HEAPF64[$y13>>3];
      $536 = +HEAPF64[$z>>3];
      __THREW__ = 0;
      (invoke_iiddd($533|0,($530|0),(+$534),(+$535),(+$536))|0);
      $537 = __THREW__; __THREW__ = 0;
      $538 = $537&1;
      if ($538) {
       break;
      }
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($typeStr);
      STACKTOP = sp;return;
     }
     $253 = $typeStr;
     $254 = 10935;
     $539 = $253;
     $540 = $254;
     $541 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($539,$540)|0);
     $542 = ($541|0)==(0);
     if ($542) {
      $543 = $297;
      __THREW__ = 0;
      $544 = (invoke_iiii(558,($543|0),(10879|0),(0|0))|0);
      $545 = __THREW__; __THREW__ = 0;
      $546 = $545&1;
      if ($546) {
       break;
      }
      $valStr14 = $544;
      $547 = $296;
      $548 = HEAP32[$547>>2]|0;
      $549 = ((($548)) + 40|0);
      $550 = HEAP32[$549>>2]|0;
      $551 = $name;
      $552 = $kernelType;
      __THREW__ = 0;
      $553 = (invoke_iiii($550|0,($547|0),($551|0),($552|0))|0);
      $554 = __THREW__; __THREW__ = 0;
      $555 = $554&1;
      if ($555) {
       break;
      }
      $node15 = $553;
      $556 = $node15;
      $557 = HEAP32[$556>>2]|0;
      $558 = ((($557)) + 28|0);
      $559 = HEAP32[$558>>2]|0;
      __THREW__ = 0;
      $560 = (invoke_ii($559|0,($556|0))|0);
      $561 = __THREW__; __THREW__ = 0;
      $562 = $561&1;
      if ($562) {
       break;
      }
      $realKernel16 = $560;
      $563 = $valStr14;
      __THREW__ = 0;
      HEAP32[$vararg_buffer7>>2] = $x17;
      $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
      HEAP32[$vararg_ptr10>>2] = $y18;
      $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
      HEAP32[$vararg_ptr11>>2] = $z19;
      $vararg_ptr12 = ((($vararg_buffer7)) + 12|0);
      HEAP32[$vararg_ptr12>>2] = $m;
      (invoke_iiii(577,($563|0),(10944|0),($vararg_buffer7|0))|0);
      $564 = __THREW__; __THREW__ = 0;
      $565 = $564&1;
      if ($565) {
       break;
      }
      $566 = $realKernel16;
      $567 = HEAP32[$566>>2]|0;
      $568 = ((($567)) + 28|0);
      $569 = HEAP32[$568>>2]|0;
      $570 = +HEAPF64[$x17>>3];
      $571 = +HEAPF64[$y18>>3];
      $572 = +HEAPF64[$z19>>3];
      $573 = +HEAPF64[$m>>3];
      __THREW__ = 0;
      (invoke_iidddd($569|0,($566|0),(+$570),(+$571),(+$572),(+$573))|0);
      $574 = __THREW__; __THREW__ = 0;
      $575 = $574&1;
      if ($575) {
       break;
      }
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($typeStr);
      STACKTOP = sp;return;
     }
     $251 = $typeStr;
     $252 = 10960;
     $576 = $251;
     $577 = $252;
     $578 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($576,$577)|0);
     $579 = ($578|0)==(0);
     if ($579) {
      $580 = $297;
      __THREW__ = 0;
      $581 = (invoke_iiii(558,($580|0),(10879|0),(0|0))|0);
      $582 = __THREW__; __THREW__ = 0;
      $583 = $582&1;
      if ($583) {
       break;
      }
      $249 = $valStr20;
      $250 = $581;
      $584 = $249;
      $248 = $584;
      $585 = $248;
      $247 = $585;
      $586 = $247;
      $246 = $586;
      $587 = $250;
      $588 = $250;
      __THREW__ = 0;
      $589 = (invoke_ii(383,($588|0))|0);
      $590 = __THREW__; __THREW__ = 0;
      $591 = $590&1;
      if ($591) {
       break;
      }
      __THREW__ = 0;
      invoke_viii(384,($584|0),($587|0),($589|0));
      $592 = __THREW__; __THREW__ = 0;
      $593 = $592&1;
      if ($593) {
       break;
      }
      $245 = $ret;
      $594 = $245;
      $244 = $594;
      $595 = $244;
      $243 = $595;
      HEAP32[$595>>2] = 0;
      $596 = ((($595)) + 4|0);
      HEAP32[$596>>2] = 0;
      $597 = ((($595)) + 8|0);
      $241 = $597;
      HEAP32[$242>>2] = 0;
      $598 = $241;
      $240 = $242;
      $599 = $240;
      $600 = HEAP32[$599>>2]|0;
      $238 = $598;
      HEAP32[$239>>2] = $600;
      $601 = $238;
      $237 = $601;
      $236 = $239;
      $602 = $236;
      $603 = HEAP32[$602>>2]|0;
      HEAP32[$601>>2] = $603;
      $234 = $302;
      $235 = 10970;
      $604 = $234;
      $233 = $604;
      $605 = $233;
      $232 = $605;
      $606 = $232;
      $231 = $606;
      $607 = $235;
      $608 = $235;
      __THREW__ = 0;
      $609 = (invoke_ii(383,($608|0))|0);
      $610 = __THREW__; __THREW__ = 0;
      $611 = $610&1;
      L69: do {
       if ($611) {
        label = 64;
       } else {
        __THREW__ = 0;
        invoke_viii(384,($604|0),($607|0),($609|0));
        $612 = __THREW__; __THREW__ = 0;
        $613 = $612&1;
        if ($613) {
         label = 64;
        } else {
         __THREW__ = 0;
         invoke_viii(578,($valStr20|0),($302|0),($ret|0));
         $614 = __THREW__; __THREW__ = 0;
         $615 = $614&1;
         if ($615) {
          $684 = ___cxa_find_matching_catch()|0;
          $685 = tempRet0;
          $298 = $684;
          $299 = $685;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($302);
          break;
         }
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($302);
         $230 = $ret;
         $616 = $230;
         $617 = ((($616)) + 4|0);
         $618 = HEAP32[$617>>2]|0;
         $619 = HEAP32[$616>>2]|0;
         $620 = $618;
         $621 = $619;
         $622 = (($620) - ($621))|0;
         $623 = (($622|0) / 12)&-1;
         $count = $623;
         $624 = $296;
         $625 = HEAP32[$624>>2]|0;
         $626 = ((($625)) + 40|0);
         $627 = HEAP32[$626>>2]|0;
         $628 = $name;
         $629 = $kernelType;
         __THREW__ = 0;
         $630 = (invoke_iiii($627|0,($624|0),($628|0),($629|0))|0);
         $631 = __THREW__; __THREW__ = 0;
         $632 = $631&1;
         if ($632) {
          label = 64;
          break;
         }
         $node21 = $630;
         $633 = $node21;
         $634 = HEAP32[$633>>2]|0;
         $635 = ((($634)) + 28|0);
         $636 = HEAP32[$635>>2]|0;
         __THREW__ = 0;
         $637 = (invoke_ii($636|0,($633|0))|0);
         $638 = __THREW__; __THREW__ = 0;
         $639 = $638&1;
         if ($639) {
          label = 64;
          break;
         }
         $realKernel22 = $637;
         $iVal = 0;
         while(1) {
          $640 = $iVal;
          $641 = $count;
          $642 = ($640|0)<($641|0);
          if (!($642)) {
           break;
          }
          $643 = $realKernel22;
          $644 = HEAP32[$643>>2]|0;
          $645 = ((($644)) + 28|0);
          $646 = HEAP32[$645>>2]|0;
          $647 = $iVal;
          $228 = $ret;
          $229 = $647;
          $648 = $228;
          $649 = $229;
          $650 = HEAP32[$648>>2]|0;
          $651 = (($650) + (($649*12)|0)|0);
          $227 = $651;
          $652 = $227;
          $226 = $652;
          $653 = $226;
          $225 = $653;
          $654 = $225;
          $224 = $654;
          $655 = $224;
          $223 = $655;
          $656 = $223;
          $222 = $656;
          $657 = $222;
          $658 = HEAP8[$657>>0]|0;
          $659 = $658&255;
          $660 = $659 & 1;
          $661 = ($660|0)!=(0);
          if ($661) {
           $216 = $654;
           $662 = $216;
           $215 = $662;
           $663 = $215;
           $214 = $663;
           $664 = $214;
           $665 = ((($664)) + 8|0);
           $666 = HEAP32[$665>>2]|0;
           $673 = $666;
          } else {
           $221 = $654;
           $667 = $221;
           $220 = $667;
           $668 = $220;
           $219 = $668;
           $669 = $219;
           $670 = ((($669)) + 1|0);
           $218 = $670;
           $671 = $218;
           $217 = $671;
           $672 = $217;
           $673 = $672;
          }
          $213 = $673;
          $674 = $213;
          __THREW__ = 0;
          $675 = (invoke_ii(579,($674|0))|0);
          $676 = __THREW__; __THREW__ = 0;
          $677 = $676&1;
          if ($677) {
           label = 64;
           break L69;
          }
          __THREW__ = 0;
          (invoke_iii($646|0,($643|0),($675|0))|0);
          $678 = __THREW__; __THREW__ = 0;
          $679 = $678&1;
          if ($679) {
           label = 64;
           break L69;
          }
          $680 = $iVal;
          $681 = (($680) + 1)|0;
          $iVal = $681;
         }
         __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($ret);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($valStr20);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($typeStr);
         STACKTOP = sp;return;
        }
       }
      } while(0);
      if ((label|0) == 64) {
       $682 = ___cxa_find_matching_catch()|0;
       $683 = tempRet0;
       $298 = $682;
       $299 = $683;
      }
      __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($ret);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($valStr20);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($typeStr);
      $1293 = $298;
      $1294 = $299;
      ___resumeException($1293|0);
      // unreachable;
     }
     $211 = $typeStr;
     $212 = 10972;
     $686 = $211;
     $687 = $212;
     $688 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($686,$687)|0);
     $689 = ($688|0)==(0);
     if ($689) {
      $690 = $297;
      __THREW__ = 0;
      $691 = (invoke_iiii(558,($690|0),(10879|0),(0|0))|0);
      $692 = __THREW__; __THREW__ = 0;
      $693 = $692&1;
      if ($693) {
       break;
      }
      $209 = $valStr23;
      $210 = $691;
      $694 = $209;
      $208 = $694;
      $695 = $208;
      $207 = $695;
      $696 = $207;
      $206 = $696;
      $697 = $210;
      $698 = $210;
      __THREW__ = 0;
      $699 = (invoke_ii(383,($698|0))|0);
      $700 = __THREW__; __THREW__ = 0;
      $701 = $700&1;
      if ($701) {
       break;
      }
      __THREW__ = 0;
      invoke_viii(384,($694|0),($697|0),($699|0));
      $702 = __THREW__; __THREW__ = 0;
      $703 = $702&1;
      if ($703) {
       break;
      }
      $205 = $ret24;
      $704 = $205;
      $204 = $704;
      $705 = $204;
      $203 = $705;
      HEAP32[$705>>2] = 0;
      $706 = ((($705)) + 4|0);
      HEAP32[$706>>2] = 0;
      $707 = ((($705)) + 8|0);
      $201 = $707;
      HEAP32[$202>>2] = 0;
      $708 = $201;
      $200 = $202;
      $709 = $200;
      $710 = HEAP32[$709>>2]|0;
      $198 = $708;
      HEAP32[$199>>2] = $710;
      $711 = $198;
      $197 = $711;
      $196 = $199;
      $712 = $196;
      $713 = HEAP32[$712>>2]|0;
      HEAP32[$711>>2] = $713;
      $194 = $303;
      $195 = 10970;
      $714 = $194;
      $193 = $714;
      $715 = $193;
      $192 = $715;
      $716 = $192;
      $191 = $716;
      $717 = $195;
      $718 = $195;
      __THREW__ = 0;
      $719 = (invoke_ii(383,($718|0))|0);
      $720 = __THREW__; __THREW__ = 0;
      $721 = $720&1;
      L98: do {
       if ($721) {
        label = 85;
       } else {
        __THREW__ = 0;
        invoke_viii(384,($714|0),($717|0),($719|0));
        $722 = __THREW__; __THREW__ = 0;
        $723 = $722&1;
        if ($723) {
         label = 85;
         break;
        }
        __THREW__ = 0;
        invoke_viii(578,($valStr23|0),($303|0),($ret24|0));
        $724 = __THREW__; __THREW__ = 0;
        $725 = $724&1;
        if ($725) {
         $794 = ___cxa_find_matching_catch()|0;
         $795 = tempRet0;
         $298 = $794;
         $299 = $795;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($303);
         break;
        }
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($303);
        $190 = $ret24;
        $726 = $190;
        $727 = ((($726)) + 4|0);
        $728 = HEAP32[$727>>2]|0;
        $729 = HEAP32[$726>>2]|0;
        $730 = $728;
        $731 = $729;
        $732 = (($730) - ($731))|0;
        $733 = (($732|0) / 12)&-1;
        $count25 = $733;
        $734 = $296;
        $735 = HEAP32[$734>>2]|0;
        $736 = ((($735)) + 40|0);
        $737 = HEAP32[$736>>2]|0;
        $738 = $name;
        $739 = $kernelType;
        __THREW__ = 0;
        $740 = (invoke_iiii($737|0,($734|0),($738|0),($739|0))|0);
        $741 = __THREW__; __THREW__ = 0;
        $742 = $741&1;
        if ($742) {
         label = 85;
         break;
        }
        $node26 = $740;
        $743 = $node26;
        $744 = HEAP32[$743>>2]|0;
        $745 = ((($744)) + 28|0);
        $746 = HEAP32[$745>>2]|0;
        __THREW__ = 0;
        $747 = (invoke_ii($746|0,($743|0))|0);
        $748 = __THREW__; __THREW__ = 0;
        $749 = $748&1;
        if ($749) {
         label = 85;
         break;
        }
        $realKernel27 = $747;
        $iVal28 = 0;
        while(1) {
         $750 = $iVal28;
         $751 = $count25;
         $752 = ($750|0)<($751|0);
         if (!($752)) {
          break;
         }
         $753 = $realKernel27;
         $754 = HEAP32[$753>>2]|0;
         $755 = ((($754)) + 28|0);
         $756 = HEAP32[$755>>2]|0;
         $757 = $iVal28;
         $188 = $ret24;
         $189 = $757;
         $758 = $188;
         $759 = $189;
         $760 = HEAP32[$758>>2]|0;
         $761 = (($760) + (($759*12)|0)|0);
         $187 = $761;
         $762 = $187;
         $186 = $762;
         $763 = $186;
         $185 = $763;
         $764 = $185;
         $184 = $764;
         $765 = $184;
         $183 = $765;
         $766 = $183;
         $182 = $766;
         $767 = $182;
         $768 = HEAP8[$767>>0]|0;
         $769 = $768&255;
         $770 = $769 & 1;
         $771 = ($770|0)!=(0);
         if ($771) {
          $176 = $764;
          $772 = $176;
          $175 = $772;
          $773 = $175;
          $174 = $773;
          $774 = $174;
          $775 = ((($774)) + 8|0);
          $776 = HEAP32[$775>>2]|0;
          $783 = $776;
         } else {
          $181 = $764;
          $777 = $181;
          $180 = $777;
          $778 = $180;
          $179 = $778;
          $779 = $179;
          $780 = ((($779)) + 1|0);
          $178 = $780;
          $781 = $178;
          $177 = $781;
          $782 = $177;
          $783 = $782;
         }
         $173 = $783;
         $784 = $173;
         __THREW__ = 0;
         $785 = (+invoke_di(580,($784|0)));
         $786 = __THREW__; __THREW__ = 0;
         $787 = $786&1;
         if ($787) {
          label = 85;
          break L98;
         }
         __THREW__ = 0;
         (invoke_iid($756|0,($753|0),(+$785))|0);
         $788 = __THREW__; __THREW__ = 0;
         $789 = $788&1;
         if ($789) {
          label = 85;
          break L98;
         }
         $790 = $iVal28;
         $791 = (($790) + 1)|0;
         $iVal28 = $791;
        }
        __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($ret24);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($valStr23);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($typeStr);
        STACKTOP = sp;return;
       }
      } while(0);
      if ((label|0) == 85) {
       $792 = ___cxa_find_matching_catch()|0;
       $793 = tempRet0;
       $298 = $792;
       $299 = $793;
      }
      __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($ret24);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($valStr23);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($typeStr);
      $1293 = $298;
      $1294 = $299;
      ___resumeException($1293|0);
      // unreachable;
     }
     $171 = $typeStr;
     $172 = 10983;
     $796 = $171;
     $797 = $172;
     $798 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($796,$797)|0);
     $799 = ($798|0)==(0);
     if ($799) {
      $800 = $297;
      __THREW__ = 0;
      $801 = (invoke_iiii(558,($800|0),(10879|0),(0|0))|0);
      $802 = __THREW__; __THREW__ = 0;
      $803 = $802&1;
      if ($803) {
       break;
      }
      $169 = $valStr29;
      $170 = $801;
      $804 = $169;
      $168 = $804;
      $805 = $168;
      $167 = $805;
      $806 = $167;
      $166 = $806;
      $807 = $170;
      $808 = $170;
      __THREW__ = 0;
      $809 = (invoke_ii(383,($808|0))|0);
      $810 = __THREW__; __THREW__ = 0;
      $811 = $810&1;
      if ($811) {
       break;
      }
      __THREW__ = 0;
      invoke_viii(384,($804|0),($807|0),($809|0));
      $812 = __THREW__; __THREW__ = 0;
      $813 = $812&1;
      if ($813) {
       break;
      }
      $165 = $ret30;
      $814 = $165;
      $164 = $814;
      $815 = $164;
      $163 = $815;
      HEAP32[$815>>2] = 0;
      $816 = ((($815)) + 4|0);
      HEAP32[$816>>2] = 0;
      $817 = ((($815)) + 8|0);
      $161 = $817;
      HEAP32[$162>>2] = 0;
      $818 = $161;
      $160 = $162;
      $819 = $160;
      $820 = HEAP32[$819>>2]|0;
      $158 = $818;
      HEAP32[$159>>2] = $820;
      $821 = $158;
      $157 = $821;
      $156 = $159;
      $822 = $156;
      $823 = HEAP32[$822>>2]|0;
      HEAP32[$821>>2] = $823;
      $154 = $304;
      $155 = 10996;
      $824 = $154;
      $153 = $824;
      $825 = $153;
      $152 = $825;
      $826 = $152;
      $151 = $826;
      $827 = $155;
      $828 = $155;
      __THREW__ = 0;
      $829 = (invoke_ii(383,($828|0))|0);
      $830 = __THREW__; __THREW__ = 0;
      $831 = $830&1;
      L127: do {
       if ($831) {
        label = 107;
       } else {
        __THREW__ = 0;
        invoke_viii(384,($824|0),($827|0),($829|0));
        $832 = __THREW__; __THREW__ = 0;
        $833 = $832&1;
        if ($833) {
         label = 107;
         break;
        }
        __THREW__ = 0;
        invoke_viii(578,($valStr29|0),($304|0),($ret30|0));
        $834 = __THREW__; __THREW__ = 0;
        $835 = $834&1;
        if ($835) {
         $911 = ___cxa_find_matching_catch()|0;
         $912 = tempRet0;
         $298 = $911;
         $299 = $912;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($304);
         break;
        }
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($304);
        $150 = $ret30;
        $836 = $150;
        $837 = ((($836)) + 4|0);
        $838 = HEAP32[$837>>2]|0;
        $839 = HEAP32[$836>>2]|0;
        $840 = $838;
        $841 = $839;
        $842 = (($840) - ($841))|0;
        $843 = (($842|0) / 12)&-1;
        $count31 = $843;
        $844 = $296;
        $845 = HEAP32[$844>>2]|0;
        $846 = ((($845)) + 40|0);
        $847 = HEAP32[$846>>2]|0;
        $848 = $name;
        $849 = $kernelType;
        __THREW__ = 0;
        $850 = (invoke_iiii($847|0,($844|0),($848|0),($849|0))|0);
        $851 = __THREW__; __THREW__ = 0;
        $852 = $851&1;
        if ($852) {
         label = 107;
         break;
        }
        $node32 = $850;
        $853 = $node32;
        $854 = HEAP32[$853>>2]|0;
        $855 = ((($854)) + 28|0);
        $856 = HEAP32[$855>>2]|0;
        __THREW__ = 0;
        $857 = (invoke_ii($856|0,($853|0))|0);
        $858 = __THREW__; __THREW__ = 0;
        $859 = $858&1;
        if ($859) {
         label = 107;
         break;
        }
        $realKernel33 = $857;
        $iVal34 = 0;
        while(1) {
         $860 = $iVal34;
         $861 = $count31;
         $862 = ($860|0)<($861|0);
         if (!($862)) {
          break;
         }
         $863 = $realKernel33;
         $864 = HEAP32[$863>>2]|0;
         $865 = ((($864)) + 28|0);
         $866 = HEAP32[$865>>2]|0;
         $867 = $iVal34;
         $148 = $ret30;
         $149 = $867;
         $868 = $148;
         $869 = $149;
         $870 = HEAP32[$868>>2]|0;
         $871 = (($870) + (($869*12)|0)|0);
         $147 = $871;
         $872 = $147;
         $146 = $872;
         $873 = $146;
         $145 = $873;
         $874 = $145;
         $144 = $874;
         $875 = $144;
         $143 = $875;
         $876 = $143;
         $142 = $876;
         $877 = $142;
         $878 = HEAP8[$877>>0]|0;
         $879 = $878&255;
         $880 = $879 & 1;
         $881 = ($880|0)!=(0);
         if ($881) {
          $136 = $874;
          $882 = $136;
          $135 = $882;
          $883 = $135;
          $134 = $883;
          $884 = $134;
          $885 = ((($884)) + 8|0);
          $886 = HEAP32[$885>>2]|0;
          $893 = $886;
         } else {
          $141 = $874;
          $887 = $141;
          $140 = $887;
          $888 = $140;
          $139 = $888;
          $889 = $139;
          $890 = ((($889)) + 1|0);
          $138 = $890;
          $891 = $138;
          $137 = $891;
          $892 = $137;
          $893 = $892;
         }
         $133 = $893;
         $894 = $133;
         $131 = $305;
         $132 = $894;
         $895 = $131;
         $130 = $895;
         $896 = $130;
         $129 = $896;
         $897 = $129;
         $128 = $897;
         $898 = $132;
         $899 = $132;
         __THREW__ = 0;
         $900 = (invoke_ii(383,($899|0))|0);
         $901 = __THREW__; __THREW__ = 0;
         $902 = $901&1;
         if ($902) {
          label = 107;
          break L127;
         }
         __THREW__ = 0;
         invoke_viii(384,($895|0),($898|0),($900|0));
         $903 = __THREW__; __THREW__ = 0;
         $904 = $903&1;
         if ($904) {
          label = 107;
          break L127;
         }
         __THREW__ = 0;
         (invoke_iii($866|0,($863|0),($305|0))|0);
         $905 = __THREW__; __THREW__ = 0;
         $906 = $905&1;
         if ($906) {
          label = 109;
          break;
         }
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($305);
         $907 = $iVal34;
         $908 = (($907) + 1)|0;
         $iVal34 = $908;
        }
        if ((label|0) == 109) {
         $913 = ___cxa_find_matching_catch()|0;
         $914 = tempRet0;
         $298 = $913;
         $299 = $914;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($305);
         break;
        }
        __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($ret30);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($valStr29);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($typeStr);
        STACKTOP = sp;return;
       }
      } while(0);
      if ((label|0) == 107) {
       $909 = ___cxa_find_matching_catch()|0;
       $910 = tempRet0;
       $298 = $909;
       $299 = $910;
      }
      __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($ret30);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($valStr29);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($typeStr);
      $1293 = $298;
      $1294 = $299;
      ___resumeException($1293|0);
      // unreachable;
     }
     $126 = $typeStr;
     $127 = 10998;
     $915 = $126;
     $916 = $127;
     $917 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($915,$916)|0);
     $918 = ($917|0)==(0);
     if ($918) {
      $919 = $297;
      __THREW__ = 0;
      $920 = (invoke_iiii(558,($919|0),(10879|0),(0|0))|0);
      $921 = __THREW__; __THREW__ = 0;
      $922 = $921&1;
      if ($922) {
       break;
      }
      $124 = $valStr35;
      $125 = $920;
      $923 = $124;
      $123 = $923;
      $924 = $123;
      $122 = $924;
      $925 = $122;
      $121 = $925;
      $926 = $125;
      $927 = $125;
      __THREW__ = 0;
      $928 = (invoke_ii(383,($927|0))|0);
      $929 = __THREW__; __THREW__ = 0;
      $930 = $929&1;
      if ($930) {
       break;
      }
      __THREW__ = 0;
      invoke_viii(384,($923|0),($926|0),($928|0));
      $931 = __THREW__; __THREW__ = 0;
      $932 = $931&1;
      if ($932) {
       break;
      }
      $120 = $ret36;
      $933 = $120;
      $119 = $933;
      $934 = $119;
      $118 = $934;
      HEAP32[$934>>2] = 0;
      $935 = ((($934)) + 4|0);
      HEAP32[$935>>2] = 0;
      $936 = ((($934)) + 8|0);
      $116 = $936;
      HEAP32[$117>>2] = 0;
      $937 = $116;
      $115 = $117;
      $938 = $115;
      $939 = HEAP32[$938>>2]|0;
      $113 = $937;
      HEAP32[$114>>2] = $939;
      $940 = $113;
      $112 = $940;
      $111 = $114;
      $941 = $111;
      $942 = HEAP32[$941>>2]|0;
      HEAP32[$940>>2] = $942;
      $109 = $306;
      $110 = 10996;
      $943 = $109;
      $108 = $943;
      $944 = $108;
      $107 = $944;
      $945 = $107;
      $106 = $945;
      $946 = $110;
      $947 = $110;
      __THREW__ = 0;
      $948 = (invoke_ii(383,($947|0))|0);
      $949 = __THREW__; __THREW__ = 0;
      $950 = $949&1;
      L159: do {
       if ($950) {
        label = 129;
       } else {
        __THREW__ = 0;
        invoke_viii(384,($943|0),($946|0),($948|0));
        $951 = __THREW__; __THREW__ = 0;
        $952 = $951&1;
        if ($952) {
         label = 129;
         break;
        }
        __THREW__ = 0;
        invoke_viii(578,($valStr35|0),($306|0),($ret36|0));
        $953 = __THREW__; __THREW__ = 0;
        $954 = $953&1;
        if ($954) {
         $1024 = ___cxa_find_matching_catch()|0;
         $1025 = tempRet0;
         $298 = $1024;
         $299 = $1025;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($306);
         break;
        }
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($306);
        $105 = $ret36;
        $955 = $105;
        $956 = ((($955)) + 4|0);
        $957 = HEAP32[$956>>2]|0;
        $958 = HEAP32[$955>>2]|0;
        $959 = $957;
        $960 = $958;
        $961 = (($959) - ($960))|0;
        $962 = (($961|0) / 12)&-1;
        $count37 = $962;
        $963 = $296;
        $964 = HEAP32[$963>>2]|0;
        $965 = ((($964)) + 40|0);
        $966 = HEAP32[$965>>2]|0;
        $967 = $name;
        $968 = $kernelType;
        __THREW__ = 0;
        $969 = (invoke_iiii($966|0,($963|0),($967|0),($968|0))|0);
        $970 = __THREW__; __THREW__ = 0;
        $971 = $970&1;
        if ($971) {
         label = 129;
         break;
        }
        $node38 = $969;
        $972 = $node38;
        $973 = HEAP32[$972>>2]|0;
        $974 = ((($973)) + 28|0);
        $975 = HEAP32[$974>>2]|0;
        __THREW__ = 0;
        $976 = (invoke_ii($975|0,($972|0))|0);
        $977 = __THREW__; __THREW__ = 0;
        $978 = $977&1;
        if ($978) {
         label = 129;
         break;
        }
        $realKernel39 = $976;
        $iVal40 = 0;
        while(1) {
         $979 = $iVal40;
         $980 = $count37;
         $981 = ($979|0)<($980|0);
         if (!($981)) {
          break;
         }
         $982 = $iVal40;
         $103 = $ret36;
         $104 = $982;
         $983 = $103;
         $984 = $104;
         $985 = HEAP32[$983>>2]|0;
         $986 = (($985) + (($984*12)|0)|0);
         $102 = $986;
         $987 = $102;
         $101 = $987;
         $988 = $101;
         $100 = $988;
         $989 = $100;
         $99 = $989;
         $990 = $99;
         $98 = $990;
         $991 = $98;
         $97 = $991;
         $992 = $97;
         $993 = HEAP8[$992>>0]|0;
         $994 = $993&255;
         $995 = $994 & 1;
         $996 = ($995|0)!=(0);
         if ($996) {
          $91 = $989;
          $997 = $91;
          $90 = $997;
          $998 = $90;
          $89 = $998;
          $999 = $89;
          $1000 = ((($999)) + 8|0);
          $1001 = HEAP32[$1000>>2]|0;
          $1008 = $1001;
         } else {
          $96 = $989;
          $1002 = $96;
          $95 = $1002;
          $1003 = $95;
          $94 = $1003;
          $1004 = $94;
          $1005 = ((($1004)) + 1|0);
          $93 = $1005;
          $1006 = $93;
          $92 = $1006;
          $1007 = $92;
          $1008 = $1007;
         }
         $88 = $1008;
         $1009 = $88;
         __THREW__ = 0;
         HEAP32[$vararg_buffer13>>2] = $x41;
         $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
         HEAP32[$vararg_ptr16>>2] = $y42;
         (invoke_iiii(577,($1009|0),(10906|0),($vararg_buffer13|0))|0);
         $1010 = __THREW__; __THREW__ = 0;
         $1011 = $1010&1;
         if ($1011) {
          label = 129;
          break L159;
         }
         $1012 = $realKernel39;
         $1013 = HEAP32[$1012>>2]|0;
         $1014 = ((($1013)) + 28|0);
         $1015 = HEAP32[$1014>>2]|0;
         $1016 = +HEAPF64[$x41>>3];
         $1017 = +HEAPF64[$y42>>3];
         __THREW__ = 0;
         (invoke_iidd($1015|0,($1012|0),(+$1016),(+$1017))|0);
         $1018 = __THREW__; __THREW__ = 0;
         $1019 = $1018&1;
         if ($1019) {
          label = 129;
          break L159;
         }
         $1020 = $iVal40;
         $1021 = (($1020) + 1)|0;
         $iVal40 = $1021;
        }
        __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($ret36);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($valStr35);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($typeStr);
        STACKTOP = sp;return;
       }
      } while(0);
      if ((label|0) == 129) {
       $1022 = ___cxa_find_matching_catch()|0;
       $1023 = tempRet0;
       $298 = $1022;
       $299 = $1023;
      }
      __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($ret36);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($valStr35);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($typeStr);
      $1293 = $298;
      $1294 = $299;
      ___resumeException($1293|0);
      // unreachable;
     }
     $84 = $typeStr;
     $85 = 11013;
     $1026 = $84;
     $1027 = $85;
     $1028 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($1026,$1027)|0);
     $1029 = ($1028|0)==(0);
     if ($1029) {
      $1030 = $297;
      __THREW__ = 0;
      $1031 = (invoke_iiii(558,($1030|0),(10879|0),(0|0))|0);
      $1032 = __THREW__; __THREW__ = 0;
      $1033 = $1032&1;
      if ($1033) {
       break;
      }
      $valStr43 = $1031;
      $83 = $ret44;
      $1034 = $83;
      $82 = $1034;
      $1035 = $82;
      $81 = $1035;
      HEAP32[$1035>>2] = 0;
      $1036 = ((($1035)) + 4|0);
      HEAP32[$1036>>2] = 0;
      $1037 = ((($1035)) + 8|0);
      $79 = $1037;
      HEAP32[$80>>2] = 0;
      $1038 = $79;
      $78 = $80;
      $1039 = $78;
      $1040 = HEAP32[$1039>>2]|0;
      $76 = $1038;
      HEAP32[$77>>2] = $1040;
      $1041 = $76;
      $75 = $1041;
      $74 = $77;
      $1042 = $74;
      $1043 = HEAP32[$1042>>2]|0;
      HEAP32[$1041>>2] = $1043;
      $1044 = $valStr43;
      $70 = $307;
      $71 = $1044;
      $1045 = $70;
      $69 = $1045;
      $1046 = $69;
      $68 = $1046;
      $1047 = $68;
      $67 = $1047;
      $1048 = $71;
      $1049 = $71;
      __THREW__ = 0;
      $1050 = (invoke_ii(383,($1049|0))|0);
      $1051 = __THREW__; __THREW__ = 0;
      $1052 = $1051&1;
      L186: do {
       if ($1052) {
        label = 150;
       } else {
        __THREW__ = 0;
        invoke_viii(384,($1045|0),($1048|0),($1050|0));
        $1053 = __THREW__; __THREW__ = 0;
        $1054 = $1053&1;
        if ($1054) {
         label = 150;
         break;
        }
        $65 = $308;
        $66 = 10996;
        $1055 = $65;
        $64 = $1055;
        $1056 = $64;
        $63 = $1056;
        $1057 = $63;
        $62 = $1057;
        $1058 = $66;
        $1059 = $66;
        __THREW__ = 0;
        $1060 = (invoke_ii(383,($1059|0))|0);
        $1061 = __THREW__; __THREW__ = 0;
        $1062 = $1061&1;
        do {
         if ($1062) {
          label = 151;
         } else {
          __THREW__ = 0;
          invoke_viii(384,($1055|0),($1058|0),($1060|0));
          $1063 = __THREW__; __THREW__ = 0;
          $1064 = $1063&1;
          if ($1064) {
           label = 151;
           break;
          }
          __THREW__ = 0;
          invoke_viii(578,($307|0),($308|0),($ret44|0));
          $1065 = __THREW__; __THREW__ = 0;
          $1066 = $1065&1;
          if ($1066) {
           $1139 = ___cxa_find_matching_catch()|0;
           $1140 = tempRet0;
           $298 = $1139;
           $299 = $1140;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($308);
           break;
          }
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($308);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($307);
          $61 = $ret44;
          $1067 = $61;
          $1068 = ((($1067)) + 4|0);
          $1069 = HEAP32[$1068>>2]|0;
          $1070 = HEAP32[$1067>>2]|0;
          $1071 = $1069;
          $1072 = $1070;
          $1073 = (($1071) - ($1072))|0;
          $1074 = (($1073|0) / 12)&-1;
          $count45 = $1074;
          $1075 = $296;
          $1076 = HEAP32[$1075>>2]|0;
          $1077 = ((($1076)) + 40|0);
          $1078 = HEAP32[$1077>>2]|0;
          $1079 = $name;
          $1080 = $kernelType;
          __THREW__ = 0;
          $1081 = (invoke_iiii($1078|0,($1075|0),($1079|0),($1080|0))|0);
          $1082 = __THREW__; __THREW__ = 0;
          $1083 = $1082&1;
          if ($1083) {
           label = 150;
           break L186;
          }
          $node46 = $1081;
          $1084 = $node46;
          $1085 = HEAP32[$1084>>2]|0;
          $1086 = ((($1085)) + 28|0);
          $1087 = HEAP32[$1086>>2]|0;
          __THREW__ = 0;
          $1088 = (invoke_ii($1087|0,($1084|0))|0);
          $1089 = __THREW__; __THREW__ = 0;
          $1090 = $1089&1;
          if ($1090) {
           label = 150;
           break L186;
          }
          $realKernel47 = $1088;
          $iVal48 = 0;
          while(1) {
           $1091 = $iVal48;
           $1092 = $count45;
           $1093 = ($1091|0)<($1092|0);
           if (!($1093)) {
            break;
           }
           $1094 = $iVal48;
           $59 = $ret44;
           $60 = $1094;
           $1095 = $59;
           $1096 = $60;
           $1097 = HEAP32[$1095>>2]|0;
           $1098 = (($1097) + (($1096*12)|0)|0);
           $58 = $1098;
           $1099 = $58;
           $57 = $1099;
           $1100 = $57;
           $56 = $1100;
           $1101 = $56;
           $55 = $1101;
           $1102 = $55;
           $54 = $1102;
           $1103 = $54;
           $53 = $1103;
           $1104 = $53;
           $1105 = HEAP8[$1104>>0]|0;
           $1106 = $1105&255;
           $1107 = $1106 & 1;
           $1108 = ($1107|0)!=(0);
           if ($1108) {
            $47 = $1101;
            $1109 = $47;
            $46 = $1109;
            $1110 = $46;
            $45 = $1110;
            $1111 = $45;
            $1112 = ((($1111)) + 8|0);
            $1113 = HEAP32[$1112>>2]|0;
            $1120 = $1113;
           } else {
            $52 = $1101;
            $1114 = $52;
            $51 = $1114;
            $1115 = $51;
            $50 = $1115;
            $1116 = $50;
            $1117 = ((($1116)) + 1|0);
            $49 = $1117;
            $1118 = $49;
            $48 = $1118;
            $1119 = $48;
            $1120 = $1119;
           }
           $44 = $1120;
           $1121 = $44;
           __THREW__ = 0;
           HEAP32[$vararg_buffer17>>2] = $x49;
           $vararg_ptr20 = ((($vararg_buffer17)) + 4|0);
           HEAP32[$vararg_ptr20>>2] = $y50;
           $vararg_ptr21 = ((($vararg_buffer17)) + 8|0);
           HEAP32[$vararg_ptr21>>2] = $z51;
           (invoke_iiii(577,($1121|0),(10923|0),($vararg_buffer17|0))|0);
           $1122 = __THREW__; __THREW__ = 0;
           $1123 = $1122&1;
           if ($1123) {
            label = 150;
            break L186;
           }
           $1124 = $realKernel47;
           $1125 = HEAP32[$1124>>2]|0;
           $1126 = ((($1125)) + 28|0);
           $1127 = HEAP32[$1126>>2]|0;
           $1128 = +HEAPF64[$x49>>3];
           $1129 = +HEAPF64[$y50>>3];
           $1130 = +HEAPF64[$z51>>3];
           __THREW__ = 0;
           (invoke_iiddd($1127|0,($1124|0),(+$1128),(+$1129),(+$1130))|0);
           $1131 = __THREW__; __THREW__ = 0;
           $1132 = $1131&1;
           if ($1132) {
            label = 150;
            break L186;
           }
           $1133 = $iVal48;
           $1134 = (($1133) + 1)|0;
           $iVal48 = $1134;
          }
          __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($ret44);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($typeStr);
          STACKTOP = sp;return;
         }
        } while(0);
        if ((label|0) == 151) {
         $1137 = ___cxa_find_matching_catch()|0;
         $1138 = tempRet0;
         $298 = $1137;
         $299 = $1138;
        }
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($307);
       }
      } while(0);
      if ((label|0) == 150) {
       $1135 = ___cxa_find_matching_catch()|0;
       $1136 = tempRet0;
       $298 = $1135;
       $299 = $1136;
      }
      __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($ret44);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($typeStr);
      $1293 = $298;
      $1294 = $299;
      ___resumeException($1293|0);
      // unreachable;
     }
     $40 = $typeStr;
     $41 = 11028;
     $1141 = $40;
     $1142 = $41;
     $1143 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($1141,$1142)|0);
     $1144 = ($1143|0)==(0);
     if (!($1144)) {
      $15 = $typeStr;
      $16 = 11043;
      $1254 = $15;
      $1255 = $16;
      $1256 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($1254,$1255)|0);
      $1257 = ($1256|0)==(0);
      do {
       if (!($1257)) {
        $42 = $typeStr;
        $43 = 11047;
        $1258 = $42;
        $1259 = $43;
        $1260 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($1258,$1259)|0);
        $1261 = ($1260|0)==(0);
        if ($1261) {
         break;
        }
        $72 = $typeStr;
        $73 = 11052;
        $1262 = $72;
        $1263 = $73;
        $1264 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($1262,$1263)|0);
        $1265 = ($1264|0)==(0);
        if ($1265) {
         break;
        }
        $86 = $typeStr;
        $87 = 11056;
        $1266 = $86;
        $1267 = $87;
        $1268 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($1266,$1267)|0);
        $1269 = ($1268|0)==(0);
        if ($1269) {
         break;
        }
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($typeStr);
        STACKTOP = sp;return;
       }
      } while(0);
      $1270 = $296;
      $1271 = HEAP32[$1270>>2]|0;
      $1272 = ((($1271)) + 40|0);
      $1273 = HEAP32[$1272>>2]|0;
      $1274 = $name;
      $1275 = $kernelType;
      __THREW__ = 0;
      $1276 = (invoke_iiii($1273|0,($1270|0),($1274|0),($1275|0))|0);
      $1277 = __THREW__; __THREW__ = 0;
      $1278 = $1277&1;
      if ($1278) {
       break;
      }
      $node62 = $1276;
      $1279 = $297;
      __THREW__ = 0;
      $1280 = (invoke_iii(559,($1279|0),(0|0))|0);
      $1281 = __THREW__; __THREW__ = 0;
      $1282 = $1281&1;
      if ($1282) {
       break;
      }
      $childEle = $1280;
      while(1) {
       $1283 = $childEle;
       $1284 = ($1283|0)!=(0|0);
       if (!($1284)) {
        break;
       }
       $1285 = $node62;
       $1286 = $childEle;
       __THREW__ = 0;
       invoke_viii(573,($310|0),($1285|0),($1286|0));
       $1287 = __THREW__; __THREW__ = 0;
       $1288 = $1287&1;
       if ($1288) {
        break L1;
       }
       $1289 = $childEle;
       __THREW__ = 0;
       $1290 = (invoke_iii(561,($1289|0),(0|0))|0);
       $1291 = __THREW__; __THREW__ = 0;
       $1292 = $1291&1;
       if ($1292) {
        break L1;
       }
       $childEle = $1290;
      }
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($typeStr);
      STACKTOP = sp;return;
     }
     $1145 = $297;
     __THREW__ = 0;
     $1146 = (invoke_iiii(558,($1145|0),(10879|0),(0|0))|0);
     $1147 = __THREW__; __THREW__ = 0;
     $1148 = $1147&1;
     if (!($1148)) {
      $38 = $valStr52;
      $39 = $1146;
      $1149 = $38;
      $37 = $1149;
      $1150 = $37;
      $36 = $1150;
      $1151 = $36;
      $35 = $1151;
      $1152 = $39;
      $1153 = $39;
      __THREW__ = 0;
      $1154 = (invoke_ii(383,($1153|0))|0);
      $1155 = __THREW__; __THREW__ = 0;
      $1156 = $1155&1;
      if (!($1156)) {
       __THREW__ = 0;
       invoke_viii(384,($1149|0),($1152|0),($1154|0));
       $1157 = __THREW__; __THREW__ = 0;
       $1158 = $1157&1;
       if ($1158) {
        break;
       }
       $34 = $ret53;
       $1159 = $34;
       $33 = $1159;
       $1160 = $33;
       $32 = $1160;
       HEAP32[$1160>>2] = 0;
       $1161 = ((($1160)) + 4|0);
       HEAP32[$1161>>2] = 0;
       $1162 = ((($1160)) + 8|0);
       $30 = $1162;
       HEAP32[$31>>2] = 0;
       $1163 = $30;
       $29 = $31;
       $1164 = $29;
       $1165 = HEAP32[$1164>>2]|0;
       $27 = $1163;
       HEAP32[$28>>2] = $1165;
       $1166 = $27;
       $26 = $1166;
       $25 = $28;
       $1167 = $25;
       $1168 = HEAP32[$1167>>2]|0;
       HEAP32[$1166>>2] = $1168;
       $23 = $309;
       $24 = 10996;
       $1169 = $23;
       $22 = $1169;
       $1170 = $22;
       $21 = $1170;
       $1171 = $21;
       $20 = $1171;
       $1172 = $24;
       $1173 = $24;
       __THREW__ = 0;
       $1174 = (invoke_ii(383,($1173|0))|0);
       $1175 = __THREW__; __THREW__ = 0;
       $1176 = $1175&1;
       L236: do {
        if ($1176) {
         label = 173;
        } else {
         __THREW__ = 0;
         invoke_viii(384,($1169|0),($1172|0),($1174|0));
         $1177 = __THREW__; __THREW__ = 0;
         $1178 = $1177&1;
         if ($1178) {
          label = 173;
          break;
         }
         __THREW__ = 0;
         invoke_viii(578,($valStr52|0),($309|0),($ret53|0));
         $1179 = __THREW__; __THREW__ = 0;
         $1180 = $1179&1;
         if ($1180) {
          $1252 = ___cxa_find_matching_catch()|0;
          $1253 = tempRet0;
          $298 = $1252;
          $299 = $1253;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($309);
          break;
         }
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($309);
         $19 = $ret53;
         $1181 = $19;
         $1182 = ((($1181)) + 4|0);
         $1183 = HEAP32[$1182>>2]|0;
         $1184 = HEAP32[$1181>>2]|0;
         $1185 = $1183;
         $1186 = $1184;
         $1187 = (($1185) - ($1186))|0;
         $1188 = (($1187|0) / 12)&-1;
         $count54 = $1188;
         $1189 = $296;
         $1190 = HEAP32[$1189>>2]|0;
         $1191 = ((($1190)) + 40|0);
         $1192 = HEAP32[$1191>>2]|0;
         $1193 = $name;
         $1194 = $kernelType;
         __THREW__ = 0;
         $1195 = (invoke_iiii($1192|0,($1189|0),($1193|0),($1194|0))|0);
         $1196 = __THREW__; __THREW__ = 0;
         $1197 = $1196&1;
         if ($1197) {
          label = 173;
          break;
         }
         $node55 = $1195;
         $1198 = $node55;
         $1199 = HEAP32[$1198>>2]|0;
         $1200 = ((($1199)) + 28|0);
         $1201 = HEAP32[$1200>>2]|0;
         __THREW__ = 0;
         $1202 = (invoke_ii($1201|0,($1198|0))|0);
         $1203 = __THREW__; __THREW__ = 0;
         $1204 = $1203&1;
         if ($1204) {
          label = 173;
          break;
         }
         $realKernel56 = $1202;
         $iVal57 = 0;
         while(1) {
          $1205 = $iVal57;
          $1206 = $count54;
          $1207 = ($1205|0)<($1206|0);
          if (!($1207)) {
           break;
          }
          $1208 = $iVal57;
          $17 = $ret53;
          $18 = $1208;
          $1209 = $17;
          $1210 = $18;
          $1211 = HEAP32[$1209>>2]|0;
          $1212 = (($1211) + (($1210*12)|0)|0);
          $14 = $1212;
          $1213 = $14;
          $13 = $1213;
          $1214 = $13;
          $12 = $1214;
          $1215 = $12;
          $11 = $1215;
          $1216 = $11;
          $10 = $1216;
          $1217 = $10;
          $9 = $1217;
          $1218 = $9;
          $1219 = HEAP8[$1218>>0]|0;
          $1220 = $1219&255;
          $1221 = $1220 & 1;
          $1222 = ($1221|0)!=(0);
          if ($1222) {
           $3 = $1215;
           $1223 = $3;
           $2 = $1223;
           $1224 = $2;
           $1 = $1224;
           $1225 = $1;
           $1226 = ((($1225)) + 8|0);
           $1227 = HEAP32[$1226>>2]|0;
           $1234 = $1227;
          } else {
           $8 = $1215;
           $1228 = $8;
           $7 = $1228;
           $1229 = $7;
           $6 = $1229;
           $1230 = $6;
           $1231 = ((($1230)) + 1|0);
           $5 = $1231;
           $1232 = $5;
           $4 = $1232;
           $1233 = $4;
           $1234 = $1233;
          }
          $0 = $1234;
          $1235 = $0;
          __THREW__ = 0;
          HEAP32[$vararg_buffer22>>2] = $x58;
          $vararg_ptr25 = ((($vararg_buffer22)) + 4|0);
          HEAP32[$vararg_ptr25>>2] = $y59;
          $vararg_ptr26 = ((($vararg_buffer22)) + 8|0);
          HEAP32[$vararg_ptr26>>2] = $z60;
          $vararg_ptr27 = ((($vararg_buffer22)) + 12|0);
          HEAP32[$vararg_ptr27>>2] = $m61;
          (invoke_iiii(577,($1235|0),(10944|0),($vararg_buffer22|0))|0);
          $1236 = __THREW__; __THREW__ = 0;
          $1237 = $1236&1;
          if ($1237) {
           label = 173;
           break L236;
          }
          $1238 = $realKernel56;
          $1239 = HEAP32[$1238>>2]|0;
          $1240 = ((($1239)) + 28|0);
          $1241 = HEAP32[$1240>>2]|0;
          $1242 = +HEAPF64[$x58>>3];
          $1243 = +HEAPF64[$y59>>3];
          $1244 = +HEAPF64[$z60>>3];
          $1245 = +HEAPF64[$m61>>3];
          __THREW__ = 0;
          (invoke_iidddd($1241|0,($1238|0),(+$1242),(+$1243),(+$1244),(+$1245))|0);
          $1246 = __THREW__; __THREW__ = 0;
          $1247 = $1246&1;
          if ($1247) {
           label = 173;
           break L236;
          }
          $1248 = $iVal57;
          $1249 = (($1248) + 1)|0;
          $iVal57 = $1249;
         }
         __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($ret53);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($valStr52);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($typeStr);
         STACKTOP = sp;return;
        }
       } while(0);
       if ((label|0) == 173) {
        $1250 = ___cxa_find_matching_catch()|0;
        $1251 = tempRet0;
        $298 = $1250;
        $299 = $1251;
       }
       __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($ret53);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($valStr52);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($typeStr);
       $1293 = $298;
       $1294 = $299;
       ___resumeException($1293|0);
       // unreachable;
      }
     }
    }
   }
  }
 } while(0);
 $390 = ___cxa_find_matching_catch()|0;
 $391 = tempRet0;
 $298 = $390;
 $299 = $391;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($typeStr);
 $1293 = $298;
 $1294 = $299;
 ___resumeException($1293|0);
 // unreachable;
}
function __ZN4NGIS4Data11CUdxDataset15FormatToXmlFileEPKc($this,$fileName) {
 $this = $this|0;
 $fileName = $fileName|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count = 0;
 var $doc = 0, $element = 0, $iNode = 0, $tempNode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $fileName;
 $4 = $0;
 $5 = (__Znwj(376)|0);
 __THREW__ = 0;
 invoke_viii(581,($5|0),1,0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $28 = ___cxa_find_matching_catch()|0;
  $29 = tempRet0;
  $2 = $28;
  $3 = $29;
  __ZdlPv($5);
  $30 = $2;
  $31 = $3;
  ___resumeException($30|0);
  // unreachable;
 }
 $doc = $5;
 $8 = $doc;
 $9 = (__ZN8tinyxml211XMLDocument10NewElementEPKc($8,11062)|0);
 $element = $9;
 $10 = $doc;
 $11 = $element;
 (__ZN8tinyxml27XMLNode12LinkEndChildEPS0_($10,$11)|0);
 $12 = HEAP32[$4>>2]|0;
 $13 = ((($12)) + 56|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (FUNCTION_TABLE_ii[$14 & 1023]($4)|0);
 $count = $15;
 $iNode = 0;
 while(1) {
  $16 = $iNode;
  $17 = $count;
  $18 = ($16|0)<($17|0);
  if (!($18)) {
   break;
  }
  $19 = HEAP32[$4>>2]|0;
  $20 = ((($19)) + 60|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $iNode;
  $23 = (FUNCTION_TABLE_iii[$21 & 1023]($4,$22)|0);
  $tempNode = $23;
  $24 = $tempNode;
  $25 = $element;
  __ZN4NGIS4Data11CUdxDataset9FormatXDOEPNS0_8IUdxNodeEPN8tinyxml210XMLElementE($4,$24,$25);
  $26 = $iNode;
  $27 = (($26) + 1)|0;
  $iNode = $27;
 }
 $32 = $doc;
 $33 = $1;
 (__ZN8tinyxml211XMLDocument8SaveFileEPKcb($32,$33,0)|0);
 $34 = $doc;
 $35 = ($34|0)==(0|0);
 if ($35) {
  STACKTOP = sp;return 1;
 }
 $36 = HEAP32[$34>>2]|0;
 $37 = ((($36)) + 64|0);
 $38 = HEAP32[$37>>2]|0;
 FUNCTION_TABLE_vi[$38 & 1023]($34);
 STACKTOP = sp;return 1;
}
function __ZN4NGIS4Data11CUdxDataset9FormatXDOEPNS0_8IUdxNodeEPN8tinyxml210XMLElementE($this,$pNode,$element) {
 $this = $this|0;
 $pNode = $pNode|0;
 $element = $element|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0.0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0.0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0.0, $1308 = 0, $1309 = 0.0, $131 = 0, $1310 = 0, $1311 = 0.0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0;
 var $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0.0, $1419 = 0, $142 = 0, $1420 = 0.0, $1421 = 0, $1422 = 0.0, $1423 = 0, $1424 = 0.0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0;
 var $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0;
 var $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0;
 var $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0;
 var $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0;
 var $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0;
 var $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0;
 var $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0;
 var $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0;
 var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0;
 var $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0;
 var $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0;
 var $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0;
 var $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0;
 var $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0;
 var $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0;
 var $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0.0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0;
 var $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0;
 var $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0.0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0;
 var $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0;
 var $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0;
 var $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0;
 var $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0;
 var $612 = 0.0, $613 = 0, $614 = 0.0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0;
 var $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0;
 var $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0.0, $657 = 0, $658 = 0.0, $659 = 0, $66 = 0, $660 = 0.0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0;
 var $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0;
 var $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0;
 var $702 = 0.0, $703 = 0, $704 = 0.0, $705 = 0, $706 = 0.0, $707 = 0, $708 = 0.0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0;
 var $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0;
 var $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0;
 var $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0;
 var $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0;
 var $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0;
 var $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0;
 var $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0;
 var $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0;
 var $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0.0, $882 = 0;
 var $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0;
 var $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0;
 var $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0;
 var $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0;
 var $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0;
 var $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0;
 var $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $childEle = 0, $count = 0, $count13 = 0, $count19 = 0, $count25 = 0, $count31 = 0, $count37 = 0, $count42 = 0, $doc = 0, $iNode = 0, $iVal = 0;
 var $iVal15 = 0, $iVal21 = 0, $iVal27 = 0, $iVal33 = 0, $iVal39 = 0, $kernelType = 0, $name = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $realKernel = 0, $realKernel1 = 0, $realKernel10 = 0, $realKernel12 = 0, $realKernel18 = 0, $realKernel24 = 0, $realKernel3 = 0, $realKernel30 = 0, $realKernel36 = 0, $realKernel5 = 0;
 var $realKernel6 = 0, $realKernel8 = 0, $tempNode = 0, $tempValChar = 0, $tempValChar17 = 0, $tempValChar29 = 0, $tempValChar35 = 0, $tempValChar41 = 0, $v = 0, $v7 = 0, $v9 = 0, $val = 0, $val11 = 0, $val16 = 0, $val2 = 0.0, $val22 = 0, $val28 = 0, $val34 = 0, $val4 = 0, $val40 = 0;
 var $valStr = 0, $valStr14 = 0, $valStr20 = 0, $valStr26 = 0, $valStr32 = 0, $valStr38 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer18 = 0, $vararg_buffer21 = 0, $vararg_buffer24 = 0, $vararg_buffer27 = 0, $vararg_buffer30 = 0, $vararg_buffer34 = 0, $vararg_buffer38 = 0, $vararg_buffer43 = 0, $vararg_buffer48 = 0, $vararg_buffer54 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0;
 var $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr33 = 0, $vararg_ptr37 = 0, $vararg_ptr41 = 0, $vararg_ptr42 = 0, $vararg_ptr46 = 0, $vararg_ptr47 = 0, $vararg_ptr51 = 0, $vararg_ptr52 = 0, $vararg_ptr53 = 0, $vararg_ptr57 = 0, $vararg_ptr58 = 0, $vararg_ptr59 = 0, $vararg_ptr6 = 0, $vector2dStr = 0, $vector3dStr = 0, $vector4dStr = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 3232|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer54 = sp + 376|0;
 $vararg_buffer48 = sp + 344|0;
 $vararg_buffer43 = sp + 320|0;
 $vararg_buffer38 = sp + 296|0;
 $vararg_buffer34 = sp + 280|0;
 $vararg_buffer30 = sp + 264|0;
 $vararg_buffer27 = sp + 256|0;
 $vararg_buffer24 = sp + 248|0;
 $vararg_buffer21 = sp + 240|0;
 $vararg_buffer18 = sp + 232|0;
 $vararg_buffer12 = sp + 200|0;
 $vararg_buffer7 = sp + 176|0;
 $vararg_buffer = sp + 160|0;
 $406 = sp + 768|0;
 $409 = sp + 744|0;
 $val4 = sp + 728|0;
 $410 = sp + 716|0;
 $v = sp + 136|0;
 $vector2dStr = sp + 3128|0;
 $411 = sp + 700|0;
 $v7 = sp + 112|0;
 $vector3dStr = sp + 3028|0;
 $412 = sp + 684|0;
 $v9 = sp + 80|0;
 $vector4dStr = sp + 2928|0;
 $413 = sp + 668|0;
 $valStr = sp + 648|0;
 $val11 = sp + 640|0;
 $tempValChar = sp + 2828|0;
 $414 = sp + 628|0;
 $valStr14 = sp + 608|0;
 $val16 = sp + 72|0;
 $tempValChar17 = sp + 2728|0;
 $415 = sp + 592|0;
 $valStr20 = sp + 572|0;
 $val22 = sp + 556|0;
 $417 = sp + 540|0;
 $valStr26 = sp + 520|0;
 $val28 = sp + 56|0;
 $tempValChar29 = sp + 2628|0;
 $418 = sp + 504|0;
 $valStr32 = sp + 484|0;
 $val34 = sp + 32|0;
 $tempValChar35 = sp + 2528|0;
 $419 = sp + 468|0;
 $valStr38 = sp + 448|0;
 $val40 = sp;
 $tempValChar41 = sp + 2428|0;
 $420 = sp + 432|0;
 $421 = sp + 420|0;
 $403 = $this;
 $404 = $pNode;
 $405 = $element;
 $422 = $403;
 $423 = $404;
 $424 = HEAP32[$423>>2]|0;
 $425 = ((($424)) + 28|0);
 $426 = HEAP32[$425>>2]|0;
 $427 = (FUNCTION_TABLE_ii[$426 & 1023]($423)|0);
 $428 = HEAP32[$427>>2]|0;
 $429 = ((($428)) + 24|0);
 $430 = HEAP32[$429>>2]|0;
 $431 = (FUNCTION_TABLE_ii[$430 & 1023]($427)|0);
 $kernelType = $431;
 $432 = $404;
 $433 = HEAP32[$432>>2]|0;
 $434 = ((($433)) + 20|0);
 $435 = HEAP32[$434>>2]|0;
 $436 = (FUNCTION_TABLE_ii[$435 & 1023]($432)|0);
 $name = $436;
 $437 = $405;
 $438 = (__ZN8tinyxml27XMLNode11GetDocumentEv($437)|0);
 $doc = $438;
 $439 = $doc;
 $440 = (__ZN8tinyxml211XMLDocument10NewElementEPKc($439,11070)|0);
 $childEle = $440;
 $441 = $405;
 $442 = $childEle;
 (__ZN8tinyxml27XMLNode12LinkEndChildEPS0_($441,$442)|0);
 $443 = $childEle;
 $444 = $name;
 __ZN8tinyxml210XMLElement12SetAttributeEPKcS2_($443,10874,$444);
 $445 = $kernelType;
 $446 = ($445|0)==(2);
 if ($446) {
  $447 = $404;
  $448 = HEAP32[$447>>2]|0;
  $449 = ((($448)) + 28|0);
  $450 = HEAP32[$449>>2]|0;
  $451 = (FUNCTION_TABLE_ii[$450 & 1023]($447)|0);
  $realKernel = $451;
  $452 = $realKernel;
  $453 = HEAP32[$452>>2]|0;
  $454 = ((($453)) + 32|0);
  $455 = HEAP32[$454>>2]|0;
  $456 = (FUNCTION_TABLE_ii[$455 & 1023]($452)|0);
  $val = $456;
  $457 = $childEle;
  $458 = $kernelType;
  __ZN4NGIS4DataL17KernelType2StringENS0_11EKernelTypeE190($406,$458);
  $402 = $406;
  $459 = $402;
  $401 = $459;
  $460 = $401;
  $400 = $460;
  $461 = $400;
  $399 = $461;
  $462 = $399;
  $398 = $462;
  $463 = $398;
  $397 = $463;
  $464 = $397;
  $465 = HEAP8[$464>>0]|0;
  $466 = $465&255;
  $467 = $466 & 1;
  $468 = ($467|0)!=(0);
  if ($468) {
   $391 = $461;
   $469 = $391;
   $390 = $469;
   $470 = $390;
   $389 = $470;
   $471 = $389;
   $472 = ((($471)) + 8|0);
   $473 = HEAP32[$472>>2]|0;
   $480 = $473;
  } else {
   $396 = $461;
   $474 = $396;
   $395 = $474;
   $475 = $395;
   $394 = $475;
   $476 = $394;
   $477 = ((($476)) + 1|0);
   $393 = $477;
   $478 = $393;
   $392 = $478;
   $479 = $392;
   $480 = $479;
  }
  $388 = $480;
  $481 = $388;
  __THREW__ = 0;
  invoke_viii(566,($457|0),(10863|0),($481|0));
  $482 = __THREW__; __THREW__ = 0;
  $483 = $482&1;
  if ($483) {
   $486 = ___cxa_find_matching_catch()|0;
   $487 = tempRet0;
   $407 = $486;
   $408 = $487;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($406);
   $1547 = $407;
   $1548 = $408;
   ___resumeException($1547|0);
   // unreachable;
  } else {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($406);
   $484 = $childEle;
   $485 = $val;
   __ZN8tinyxml210XMLElement12SetAttributeEPKci($484,10879,$485);
   STACKTOP = sp;return;
  }
 }
 $488 = $kernelType;
 $489 = ($488|0)==(4);
 if ($489) {
  $490 = $404;
  $491 = HEAP32[$490>>2]|0;
  $492 = ((($491)) + 28|0);
  $493 = HEAP32[$492>>2]|0;
  $494 = (FUNCTION_TABLE_ii[$493 & 1023]($490)|0);
  $realKernel1 = $494;
  $495 = $realKernel1;
  $496 = HEAP32[$495>>2]|0;
  $497 = ((($496)) + 32|0);
  $498 = HEAP32[$497>>2]|0;
  $499 = (+FUNCTION_TABLE_di[$498 & 1023]($495));
  $val2 = $499;
  $500 = $childEle;
  $501 = $kernelType;
  __ZN4NGIS4DataL17KernelType2StringENS0_11EKernelTypeE190($409,$501);
  $387 = $409;
  $502 = $387;
  $386 = $502;
  $503 = $386;
  $385 = $503;
  $504 = $385;
  $384 = $504;
  $505 = $384;
  $383 = $505;
  $506 = $383;
  $382 = $506;
  $507 = $382;
  $508 = HEAP8[$507>>0]|0;
  $509 = $508&255;
  $510 = $509 & 1;
  $511 = ($510|0)!=(0);
  if ($511) {
   $376 = $504;
   $512 = $376;
   $375 = $512;
   $513 = $375;
   $374 = $513;
   $514 = $374;
   $515 = ((($514)) + 8|0);
   $516 = HEAP32[$515>>2]|0;
   $523 = $516;
  } else {
   $381 = $504;
   $517 = $381;
   $380 = $517;
   $518 = $380;
   $379 = $518;
   $519 = $379;
   $520 = ((($519)) + 1|0);
   $378 = $520;
   $521 = $378;
   $377 = $521;
   $522 = $377;
   $523 = $522;
  }
  $373 = $523;
  $524 = $373;
  __THREW__ = 0;
  invoke_viii(566,($500|0),(10863|0),($524|0));
  $525 = __THREW__; __THREW__ = 0;
  $526 = $525&1;
  if ($526) {
   $529 = ___cxa_find_matching_catch()|0;
   $530 = tempRet0;
   $407 = $529;
   $408 = $530;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($409);
   $1547 = $407;
   $1548 = $408;
   ___resumeException($1547|0);
   // unreachable;
  } else {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($409);
   $527 = $childEle;
   $528 = $val2;
   __ZN8tinyxml210XMLElement12SetAttributeEPKcd($527,10879,$528);
   STACKTOP = sp;return;
  }
 }
 $531 = $kernelType;
 $532 = ($531|0)==(8);
 if ($532) {
  $533 = $404;
  $534 = HEAP32[$533>>2]|0;
  $535 = ((($534)) + 28|0);
  $536 = HEAP32[$535>>2]|0;
  $537 = (FUNCTION_TABLE_ii[$536 & 1023]($533)|0);
  $realKernel3 = $537;
  $538 = $realKernel3;
  $539 = HEAP32[$538>>2]|0;
  $540 = ((($539)) + 32|0);
  $541 = HEAP32[$540>>2]|0;
  FUNCTION_TABLE_vii[$541 & 1023]($val4,$538);
  $542 = $childEle;
  $543 = $kernelType;
  __THREW__ = 0;
  invoke_vii(582,($410|0),($543|0));
  $544 = __THREW__; __THREW__ = 0;
  $545 = $544&1;
  do {
   if ($545) {
    label = 26;
   } else {
    $372 = $410;
    $546 = $372;
    $371 = $546;
    $547 = $371;
    $370 = $547;
    $548 = $370;
    $369 = $548;
    $549 = $369;
    $368 = $549;
    $550 = $368;
    $367 = $550;
    $551 = $367;
    $552 = HEAP8[$551>>0]|0;
    $553 = $552&255;
    $554 = $553 & 1;
    $555 = ($554|0)!=(0);
    if ($555) {
     $361 = $548;
     $556 = $361;
     $360 = $556;
     $557 = $360;
     $359 = $557;
     $558 = $359;
     $559 = ((($558)) + 8|0);
     $560 = HEAP32[$559>>2]|0;
     $567 = $560;
    } else {
     $366 = $548;
     $561 = $366;
     $365 = $561;
     $562 = $365;
     $364 = $562;
     $563 = $364;
     $564 = ((($563)) + 1|0);
     $363 = $564;
     $565 = $363;
     $362 = $565;
     $566 = $362;
     $567 = $566;
    }
    $358 = $567;
    $568 = $358;
    __THREW__ = 0;
    invoke_viii(566,($542|0),(10863|0),($568|0));
    $569 = __THREW__; __THREW__ = 0;
    $570 = $569&1;
    if ($570) {
     $599 = ___cxa_find_matching_catch()|0;
     $600 = tempRet0;
     $407 = $599;
     $408 = $600;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($410);
     break;
    }
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($410);
    $571 = $childEle;
    $357 = $val4;
    $572 = $357;
    $356 = $572;
    $573 = $356;
    $355 = $573;
    $574 = $355;
    $354 = $574;
    $575 = $354;
    $353 = $575;
    $576 = $353;
    $352 = $576;
    $577 = $352;
    $578 = HEAP8[$577>>0]|0;
    $579 = $578&255;
    $580 = $579 & 1;
    $581 = ($580|0)!=(0);
    if ($581) {
     $346 = $574;
     $582 = $346;
     $345 = $582;
     $583 = $345;
     $344 = $583;
     $584 = $344;
     $585 = ((($584)) + 8|0);
     $586 = HEAP32[$585>>2]|0;
     $593 = $586;
    } else {
     $351 = $574;
     $587 = $351;
     $350 = $587;
     $588 = $350;
     $349 = $588;
     $589 = $349;
     $590 = ((($589)) + 1|0);
     $348 = $590;
     $591 = $348;
     $347 = $591;
     $592 = $347;
     $593 = $592;
    }
    $343 = $593;
    $594 = $343;
    __THREW__ = 0;
    invoke_viii(566,($571|0),(10879|0),($594|0));
    $595 = __THREW__; __THREW__ = 0;
    $596 = $595&1;
    if ($596) {
     label = 26;
    } else {
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($val4);
     STACKTOP = sp;return;
    }
   }
  } while(0);
  if ((label|0) == 26) {
   $597 = ___cxa_find_matching_catch()|0;
   $598 = tempRet0;
   $407 = $597;
   $408 = $598;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($val4);
  $1547 = $407;
  $1548 = $408;
  ___resumeException($1547|0);
  // unreachable;
 }
 $601 = $kernelType;
 $602 = ($601|0)==(16);
 if ($602) {
  $603 = $404;
  $604 = HEAP32[$603>>2]|0;
  $605 = ((($604)) + 28|0);
  $606 = HEAP32[$605>>2]|0;
  $607 = (FUNCTION_TABLE_ii[$606 & 1023]($603)|0);
  $realKernel5 = $607;
  $608 = $realKernel5;
  $609 = HEAP32[$608>>2]|0;
  $610 = ((($609)) + 32|0);
  $611 = HEAP32[$610>>2]|0;
  FUNCTION_TABLE_vii[$611 & 1023]($v,$608);
  $612 = +HEAPF64[$v>>3];
  $613 = ((($v)) + 8|0);
  $614 = +HEAPF64[$613>>3];
  HEAPF64[$vararg_buffer>>3] = $612;
  $vararg_ptr6 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr6>>3] = $614;
  (_sprintf($vector2dStr,11074,$vararg_buffer)|0);
  $615 = $childEle;
  $616 = $kernelType;
  __ZN4NGIS4DataL17KernelType2StringENS0_11EKernelTypeE190($411,$616);
  $342 = $411;
  $617 = $342;
  $341 = $617;
  $618 = $341;
  $340 = $618;
  $619 = $340;
  $339 = $619;
  $620 = $339;
  $338 = $620;
  $621 = $338;
  $337 = $621;
  $622 = $337;
  $623 = HEAP8[$622>>0]|0;
  $624 = $623&255;
  $625 = $624 & 1;
  $626 = ($625|0)!=(0);
  if ($626) {
   $331 = $619;
   $627 = $331;
   $330 = $627;
   $628 = $330;
   $329 = $628;
   $629 = $329;
   $630 = ((($629)) + 8|0);
   $631 = HEAP32[$630>>2]|0;
   $638 = $631;
  } else {
   $336 = $619;
   $632 = $336;
   $335 = $632;
   $633 = $335;
   $334 = $633;
   $634 = $334;
   $635 = ((($634)) + 1|0);
   $333 = $635;
   $636 = $333;
   $332 = $636;
   $637 = $332;
   $638 = $637;
  }
  $328 = $638;
  $639 = $328;
  __THREW__ = 0;
  invoke_viii(566,($615|0),(10863|0),($639|0));
  $640 = __THREW__; __THREW__ = 0;
  $641 = $640&1;
  if ($641) {
   $643 = ___cxa_find_matching_catch()|0;
   $644 = tempRet0;
   $407 = $643;
   $408 = $644;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($411);
   $1547 = $407;
   $1548 = $408;
   ___resumeException($1547|0);
   // unreachable;
  } else {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($411);
   $642 = $childEle;
   __ZN8tinyxml210XMLElement12SetAttributeEPKcS2_($642,10879,$vector2dStr);
   STACKTOP = sp;return;
  }
 }
 $645 = $kernelType;
 $646 = ($645|0)==(32);
 if ($646) {
  $647 = $404;
  $648 = HEAP32[$647>>2]|0;
  $649 = ((($648)) + 28|0);
  $650 = HEAP32[$649>>2]|0;
  $651 = (FUNCTION_TABLE_ii[$650 & 1023]($647)|0);
  $realKernel6 = $651;
  $652 = $realKernel6;
  $653 = HEAP32[$652>>2]|0;
  $654 = ((($653)) + 32|0);
  $655 = HEAP32[$654>>2]|0;
  FUNCTION_TABLE_vii[$655 & 1023]($v7,$652);
  $656 = +HEAPF64[$v7>>3];
  $657 = ((($v7)) + 8|0);
  $658 = +HEAPF64[$657>>3];
  $659 = ((($v7)) + 16|0);
  $660 = +HEAPF64[$659>>3];
  HEAPF64[$vararg_buffer7>>3] = $656;
  $vararg_ptr10 = ((($vararg_buffer7)) + 8|0);
  HEAPF64[$vararg_ptr10>>3] = $658;
  $vararg_ptr11 = ((($vararg_buffer7)) + 16|0);
  HEAPF64[$vararg_ptr11>>3] = $660;
  (_sprintf($vector3dStr,11080,$vararg_buffer7)|0);
  $661 = $childEle;
  $662 = $kernelType;
  __ZN4NGIS4DataL17KernelType2StringENS0_11EKernelTypeE190($412,$662);
  $312 = $412;
  $663 = $312;
  $311 = $663;
  $664 = $311;
  $310 = $664;
  $665 = $310;
  $309 = $665;
  $666 = $309;
  $308 = $666;
  $667 = $308;
  $307 = $667;
  $668 = $307;
  $669 = HEAP8[$668>>0]|0;
  $670 = $669&255;
  $671 = $670 & 1;
  $672 = ($671|0)!=(0);
  if ($672) {
   $301 = $665;
   $673 = $301;
   $300 = $673;
   $674 = $300;
   $299 = $674;
   $675 = $299;
   $676 = ((($675)) + 8|0);
   $677 = HEAP32[$676>>2]|0;
   $684 = $677;
  } else {
   $306 = $665;
   $678 = $306;
   $305 = $678;
   $679 = $305;
   $304 = $679;
   $680 = $304;
   $681 = ((($680)) + 1|0);
   $303 = $681;
   $682 = $303;
   $302 = $682;
   $683 = $302;
   $684 = $683;
  }
  $298 = $684;
  $685 = $298;
  __THREW__ = 0;
  invoke_viii(566,($661|0),(10863|0),($685|0));
  $686 = __THREW__; __THREW__ = 0;
  $687 = $686&1;
  if ($687) {
   $689 = ___cxa_find_matching_catch()|0;
   $690 = tempRet0;
   $407 = $689;
   $408 = $690;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($412);
   $1547 = $407;
   $1548 = $408;
   ___resumeException($1547|0);
   // unreachable;
  } else {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($412);
   $688 = $childEle;
   __ZN8tinyxml210XMLElement12SetAttributeEPKcS2_($688,10879,$vector3dStr);
   STACKTOP = sp;return;
  }
 }
 $691 = $kernelType;
 $692 = ($691|0)==(64);
 if ($692) {
  $693 = $404;
  $694 = HEAP32[$693>>2]|0;
  $695 = ((($694)) + 28|0);
  $696 = HEAP32[$695>>2]|0;
  $697 = (FUNCTION_TABLE_ii[$696 & 1023]($693)|0);
  $realKernel8 = $697;
  $698 = $realKernel8;
  $699 = HEAP32[$698>>2]|0;
  $700 = ((($699)) + 32|0);
  $701 = HEAP32[$700>>2]|0;
  FUNCTION_TABLE_vii[$701 & 1023]($v9,$698);
  $702 = +HEAPF64[$v9>>3];
  $703 = ((($v9)) + 8|0);
  $704 = +HEAPF64[$703>>3];
  $705 = ((($v9)) + 16|0);
  $706 = +HEAPF64[$705>>3];
  $707 = ((($v9)) + 24|0);
  $708 = +HEAPF64[$707>>3];
  HEAPF64[$vararg_buffer12>>3] = $702;
  $vararg_ptr15 = ((($vararg_buffer12)) + 8|0);
  HEAPF64[$vararg_ptr15>>3] = $704;
  $vararg_ptr16 = ((($vararg_buffer12)) + 16|0);
  HEAPF64[$vararg_ptr16>>3] = $706;
  $vararg_ptr17 = ((($vararg_buffer12)) + 24|0);
  HEAPF64[$vararg_ptr17>>3] = $708;
  (_sprintf($vector4dStr,11089,$vararg_buffer12)|0);
  $709 = $childEle;
  $710 = $kernelType;
  __ZN4NGIS4DataL17KernelType2StringENS0_11EKernelTypeE190($413,$710);
  $297 = $413;
  $711 = $297;
  $296 = $711;
  $712 = $296;
  $295 = $712;
  $713 = $295;
  $294 = $713;
  $714 = $294;
  $293 = $714;
  $715 = $293;
  $292 = $715;
  $716 = $292;
  $717 = HEAP8[$716>>0]|0;
  $718 = $717&255;
  $719 = $718 & 1;
  $720 = ($719|0)!=(0);
  if ($720) {
   $286 = $713;
   $721 = $286;
   $285 = $721;
   $722 = $285;
   $284 = $722;
   $723 = $284;
   $724 = ((($723)) + 8|0);
   $725 = HEAP32[$724>>2]|0;
   $732 = $725;
  } else {
   $291 = $713;
   $726 = $291;
   $290 = $726;
   $727 = $290;
   $289 = $727;
   $728 = $289;
   $729 = ((($728)) + 1|0);
   $288 = $729;
   $730 = $288;
   $287 = $730;
   $731 = $287;
   $732 = $731;
  }
  $283 = $732;
  $733 = $283;
  __THREW__ = 0;
  invoke_viii(566,($709|0),(10863|0),($733|0));
  $734 = __THREW__; __THREW__ = 0;
  $735 = $734&1;
  if ($735) {
   $737 = ___cxa_find_matching_catch()|0;
   $738 = tempRet0;
   $407 = $737;
   $408 = $738;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($413);
   $1547 = $407;
   $1548 = $408;
   ___resumeException($1547|0);
   // unreachable;
  } else {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($413);
   $736 = $childEle;
   __ZN8tinyxml210XMLElement12SetAttributeEPKcS2_($736,10879,$vector4dStr);
   STACKTOP = sp;return;
  }
 }
 $739 = $kernelType;
 $740 = ($739|0)==(258);
 if ($740) {
  $741 = $404;
  $742 = HEAP32[$741>>2]|0;
  $743 = ((($742)) + 28|0);
  $744 = HEAP32[$743>>2]|0;
  $745 = (FUNCTION_TABLE_ii[$744 & 1023]($741)|0);
  $realKernel10 = $745;
  $746 = $realKernel10;
  $747 = HEAP32[$746>>2]|0;
  $748 = ((($747)) + 40|0);
  $749 = HEAP32[$748>>2]|0;
  $750 = (FUNCTION_TABLE_ii[$749 & 1023]($746)|0);
  $count = $750;
  $266 = $valStr;
  $267 = 11786;
  $751 = $266;
  $265 = $751;
  $752 = $265;
  $264 = $752;
  $753 = $264;
  $263 = $753;
  $754 = $267;
  $755 = $267;
  $756 = (__ZNSt3__111char_traitsIcE6lengthEPKc($755)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($751,$754,$756);
  $iVal = 0;
  while(1) {
   $757 = $iVal;
   $758 = $count;
   $759 = ($757|0)<($758|0);
   if (!($759)) {
    label = 61;
    break;
   }
   HEAP32[$val11>>2] = 0;
   $760 = $realKernel10;
   $761 = HEAP32[$760>>2]|0;
   $762 = ((($761)) + 32|0);
   $763 = HEAP32[$762>>2]|0;
   $764 = $iVal;
   __THREW__ = 0;
   $765 = (invoke_iiii($763|0,($760|0),($764|0),($val11|0))|0);
   $766 = __THREW__; __THREW__ = 0;
   $767 = $766&1;
   if ($767) {
    label = 55;
    break;
   }
   $768 = $765&1;
   $769 = ($768|0)==(0);
   if (!($769)) {
    $772 = $iVal;
    $773 = $count;
    $774 = (($773) - 1)|0;
    $775 = ($772|0)!=($774|0);
    $776 = HEAP32[$val11>>2]|0;
    __THREW__ = 0;
    if ($775) {
     HEAP32[$vararg_buffer18>>2] = $776;
     (_sprintf($tempValChar,11101,$vararg_buffer18)|0);
     $777 = __THREW__; __THREW__ = 0;
     $778 = $777&1;
     if ($778) {
      label = 55;
      break;
     }
    } else {
     HEAP32[$vararg_buffer21>>2] = $776;
     (_sprintf($tempValChar,11106,$vararg_buffer21)|0);
     $779 = __THREW__; __THREW__ = 0;
     $780 = $779&1;
     if ($780) {
      label = 55;
      break;
     }
    }
    $261 = $valStr;
    $262 = $tempValChar;
    $781 = $261;
    $782 = $262;
    __THREW__ = 0;
    (invoke_iii(583,($781|0),($782|0))|0);
    $783 = __THREW__; __THREW__ = 0;
    $784 = $783&1;
    if ($784) {
     label = 55;
     break;
    }
   }
   $785 = $iVal;
   $786 = (($785) + 1)|0;
   $iVal = $786;
  }
  do {
   if ((label|0) == 61) {
    $787 = $childEle;
    $788 = $kernelType;
    __THREW__ = 0;
    invoke_vii(582,($414|0),($788|0));
    $789 = __THREW__; __THREW__ = 0;
    $790 = $789&1;
    if ($790) {
     label = 55;
    } else {
     $260 = $414;
     $791 = $260;
     $259 = $791;
     $792 = $259;
     $258 = $792;
     $793 = $258;
     $257 = $793;
     $794 = $257;
     $256 = $794;
     $795 = $256;
     $255 = $795;
     $796 = $255;
     $797 = HEAP8[$796>>0]|0;
     $798 = $797&255;
     $799 = $798 & 1;
     $800 = ($799|0)!=(0);
     if ($800) {
      $249 = $793;
      $801 = $249;
      $248 = $801;
      $802 = $248;
      $247 = $802;
      $803 = $247;
      $804 = ((($803)) + 8|0);
      $805 = HEAP32[$804>>2]|0;
      $812 = $805;
     } else {
      $254 = $793;
      $806 = $254;
      $253 = $806;
      $807 = $253;
      $252 = $807;
      $808 = $252;
      $809 = ((($808)) + 1|0);
      $251 = $809;
      $810 = $251;
      $250 = $810;
      $811 = $250;
      $812 = $811;
     }
     $246 = $812;
     $813 = $246;
     __THREW__ = 0;
     invoke_viii(566,($787|0),(10863|0),($813|0));
     $814 = __THREW__; __THREW__ = 0;
     $815 = $814&1;
     if ($815) {
      $842 = ___cxa_find_matching_catch()|0;
      $843 = tempRet0;
      $407 = $842;
      $408 = $843;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($414);
      break;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($414);
     $816 = $childEle;
     $245 = $valStr;
     $817 = $245;
     $244 = $817;
     $818 = $244;
     $243 = $818;
     $819 = $243;
     $242 = $819;
     $820 = $242;
     $241 = $820;
     $821 = $241;
     $240 = $821;
     $822 = $240;
     $823 = HEAP8[$822>>0]|0;
     $824 = $823&255;
     $825 = $824 & 1;
     $826 = ($825|0)!=(0);
     if ($826) {
      $234 = $819;
      $827 = $234;
      $233 = $827;
      $828 = $233;
      $232 = $828;
      $829 = $232;
      $830 = ((($829)) + 8|0);
      $831 = HEAP32[$830>>2]|0;
      $838 = $831;
     } else {
      $239 = $819;
      $832 = $239;
      $238 = $832;
      $833 = $238;
      $237 = $833;
      $834 = $237;
      $835 = ((($834)) + 1|0);
      $236 = $835;
      $836 = $236;
      $235 = $836;
      $837 = $235;
      $838 = $837;
     }
     $231 = $838;
     $839 = $231;
     __THREW__ = 0;
     invoke_viii(566,($816|0),(10879|0),($839|0));
     $840 = __THREW__; __THREW__ = 0;
     $841 = $840&1;
     if ($841) {
      label = 55;
     } else {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($valStr);
      STACKTOP = sp;return;
     }
    }
   }
  } while(0);
  if ((label|0) == 55) {
   $770 = ___cxa_find_matching_catch()|0;
   $771 = tempRet0;
   $407 = $770;
   $408 = $771;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($valStr);
  $1547 = $407;
  $1548 = $408;
  ___resumeException($1547|0);
  // unreachable;
 }
 $844 = $kernelType;
 $845 = ($844|0)==(260);
 if ($845) {
  $846 = $404;
  $847 = HEAP32[$846>>2]|0;
  $848 = ((($847)) + 28|0);
  $849 = HEAP32[$848>>2]|0;
  $850 = (FUNCTION_TABLE_ii[$849 & 1023]($846)|0);
  $realKernel12 = $850;
  $851 = $realKernel12;
  $852 = HEAP32[$851>>2]|0;
  $853 = ((($852)) + 40|0);
  $854 = HEAP32[$853>>2]|0;
  $855 = (FUNCTION_TABLE_ii[$854 & 1023]($851)|0);
  $count13 = $855;
  $214 = $valStr14;
  $215 = 11786;
  $856 = $214;
  $213 = $856;
  $857 = $213;
  $212 = $857;
  $858 = $212;
  $211 = $858;
  $859 = $215;
  $860 = $215;
  $861 = (__ZNSt3__111char_traitsIcE6lengthEPKc($860)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($856,$859,$861);
  $iVal15 = 0;
  while(1) {
   $862 = $iVal15;
   $863 = $count13;
   $864 = ($862|0)<($863|0);
   if (!($864)) {
    label = 84;
    break;
   }
   HEAPF64[$val16>>3] = 0.0;
   $865 = $realKernel12;
   $866 = HEAP32[$865>>2]|0;
   $867 = ((($866)) + 32|0);
   $868 = HEAP32[$867>>2]|0;
   $869 = $iVal15;
   __THREW__ = 0;
   $870 = (invoke_iiii($868|0,($865|0),($869|0),($val16|0))|0);
   $871 = __THREW__; __THREW__ = 0;
   $872 = $871&1;
   if ($872) {
    label = 78;
    break;
   }
   $873 = $870&1;
   $874 = ($873|0)==(0);
   if (!($874)) {
    $877 = $iVal15;
    $878 = $count13;
    $879 = (($878) - 1)|0;
    $880 = ($877|0)!=($879|0);
    $881 = +HEAPF64[$val16>>3];
    __THREW__ = 0;
    if ($880) {
     HEAPF64[$vararg_buffer24>>3] = $881;
     (_sprintf($tempValChar17,11109,$vararg_buffer24)|0);
     $882 = __THREW__; __THREW__ = 0;
     $883 = $882&1;
     if ($883) {
      label = 78;
      break;
     }
    } else {
     HEAPF64[$vararg_buffer27>>3] = $881;
     (_sprintf($tempValChar17,11115,$vararg_buffer27)|0);
     $884 = __THREW__; __THREW__ = 0;
     $885 = $884&1;
     if ($885) {
      label = 78;
      break;
     }
    }
    $209 = $valStr14;
    $210 = $tempValChar17;
    $886 = $209;
    $887 = $210;
    __THREW__ = 0;
    (invoke_iii(583,($886|0),($887|0))|0);
    $888 = __THREW__; __THREW__ = 0;
    $889 = $888&1;
    if ($889) {
     label = 78;
     break;
    }
   }
   $890 = $iVal15;
   $891 = (($890) + 1)|0;
   $iVal15 = $891;
  }
  do {
   if ((label|0) == 84) {
    $892 = $childEle;
    $893 = $kernelType;
    __THREW__ = 0;
    invoke_vii(582,($415|0),($893|0));
    $894 = __THREW__; __THREW__ = 0;
    $895 = $894&1;
    if ($895) {
     label = 78;
    } else {
     $208 = $415;
     $896 = $208;
     $207 = $896;
     $897 = $207;
     $206 = $897;
     $898 = $206;
     $205 = $898;
     $899 = $205;
     $204 = $899;
     $900 = $204;
     $203 = $900;
     $901 = $203;
     $902 = HEAP8[$901>>0]|0;
     $903 = $902&255;
     $904 = $903 & 1;
     $905 = ($904|0)!=(0);
     if ($905) {
      $197 = $898;
      $906 = $197;
      $196 = $906;
      $907 = $196;
      $195 = $907;
      $908 = $195;
      $909 = ((($908)) + 8|0);
      $910 = HEAP32[$909>>2]|0;
      $917 = $910;
     } else {
      $202 = $898;
      $911 = $202;
      $201 = $911;
      $912 = $201;
      $200 = $912;
      $913 = $200;
      $914 = ((($913)) + 1|0);
      $199 = $914;
      $915 = $199;
      $198 = $915;
      $916 = $198;
      $917 = $916;
     }
     $194 = $917;
     $918 = $194;
     __THREW__ = 0;
     invoke_viii(566,($892|0),(10863|0),($918|0));
     $919 = __THREW__; __THREW__ = 0;
     $920 = $919&1;
     if ($920) {
      $947 = ___cxa_find_matching_catch()|0;
      $948 = tempRet0;
      $407 = $947;
      $408 = $948;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($415);
      break;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($415);
     $921 = $childEle;
     $193 = $valStr14;
     $922 = $193;
     $192 = $922;
     $923 = $192;
     $191 = $923;
     $924 = $191;
     $190 = $924;
     $925 = $190;
     $189 = $925;
     $926 = $189;
     $188 = $926;
     $927 = $188;
     $928 = HEAP8[$927>>0]|0;
     $929 = $928&255;
     $930 = $929 & 1;
     $931 = ($930|0)!=(0);
     if ($931) {
      $182 = $924;
      $932 = $182;
      $181 = $932;
      $933 = $181;
      $180 = $933;
      $934 = $180;
      $935 = ((($934)) + 8|0);
      $936 = HEAP32[$935>>2]|0;
      $943 = $936;
     } else {
      $187 = $924;
      $937 = $187;
      $186 = $937;
      $938 = $186;
      $185 = $938;
      $939 = $185;
      $940 = ((($939)) + 1|0);
      $184 = $940;
      $941 = $184;
      $183 = $941;
      $942 = $183;
      $943 = $942;
     }
     $179 = $943;
     $944 = $179;
     __THREW__ = 0;
     invoke_viii(566,($921|0),(10879|0),($944|0));
     $945 = __THREW__; __THREW__ = 0;
     $946 = $945&1;
     if ($946) {
      label = 78;
     } else {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($valStr14);
      STACKTOP = sp;return;
     }
    }
   }
  } while(0);
  if ((label|0) == 78) {
   $875 = ___cxa_find_matching_catch()|0;
   $876 = tempRet0;
   $407 = $875;
   $408 = $876;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($valStr14);
  $1547 = $407;
  $1548 = $408;
  ___resumeException($1547|0);
  // unreachable;
 }
 $949 = $kernelType;
 $950 = ($949|0)==(264);
 if ($950) {
  $951 = $404;
  $952 = HEAP32[$951>>2]|0;
  $953 = ((($952)) + 28|0);
  $954 = HEAP32[$953>>2]|0;
  $955 = (FUNCTION_TABLE_ii[$954 & 1023]($951)|0);
  $realKernel18 = $955;
  $956 = $realKernel18;
  $957 = HEAP32[$956>>2]|0;
  $958 = ((($957)) + 40|0);
  $959 = HEAP32[$958>>2]|0;
  $960 = (FUNCTION_TABLE_ii[$959 & 1023]($956)|0);
  $count19 = $960;
  $175 = $valStr20;
  $176 = 11786;
  $961 = $175;
  $174 = $961;
  $962 = $174;
  $173 = $962;
  $963 = $173;
  $172 = $963;
  $964 = $176;
  $965 = $176;
  $966 = (__ZNSt3__111char_traitsIcE6lengthEPKc($965)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($961,$964,$966);
  $iVal21 = 0;
  while(1) {
   $967 = $iVal21;
   $968 = $count19;
   $969 = ($967|0)<($968|0);
   if (!($969)) {
    label = 124;
    break;
   }
   $170 = $val22;
   $171 = 11786;
   $970 = $170;
   $169 = $970;
   $971 = $169;
   $168 = $971;
   $972 = $168;
   $167 = $972;
   $973 = $171;
   $974 = $171;
   __THREW__ = 0;
   $975 = (invoke_ii(383,($974|0))|0);
   $976 = __THREW__; __THREW__ = 0;
   $977 = $976&1;
   if ($977) {
    label = 104;
    break;
   }
   __THREW__ = 0;
   invoke_viii(384,($970|0),($973|0),($975|0));
   $978 = __THREW__; __THREW__ = 0;
   $979 = $978&1;
   if ($979) {
    label = 104;
    break;
   }
   $980 = $realKernel18;
   $981 = HEAP32[$980>>2]|0;
   $982 = ((($981)) + 32|0);
   $983 = HEAP32[$982>>2]|0;
   $984 = $iVal21;
   __THREW__ = 0;
   $985 = (invoke_iiii($983|0,($980|0),($984|0),($val22|0))|0);
   $986 = __THREW__; __THREW__ = 0;
   $987 = $986&1;
   if ($987) {
    label = 105;
    break;
   }
   $988 = $985&1;
   $989 = ($988|0)==(0);
   if ($989) {
    $416 = 10;
   } else {
    $994 = $iVal21;
    $995 = $count19;
    $996 = (($995) - 1)|0;
    $997 = ($994|0)!=($996|0);
    if ($997) {
     $165 = $valStr20;
     $166 = $val22;
     $998 = $165;
     $999 = $166;
     $163 = $998;
     $164 = $999;
     $1000 = $163;
     $1001 = $164;
     $162 = $1001;
     $1002 = $162;
     $161 = $1002;
     $1003 = $161;
     $160 = $1003;
     $1004 = $160;
     $159 = $1004;
     $1005 = $159;
     $158 = $1005;
     $1006 = $158;
     $1007 = HEAP8[$1006>>0]|0;
     $1008 = $1007&255;
     $1009 = $1008 & 1;
     $1010 = ($1009|0)!=(0);
     if ($1010) {
      $152 = $1003;
      $1011 = $152;
      $151 = $1011;
      $1012 = $151;
      $150 = $1012;
      $1013 = $150;
      $1014 = ((($1013)) + 8|0);
      $1015 = HEAP32[$1014>>2]|0;
      $1022 = $1015;
     } else {
      $157 = $1003;
      $1016 = $157;
      $156 = $1016;
      $1017 = $156;
      $155 = $1017;
      $1018 = $155;
      $1019 = ((($1018)) + 1|0);
      $154 = $1019;
      $1020 = $154;
      $153 = $1020;
      $1021 = $153;
      $1022 = $1021;
     }
     $149 = $1022;
     $1023 = $149;
     $1024 = $164;
     $148 = $1024;
     $1025 = $148;
     $147 = $1025;
     $1026 = $147;
     $146 = $1026;
     $1027 = $146;
     $145 = $1027;
     $1028 = $145;
     $1029 = HEAP8[$1028>>0]|0;
     $1030 = $1029&255;
     $1031 = $1030 & 1;
     $1032 = ($1031|0)!=(0);
     if ($1032) {
      $141 = $1025;
      $1033 = $141;
      $140 = $1033;
      $1034 = $140;
      $139 = $1034;
      $1035 = $139;
      $1036 = ((($1035)) + 4|0);
      $1037 = HEAP32[$1036>>2]|0;
      $1044 = $1037;
     } else {
      $144 = $1025;
      $1038 = $144;
      $143 = $1038;
      $1039 = $143;
      $142 = $1039;
      $1040 = $142;
      $1041 = HEAP8[$1040>>0]|0;
      $1042 = $1041&255;
      $1043 = $1042 >> 1;
      $1044 = $1043;
     }
     __THREW__ = 0;
     (invoke_iiii(584,($1000|0),($1023|0),($1044|0))|0);
     $1045 = __THREW__; __THREW__ = 0;
     $1046 = $1045&1;
     if ($1046) {
      label = 105;
      break;
     }
     $137 = $valStr20;
     $138 = 11119;
     $1047 = $137;
     $1048 = $138;
     __THREW__ = 0;
     (invoke_iii(583,($1047|0),($1048|0))|0);
     $1049 = __THREW__; __THREW__ = 0;
     $1050 = $1049&1;
     if ($1050) {
      label = 105;
      break;
     }
    } else {
     $135 = $valStr20;
     $136 = $val22;
     $1051 = $135;
     $1052 = $136;
     $133 = $1051;
     $134 = $1052;
     $1053 = $133;
     $1054 = $134;
     $132 = $1054;
     $1055 = $132;
     $131 = $1055;
     $1056 = $131;
     $130 = $1056;
     $1057 = $130;
     $129 = $1057;
     $1058 = $129;
     $128 = $1058;
     $1059 = $128;
     $1060 = HEAP8[$1059>>0]|0;
     $1061 = $1060&255;
     $1062 = $1061 & 1;
     $1063 = ($1062|0)!=(0);
     if ($1063) {
      $122 = $1056;
      $1064 = $122;
      $121 = $1064;
      $1065 = $121;
      $120 = $1065;
      $1066 = $120;
      $1067 = ((($1066)) + 8|0);
      $1068 = HEAP32[$1067>>2]|0;
      $1075 = $1068;
     } else {
      $127 = $1056;
      $1069 = $127;
      $126 = $1069;
      $1070 = $126;
      $125 = $1070;
      $1071 = $125;
      $1072 = ((($1071)) + 1|0);
      $124 = $1072;
      $1073 = $124;
      $123 = $1073;
      $1074 = $123;
      $1075 = $1074;
     }
     $119 = $1075;
     $1076 = $119;
     $1077 = $134;
     $118 = $1077;
     $1078 = $118;
     $117 = $1078;
     $1079 = $117;
     $116 = $1079;
     $1080 = $116;
     $115 = $1080;
     $1081 = $115;
     $1082 = HEAP8[$1081>>0]|0;
     $1083 = $1082&255;
     $1084 = $1083 & 1;
     $1085 = ($1084|0)!=(0);
     if ($1085) {
      $111 = $1078;
      $1086 = $111;
      $110 = $1086;
      $1087 = $110;
      $109 = $1087;
      $1088 = $109;
      $1089 = ((($1088)) + 4|0);
      $1090 = HEAP32[$1089>>2]|0;
      $1097 = $1090;
     } else {
      $114 = $1078;
      $1091 = $114;
      $113 = $1091;
      $1092 = $113;
      $112 = $1092;
      $1093 = $112;
      $1094 = HEAP8[$1093>>0]|0;
      $1095 = $1094&255;
      $1096 = $1095 >> 1;
      $1097 = $1096;
     }
     __THREW__ = 0;
     (invoke_iiii(584,($1053|0),($1076|0),($1097|0))|0);
     $1098 = __THREW__; __THREW__ = 0;
     $1099 = $1098&1;
     if ($1099) {
      label = 105;
      break;
     }
    }
    $416 = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($val22);
   $1100 = $iVal21;
   $1101 = (($1100) + 1)|0;
   $iVal21 = $1101;
  }
  do {
   if ((label|0) == 105) {
    $992 = ___cxa_find_matching_catch()|0;
    $993 = tempRet0;
    $407 = $992;
    $408 = $993;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($val22);
   }
   else if ((label|0) == 124) {
    $1102 = $childEle;
    $1103 = $kernelType;
    __THREW__ = 0;
    invoke_vii(582,($417|0),($1103|0));
    $1104 = __THREW__; __THREW__ = 0;
    $1105 = $1104&1;
    if ($1105) {
     label = 104;
    } else {
     $108 = $417;
     $1106 = $108;
     $107 = $1106;
     $1107 = $107;
     $106 = $1107;
     $1108 = $106;
     $105 = $1108;
     $1109 = $105;
     $104 = $1109;
     $1110 = $104;
     $103 = $1110;
     $1111 = $103;
     $1112 = HEAP8[$1111>>0]|0;
     $1113 = $1112&255;
     $1114 = $1113 & 1;
     $1115 = ($1114|0)!=(0);
     if ($1115) {
      $97 = $1108;
      $1116 = $97;
      $96 = $1116;
      $1117 = $96;
      $95 = $1117;
      $1118 = $95;
      $1119 = ((($1118)) + 8|0);
      $1120 = HEAP32[$1119>>2]|0;
      $1127 = $1120;
     } else {
      $102 = $1108;
      $1121 = $102;
      $101 = $1121;
      $1122 = $101;
      $100 = $1122;
      $1123 = $100;
      $1124 = ((($1123)) + 1|0);
      $99 = $1124;
      $1125 = $99;
      $98 = $1125;
      $1126 = $98;
      $1127 = $1126;
     }
     $94 = $1127;
     $1128 = $94;
     __THREW__ = 0;
     invoke_viii(566,($1102|0),(10863|0),($1128|0));
     $1129 = __THREW__; __THREW__ = 0;
     $1130 = $1129&1;
     if ($1130) {
      $1157 = ___cxa_find_matching_catch()|0;
      $1158 = tempRet0;
      $407 = $1157;
      $408 = $1158;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($417);
      break;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($417);
     $1131 = $childEle;
     $93 = $valStr20;
     $1132 = $93;
     $92 = $1132;
     $1133 = $92;
     $91 = $1133;
     $1134 = $91;
     $90 = $1134;
     $1135 = $90;
     $89 = $1135;
     $1136 = $89;
     $88 = $1136;
     $1137 = $88;
     $1138 = HEAP8[$1137>>0]|0;
     $1139 = $1138&255;
     $1140 = $1139 & 1;
     $1141 = ($1140|0)!=(0);
     if ($1141) {
      $82 = $1134;
      $1142 = $82;
      $81 = $1142;
      $1143 = $81;
      $80 = $1143;
      $1144 = $80;
      $1145 = ((($1144)) + 8|0);
      $1146 = HEAP32[$1145>>2]|0;
      $1153 = $1146;
     } else {
      $87 = $1134;
      $1147 = $87;
      $86 = $1147;
      $1148 = $86;
      $85 = $1148;
      $1149 = $85;
      $1150 = ((($1149)) + 1|0);
      $84 = $1150;
      $1151 = $84;
      $83 = $1151;
      $1152 = $83;
      $1153 = $1152;
     }
     $79 = $1153;
     $1154 = $79;
     __THREW__ = 0;
     invoke_viii(566,($1131|0),(10879|0),($1154|0));
     $1155 = __THREW__; __THREW__ = 0;
     $1156 = $1155&1;
     if ($1156) {
      label = 104;
     } else {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($valStr20);
      STACKTOP = sp;return;
     }
    }
   }
  } while(0);
  if ((label|0) == 104) {
   $990 = ___cxa_find_matching_catch()|0;
   $991 = tempRet0;
   $407 = $990;
   $408 = $991;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($valStr20);
  $1547 = $407;
  $1548 = $408;
  ___resumeException($1547|0);
  // unreachable;
 }
 $1159 = $kernelType;
 $1160 = ($1159|0)==(272);
 if ($1160) {
  $1161 = $404;
  $1162 = HEAP32[$1161>>2]|0;
  $1163 = ((($1162)) + 28|0);
  $1164 = HEAP32[$1163>>2]|0;
  $1165 = (FUNCTION_TABLE_ii[$1164 & 1023]($1161)|0);
  $realKernel24 = $1165;
  $1166 = $realKernel24;
  $1167 = HEAP32[$1166>>2]|0;
  $1168 = ((($1167)) + 44|0);
  $1169 = HEAP32[$1168>>2]|0;
  $1170 = (FUNCTION_TABLE_ii[$1169 & 1023]($1166)|0);
  $count25 = $1170;
  $77 = $valStr26;
  $78 = 11786;
  $1171 = $77;
  $76 = $1171;
  $1172 = $76;
  $75 = $1172;
  $1173 = $75;
  $74 = $1173;
  $1174 = $78;
  $1175 = $78;
  $1176 = (__ZNSt3__111char_traitsIcE6lengthEPKc($1175)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($1171,$1174,$1176);
  $iVal27 = 0;
  while(1) {
   $1177 = $iVal27;
   $1178 = $count25;
   $1179 = ($1177|0)<($1178|0);
   if (!($1179)) {
    label = 148;
    break;
   }
   __THREW__ = 0;
   invoke_vi(555,($val28|0));
   $1180 = __THREW__; __THREW__ = 0;
   $1181 = $1180&1;
   if ($1181) {
    label = 142;
    break;
   }
   $1182 = $realKernel24;
   $1183 = HEAP32[$1182>>2]|0;
   $1184 = ((($1183)) + 32|0);
   $1185 = HEAP32[$1184>>2]|0;
   $1186 = $iVal27;
   __THREW__ = 0;
   $1187 = (invoke_iiii($1185|0,($1182|0),($1186|0),($val28|0))|0);
   $1188 = __THREW__; __THREW__ = 0;
   $1189 = $1188&1;
   if ($1189) {
    label = 142;
    break;
   }
   $1190 = $1187&1;
   $1191 = ($1190|0)==(0);
   if (!($1191)) {
    $1194 = $iVal27;
    $1195 = $count25;
    $1196 = (($1195) - 1)|0;
    $1197 = ($1194|0)!=($1196|0);
    $1198 = +HEAPF64[$val28>>3];
    $1199 = ((($val28)) + 8|0);
    $1200 = +HEAPF64[$1199>>3];
    __THREW__ = 0;
    if ($1197) {
     HEAPF64[$vararg_buffer30>>3] = $1198;
     $vararg_ptr33 = ((($vararg_buffer30)) + 8|0);
     HEAPF64[$vararg_ptr33>>3] = $1200;
     (_sprintf($tempValChar29,11122,$vararg_buffer30)|0);
     $1201 = __THREW__; __THREW__ = 0;
     $1202 = $1201&1;
     if ($1202) {
      label = 142;
      break;
     }
    } else {
     HEAPF64[$vararg_buffer34>>3] = $1198;
     $vararg_ptr37 = ((($vararg_buffer34)) + 8|0);
     HEAPF64[$vararg_ptr37>>3] = $1200;
     (_sprintf($tempValChar29,10906,$vararg_buffer34)|0);
     $1203 = __THREW__; __THREW__ = 0;
     $1204 = $1203&1;
     if ($1204) {
      label = 142;
      break;
     }
    }
    $72 = $valStr26;
    $73 = $tempValChar29;
    $1205 = $72;
    $1206 = $73;
    __THREW__ = 0;
    (invoke_iii(583,($1205|0),($1206|0))|0);
    $1207 = __THREW__; __THREW__ = 0;
    $1208 = $1207&1;
    if ($1208) {
     label = 142;
     break;
    }
   }
   $1209 = $iVal27;
   $1210 = (($1209) + 1)|0;
   $iVal27 = $1210;
  }
  do {
   if ((label|0) == 148) {
    $1211 = $childEle;
    $1212 = $kernelType;
    __THREW__ = 0;
    invoke_vii(582,($418|0),($1212|0));
    $1213 = __THREW__; __THREW__ = 0;
    $1214 = $1213&1;
    if ($1214) {
     label = 142;
    } else {
     $71 = $418;
     $1215 = $71;
     $70 = $1215;
     $1216 = $70;
     $69 = $1216;
     $1217 = $69;
     $68 = $1217;
     $1218 = $68;
     $67 = $1218;
     $1219 = $67;
     $66 = $1219;
     $1220 = $66;
     $1221 = HEAP8[$1220>>0]|0;
     $1222 = $1221&255;
     $1223 = $1222 & 1;
     $1224 = ($1223|0)!=(0);
     if ($1224) {
      $60 = $1217;
      $1225 = $60;
      $59 = $1225;
      $1226 = $59;
      $58 = $1226;
      $1227 = $58;
      $1228 = ((($1227)) + 8|0);
      $1229 = HEAP32[$1228>>2]|0;
      $1236 = $1229;
     } else {
      $65 = $1217;
      $1230 = $65;
      $64 = $1230;
      $1231 = $64;
      $63 = $1231;
      $1232 = $63;
      $1233 = ((($1232)) + 1|0);
      $62 = $1233;
      $1234 = $62;
      $61 = $1234;
      $1235 = $61;
      $1236 = $1235;
     }
     $57 = $1236;
     $1237 = $57;
     __THREW__ = 0;
     invoke_viii(566,($1211|0),(10863|0),($1237|0));
     $1238 = __THREW__; __THREW__ = 0;
     $1239 = $1238&1;
     if ($1239) {
      $1266 = ___cxa_find_matching_catch()|0;
      $1267 = tempRet0;
      $407 = $1266;
      $408 = $1267;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($418);
      break;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($418);
     $1240 = $childEle;
     $56 = $valStr26;
     $1241 = $56;
     $55 = $1241;
     $1242 = $55;
     $54 = $1242;
     $1243 = $54;
     $53 = $1243;
     $1244 = $53;
     $52 = $1244;
     $1245 = $52;
     $51 = $1245;
     $1246 = $51;
     $1247 = HEAP8[$1246>>0]|0;
     $1248 = $1247&255;
     $1249 = $1248 & 1;
     $1250 = ($1249|0)!=(0);
     if ($1250) {
      $45 = $1243;
      $1251 = $45;
      $44 = $1251;
      $1252 = $44;
      $43 = $1252;
      $1253 = $43;
      $1254 = ((($1253)) + 8|0);
      $1255 = HEAP32[$1254>>2]|0;
      $1262 = $1255;
     } else {
      $50 = $1243;
      $1256 = $50;
      $49 = $1256;
      $1257 = $49;
      $48 = $1257;
      $1258 = $48;
      $1259 = ((($1258)) + 1|0);
      $47 = $1259;
      $1260 = $47;
      $46 = $1260;
      $1261 = $46;
      $1262 = $1261;
     }
     $42 = $1262;
     $1263 = $42;
     __THREW__ = 0;
     invoke_viii(566,($1240|0),(10879|0),($1263|0));
     $1264 = __THREW__; __THREW__ = 0;
     $1265 = $1264&1;
     if ($1265) {
      label = 142;
     } else {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($valStr26);
      STACKTOP = sp;return;
     }
    }
   }
  } while(0);
  if ((label|0) == 142) {
   $1192 = ___cxa_find_matching_catch()|0;
   $1193 = tempRet0;
   $407 = $1192;
   $408 = $1193;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($valStr26);
  $1547 = $407;
  $1548 = $408;
  ___resumeException($1547|0);
  // unreachable;
 }
 $1268 = $kernelType;
 $1269 = ($1268|0)==(288);
 if ($1269) {
  $1270 = $404;
  $1271 = HEAP32[$1270>>2]|0;
  $1272 = ((($1271)) + 28|0);
  $1273 = HEAP32[$1272>>2]|0;
  $1274 = (FUNCTION_TABLE_ii[$1273 & 1023]($1270)|0);
  $realKernel30 = $1274;
  $1275 = $realKernel30;
  $1276 = HEAP32[$1275>>2]|0;
  $1277 = ((($1276)) + 44|0);
  $1278 = HEAP32[$1277>>2]|0;
  $1279 = (FUNCTION_TABLE_ii[$1278 & 1023]($1275)|0);
  $count31 = $1279;
  $40 = $valStr32;
  $41 = 11786;
  $1280 = $40;
  $39 = $1280;
  $1281 = $39;
  $38 = $1281;
  $1282 = $38;
  $37 = $1282;
  $1283 = $41;
  $1284 = $41;
  $1285 = (__ZNSt3__111char_traitsIcE6lengthEPKc($1284)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($1280,$1283,$1285);
  $iVal33 = 0;
  while(1) {
   $1286 = $iVal33;
   $1287 = $count31;
   $1288 = ($1286|0)<($1287|0);
   if (!($1288)) {
    label = 172;
    break;
   }
   __THREW__ = 0;
   invoke_vi(554,($val34|0));
   $1289 = __THREW__; __THREW__ = 0;
   $1290 = $1289&1;
   if ($1290) {
    label = 166;
    break;
   }
   $1291 = $realKernel30;
   $1292 = HEAP32[$1291>>2]|0;
   $1293 = ((($1292)) + 32|0);
   $1294 = HEAP32[$1293>>2]|0;
   $1295 = $iVal33;
   __THREW__ = 0;
   $1296 = (invoke_iiii($1294|0,($1291|0),($1295|0),($val34|0))|0);
   $1297 = __THREW__; __THREW__ = 0;
   $1298 = $1297&1;
   if ($1298) {
    label = 166;
    break;
   }
   $1299 = $1296&1;
   $1300 = ($1299|0)==(0);
   if (!($1300)) {
    $1303 = $iVal33;
    $1304 = $count31;
    $1305 = (($1304) - 1)|0;
    $1306 = ($1303|0)!=($1305|0);
    $1307 = +HEAPF64[$val34>>3];
    $1308 = ((($val34)) + 8|0);
    $1309 = +HEAPF64[$1308>>3];
    $1310 = ((($val34)) + 16|0);
    $1311 = +HEAPF64[$1310>>3];
    __THREW__ = 0;
    if ($1306) {
     HEAPF64[$vararg_buffer38>>3] = $1307;
     $vararg_ptr41 = ((($vararg_buffer38)) + 8|0);
     HEAPF64[$vararg_ptr41>>3] = $1309;
     $vararg_ptr42 = ((($vararg_buffer38)) + 16|0);
     HEAPF64[$vararg_ptr42>>3] = $1311;
     (_sprintf($tempValChar35,11132,$vararg_buffer38)|0);
     $1312 = __THREW__; __THREW__ = 0;
     $1313 = $1312&1;
     if ($1313) {
      label = 166;
      break;
     }
    } else {
     HEAPF64[$vararg_buffer43>>3] = $1307;
     $vararg_ptr46 = ((($vararg_buffer43)) + 8|0);
     HEAPF64[$vararg_ptr46>>3] = $1309;
     $vararg_ptr47 = ((($vararg_buffer43)) + 16|0);
     HEAPF64[$vararg_ptr47>>3] = $1311;
     (_sprintf($tempValChar35,10923,$vararg_buffer43)|0);
     $1314 = __THREW__; __THREW__ = 0;
     $1315 = $1314&1;
     if ($1315) {
      label = 166;
      break;
     }
    }
    $35 = $valStr32;
    $36 = $tempValChar35;
    $1316 = $35;
    $1317 = $36;
    __THREW__ = 0;
    (invoke_iii(583,($1316|0),($1317|0))|0);
    $1318 = __THREW__; __THREW__ = 0;
    $1319 = $1318&1;
    if ($1319) {
     label = 166;
     break;
    }
   }
   $1320 = $iVal33;
   $1321 = (($1320) + 1)|0;
   $iVal33 = $1321;
  }
  do {
   if ((label|0) == 172) {
    $1322 = $childEle;
    $1323 = $kernelType;
    __THREW__ = 0;
    invoke_vii(582,($419|0),($1323|0));
    $1324 = __THREW__; __THREW__ = 0;
    $1325 = $1324&1;
    if ($1325) {
     label = 166;
    } else {
     $34 = $419;
     $1326 = $34;
     $33 = $1326;
     $1327 = $33;
     $32 = $1327;
     $1328 = $32;
     $31 = $1328;
     $1329 = $31;
     $30 = $1329;
     $1330 = $30;
     $29 = $1330;
     $1331 = $29;
     $1332 = HEAP8[$1331>>0]|0;
     $1333 = $1332&255;
     $1334 = $1333 & 1;
     $1335 = ($1334|0)!=(0);
     if ($1335) {
      $23 = $1328;
      $1336 = $23;
      $22 = $1336;
      $1337 = $22;
      $21 = $1337;
      $1338 = $21;
      $1339 = ((($1338)) + 8|0);
      $1340 = HEAP32[$1339>>2]|0;
      $1347 = $1340;
     } else {
      $28 = $1328;
      $1341 = $28;
      $27 = $1341;
      $1342 = $27;
      $26 = $1342;
      $1343 = $26;
      $1344 = ((($1343)) + 1|0);
      $25 = $1344;
      $1345 = $25;
      $24 = $1345;
      $1346 = $24;
      $1347 = $1346;
     }
     $20 = $1347;
     $1348 = $20;
     __THREW__ = 0;
     invoke_viii(566,($1322|0),(10863|0),($1348|0));
     $1349 = __THREW__; __THREW__ = 0;
     $1350 = $1349&1;
     if ($1350) {
      $1377 = ___cxa_find_matching_catch()|0;
      $1378 = tempRet0;
      $407 = $1377;
      $408 = $1378;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($419);
      break;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($419);
     $1351 = $childEle;
     $19 = $valStr32;
     $1352 = $19;
     $18 = $1352;
     $1353 = $18;
     $17 = $1353;
     $1354 = $17;
     $16 = $1354;
     $1355 = $16;
     $15 = $1355;
     $1356 = $15;
     $14 = $1356;
     $1357 = $14;
     $1358 = HEAP8[$1357>>0]|0;
     $1359 = $1358&255;
     $1360 = $1359 & 1;
     $1361 = ($1360|0)!=(0);
     if ($1361) {
      $8 = $1354;
      $1362 = $8;
      $7 = $1362;
      $1363 = $7;
      $6 = $1363;
      $1364 = $6;
      $1365 = ((($1364)) + 8|0);
      $1366 = HEAP32[$1365>>2]|0;
      $1373 = $1366;
     } else {
      $13 = $1354;
      $1367 = $13;
      $12 = $1367;
      $1368 = $12;
      $11 = $1368;
      $1369 = $11;
      $1370 = ((($1369)) + 1|0);
      $10 = $1370;
      $1371 = $10;
      $9 = $1371;
      $1372 = $9;
      $1373 = $1372;
     }
     $5 = $1373;
     $1374 = $5;
     __THREW__ = 0;
     invoke_viii(566,($1351|0),(10879|0),($1374|0));
     $1375 = __THREW__; __THREW__ = 0;
     $1376 = $1375&1;
     if ($1376) {
      label = 166;
     } else {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($valStr32);
      STACKTOP = sp;return;
     }
    }
   }
  } while(0);
  if ((label|0) == 166) {
   $1301 = ___cxa_find_matching_catch()|0;
   $1302 = tempRet0;
   $407 = $1301;
   $408 = $1302;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($valStr32);
  $1547 = $407;
  $1548 = $408;
  ___resumeException($1547|0);
  // unreachable;
 }
 $1379 = $kernelType;
 $1380 = ($1379|0)==(320);
 if (!($1380)) {
  $1492 = $kernelType;
  $1493 = ($1492|0)==(128);
  $1494 = $kernelType;
  $1495 = ($1494|0)==(256);
  $or$cond = $1493 | $1495;
  $1496 = $kernelType;
  $1497 = ($1496|0)==(512);
  $or$cond3 = $or$cond | $1497;
  $1498 = $kernelType;
  $1499 = ($1498|0)==(1024);
  $or$cond5 = $or$cond3 | $1499;
  if (!($or$cond5)) {
   STACKTOP = sp;return;
  }
  $1500 = $childEle;
  $1501 = $kernelType;
  __ZN4NGIS4DataL17KernelType2StringENS0_11EKernelTypeE190($421,$1501);
  $327 = $421;
  $1502 = $327;
  $326 = $1502;
  $1503 = $326;
  $325 = $1503;
  $1504 = $325;
  $324 = $1504;
  $1505 = $324;
  $323 = $1505;
  $1506 = $323;
  $322 = $1506;
  $1507 = $322;
  $1508 = HEAP8[$1507>>0]|0;
  $1509 = $1508&255;
  $1510 = $1509 & 1;
  $1511 = ($1510|0)!=(0);
  if ($1511) {
   $316 = $1504;
   $1512 = $316;
   $315 = $1512;
   $1513 = $315;
   $314 = $1513;
   $1514 = $314;
   $1515 = ((($1514)) + 8|0);
   $1516 = HEAP32[$1515>>2]|0;
   $1523 = $1516;
  } else {
   $321 = $1504;
   $1517 = $321;
   $320 = $1517;
   $1518 = $320;
   $319 = $1518;
   $1519 = $319;
   $1520 = ((($1519)) + 1|0);
   $318 = $1520;
   $1521 = $318;
   $317 = $1521;
   $1522 = $317;
   $1523 = $1522;
  }
  $313 = $1523;
  $1524 = $313;
  __THREW__ = 0;
  invoke_viii(566,($1500|0),(10863|0),($1524|0));
  $1525 = __THREW__; __THREW__ = 0;
  $1526 = $1525&1;
  if ($1526) {
   $1545 = ___cxa_find_matching_catch()|0;
   $1546 = tempRet0;
   $407 = $1545;
   $408 = $1546;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($421);
   $1547 = $407;
   $1548 = $408;
   ___resumeException($1547|0);
   // unreachable;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($421);
  $1527 = $404;
  $1528 = HEAP32[$1527>>2]|0;
  $1529 = ((($1528)) + 32|0);
  $1530 = HEAP32[$1529>>2]|0;
  $1531 = (FUNCTION_TABLE_ii[$1530 & 1023]($1527)|0);
  $count42 = $1531;
  $iNode = 0;
  while(1) {
   $1532 = $iNode;
   $1533 = $count42;
   $1534 = ($1532|0)<($1533|0);
   if (!($1534)) {
    break;
   }
   $1535 = $404;
   $1536 = HEAP32[$1535>>2]|0;
   $1537 = ((($1536)) + 36|0);
   $1538 = HEAP32[$1537>>2]|0;
   $1539 = $iNode;
   $1540 = (FUNCTION_TABLE_iii[$1538 & 1023]($1535,$1539)|0);
   $tempNode = $1540;
   $1541 = $tempNode;
   $1542 = $childEle;
   __ZN4NGIS4Data11CUdxDataset9FormatXDOEPNS0_8IUdxNodeEPN8tinyxml210XMLElementE($422,$1541,$1542);
   $1543 = $iNode;
   $1544 = (($1543) + 1)|0;
   $iNode = $1544;
  }
  STACKTOP = sp;return;
 }
 $1381 = $404;
 $1382 = HEAP32[$1381>>2]|0;
 $1383 = ((($1382)) + 28|0);
 $1384 = HEAP32[$1383>>2]|0;
 $1385 = (FUNCTION_TABLE_ii[$1384 & 1023]($1381)|0);
 $realKernel36 = $1385;
 $1386 = $realKernel36;
 $1387 = HEAP32[$1386>>2]|0;
 $1388 = ((($1387)) + 44|0);
 $1389 = HEAP32[$1388>>2]|0;
 $1390 = (FUNCTION_TABLE_ii[$1389 & 1023]($1386)|0);
 $count37 = $1390;
 $3 = $valStr38;
 $4 = 11786;
 $1391 = $3;
 $2 = $1391;
 $1392 = $2;
 $1 = $1392;
 $1393 = $1;
 $0 = $1393;
 $1394 = $4;
 $1395 = $4;
 $1396 = (__ZNSt3__111char_traitsIcE6lengthEPKc($1395)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($1391,$1394,$1396);
 $iVal39 = 0;
 while(1) {
  $1397 = $iVal39;
  $1398 = $count37;
  $1399 = ($1397|0)<($1398|0);
  if (!($1399)) {
   label = 196;
   break;
  }
  __THREW__ = 0;
  invoke_vi(553,($val40|0));
  $1400 = __THREW__; __THREW__ = 0;
  $1401 = $1400&1;
  if ($1401) {
   label = 190;
   break;
  }
  $1402 = $realKernel36;
  $1403 = HEAP32[$1402>>2]|0;
  $1404 = ((($1403)) + 32|0);
  $1405 = HEAP32[$1404>>2]|0;
  $1406 = $iVal39;
  __THREW__ = 0;
  $1407 = (invoke_iiii($1405|0,($1402|0),($1406|0),($val40|0))|0);
  $1408 = __THREW__; __THREW__ = 0;
  $1409 = $1408&1;
  if ($1409) {
   label = 190;
   break;
  }
  $1410 = $1407&1;
  $1411 = ($1410|0)==(0);
  if (!($1411)) {
   $1414 = $iVal39;
   $1415 = $count37;
   $1416 = (($1415) - 1)|0;
   $1417 = ($1414|0)!=($1416|0);
   $1418 = +HEAPF64[$val40>>3];
   $1419 = ((($val40)) + 8|0);
   $1420 = +HEAPF64[$1419>>3];
   $1421 = ((($val40)) + 16|0);
   $1422 = +HEAPF64[$1421>>3];
   $1423 = ((($val40)) + 24|0);
   $1424 = +HEAPF64[$1423>>3];
   __THREW__ = 0;
   if ($1417) {
    HEAPF64[$vararg_buffer48>>3] = $1418;
    $vararg_ptr51 = ((($vararg_buffer48)) + 8|0);
    HEAPF64[$vararg_ptr51>>3] = $1420;
    $vararg_ptr52 = ((($vararg_buffer48)) + 16|0);
    HEAPF64[$vararg_ptr52>>3] = $1422;
    $vararg_ptr53 = ((($vararg_buffer48)) + 24|0);
    HEAPF64[$vararg_ptr53>>3] = $1424;
    (_sprintf($tempValChar41,11146,$vararg_buffer48)|0);
    $1425 = __THREW__; __THREW__ = 0;
    $1426 = $1425&1;
    if ($1426) {
     label = 190;
     break;
    }
   } else {
    HEAPF64[$vararg_buffer54>>3] = $1418;
    $vararg_ptr57 = ((($vararg_buffer54)) + 8|0);
    HEAPF64[$vararg_ptr57>>3] = $1420;
    $vararg_ptr58 = ((($vararg_buffer54)) + 16|0);
    HEAPF64[$vararg_ptr58>>3] = $1422;
    $vararg_ptr59 = ((($vararg_buffer54)) + 24|0);
    HEAPF64[$vararg_ptr59>>3] = $1424;
    (_sprintf($tempValChar41,10944,$vararg_buffer54)|0);
    $1427 = __THREW__; __THREW__ = 0;
    $1428 = $1427&1;
    if ($1428) {
     label = 190;
     break;
    }
   }
   $177 = $valStr38;
   $178 = $tempValChar41;
   $1429 = $177;
   $1430 = $178;
   __THREW__ = 0;
   (invoke_iii(583,($1429|0),($1430|0))|0);
   $1431 = __THREW__; __THREW__ = 0;
   $1432 = $1431&1;
   if ($1432) {
    label = 190;
    break;
   }
  }
  $1433 = $iVal39;
  $1434 = (($1433) + 1)|0;
  $iVal39 = $1434;
 }
 do {
  if ((label|0) == 196) {
   $1435 = $childEle;
   $1436 = $kernelType;
   __THREW__ = 0;
   invoke_vii(582,($420|0),($1436|0));
   $1437 = __THREW__; __THREW__ = 0;
   $1438 = $1437&1;
   if ($1438) {
    label = 190;
   } else {
    $230 = $420;
    $1439 = $230;
    $229 = $1439;
    $1440 = $229;
    $228 = $1440;
    $1441 = $228;
    $227 = $1441;
    $1442 = $227;
    $226 = $1442;
    $1443 = $226;
    $225 = $1443;
    $1444 = $225;
    $1445 = HEAP8[$1444>>0]|0;
    $1446 = $1445&255;
    $1447 = $1446 & 1;
    $1448 = ($1447|0)!=(0);
    if ($1448) {
     $219 = $1441;
     $1449 = $219;
     $218 = $1449;
     $1450 = $218;
     $217 = $1450;
     $1451 = $217;
     $1452 = ((($1451)) + 8|0);
     $1453 = HEAP32[$1452>>2]|0;
     $1460 = $1453;
    } else {
     $224 = $1441;
     $1454 = $224;
     $223 = $1454;
     $1455 = $223;
     $222 = $1455;
     $1456 = $222;
     $1457 = ((($1456)) + 1|0);
     $221 = $1457;
     $1458 = $221;
     $220 = $1458;
     $1459 = $220;
     $1460 = $1459;
    }
    $216 = $1460;
    $1461 = $216;
    __THREW__ = 0;
    invoke_viii(566,($1435|0),(10863|0),($1461|0));
    $1462 = __THREW__; __THREW__ = 0;
    $1463 = $1462&1;
    if ($1463) {
     $1490 = ___cxa_find_matching_catch()|0;
     $1491 = tempRet0;
     $407 = $1490;
     $408 = $1491;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($420);
     break;
    }
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($420);
    $1464 = $childEle;
    $282 = $valStr38;
    $1465 = $282;
    $281 = $1465;
    $1466 = $281;
    $280 = $1466;
    $1467 = $280;
    $279 = $1467;
    $1468 = $279;
    $278 = $1468;
    $1469 = $278;
    $277 = $1469;
    $1470 = $277;
    $1471 = HEAP8[$1470>>0]|0;
    $1472 = $1471&255;
    $1473 = $1472 & 1;
    $1474 = ($1473|0)!=(0);
    if ($1474) {
     $271 = $1467;
     $1475 = $271;
     $270 = $1475;
     $1476 = $270;
     $269 = $1476;
     $1477 = $269;
     $1478 = ((($1477)) + 8|0);
     $1479 = HEAP32[$1478>>2]|0;
     $1486 = $1479;
    } else {
     $276 = $1467;
     $1480 = $276;
     $275 = $1480;
     $1481 = $275;
     $274 = $1481;
     $1482 = $274;
     $1483 = ((($1482)) + 1|0);
     $273 = $1483;
     $1484 = $273;
     $272 = $1484;
     $1485 = $272;
     $1486 = $1485;
    }
    $268 = $1486;
    $1487 = $268;
    __THREW__ = 0;
    invoke_viii(566,($1464|0),(10879|0),($1487|0));
    $1488 = __THREW__; __THREW__ = 0;
    $1489 = $1488&1;
    if ($1489) {
     label = 190;
    } else {
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($valStr38);
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 if ((label|0) == 190) {
  $1412 = ___cxa_find_matching_catch()|0;
  $1413 = tempRet0;
  $407 = $1412;
  $408 = $1413;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($valStr38);
 $1547 = $407;
 $1548 = $408;
 ___resumeException($1547|0);
 // unreachable;
}
function __ZN4NGIS4Data11CUdxDataset17LoadFromXmlStreamEPKc($this,$xmlStr) {
 $this = $this|0;
 $xmlStr = $xmlStr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $doc = 0, $ele = 0, $rootEle = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $doc = sp + 24|0;
 $0 = $this;
 $1 = $xmlStr;
 $5 = $0;
 __ZN8tinyxml211XMLDocumentC2EbNS_10WhitespaceE($doc,1,0);
 $6 = $1;
 __THREW__ = 0;
 (invoke_iiii(569,($doc|0),($6|0),-1)|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 L1: do {
  if (!($8)) {
   __THREW__ = 0;
   $9 = (invoke_ii(557,($doc|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    $rootEle = $9;
    $12 = $rootEle;
    __THREW__ = 0;
    $13 = (invoke_iii(559,($12|0),(0|0))|0);
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if (!($15)) {
     $ele = $13;
     while(1) {
      $16 = $ele;
      $17 = ($16|0)!=(0|0);
      if (!($17)) {
       break;
      }
      $18 = HEAP32[$5>>2]|0;
      $19 = ((($18)) + -60|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = (($5) + ($20)|0);
      $22 = $ele;
      __THREW__ = 0;
      invoke_viii(573,($5|0),($21|0),($22|0));
      $23 = __THREW__; __THREW__ = 0;
      $24 = $23&1;
      if ($24) {
       break L1;
      }
      $25 = $ele;
      __THREW__ = 0;
      $26 = (invoke_iii(561,($25|0),(0|0))|0);
      $27 = __THREW__; __THREW__ = 0;
      $28 = $27&1;
      if ($28) {
       break L1;
      }
      $ele = $26;
     }
     $4 = 1;
     __ZN8tinyxml211XMLDocumentD2Ev($doc);
     STACKTOP = sp;return 1;
    }
   }
  }
 } while(0);
 $29 = ___cxa_find_matching_catch()|0;
 $30 = tempRet0;
 $2 = $29;
 $3 = $30;
 __ZN8tinyxml211XMLDocumentD2Ev($doc);
 $31 = $2;
 $32 = $3;
 ___resumeException($31|0);
 // unreachable;
 return (0)|0;
}
function __ZN4NGIS4Data11CUdxDataset17FormatToXmlStreamERNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($this,$xmlStr) {
 $this = $this|0;
 $xmlStr = $xmlStr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count = 0, $doc = 0, $element = 0, $iNode = 0, $printer = 0, $tempNode = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 672|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $doc = sp + 272|0;
 $printer = sp + 8|0;
 $2 = $this;
 $3 = $xmlStr;
 $7 = $2;
 __ZN8tinyxml211XMLDocumentC2EbNS_10WhitespaceE($doc,1,0);
 __THREW__ = 0;
 $8 = (invoke_iii(564,($doc|0),(11062|0))|0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 L1: do {
  if (!($10)) {
   $element = $8;
   $11 = $element;
   __THREW__ = 0;
   (invoke_iii(565,($doc|0),($11|0))|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if (!($13)) {
    $14 = HEAP32[$7>>2]|0;
    $15 = ((($14)) + 56|0);
    $16 = HEAP32[$15>>2]|0;
    __THREW__ = 0;
    $17 = (invoke_ii($16|0,($7|0))|0);
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if (!($19)) {
     $count = $17;
     $iNode = 0;
     while(1) {
      $20 = $iNode;
      $21 = $count;
      $22 = ($20|0)<($21|0);
      if (!($22)) {
       break;
      }
      $23 = HEAP32[$7>>2]|0;
      $24 = ((($23)) + 60|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = $iNode;
      __THREW__ = 0;
      $27 = (invoke_iii($25|0,($7|0),($26|0))|0);
      $28 = __THREW__; __THREW__ = 0;
      $29 = $28&1;
      if ($29) {
       break L1;
      }
      $tempNode = $27;
      $30 = $tempNode;
      $31 = $element;
      __THREW__ = 0;
      invoke_viii(585,($7|0),($30|0),($31|0));
      $32 = __THREW__; __THREW__ = 0;
      $33 = $32&1;
      if ($33) {
       break L1;
      }
      $34 = $iNode;
      $35 = (($34) + 1)|0;
      $iNode = $35;
     }
     __THREW__ = 0;
     invoke_viiii(570,($printer|0),(0|0),0,0);
     $38 = __THREW__; __THREW__ = 0;
     $39 = $38&1;
     if (!($39)) {
      __THREW__ = 0;
      invoke_vii(379,($doc|0),($printer|0));
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if (!($41)) {
       $42 = $3;
       __THREW__ = 0;
       $43 = (invoke_ii(571,($printer|0))|0);
       $44 = __THREW__; __THREW__ = 0;
       $45 = $44&1;
       if (!($45)) {
        $0 = $42;
        $1 = $43;
        $46 = $0;
        $47 = $1;
        __THREW__ = 0;
        (invoke_iii(387,($46|0),($47|0))|0);
        $48 = __THREW__; __THREW__ = 0;
        $49 = $48&1;
        if (!($49)) {
         $6 = 1;
         __ZN8tinyxml210XMLPrinterD2Ev($printer);
         __ZN8tinyxml211XMLDocumentD2Ev($doc);
         STACKTOP = sp;return 1;
        }
       }
      }
      $50 = ___cxa_find_matching_catch()|0;
      $51 = tempRet0;
      $4 = $50;
      $5 = $51;
      __ZN8tinyxml210XMLPrinterD2Ev($printer);
      __ZN8tinyxml211XMLDocumentD2Ev($doc);
      $52 = $4;
      $53 = $5;
      ___resumeException($52|0);
      // unreachable;
     }
    }
   }
  }
 } while(0);
 $36 = ___cxa_find_matching_catch()|0;
 $37 = tempRet0;
 $4 = $36;
 $5 = $37;
 __ZN8tinyxml211XMLDocumentD2Ev($doc);
 $52 = $4;
 $53 = $5;
 ___resumeException($52|0);
 // unreachable;
 return (0)|0;
}
function __ZTv0_n64_N4NGIS4Data11CUdxDataset17FormatToXmlStreamERNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($this,$xmlStr) {
 $this = $this|0;
 $xmlStr = $xmlStr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $xmlStr;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + -64|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($2) + ($5)|0);
 $7 = $1;
 $8 = (__ZN4NGIS4Data11CUdxDataset17FormatToXmlStreamERNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($6,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function __ZN4NGIS4Data5splitERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_PNS1_6vectorIS7_NS5_IS7_EEEE($s,$delim,$ret) {
 $s = $s|0;
 $delim = $delim|0;
 $ret = $ret|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i$i$i$i = 0, $__a$i$i$i$i$i$i7 = 0, $__annotator$i = 0;
 var $__annotator$i9 = 0, $__i$i$i$i$i$i$i = 0, $__i$i$i$i$i$i$i8 = 0, $__r$i$i = 0, $__r$i$i1 = 0, $index = 0, $last = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 832|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $15 = sp + 8|0;
 $20 = sp + 827|0;
 $__annotator$i9 = sp + 826|0;
 $109 = sp;
 $114 = sp + 825|0;
 $__annotator$i = sp + 824|0;
 $191 = sp + 32|0;
 $194 = sp + 12|0;
 $188 = $s;
 $189 = $delim;
 $190 = $ret;
 $last = 0;
 $195 = $188;
 $196 = $189;
 $197 = $last;
 $185 = $195;
 $186 = $196;
 $187 = $197;
 $198 = $185;
 $184 = $198;
 $199 = $184;
 $183 = $199;
 $200 = $183;
 $182 = $200;
 $201 = $182;
 $181 = $201;
 $202 = $181;
 $180 = $202;
 $203 = $180;
 $204 = HEAP8[$203>>0]|0;
 $205 = $204&255;
 $206 = $205 & 1;
 $207 = ($206|0)!=(0);
 if ($207) {
  $174 = $200;
  $208 = $174;
  $173 = $208;
  $209 = $173;
  $172 = $209;
  $210 = $172;
  $211 = ((($210)) + 8|0);
  $212 = HEAP32[$211>>2]|0;
  $219 = $212;
 } else {
  $179 = $200;
  $213 = $179;
  $178 = $213;
  $214 = $178;
  $177 = $214;
  $215 = $177;
  $216 = ((($215)) + 1|0);
  $176 = $216;
  $217 = $176;
  $175 = $217;
  $218 = $175;
  $219 = $218;
 }
 $171 = $219;
 $220 = $171;
 $164 = $198;
 $221 = $164;
 $163 = $221;
 $222 = $163;
 $162 = $222;
 $223 = $162;
 $161 = $223;
 $224 = $161;
 $225 = HEAP8[$224>>0]|0;
 $226 = $225&255;
 $227 = $226 & 1;
 $228 = ($227|0)!=(0);
 if ($228) {
  $157 = $221;
  $229 = $157;
  $156 = $229;
  $230 = $156;
  $155 = $230;
  $231 = $155;
  $232 = ((($231)) + 4|0);
  $233 = HEAP32[$232>>2]|0;
  $284 = $233;
 } else {
  $160 = $221;
  $234 = $160;
  $159 = $234;
  $235 = $159;
  $158 = $235;
  $236 = $158;
  $237 = HEAP8[$236>>0]|0;
  $238 = $237&255;
  $239 = $238 >> 1;
  $284 = $239;
 }
 $240 = $186;
 $154 = $240;
 $241 = $154;
 $153 = $241;
 $242 = $153;
 $152 = $242;
 $243 = $152;
 $151 = $243;
 $244 = $151;
 $150 = $244;
 $245 = $150;
 $246 = HEAP8[$245>>0]|0;
 $247 = $246&255;
 $248 = $247 & 1;
 $249 = ($248|0)!=(0);
 if ($249) {
  $144 = $242;
  $250 = $144;
  $143 = $250;
  $251 = $143;
  $142 = $251;
  $252 = $142;
  $253 = ((($252)) + 8|0);
  $254 = HEAP32[$253>>2]|0;
  $261 = $254;
 } else {
  $149 = $242;
  $255 = $149;
  $148 = $255;
  $256 = $148;
  $147 = $256;
  $257 = $147;
  $258 = ((($257)) + 1|0);
  $146 = $258;
  $259 = $146;
  $145 = $259;
  $260 = $145;
  $261 = $260;
 }
 $141 = $261;
 $262 = $141;
 $263 = $187;
 $264 = $186;
 $140 = $264;
 $265 = $140;
 $139 = $265;
 $266 = $139;
 $138 = $266;
 $267 = $138;
 $137 = $267;
 $268 = $137;
 $269 = HEAP8[$268>>0]|0;
 $270 = $269&255;
 $271 = $270 & 1;
 $272 = ($271|0)!=(0);
 if ($272) {
  $133 = $265;
  $273 = $133;
  $132 = $273;
  $274 = $132;
  $131 = $274;
  $275 = $131;
  $276 = ((($275)) + 4|0);
  $277 = HEAP32[$276>>2]|0;
  $285 = $277;
 } else {
  $136 = $265;
  $278 = $136;
  $135 = $278;
  $279 = $135;
  $134 = $279;
  $280 = $134;
  $281 = HEAP8[$280>>0]|0;
  $282 = $281&255;
  $283 = $282 >> 1;
  $285 = $283;
 }
 $166 = $220;
 $167 = $284;
 $168 = $262;
 $169 = $263;
 $170 = $285;
 $286 = $169;
 $287 = $167;
 $288 = ($286>>>0)>=($287>>>0);
 $289 = $170;
 $290 = ($289|0)==(0);
 $or$cond = $288 | $290;
 do {
  if ($or$cond) {
   $165 = -1;
  } else {
   $291 = $166;
   $292 = $169;
   $293 = (($291) + ($292)|0);
   $294 = $166;
   $295 = $167;
   $296 = (($294) + ($295)|0);
   $297 = $168;
   $298 = $168;
   $299 = $170;
   $300 = (($298) + ($299)|0);
   __THREW__ = 0;
   $301 = (invoke_iiiiii(586,($293|0),($296|0),($297|0),($300|0),(587|0))|0);
   $302 = __THREW__; __THREW__ = 0;
   $303 = $302&1;
   if ($303) {
    $314 = ___cxa_find_matching_catch(0|0)|0;
    $315 = tempRet0;
    ___clang_call_terminate($314);
    // unreachable;
   }
   $__r$i$i = $301;
   $304 = $__r$i$i;
   $305 = $166;
   $306 = $167;
   $307 = (($305) + ($306)|0);
   $308 = ($304|0)==($307|0);
   if ($308) {
    $165 = -1;
    break;
   } else {
    $309 = $__r$i$i;
    $310 = $166;
    $311 = $309;
    $312 = $310;
    $313 = (($311) - ($312))|0;
    $165 = $313;
    break;
   }
  }
 } while(0);
 $316 = $165;
 $index = $316;
 L27: while(1) {
  $317 = $index;
  $318 = ($317|0)!=(-1);
  if (!($318)) {
   label = 49;
   break;
  }
  $319 = $190;
  $320 = $188;
  $321 = $last;
  $322 = $index;
  $323 = $last;
  $324 = (($322) - ($323))|0;
  $128 = $320;
  $129 = $321;
  $130 = $324;
  $325 = $128;
  $326 = $129;
  $327 = $130;
  $127 = $325;
  $328 = $127;
  $126 = $328;
  $329 = $126;
  $125 = $329;
  $330 = $125;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_($191,$325,$326,$327,$330);
  $123 = $319;
  $124 = $191;
  $331 = $123;
  $332 = ((($331)) + 4|0);
  $333 = HEAP32[$332>>2]|0;
  $122 = $331;
  $334 = $122;
  $335 = ((($334)) + 8|0);
  $121 = $335;
  $336 = $121;
  $120 = $336;
  $337 = $120;
  $338 = HEAP32[$337>>2]|0;
  $339 = ($333>>>0)<($338>>>0);
  if ($339) {
   __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__RAII_IncreaseAnnotatorC2ERKS8_j($__annotator$i,$331,1);
   $119 = $331;
   $340 = $119;
   $341 = ((($340)) + 8|0);
   $118 = $341;
   $342 = $118;
   $117 = $342;
   $343 = $117;
   $344 = ((($331)) + 4|0);
   $345 = HEAP32[$344>>2]|0;
   $115 = $345;
   $346 = $115;
   $347 = $124;
   $94 = $347;
   $348 = $94;
   $111 = $343;
   $112 = $346;
   $113 = $348;
   $349 = $111;
   $350 = $112;
   $351 = $113;
   $110 = $351;
   $352 = $110;
   ;HEAP8[$109>>0]=HEAP8[$114>>0]|0;
   $106 = $349;
   $107 = $350;
   $108 = $352;
   $353 = $106;
   $354 = $107;
   $355 = $108;
   $105 = $355;
   $356 = $105;
   $102 = $353;
   $103 = $354;
   $104 = $356;
   $357 = $103;
   $358 = $104;
   $101 = $358;
   $359 = $101;
   $99 = $357;
   $100 = $359;
   $360 = $99;
   $361 = $100;
   $98 = $361;
   $362 = $98;
   ;HEAP32[$360>>2]=HEAP32[$362>>2]|0;HEAP32[$360+4>>2]=HEAP32[$362+4>>2]|0;HEAP32[$360+8>>2]=HEAP32[$362+8>>2]|0;
   $363 = $100;
   $97 = $363;
   $364 = $97;
   $96 = $364;
   $365 = $96;
   $95 = $365;
   $366 = $95;
   $__a$i$i$i$i$i$i = $366;
   $__i$i$i$i$i$i$i = 0;
   while(1) {
    $367 = $__i$i$i$i$i$i$i;
    $368 = ($367>>>0)<(3);
    if (!($368)) {
     break;
    }
    $369 = $__i$i$i$i$i$i$i;
    $370 = $__a$i$i$i$i$i$i;
    $371 = (($370) + ($369<<2)|0);
    HEAP32[$371>>2] = 0;
    $372 = $__i$i$i$i$i$i$i;
    $373 = (($372) + 1)|0;
    $__i$i$i$i$i$i$i = $373;
   }
   __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
   $374 = ((($331)) + 4|0);
   $375 = HEAP32[$374>>2]|0;
   $376 = ((($375)) + 12|0);
   HEAP32[$374>>2] = $376;
  } else {
   $377 = $124;
   $116 = $377;
   $378 = $116;
   __THREW__ = 0;
   invoke_vii(588,($331|0),($378|0));
   $379 = __THREW__; __THREW__ = 0;
   $380 = $379&1;
   if ($380) {
    label = 48;
    break;
   }
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($191);
  $381 = $index;
  $382 = (($381) + 1)|0;
  $last = $382;
  $383 = $188;
  $384 = $189;
  $385 = $last;
  $91 = $383;
  $92 = $384;
  $93 = $385;
  $386 = $91;
  $90 = $386;
  $387 = $90;
  $89 = $387;
  $388 = $89;
  $88 = $388;
  $389 = $88;
  $87 = $389;
  $390 = $87;
  $86 = $390;
  $391 = $86;
  $392 = HEAP8[$391>>0]|0;
  $393 = $392&255;
  $394 = $393 & 1;
  $395 = ($394|0)!=(0);
  if ($395) {
   $80 = $388;
   $396 = $80;
   $79 = $396;
   $397 = $79;
   $78 = $397;
   $398 = $78;
   $399 = ((($398)) + 8|0);
   $400 = HEAP32[$399>>2]|0;
   $407 = $400;
  } else {
   $85 = $388;
   $401 = $85;
   $84 = $401;
   $402 = $84;
   $83 = $402;
   $403 = $83;
   $404 = ((($403)) + 1|0);
   $82 = $404;
   $405 = $82;
   $81 = $405;
   $406 = $81;
   $407 = $406;
  }
  $77 = $407;
  $408 = $77;
  $70 = $386;
  $409 = $70;
  $69 = $409;
  $410 = $69;
  $68 = $410;
  $411 = $68;
  $67 = $411;
  $412 = $67;
  $413 = HEAP8[$412>>0]|0;
  $414 = $413&255;
  $415 = $414 & 1;
  $416 = ($415|0)!=(0);
  if ($416) {
   $63 = $409;
   $417 = $63;
   $62 = $417;
   $418 = $62;
   $61 = $418;
   $419 = $61;
   $420 = ((($419)) + 4|0);
   $421 = HEAP32[$420>>2]|0;
   $472 = $421;
  } else {
   $66 = $409;
   $422 = $66;
   $65 = $422;
   $423 = $65;
   $64 = $423;
   $424 = $64;
   $425 = HEAP8[$424>>0]|0;
   $426 = $425&255;
   $427 = $426 >> 1;
   $472 = $427;
  }
  $428 = $92;
  $60 = $428;
  $429 = $60;
  $59 = $429;
  $430 = $59;
  $58 = $430;
  $431 = $58;
  $57 = $431;
  $432 = $57;
  $56 = $432;
  $433 = $56;
  $434 = HEAP8[$433>>0]|0;
  $435 = $434&255;
  $436 = $435 & 1;
  $437 = ($436|0)!=(0);
  if ($437) {
   $50 = $430;
   $438 = $50;
   $49 = $438;
   $439 = $49;
   $48 = $439;
   $440 = $48;
   $441 = ((($440)) + 8|0);
   $442 = HEAP32[$441>>2]|0;
   $449 = $442;
  } else {
   $55 = $430;
   $443 = $55;
   $54 = $443;
   $444 = $54;
   $53 = $444;
   $445 = $53;
   $446 = ((($445)) + 1|0);
   $52 = $446;
   $447 = $52;
   $51 = $447;
   $448 = $51;
   $449 = $448;
  }
  $47 = $449;
  $450 = $47;
  $451 = $93;
  $452 = $92;
  $46 = $452;
  $453 = $46;
  $45 = $453;
  $454 = $45;
  $44 = $454;
  $455 = $44;
  $43 = $455;
  $456 = $43;
  $457 = HEAP8[$456>>0]|0;
  $458 = $457&255;
  $459 = $458 & 1;
  $460 = ($459|0)!=(0);
  if ($460) {
   $39 = $453;
   $461 = $39;
   $38 = $461;
   $462 = $38;
   $37 = $462;
   $463 = $37;
   $464 = ((($463)) + 4|0);
   $465 = HEAP32[$464>>2]|0;
   $473 = $465;
  } else {
   $42 = $453;
   $466 = $42;
   $41 = $466;
   $467 = $41;
   $40 = $467;
   $468 = $40;
   $469 = HEAP8[$468>>0]|0;
   $470 = $469&255;
   $471 = $470 >> 1;
   $473 = $471;
  }
  $72 = $408;
  $73 = $472;
  $74 = $450;
  $75 = $451;
  $76 = $473;
  $474 = $75;
  $475 = $73;
  $476 = ($474>>>0)>=($475>>>0);
  $477 = $76;
  $478 = ($477|0)==(0);
  $or$cond3 = $476 | $478;
  do {
   if ($or$cond3) {
    $71 = -1;
   } else {
    $479 = $72;
    $480 = $75;
    $481 = (($479) + ($480)|0);
    $482 = $72;
    $483 = $73;
    $484 = (($482) + ($483)|0);
    $485 = $74;
    $486 = $74;
    $487 = $76;
    $488 = (($486) + ($487)|0);
    __THREW__ = 0;
    $489 = (invoke_iiiiii(586,($481|0),($484|0),($485|0),($488|0),(587|0))|0);
    $490 = __THREW__; __THREW__ = 0;
    $491 = $490&1;
    if ($491) {
     label = 46;
     break L27;
    }
    $__r$i$i1 = $489;
    $492 = $__r$i$i1;
    $493 = $72;
    $494 = $73;
    $495 = (($493) + ($494)|0);
    $496 = ($492|0)==($495|0);
    if ($496) {
     $71 = -1;
     break;
    } else {
     $497 = $__r$i$i1;
     $498 = $72;
     $499 = $497;
     $500 = $498;
     $501 = (($499) - ($500))|0;
     $71 = $501;
     break;
    }
   }
  } while(0);
  $504 = $71;
  $index = $504;
 }
 if ((label|0) == 46) {
  $502 = ___cxa_find_matching_catch(0|0)|0;
  $503 = tempRet0;
  ___clang_call_terminate($502);
  // unreachable;
 }
 else if ((label|0) == 48) {
  $505 = ___cxa_find_matching_catch()|0;
  $506 = tempRet0;
  $192 = $505;
  $193 = $506;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($191);
  $575 = $192;
  $576 = $193;
  ___resumeException($575|0);
  // unreachable;
 }
 else if ((label|0) == 49) {
  $507 = $index;
  $508 = $last;
  $509 = (($507) - ($508))|0;
  $510 = ($509>>>0)>(0);
  if (!($510)) {
   STACKTOP = sp;return;
  }
  $511 = $190;
  $512 = $188;
  $513 = $last;
  $514 = $index;
  $515 = $last;
  $516 = (($514) - ($515))|0;
  $34 = $512;
  $35 = $513;
  $36 = $516;
  $517 = $34;
  $518 = $35;
  $519 = $36;
  $33 = $517;
  $520 = $33;
  $32 = $520;
  $521 = $32;
  $31 = $521;
  $522 = $31;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_($194,$517,$518,$519,$522);
  $29 = $511;
  $30 = $194;
  $523 = $29;
  $524 = ((($523)) + 4|0);
  $525 = HEAP32[$524>>2]|0;
  $28 = $523;
  $526 = $28;
  $527 = ((($526)) + 8|0);
  $27 = $527;
  $528 = $27;
  $26 = $528;
  $529 = $26;
  $530 = HEAP32[$529>>2]|0;
  $531 = ($525>>>0)<($530>>>0);
  if ($531) {
   __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__RAII_IncreaseAnnotatorC2ERKS8_j($__annotator$i9,$523,1);
   $25 = $523;
   $532 = $25;
   $533 = ((($532)) + 8|0);
   $24 = $533;
   $534 = $24;
   $23 = $534;
   $535 = $23;
   $536 = ((($523)) + 4|0);
   $537 = HEAP32[$536>>2]|0;
   $21 = $537;
   $538 = $21;
   $539 = $30;
   $0 = $539;
   $540 = $0;
   $17 = $535;
   $18 = $538;
   $19 = $540;
   $541 = $17;
   $542 = $18;
   $543 = $19;
   $16 = $543;
   $544 = $16;
   ;HEAP8[$15>>0]=HEAP8[$20>>0]|0;
   $12 = $541;
   $13 = $542;
   $14 = $544;
   $545 = $12;
   $546 = $13;
   $547 = $14;
   $11 = $547;
   $548 = $11;
   $8 = $545;
   $9 = $546;
   $10 = $548;
   $549 = $9;
   $550 = $10;
   $7 = $550;
   $551 = $7;
   $5 = $549;
   $6 = $551;
   $552 = $5;
   $553 = $6;
   $4 = $553;
   $554 = $4;
   ;HEAP32[$552>>2]=HEAP32[$554>>2]|0;HEAP32[$552+4>>2]=HEAP32[$554+4>>2]|0;HEAP32[$552+8>>2]=HEAP32[$554+8>>2]|0;
   $555 = $6;
   $3 = $555;
   $556 = $3;
   $2 = $556;
   $557 = $2;
   $1 = $557;
   $558 = $1;
   $__a$i$i$i$i$i$i7 = $558;
   $__i$i$i$i$i$i$i8 = 0;
   while(1) {
    $559 = $__i$i$i$i$i$i$i8;
    $560 = ($559>>>0)<(3);
    if (!($560)) {
     break;
    }
    $561 = $__i$i$i$i$i$i$i8;
    $562 = $__a$i$i$i$i$i$i7;
    $563 = (($562) + ($561<<2)|0);
    HEAP32[$563>>2] = 0;
    $564 = $__i$i$i$i$i$i$i8;
    $565 = (($564) + 1)|0;
    $__i$i$i$i$i$i$i8 = $565;
   }
   __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i9);
   $566 = ((($523)) + 4|0);
   $567 = HEAP32[$566>>2]|0;
   $568 = ((($567)) + 12|0);
   HEAP32[$566>>2] = $568;
  } else {
   $569 = $30;
   $22 = $569;
   $570 = $22;
   __THREW__ = 0;
   invoke_vii(588,($523|0),($570|0));
   $571 = __THREW__; __THREW__ = 0;
   $572 = $571&1;
   if ($572) {
    $573 = ___cxa_find_matching_catch()|0;
    $574 = tempRet0;
    $192 = $573;
    $193 = $574;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($194);
    $575 = $192;
    $576 = $193;
    ___resumeException($575|0);
    // unreachable;
   }
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($194);
  STACKTOP = sp;return;
 }
}
function __ZN4NGIS4Data11CUdxDataset16LoadFromJsonFileEPKc($this,$fileName) {
 $this = $this|0;
 $fileName = $fileName|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $fileName;
 STACKTOP = sp;return 0;
}
function __ZN4NGIS4Data11CUdxDataset16FormatToJsonFileEPKc($this,$fileName) {
 $this = $this|0;
 $fileName = $fileName|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $fileName;
 STACKTOP = sp;return 0;
}
function __ZN4NGIS4Data11CUdxDataset18LoadFromJsonStreamEPKc($this,$jsonStr) {
 $this = $this|0;
 $jsonStr = $jsonStr|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $jsonStr;
 STACKTOP = sp;return 0;
}
function __ZN4NGIS4Data11CUdxDataset18FormatToJsonStreamERNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($this,$jsonStr) {
 $this = $this|0;
 $jsonStr = $jsonStr|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $jsonStr;
 STACKTOP = sp;return 0;
}
function __ZTv0_n68_N4NGIS4Data11CUdxDataset18FormatToJsonStreamERNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($this,$jsonStr) {
 $this = $this|0;
 $jsonStr = $jsonStr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $jsonStr;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + -68|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($2) + ($5)|0);
 $7 = $1;
 $8 = (__ZN4NGIS4Data11CUdxDataset18FormatToJsonStreamERNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($6,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function __ZN4NGIS4Data11CUdxDataset23constructDataFromSchemaEPNS0_6Schema14IUdxNodeSchemaE($this,$pSNode) {
 $this = $this|0;
 $pSNode = $pSNode|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $name = 0, $pDType = 0, $pSType = 0, $tempDNode = 0, $tempSNode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $name = sp + 20|0;
 $20 = $this;
 $21 = $pSNode;
 $24 = $20;
 $i = 0;
 while(1) {
  $25 = $i;
  $26 = $21;
  $27 = HEAP32[$26>>2]|0;
  $28 = ((($27)) + 36|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (FUNCTION_TABLE_ii[$29 & 1023]($26)|0);
  $31 = ($25|0)<($30|0);
  if (!($31)) {
   label = 13;
   break;
  }
  $32 = $21;
  $33 = HEAP32[$32>>2]|0;
  $34 = ((($33)) + 40|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $i;
  $37 = (FUNCTION_TABLE_iii[$35 & 1023]($32,$36)|0);
  $tempSNode = $37;
  $38 = $tempSNode;
  $39 = HEAP32[$38>>2]|0;
  $40 = ((($39)) + 20|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (FUNCTION_TABLE_ii[$41 & 1023]($38)|0);
  $18 = $name;
  $19 = $42;
  $43 = $18;
  $17 = $43;
  $44 = $17;
  $16 = $44;
  $45 = $16;
  $15 = $45;
  $46 = $19;
  $47 = $19;
  $48 = (__ZNSt3__111char_traitsIcE6lengthEPKc($47)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($43,$46,$48);
  $49 = $tempSNode;
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($50)) + 24|0);
  $52 = HEAP32[$51>>2]|0;
  __THREW__ = 0;
  $53 = (invoke_ii($52|0,($49|0))|0);
  $54 = __THREW__; __THREW__ = 0;
  $55 = $54&1;
  if ($55) {
   label = 12;
   break;
  }
  $56 = HEAP32[$53>>2]|0;
  $57 = ((($56)) + 20|0);
  $58 = HEAP32[$57>>2]|0;
  __THREW__ = 0;
  $59 = (invoke_ii($58|0,($53|0))|0);
  $60 = __THREW__; __THREW__ = 0;
  $61 = $60&1;
  if ($61) {
   label = 12;
   break;
  }
  $pSType = $59;
  $62 = $pSType;
  __THREW__ = 0;
  $63 = (invoke_ii(589,($62|0))|0);
  $64 = __THREW__; __THREW__ = 0;
  $65 = $64&1;
  if ($65) {
   label = 12;
   break;
  }
  $pDType = $63;
  $66 = HEAP32[$24>>2]|0;
  $67 = ((($66)) + 64|0);
  $68 = HEAP32[$67>>2]|0;
  $14 = $name;
  $69 = $14;
  $13 = $69;
  $70 = $13;
  $12 = $70;
  $71 = $12;
  $11 = $71;
  $72 = $11;
  $10 = $72;
  $73 = $10;
  $9 = $73;
  $74 = $9;
  $75 = HEAP8[$74>>0]|0;
  $76 = $75&255;
  $77 = $76 & 1;
  $78 = ($77|0)!=(0);
  if ($78) {
   $3 = $71;
   $79 = $3;
   $2 = $79;
   $80 = $2;
   $1 = $80;
   $81 = $1;
   $82 = ((($81)) + 8|0);
   $83 = HEAP32[$82>>2]|0;
   $90 = $83;
  } else {
   $8 = $71;
   $84 = $8;
   $7 = $84;
   $85 = $7;
   $6 = $85;
   $86 = $6;
   $87 = ((($86)) + 1|0);
   $5 = $87;
   $88 = $5;
   $4 = $88;
   $89 = $4;
   $90 = $89;
  }
  $0 = $90;
  $91 = $0;
  $92 = $pDType;
  __THREW__ = 0;
  $93 = (invoke_iiii($68|0,($24|0),($91|0),($92|0))|0);
  $94 = __THREW__; __THREW__ = 0;
  $95 = $94&1;
  if ($95) {
   label = 12;
   break;
  }
  $tempDNode = $93;
  $96 = $tempSNode;
  $97 = $tempDNode;
  __THREW__ = 0;
  invoke_vii(590,($96|0),($97|0));
  $98 = __THREW__; __THREW__ = 0;
  $99 = $98&1;
  if ($99) {
   label = 12;
   break;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($name);
  $100 = $i;
  $101 = (($100) + 1)|0;
  $i = $101;
 }
 if ((label|0) == 12) {
  $102 = ___cxa_find_matching_catch()|0;
  $103 = tempRet0;
  $22 = $102;
  $23 = $103;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($name);
  $104 = $22;
  $105 = $23;
  ___resumeException($104|0);
  // unreachable;
 }
 else if ((label|0) == 13) {
  STACKTOP = sp;return 1;
 }
 return (0)|0;
}
function __ZN4NGIS4DataL17String2KernelTypeENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE134($typeStr) {
 $typeStr = $typeStr|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $pType = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pType = sp + 4|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($pType,$typeStr);
 $56 = $pType;
 $57 = 11849;
 $60 = $56;
 $61 = $57;
 $62 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($60,$61)|0);
 $63 = ($62|0)==(0);
 do {
  if ($63) {
   $58 = 2;
   $59 = 1;
  } else {
   $54 = $pType;
   $55 = 10885;
   $64 = $54;
   $65 = $55;
   $66 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($64,$65)|0);
   $67 = ($66|0)==(0);
   if ($67) {
    $58 = 4;
    $59 = 1;
    break;
   }
   $52 = $pType;
   $53 = 10890;
   $68 = $52;
   $69 = $53;
   $70 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($68,$69)|0);
   $71 = ($70|0)==(0);
   if ($71) {
    $58 = 8;
    $59 = 1;
    break;
   }
   $50 = $pType;
   $51 = 10897;
   $72 = $50;
   $73 = $51;
   $74 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($72,$73)|0);
   $75 = ($74|0)==(0);
   if ($75) {
    $58 = 16;
    $59 = 1;
    break;
   }
   $48 = $pType;
   $49 = 10914;
   $76 = $48;
   $77 = $49;
   $78 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($76,$77)|0);
   $79 = ($78|0)==(0);
   if ($79) {
    $58 = 32;
    $59 = 1;
    break;
   }
   $46 = $pType;
   $47 = 10935;
   $80 = $46;
   $81 = $47;
   $82 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($80,$81)|0);
   $83 = ($82|0)==(0);
   if ($83) {
    $58 = 64;
    $59 = 1;
    break;
   }
   $44 = $pType;
   $45 = 10960;
   $84 = $44;
   $85 = $45;
   $86 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($84,$85)|0);
   $87 = ($86|0)==(0);
   if ($87) {
    $58 = 258;
    $59 = 1;
    break;
   }
   $42 = $pType;
   $43 = 10972;
   $88 = $42;
   $89 = $43;
   $90 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($88,$89)|0);
   $91 = ($90|0)==(0);
   if ($91) {
    $58 = 260;
    $59 = 1;
    break;
   }
   $40 = $pType;
   $41 = 10983;
   $92 = $40;
   $93 = $41;
   $94 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($92,$93)|0);
   $95 = ($94|0)==(0);
   if ($95) {
    $58 = 264;
    $59 = 1;
    break;
   }
   $38 = $pType;
   $39 = 10998;
   $96 = $38;
   $97 = $39;
   $98 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($96,$97)|0);
   $99 = ($98|0)==(0);
   if ($99) {
    $58 = 272;
    $59 = 1;
    break;
   }
   $36 = $pType;
   $37 = 11013;
   $100 = $36;
   $101 = $37;
   $102 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($100,$101)|0);
   $103 = ($102|0)==(0);
   if ($103) {
    $58 = 288;
    $59 = 1;
    break;
   }
   $34 = $pType;
   $35 = 11028;
   $104 = $34;
   $105 = $35;
   $106 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($104,$105)|0);
   $107 = ($106|0)==(0);
   if ($107) {
    $58 = 320;
    $59 = 1;
    break;
   }
   $32 = $pType;
   $33 = 11043;
   $108 = $32;
   $109 = $33;
   $110 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($108,$109)|0);
   $111 = ($110|0)==(0);
   if ($111) {
    $58 = 128;
    $59 = 1;
    break;
   }
   $30 = $pType;
   $31 = 11047;
   $112 = $30;
   $113 = $31;
   $114 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($112,$113)|0);
   $115 = ($114|0)==(0);
   if ($115) {
    $58 = 256;
    $59 = 1;
    break;
   }
   $28 = $pType;
   $29 = 11052;
   $116 = $28;
   $117 = $29;
   $118 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($116,$117)|0);
   $119 = ($118|0)==(0);
   if ($119) {
    $58 = 512;
    $59 = 1;
    break;
   }
   $26 = $pType;
   $27 = 11056;
   $120 = $26;
   $121 = $27;
   $122 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($120,$121)|0);
   $123 = ($122|0)==(0);
   if ($123) {
    $58 = 1024;
    $59 = 1;
    break;
   }
   $24 = $pType;
   $25 = 11849;
   $124 = $24;
   $125 = $25;
   $126 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($124,$125)|0);
   $127 = ($126|0)==(0);
   if ($127) {
    $58 = 2;
    $59 = 1;
    break;
   }
   $22 = $pType;
   $23 = 11885;
   $128 = $22;
   $129 = $23;
   $130 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($128,$129)|0);
   $131 = ($130|0)==(0);
   if ($131) {
    $58 = 4;
    $59 = 1;
    break;
   }
   $20 = $pType;
   $21 = 10890;
   $132 = $20;
   $133 = $21;
   $134 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($132,$133)|0);
   $135 = ($134|0)==(0);
   if ($135) {
    $58 = 8;
    $59 = 1;
    break;
   }
   $18 = $pType;
   $19 = 10897;
   $136 = $18;
   $137 = $19;
   $138 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($136,$137)|0);
   $139 = ($138|0)==(0);
   if ($139) {
    $58 = 16;
    $59 = 1;
    break;
   }
   $16 = $pType;
   $17 = 10914;
   $140 = $16;
   $141 = $17;
   $142 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($140,$141)|0);
   $143 = ($142|0)==(0);
   if ($143) {
    $58 = 32;
    $59 = 1;
    break;
   }
   $14 = $pType;
   $15 = 10935;
   $144 = $14;
   $145 = $15;
   $146 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($144,$145)|0);
   $147 = ($146|0)==(0);
   if ($147) {
    $58 = 64;
    $59 = 1;
    break;
   }
   $12 = $pType;
   $13 = 11190;
   $148 = $12;
   $149 = $13;
   $150 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($148,$149)|0);
   $151 = ($150|0)==(0);
   if ($151) {
    $58 = 258;
    $59 = 1;
    break;
   }
   $10 = $pType;
   $11 = 11200;
   $152 = $10;
   $153 = $11;
   $154 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($152,$153)|0);
   $155 = ($154|0)==(0);
   if ($155) {
    $58 = 260;
    $59 = 1;
    break;
   }
   $8 = $pType;
   $9 = 11212;
   $156 = $8;
   $157 = $9;
   $158 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($156,$157)|0);
   $159 = ($158|0)==(0);
   if ($159) {
    $58 = 264;
    $59 = 1;
    break;
   }
   $6 = $pType;
   $7 = 11225;
   $160 = $6;
   $161 = $7;
   $162 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($160,$161)|0);
   $163 = ($162|0)==(0);
   if ($163) {
    $58 = 272;
    $59 = 1;
    break;
   }
   $4 = $pType;
   $5 = 11240;
   $164 = $4;
   $165 = $5;
   $166 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($164,$165)|0);
   $167 = ($166|0)==(0);
   if ($167) {
    $58 = 288;
    $59 = 1;
    break;
   }
   $2 = $pType;
   $3 = 11255;
   $168 = $2;
   $169 = $3;
   $170 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($168,$169)|0);
   $171 = ($170|0)==(0);
   if ($171) {
    $58 = 320;
    $59 = 1;
    break;
   }
   $0 = $pType;
   $1 = 11270;
   $172 = $0;
   $173 = $1;
   $174 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($172,$173)|0);
   $175 = ($174|0)==(0);
   if ($175) {
    $58 = 128;
    $59 = 1;
    break;
   } else {
    $58 = 0;
    $59 = 1;
    break;
   }
  }
 } while(0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($pType);
 $176 = $58;
 STACKTOP = sp;return ($176|0);
}
function __ZNK8tinyxml210XMLElement12IntAttributeEPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $i = sp;
 $0 = $this;
 $1 = $name;
 $2 = $0;
 HEAP32[$i>>2] = 0;
 $3 = $1;
 (__ZNK8tinyxml210XMLElement17QueryIntAttributeEPKcPi($2,$3,$i)|0);
 $4 = HEAP32[$i>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZNK8tinyxml210XMLElement15DoubleAttributeEPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $d = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $d = sp;
 $0 = $this;
 $1 = $name;
 $2 = $0;
 HEAPF64[$d>>3] = 0.0;
 $3 = $1;
 (__ZNK8tinyxml210XMLElement20QueryDoubleAttributeEPKcPd($2,$3,$d)|0);
 $4 = +HEAPF64[$d>>3];
 STACKTOP = sp;return (+$4);
}
function __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN4NGIS4DataL17KernelType2StringENS0_11EKernelTypeE190($agg$result,$pType) {
 $agg$result = $agg$result|0;
 $pType = $pType|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $95 = $pType;
 $96 = $95;
 $97 = ($96|0)==(0);
 if ($97) {
  $93 = $agg$result;
  $94 = 11786;
  $98 = $93;
  $92 = $98;
  $99 = $92;
  $91 = $99;
  $100 = $91;
  $90 = $100;
  $101 = $94;
  $102 = $94;
  $103 = (__ZNSt3__111char_traitsIcE6lengthEPKc($102)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($98,$101,$103);
  STACKTOP = sp;return;
 }
 $104 = $95;
 $105 = ($104|0)==(2);
 if ($105) {
  $88 = $agg$result;
  $89 = 11849;
  $106 = $88;
  $87 = $106;
  $107 = $87;
  $86 = $107;
  $108 = $86;
  $85 = $108;
  $109 = $89;
  $110 = $89;
  $111 = (__ZNSt3__111char_traitsIcE6lengthEPKc($110)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($106,$109,$111);
  STACKTOP = sp;return;
 }
 $112 = $95;
 $113 = ($112|0)==(4);
 if ($113) {
  $83 = $agg$result;
  $84 = 10885;
  $114 = $83;
  $82 = $114;
  $115 = $82;
  $81 = $115;
  $116 = $81;
  $80 = $116;
  $117 = $84;
  $118 = $84;
  $119 = (__ZNSt3__111char_traitsIcE6lengthEPKc($118)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($114,$117,$119);
  STACKTOP = sp;return;
 }
 $120 = $95;
 $121 = ($120|0)==(8);
 if ($121) {
  $78 = $agg$result;
  $79 = 10890;
  $122 = $78;
  $77 = $122;
  $123 = $77;
  $76 = $123;
  $124 = $76;
  $75 = $124;
  $125 = $79;
  $126 = $79;
  $127 = (__ZNSt3__111char_traitsIcE6lengthEPKc($126)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($122,$125,$127);
  STACKTOP = sp;return;
 }
 $128 = $95;
 $129 = ($128|0)==(16);
 if ($129) {
  $73 = $agg$result;
  $74 = 10897;
  $130 = $73;
  $72 = $130;
  $131 = $72;
  $71 = $131;
  $132 = $71;
  $70 = $132;
  $133 = $74;
  $134 = $74;
  $135 = (__ZNSt3__111char_traitsIcE6lengthEPKc($134)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($130,$133,$135);
  STACKTOP = sp;return;
 }
 $136 = $95;
 $137 = ($136|0)==(32);
 if ($137) {
  $68 = $agg$result;
  $69 = 10914;
  $138 = $68;
  $67 = $138;
  $139 = $67;
  $66 = $139;
  $140 = $66;
  $65 = $140;
  $141 = $69;
  $142 = $69;
  $143 = (__ZNSt3__111char_traitsIcE6lengthEPKc($142)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($138,$141,$143);
  STACKTOP = sp;return;
 }
 $144 = $95;
 $145 = ($144|0)==(64);
 if ($145) {
  $63 = $agg$result;
  $64 = 10935;
  $146 = $63;
  $62 = $146;
  $147 = $62;
  $61 = $147;
  $148 = $61;
  $60 = $148;
  $149 = $64;
  $150 = $64;
  $151 = (__ZNSt3__111char_traitsIcE6lengthEPKc($150)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($146,$149,$151);
  STACKTOP = sp;return;
 }
 $152 = $95;
 $153 = ($152|0)==(258);
 if ($153) {
  $58 = $agg$result;
  $59 = 10960;
  $154 = $58;
  $57 = $154;
  $155 = $57;
  $56 = $155;
  $156 = $56;
  $55 = $156;
  $157 = $59;
  $158 = $59;
  $159 = (__ZNSt3__111char_traitsIcE6lengthEPKc($158)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($154,$157,$159);
  STACKTOP = sp;return;
 }
 $160 = $95;
 $161 = ($160|0)==(260);
 if ($161) {
  $53 = $agg$result;
  $54 = 10972;
  $162 = $53;
  $52 = $162;
  $163 = $52;
  $51 = $163;
  $164 = $51;
  $50 = $164;
  $165 = $54;
  $166 = $54;
  $167 = (__ZNSt3__111char_traitsIcE6lengthEPKc($166)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($162,$165,$167);
  STACKTOP = sp;return;
 }
 $168 = $95;
 $169 = ($168|0)==(264);
 if ($169) {
  $48 = $agg$result;
  $49 = 10983;
  $170 = $48;
  $47 = $170;
  $171 = $47;
  $46 = $171;
  $172 = $46;
  $45 = $172;
  $173 = $49;
  $174 = $49;
  $175 = (__ZNSt3__111char_traitsIcE6lengthEPKc($174)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($170,$173,$175);
  STACKTOP = sp;return;
 }
 $176 = $95;
 $177 = ($176|0)==(272);
 if ($177) {
  $43 = $agg$result;
  $44 = 10998;
  $178 = $43;
  $42 = $178;
  $179 = $42;
  $41 = $179;
  $180 = $41;
  $40 = $180;
  $181 = $44;
  $182 = $44;
  $183 = (__ZNSt3__111char_traitsIcE6lengthEPKc($182)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($178,$181,$183);
  STACKTOP = sp;return;
 }
 $184 = $95;
 $185 = ($184|0)==(288);
 if ($185) {
  $38 = $agg$result;
  $39 = 11013;
  $186 = $38;
  $37 = $186;
  $187 = $37;
  $36 = $187;
  $188 = $36;
  $35 = $188;
  $189 = $39;
  $190 = $39;
  $191 = (__ZNSt3__111char_traitsIcE6lengthEPKc($190)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($186,$189,$191);
  STACKTOP = sp;return;
 }
 $192 = $95;
 $193 = ($192|0)==(320);
 if ($193) {
  $33 = $agg$result;
  $34 = 11028;
  $194 = $33;
  $32 = $194;
  $195 = $32;
  $31 = $195;
  $196 = $31;
  $30 = $196;
  $197 = $34;
  $198 = $34;
  $199 = (__ZNSt3__111char_traitsIcE6lengthEPKc($198)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($194,$197,$199);
  STACKTOP = sp;return;
 }
 $200 = $95;
 $201 = ($200|0)==(128);
 if ($201) {
  $28 = $agg$result;
  $29 = 11043;
  $202 = $28;
  $27 = $202;
  $203 = $27;
  $26 = $203;
  $204 = $26;
  $25 = $204;
  $205 = $29;
  $206 = $29;
  $207 = (__ZNSt3__111char_traitsIcE6lengthEPKc($206)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($202,$205,$207);
  STACKTOP = sp;return;
 }
 $208 = $95;
 $209 = ($208|0)==(256);
 if ($209) {
  $23 = $agg$result;
  $24 = 11047;
  $210 = $23;
  $22 = $210;
  $211 = $22;
  $21 = $211;
  $212 = $21;
  $20 = $212;
  $213 = $24;
  $214 = $24;
  $215 = (__ZNSt3__111char_traitsIcE6lengthEPKc($214)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($210,$213,$215);
  STACKTOP = sp;return;
 }
 $216 = $95;
 $217 = ($216|0)==(512);
 if ($217) {
  $18 = $agg$result;
  $19 = 11052;
  $218 = $18;
  $17 = $218;
  $219 = $17;
  $16 = $219;
  $220 = $16;
  $15 = $220;
  $221 = $19;
  $222 = $19;
  $223 = (__ZNSt3__111char_traitsIcE6lengthEPKc($222)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($218,$221,$223);
  STACKTOP = sp;return;
 }
 $224 = $95;
 $225 = ($224|0)==(1024);
 if ($225) {
  $13 = $agg$result;
  $14 = 11056;
  $226 = $13;
  $12 = $226;
  $227 = $12;
  $11 = $227;
  $228 = $11;
  $10 = $228;
  $229 = $14;
  $230 = $14;
  $231 = (__ZNSt3__111char_traitsIcE6lengthEPKc($230)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($226,$229,$231);
  STACKTOP = sp;return;
 }
 $232 = $95;
 $233 = ($232|0)==(17);
 if ($233) {
  $8 = $agg$result;
  $9 = 11786;
  $234 = $8;
  $7 = $234;
  $235 = $7;
  $6 = $235;
  $236 = $6;
  $5 = $236;
  $237 = $9;
  $238 = $9;
  $239 = (__ZNSt3__111char_traitsIcE6lengthEPKc($238)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($234,$237,$239);
  STACKTOP = sp;return;
 } else {
  $3 = $agg$result;
  $4 = 11786;
  $240 = $3;
  $2 = $240;
  $241 = $2;
  $1 = $241;
  $242 = $1;
  $0 = $242;
  $243 = $4;
  $244 = $4;
  $245 = (__ZNSt3__111char_traitsIcE6lengthEPKc($244)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($240,$243,$245);
  STACKTOP = sp;return;
 }
}
function __ZN8tinyxml210XMLElement12SetAttributeEPKci($this,$name,$value) {
 $this = $this|0;
 $name = $name|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $name;
 $2 = $value;
 $3 = $0;
 $4 = $1;
 $5 = (__ZN8tinyxml210XMLElement21FindOrCreateAttributeEPKc($3,$4)|0);
 $a = $5;
 $6 = $a;
 $7 = $2;
 __ZN8tinyxml212XMLAttribute12SetAttributeEi($6,$7);
 STACKTOP = sp;return;
}
function __ZN8tinyxml210XMLElement12SetAttributeEPKcd($this,$name,$value) {
 $this = $this|0;
 $name = $name|0;
 $value = +$value;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $name;
 $2 = $value;
 $3 = $0;
 $4 = $1;
 $5 = (__ZN8tinyxml210XMLElement21FindOrCreateAttributeEPKc($3,$4)|0);
 $a = $5;
 $6 = $a;
 $7 = $2;
 __ZN8tinyxml212XMLAttribute12SetAttributeEd($6,$7);
 STACKTOP = sp;return;
}
function __ZNSt3__111char_traitsIcE2eqEcc($__c1,$__c2) {
 $__c1 = $__c1|0;
 $__c2 = $__c2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c1;
 $1 = $__c2;
 $2 = $0;
 $3 = $2 << 24 >> 24;
 $4 = $1;
 $5 = $4 << 24 >> 24;
 $6 = ($3|0)==($5|0);
 STACKTOP = sp;return ($6|0);
}
function __ZNSt3__118__find_first_of_ceIPKcS2_PFbccEEET_S5_S5_T0_S6_T1_($__first1,$__last1,$__first2,$__last2,$__pred) {
 $__first1 = $__first1|0;
 $__last1 = $__last1|0;
 $__first2 = $__first2|0;
 $__last2 = $__last2|0;
 $__pred = $__pred|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $__first1;
 $2 = $__last1;
 $3 = $__first2;
 $4 = $__last2;
 $5 = $__pred;
 L1: while(1) {
  $6 = $1;
  $7 = $2;
  $8 = ($6|0)!=($7|0);
  if (!($8)) {
   label = 9;
   break;
  }
  $9 = $3;
  $__j = $9;
  while(1) {
   $10 = $__j;
   $11 = $4;
   $12 = ($10|0)!=($11|0);
   if (!($12)) {
    break;
   }
   $13 = $5;
   $14 = $1;
   $15 = HEAP8[$14>>0]|0;
   $16 = $__j;
   $17 = HEAP8[$16>>0]|0;
   $18 = (FUNCTION_TABLE_iii[$13 & 1023]($15,$17)|0);
   if ($18) {
    label = 6;
    break L1;
   }
   $20 = $__j;
   $21 = ((($20)) + 1|0);
   $__j = $21;
  }
  $22 = $1;
  $23 = ((($22)) + 1|0);
  $1 = $23;
 }
 if ((label|0) == 6) {
  $19 = $1;
  $0 = $19;
  $25 = $0;
  STACKTOP = sp;return ($25|0);
 }
 else if ((label|0) == 9) {
  $24 = $2;
  $0 = $24;
  $25 = $0;
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__RAII_IncreaseAnnotatorC2ERKS8_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__a$i$i$i$i$i = 0, $__cap$i = 0, $__i$i$i$i$i$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = sp + 8|0;
 $19 = sp + 233|0;
 $28 = sp;
 $31 = sp + 232|0;
 $39 = sp + 80|0;
 $40 = sp + 68|0;
 $__v = sp + 20|0;
 $45 = $this;
 $46 = $__x;
 $49 = $45;
 $44 = $49;
 $50 = $44;
 $51 = ((($50)) + 8|0);
 $43 = $51;
 $52 = $43;
 $42 = $52;
 $53 = $42;
 $__a = $53;
 $41 = $49;
 $54 = $41;
 $55 = ((($54)) + 4|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = HEAP32[$54>>2]|0;
 $58 = $56;
 $59 = $57;
 $60 = (($58) - ($59))|0;
 $61 = (($60|0) / 12)&-1;
 $62 = (($61) + 1)|0;
 $38 = $49;
 HEAP32[$39>>2] = $62;
 $63 = $38;
 $64 = (__ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8max_sizeEv($63)|0);
 $__ms$i = $64;
 $65 = HEAP32[$39>>2]|0;
 $66 = $__ms$i;
 $67 = ($65>>>0)>($66>>>0);
 if ($67) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($63);
  // unreachable;
 }
 $36 = $63;
 $68 = $36;
 $35 = $68;
 $69 = $35;
 $34 = $69;
 $70 = $34;
 $71 = ((($70)) + 8|0);
 $33 = $71;
 $72 = $33;
 $32 = $72;
 $73 = $32;
 $74 = HEAP32[$73>>2]|0;
 $75 = HEAP32[$69>>2]|0;
 $76 = $74;
 $77 = $75;
 $78 = (($76) - ($77))|0;
 $79 = (($78|0) / 12)&-1;
 $__cap$i = $79;
 $80 = $__cap$i;
 $81 = $__ms$i;
 $82 = (($81>>>0) / 2)&-1;
 $83 = ($80>>>0)>=($82>>>0);
 if ($83) {
  $84 = $__ms$i;
  $37 = $84;
 } else {
  $85 = $__cap$i;
  $86 = $85<<1;
  HEAP32[$40>>2] = $86;
  $29 = $40;
  $30 = $39;
  $87 = $29;
  $88 = $30;
  ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
  $26 = $87;
  $27 = $88;
  $89 = $26;
  $90 = $27;
  $23 = $28;
  $24 = $89;
  $25 = $90;
  $91 = $24;
  $92 = HEAP32[$91>>2]|0;
  $93 = $25;
  $94 = HEAP32[$93>>2]|0;
  $95 = ($92>>>0)<($94>>>0);
  $96 = $27;
  $97 = $26;
  $98 = $95 ? $96 : $97;
  $99 = HEAP32[$98>>2]|0;
  $37 = $99;
 }
 $100 = $37;
 $22 = $49;
 $101 = $22;
 $102 = ((($101)) + 4|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = HEAP32[$101>>2]|0;
 $105 = $103;
 $106 = $104;
 $107 = (($105) - ($106))|0;
 $108 = (($107|0) / 12)&-1;
 $109 = $__a;
 __ZNSt3__114__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEEC2EjjS8_($__v,$100,$108,$109);
 $110 = $__a;
 $111 = ((($__v)) + 8|0);
 $112 = HEAP32[$111>>2]|0;
 $21 = $112;
 $113 = $21;
 $114 = $46;
 $20 = $114;
 $115 = $20;
 $16 = $110;
 $17 = $113;
 $18 = $115;
 $116 = $16;
 $117 = $17;
 $118 = $18;
 $15 = $118;
 $119 = $15;
 ;HEAP8[$14>>0]=HEAP8[$19>>0]|0;
 $11 = $116;
 $12 = $117;
 $13 = $119;
 $120 = $11;
 $121 = $12;
 $122 = $13;
 $10 = $122;
 $123 = $10;
 $7 = $120;
 $8 = $121;
 $9 = $123;
 $124 = $8;
 $125 = $9;
 $6 = $125;
 $126 = $6;
 $4 = $124;
 $5 = $126;
 $127 = $4;
 $128 = $5;
 $3 = $128;
 $129 = $3;
 ;HEAP32[$127>>2]=HEAP32[$129>>2]|0;HEAP32[$127+4>>2]=HEAP32[$129+4>>2]|0;HEAP32[$127+8>>2]=HEAP32[$129+8>>2]|0;
 $130 = $5;
 $2 = $130;
 $131 = $2;
 $1 = $131;
 $132 = $1;
 $0 = $132;
 $133 = $0;
 $__a$i$i$i$i$i = $133;
 $__i$i$i$i$i$i = 0;
 while(1) {
  $134 = $__i$i$i$i$i$i;
  $135 = ($134>>>0)<(3);
  if (!($135)) {
   break;
  }
  $136 = $__i$i$i$i$i$i;
  $137 = $__a$i$i$i$i$i;
  $138 = (($137) + ($136<<2)|0);
  HEAP32[$138>>2] = 0;
  $139 = $__i$i$i$i$i$i;
  $140 = (($139) + 1)|0;
  $__i$i$i$i$i$i = $140;
 }
 $141 = ((($__v)) + 8|0);
 $142 = HEAP32[$141>>2]|0;
 $143 = ((($142)) + 12|0);
 HEAP32[$141>>2] = $143;
 __THREW__ = 0;
 invoke_vii(591,($49|0),($__v|0));
 $144 = __THREW__; __THREW__ = 0;
 $145 = $144&1;
 if ($145) {
  $146 = ___cxa_find_matching_catch()|0;
  $147 = tempRet0;
  $47 = $146;
  $48 = $147;
  __ZNSt3__114__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEED2Ev($__v);
  $148 = $47;
  $149 = $48;
  ___resumeException($148|0);
  // unreachable;
 } else {
  __ZNSt3__114__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
}
function __ZN4NGIS4Data8CUdxNode21getKernelTypeBySchemaENS0_6Schema15ESchemaNodeTypeE($pSType) {
 $pSType = $pSType|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pSType;
 $2 = $1;
 $3 = ($2|0)==(2);
 do {
  if ($3) {
   $0 = 2;
  } else {
   $4 = $1;
   $5 = ($4|0)==(4);
   if ($5) {
    $0 = 4;
    break;
   }
   $6 = $1;
   $7 = ($6|0)==(64);
   if ($7) {
    $0 = 8;
    break;
   }
   $8 = $1;
   $9 = ($8|0)==(8);
   if ($9) {
    $0 = 16;
    break;
   }
   $10 = $1;
   $11 = ($10|0)==(16);
   if ($11) {
    $0 = 32;
    break;
   }
   $12 = $1;
   $13 = ($12|0)==(32);
   if ($13) {
    $0 = 64;
    break;
   }
   $14 = $1;
   $15 = ($14|0)==(258);
   if ($15) {
    $0 = 258;
    break;
   }
   $16 = $1;
   $17 = ($16|0)==(260);
   if ($17) {
    $0 = 260;
    break;
   }
   $18 = $1;
   $19 = ($18|0)==(320);
   if ($19) {
    $0 = 264;
    break;
   }
   $20 = $1;
   $21 = ($20|0)==(264);
   if ($21) {
    $0 = 272;
    break;
   }
   $22 = $1;
   $23 = ($22|0)==(272);
   if ($23) {
    $0 = 288;
    break;
   }
   $24 = $1;
   $25 = ($24|0)==(288);
   if ($25) {
    $0 = 320;
    break;
   }
   $26 = $1;
   $27 = ($26|0)==(128);
   if ($27) {
    $0 = 128;
    break;
   }
   $28 = $1;
   $29 = ($28|0)==(256);
   if ($29) {
    $0 = 256;
    break;
   }
   $30 = $1;
   $31 = ($30|0)==(512);
   if ($31) {
    $0 = 512;
    break;
   }
   $32 = $1;
   $33 = ($32|0)==(1024);
   if ($33) {
    $0 = 1024;
    break;
   } else {
    $0 = 17;
    break;
   }
  }
 } while(0);
 $34 = $0;
 STACKTOP = sp;return ($34|0);
}
function __ZN4NGIS4Data11CUdxDataset17IterateChildNodesEPNS0_6Schema14IUdxNodeSchemaEPNS0_8IUdxNodeE($pSNode,$pDNode) {
 $pSNode = $pSNode|0;
 $pDNode = $pDNode|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $count = 0, $i = 0, $name = 0, $pDType = 0, $pSType = 0, $tempDNode = 0, $tempSNode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $name = sp + 20|0;
 $20 = $pSNode;
 $21 = $pDNode;
 $24 = $20;
 $25 = ($24|0)==(0|0);
 if ($25) {
  STACKTOP = sp;return;
 }
 $26 = $20;
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($27)) + 36|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (FUNCTION_TABLE_ii[$29 & 1023]($26)|0);
 $count = $30;
 $31 = $count;
 $32 = ($31|0)==(0);
 if ($32) {
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $33 = $i;
  $34 = $count;
  $35 = ($33|0)<($34|0);
  if (!($35)) {
   label = 15;
   break;
  }
  $36 = $20;
  $37 = HEAP32[$36>>2]|0;
  $38 = ((($37)) + 40|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $i;
  $41 = (FUNCTION_TABLE_iii[$39 & 1023]($36,$40)|0);
  $tempSNode = $41;
  $42 = $tempSNode;
  $43 = HEAP32[$42>>2]|0;
  $44 = ((($43)) + 20|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (FUNCTION_TABLE_ii[$45 & 1023]($42)|0);
  $18 = $name;
  $19 = $46;
  $47 = $18;
  $17 = $47;
  $48 = $17;
  $16 = $48;
  $49 = $16;
  $15 = $49;
  $50 = $19;
  $51 = $19;
  $52 = (__ZNSt3__111char_traitsIcE6lengthEPKc($51)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($47,$50,$52);
  $53 = $tempSNode;
  $54 = HEAP32[$53>>2]|0;
  $55 = ((($54)) + 24|0);
  $56 = HEAP32[$55>>2]|0;
  __THREW__ = 0;
  $57 = (invoke_ii($56|0,($53|0))|0);
  $58 = __THREW__; __THREW__ = 0;
  $59 = $58&1;
  if ($59) {
   label = 14;
   break;
  }
  $60 = HEAP32[$57>>2]|0;
  $61 = ((($60)) + 20|0);
  $62 = HEAP32[$61>>2]|0;
  __THREW__ = 0;
  $63 = (invoke_ii($62|0,($57|0))|0);
  $64 = __THREW__; __THREW__ = 0;
  $65 = $64&1;
  if ($65) {
   label = 14;
   break;
  }
  $pSType = $63;
  $66 = $pSType;
  __THREW__ = 0;
  $67 = (invoke_ii(589,($66|0))|0);
  $68 = __THREW__; __THREW__ = 0;
  $69 = $68&1;
  if ($69) {
   label = 14;
   break;
  }
  $pDType = $67;
  $70 = $21;
  $71 = HEAP32[$70>>2]|0;
  $72 = ((($71)) + 40|0);
  $73 = HEAP32[$72>>2]|0;
  $14 = $name;
  $74 = $14;
  $13 = $74;
  $75 = $13;
  $12 = $75;
  $76 = $12;
  $11 = $76;
  $77 = $11;
  $10 = $77;
  $78 = $10;
  $9 = $78;
  $79 = $9;
  $80 = HEAP8[$79>>0]|0;
  $81 = $80&255;
  $82 = $81 & 1;
  $83 = ($82|0)!=(0);
  if ($83) {
   $3 = $76;
   $84 = $3;
   $2 = $84;
   $85 = $2;
   $1 = $85;
   $86 = $1;
   $87 = ((($86)) + 8|0);
   $88 = HEAP32[$87>>2]|0;
   $95 = $88;
  } else {
   $8 = $76;
   $89 = $8;
   $7 = $89;
   $90 = $7;
   $6 = $90;
   $91 = $6;
   $92 = ((($91)) + 1|0);
   $5 = $92;
   $93 = $5;
   $4 = $93;
   $94 = $4;
   $95 = $94;
  }
  $0 = $95;
  $96 = $0;
  $97 = $pDType;
  __THREW__ = 0;
  $98 = (invoke_iiii($73|0,($70|0),($96|0),($97|0))|0);
  $99 = __THREW__; __THREW__ = 0;
  $100 = $99&1;
  if ($100) {
   label = 14;
   break;
  }
  $tempDNode = $98;
  $101 = $tempSNode;
  $102 = $tempDNode;
  __THREW__ = 0;
  invoke_vii(590,($101|0),($102|0));
  $103 = __THREW__; __THREW__ = 0;
  $104 = $103&1;
  if ($104) {
   label = 14;
   break;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($name);
  $105 = $i;
  $106 = (($105) + 1)|0;
  $i = $106;
 }
 if ((label|0) == 14) {
  $107 = ___cxa_find_matching_catch()|0;
  $108 = tempRet0;
  $22 = $107;
  $23 = $108;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($name);
  $109 = $22;
  $110 = $23;
  ___resumeException($109|0);
  // unreachable;
 }
 else if ((label|0) == 15) {
  STACKTOP = sp;return;
 }
}
function __ZN4NGIS4Data11CUdxDatasetD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4NGIS4Data11CUdxDatasetD2Ev($1,4296);
 $2 = ((($1)) + 12|0);
 __ZN4NGIS4Data8CUdxNodeD2Ev($2);
 $3 = 4312;
 __ZN4NGIS4Data11IUdxDatasetD2Ev($1,$3);
 $4 = ((($1)) + 4|0);
 __ZN4NGIS4Data8IUdxNodeD2Ev($4);
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data11CUdxDatasetD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4NGIS4Data11CUdxDatasetD1Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data11CUdxDataset7getNameEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + -60|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + ($4)|0);
 $6 = (__ZN4NGIS4Data8CUdxNode7getNameEv($5)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZN4NGIS4Data11CUdxDataset7setNameEPKc($this,$pName) {
 $this = $this|0;
 $pName = $pName|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $pName;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + -60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($2) + ($5)|0);
 $7 = $1;
 __ZN4NGIS4Data8CUdxNode7setNameEPKc($6,$7);
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data11CUdxDataset9getKernelEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + -60|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + ($4)|0);
 $6 = (__ZN4NGIS4Data8CUdxNode9getKernelEv($5)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZN4NGIS4Data11CUdxDataset17getChildNodeCountEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + -60|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + ($4)|0);
 $6 = (__ZN4NGIS4Data8CUdxNode17getChildNodeCountEv($5)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZN4NGIS4Data11CUdxDataset12getChildNodeEi($this,$idx) {
 $this = $this|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $idx;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + -60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($2) + ($5)|0);
 $7 = $1;
 $8 = (__ZN4NGIS4Data8CUdxNode12getChildNodeEi($6,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function __ZN4NGIS4Data11CUdxDataset12addChildNodeEPKcNS0_11EKernelTypeE($this,$pName,$pType) {
 $this = $this|0;
 $pName = $pName|0;
 $pType = $pType|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $pName;
 $2 = $pType;
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + -60|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($3) + ($6)|0);
 $8 = $1;
 $9 = $2;
 $10 = (__ZN4NGIS4Data8CUdxNode12addChildNodeEPKcNS0_11EKernelTypeE($7,$8,$9)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZN4NGIS4Data11CUdxDataset15removeChildNodeEPNS0_8IUdxNodeE($this,$pNode) {
 $this = $this|0;
 $pNode = $pNode|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $pNode;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + -60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($2) + ($5)|0);
 $7 = $1;
 $8 = (__ZN4NGIS4Data8CUdxNode15removeChildNodeEPNS0_8IUdxNodeE($6,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function __ZN4NGIS4Data11CUdxDataset15removeChildNodeEi($this,$idx) {
 $this = $this|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $idx;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + -60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($2) + ($5)|0);
 $7 = $1;
 $8 = (__ZN4NGIS4Data8CUdxNode15removeChildNodeEi($6,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function __ZN4NGIS4Data11CUdxDataset14validateSchemaEPNS0_6Schema14IUdxNodeSchemaE($this,$pSchema) {
 $this = $this|0;
 $pSchema = $pSchema|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $pSchema;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + -60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($2) + ($5)|0);
 $7 = $1;
 $8 = (__ZN4NGIS4Data8CUdxNode14validateSchemaEPNS0_6Schema14IUdxNodeSchemaE($6,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function __ZTv0_n12_N4NGIS4Data11CUdxDatasetD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + ($4)|0);
 __ZN4NGIS4Data11CUdxDatasetD1Ev($5);
 STACKTOP = sp;return;
}
function __ZTv0_n12_N4NGIS4Data11CUdxDatasetD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + ($4)|0);
 __ZN4NGIS4Data11CUdxDatasetD0Ev($5);
 STACKTOP = sp;return;
}
function __ZTv0_n28_N4NGIS4Data11CUdxDataset7getNameEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + -28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + ($4)|0);
 $6 = (__ZN4NGIS4Data11CUdxDataset7getNameEv($5)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZTv0_n32_N4NGIS4Data11CUdxDataset7setNameEPKc($this,$pName) {
 $this = $this|0;
 $pName = $pName|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $pName;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + -32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($2) + ($5)|0);
 $7 = $1;
 __ZN4NGIS4Data11CUdxDataset7setNameEPKc($6,$7);
 STACKTOP = sp;return;
}
function __ZTv0_n36_N4NGIS4Data11CUdxDataset9getKernelEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + -36|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + ($4)|0);
 $6 = (__ZN4NGIS4Data11CUdxDataset9getKernelEv($5)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZTv0_n40_N4NGIS4Data11CUdxDataset17getChildNodeCountEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + -40|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + ($4)|0);
 $6 = (__ZN4NGIS4Data11CUdxDataset17getChildNodeCountEv($5)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZTv0_n44_N4NGIS4Data11CUdxDataset12getChildNodeEi($this,$idx) {
 $this = $this|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $idx;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + -44|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($2) + ($5)|0);
 $7 = $1;
 $8 = (__ZN4NGIS4Data11CUdxDataset12getChildNodeEi($6,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function __ZTv0_n48_N4NGIS4Data11CUdxDataset12addChildNodeEPKcNS0_11EKernelTypeE($this,$pName,$pType) {
 $this = $this|0;
 $pName = $pName|0;
 $pType = $pType|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $pName;
 $2 = $pType;
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + -48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($3) + ($6)|0);
 $8 = $1;
 $9 = $2;
 $10 = (__ZN4NGIS4Data11CUdxDataset12addChildNodeEPKcNS0_11EKernelTypeE($7,$8,$9)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZTv0_n52_N4NGIS4Data11CUdxDataset15removeChildNodeEPNS0_8IUdxNodeE($this,$pNode) {
 $this = $this|0;
 $pNode = $pNode|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $pNode;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + -52|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($2) + ($5)|0);
 $7 = $1;
 $8 = (__ZN4NGIS4Data11CUdxDataset15removeChildNodeEPNS0_8IUdxNodeE($6,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function __ZTv0_n56_N4NGIS4Data11CUdxDataset15removeChildNodeEi($this,$idx) {
 $this = $this|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $idx;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + -56|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($2) + ($5)|0);
 $7 = $1;
 $8 = (__ZN4NGIS4Data11CUdxDataset15removeChildNodeEi($6,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function __ZTv0_n60_N4NGIS4Data11CUdxDataset14validateSchemaEPNS0_6Schema14IUdxNodeSchemaE($this,$pSchema) {
 $this = $this|0;
 $pSchema = $pSchema|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $pSchema;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + -60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($2) + ($5)|0);
 $7 = $1;
 $8 = (__ZN4NGIS4Data11CUdxDataset14validateSchemaEPNS0_6Schema14IUdxNodeSchemaE($6,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function __ZN4NGIS4Data11IUdxDatasetD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4NGIS4Data11IUdxDatasetD2Ev($1,4548);
 $2 = ((($1)) + 4|0);
 __ZN4NGIS4Data8IUdxNodeD2Ev($2);
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data11IUdxDatasetD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4NGIS4Data11IUdxDatasetD1Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZTv0_n12_N4NGIS4Data11IUdxDatasetD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + ($4)|0);
 __ZN4NGIS4Data11IUdxDatasetD1Ev($5);
 STACKTOP = sp;return;
}
function __ZTv0_n12_N4NGIS4Data11IUdxDatasetD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + ($4)|0);
 __ZN4NGIS4Data11IUdxDatasetD0Ev($5);
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data11CUdxDatasetD2Ev($this,$vtt) {
 $this = $this|0;
 $vtt = $vtt|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $vtt;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 77|0;
 $11 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 357913941;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNSt3__114__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEEC2EjjS8_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 36|0;
 $20 = sp + 20|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = ((($26)) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = ((($34)) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = ((($42)) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = ($51*12)|0;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + (($57*12)|0)|0);
 $59 = ((($26)) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = ((($26)) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + (($62*12)|0)|0);
 $11 = $26;
 $64 = $11;
 $65 = ((($64)) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__a$i$i$i$i$i$i = 0, $__i$i$i$i$i$i$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 212|0;
 $__t$i1 = sp + 188|0;
 $__t$i = sp + 140|0;
 $38 = sp;
 $43 = sp + 236|0;
 $53 = $this;
 $54 = $__v;
 $55 = $53;
 __ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE17__annotate_deleteEv($55);
 $52 = $55;
 $56 = $52;
 $57 = ((($56)) + 8|0);
 $51 = $57;
 $58 = $51;
 $50 = $58;
 $59 = $50;
 $60 = HEAP32[$55>>2]|0;
 $61 = ((($55)) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $54;
 $64 = ((($63)) + 4|0);
 $45 = $59;
 $46 = $60;
 $47 = $62;
 $48 = $64;
 while(1) {
  $65 = $47;
  $66 = $46;
  $67 = ($65|0)!=($66|0);
  if (!($67)) {
   break;
  }
  $68 = $45;
  $69 = $48;
  $70 = HEAP32[$69>>2]|0;
  $71 = ((($70)) + -12|0);
  $44 = $71;
  $72 = $44;
  $73 = $47;
  $74 = ((($73)) + -12|0);
  $47 = $74;
  $23 = $74;
  $75 = $23;
  $22 = $75;
  $76 = $22;
  $40 = $68;
  $41 = $72;
  $42 = $76;
  $77 = $40;
  $78 = $41;
  $79 = $42;
  $39 = $79;
  $80 = $39;
  ;HEAP8[$38>>0]=HEAP8[$43>>0]|0;
  $35 = $77;
  $36 = $78;
  $37 = $80;
  $81 = $35;
  $82 = $36;
  $83 = $37;
  $34 = $83;
  $84 = $34;
  $31 = $81;
  $32 = $82;
  $33 = $84;
  $85 = $32;
  $86 = $33;
  $30 = $86;
  $87 = $30;
  $28 = $85;
  $29 = $87;
  $88 = $28;
  $89 = $29;
  $27 = $89;
  $90 = $27;
  ;HEAP32[$88>>2]=HEAP32[$90>>2]|0;HEAP32[$88+4>>2]=HEAP32[$90+4>>2]|0;HEAP32[$88+8>>2]=HEAP32[$90+8>>2]|0;
  $91 = $29;
  $26 = $91;
  $92 = $26;
  $25 = $92;
  $93 = $25;
  $24 = $93;
  $94 = $24;
  $__a$i$i$i$i$i$i = $94;
  $__i$i$i$i$i$i$i = 0;
  while(1) {
   $95 = $__i$i$i$i$i$i$i;
   $96 = ($95>>>0)<(3);
   if (!($96)) {
    break;
   }
   $97 = $__i$i$i$i$i$i$i;
   $98 = $__a$i$i$i$i$i$i;
   $99 = (($98) + ($97<<2)|0);
   HEAP32[$99>>2] = 0;
   $100 = $__i$i$i$i$i$i$i;
   $101 = (($100) + 1)|0;
   $__i$i$i$i$i$i$i = $101;
  }
  $102 = $48;
  $103 = HEAP32[$102>>2]|0;
  $104 = ((($103)) + -12|0);
  HEAP32[$102>>2] = $104;
 }
 $105 = $54;
 $106 = ((($105)) + 4|0);
 $3 = $55;
 $4 = $106;
 $107 = $3;
 $2 = $107;
 $108 = $2;
 $109 = HEAP32[$108>>2]|0;
 HEAP32[$__t$i2>>2] = $109;
 $110 = $4;
 $0 = $110;
 $111 = $0;
 $112 = HEAP32[$111>>2]|0;
 $113 = $3;
 HEAP32[$113>>2] = $112;
 $1 = $__t$i2;
 $114 = $1;
 $115 = HEAP32[$114>>2]|0;
 $116 = $4;
 HEAP32[$116>>2] = $115;
 $117 = ((($55)) + 4|0);
 $118 = $54;
 $119 = ((($118)) + 8|0);
 $8 = $117;
 $9 = $119;
 $120 = $8;
 $7 = $120;
 $121 = $7;
 $122 = HEAP32[$121>>2]|0;
 HEAP32[$__t$i1>>2] = $122;
 $123 = $9;
 $5 = $123;
 $124 = $5;
 $125 = HEAP32[$124>>2]|0;
 $126 = $8;
 HEAP32[$126>>2] = $125;
 $6 = $__t$i1;
 $127 = $6;
 $128 = HEAP32[$127>>2]|0;
 $129 = $9;
 HEAP32[$129>>2] = $128;
 $12 = $55;
 $130 = $12;
 $131 = ((($130)) + 8|0);
 $11 = $131;
 $132 = $11;
 $10 = $132;
 $133 = $10;
 $134 = $54;
 $15 = $134;
 $135 = $15;
 $136 = ((($135)) + 12|0);
 $14 = $136;
 $137 = $14;
 $13 = $137;
 $138 = $13;
 $19 = $133;
 $20 = $138;
 $139 = $19;
 $18 = $139;
 $140 = $18;
 $141 = HEAP32[$140>>2]|0;
 HEAP32[$__t$i>>2] = $141;
 $142 = $20;
 $16 = $142;
 $143 = $16;
 $144 = HEAP32[$143>>2]|0;
 $145 = $19;
 HEAP32[$145>>2] = $144;
 $17 = $__t$i;
 $146 = $17;
 $147 = HEAP32[$146>>2]|0;
 $148 = $20;
 HEAP32[$148>>2] = $147;
 $149 = $54;
 $150 = ((($149)) + 4|0);
 $151 = HEAP32[$150>>2]|0;
 $152 = $54;
 HEAP32[$152>>2] = $151;
 $21 = $55;
 $153 = $21;
 $154 = ((($153)) + 4|0);
 $155 = HEAP32[$154>>2]|0;
 $156 = HEAP32[$153>>2]|0;
 $157 = $155;
 $158 = $156;
 $159 = (($157) - ($158))|0;
 $160 = (($159|0) / 12)&-1;
 __ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE14__annotate_newEj($55,$160);
 $49 = $55;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp + 8|0;
 $21 = sp + 133|0;
 $28 = sp;
 $31 = sp + 132|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = ((($40)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = ((($45)) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($40)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + -12|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
  $59 = $15;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($59);
 }
 $60 = HEAP32[$34>>2]|0;
 $61 = ($60|0)!=(0|0);
 if (!($61)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $62 = $13;
 $63 = ((($62)) + 12|0);
 $12 = $63;
 $64 = $12;
 $11 = $64;
 $65 = $11;
 $66 = ((($65)) + 4|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = HEAP32[$34>>2]|0;
 $10 = $34;
 $69 = $10;
 $9 = $69;
 $70 = $9;
 $71 = ((($70)) + 12|0);
 $8 = $71;
 $72 = $8;
 $7 = $72;
 $73 = $7;
 $74 = HEAP32[$73>>2]|0;
 $75 = HEAP32[$69>>2]|0;
 $76 = $74;
 $77 = $75;
 $78 = (($76) - ($77))|0;
 $79 = (($78|0) / 12)&-1;
 $4 = $67;
 $5 = $68;
 $6 = $79;
 $80 = $4;
 $81 = $5;
 $82 = $6;
 $1 = $80;
 $2 = $81;
 $3 = $82;
 $83 = $2;
 $0 = $83;
 $84 = $0;
 __ZdlPv($84);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 12)&-1;
 $39 = (($26) + (($38*12)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 12)&-1;
 $51 = (($42) + (($50*12)|0)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 12)&-1;
 $67 = (($54) + (($66*12)|0)|0);
 __ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE31__annotate_contiguous_containerEPKvSA_SA_SA_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 12)&-1;
 $39 = (($26) + (($38*12)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 12)&-1;
 $55 = (($42) + (($54*12)|0)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + (($59*12)|0)|0);
 __ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE31__annotate_contiguous_containerEPKvSA_SA_SA_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE31__annotate_contiguous_containerEPKvSA_SA_SA_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -12|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
  $52 = $15;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($52);
 }
 $13 = $30;
 $53 = $13;
 $54 = ((($53)) + 8|0);
 $12 = $54;
 $55 = $12;
 $11 = $55;
 $56 = $11;
 $57 = HEAP32[$30>>2]|0;
 $3 = $30;
 $58 = $3;
 $2 = $58;
 $59 = $2;
 $60 = ((($59)) + 8|0);
 $1 = $60;
 $61 = $1;
 $0 = $61;
 $62 = $0;
 $63 = HEAP32[$62>>2]|0;
 $64 = HEAP32[$58>>2]|0;
 $65 = $63;
 $66 = $64;
 $67 = (($65) - ($66))|0;
 $68 = (($67|0) / 12)&-1;
 $8 = $56;
 $9 = $57;
 $10 = $68;
 $69 = $8;
 $70 = $9;
 $71 = $10;
 $5 = $69;
 $6 = $70;
 $7 = $71;
 $72 = $6;
 $4 = $72;
 $73 = $4;
 __ZdlPv($73);
 STACKTOP = sp;return;
}
function __ZNK8tinyxml210XMLElement20QueryDoubleAttributeEPKcPd($this,$name,$value) {
 $this = $this|0;
 $name = $name|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $name;
 $3 = $value;
 $4 = $1;
 $5 = $2;
 $6 = (__ZNK8tinyxml210XMLElement13FindAttributeEPKc($4,$5)|0);
 $a = $6;
 $7 = $a;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $a;
  $10 = $3;
  $11 = (__ZNK8tinyxml212XMLAttribute16QueryDoubleValueEPd($9,$10)|0);
  $0 = $11;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 } else {
  $0 = 1;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function __ZNK8tinyxml210XMLElement17QueryIntAttributeEPKcPi($this,$name,$value) {
 $this = $this|0;
 $name = $name|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $name;
 $3 = $value;
 $4 = $1;
 $5 = $2;
 $6 = (__ZNK8tinyxml210XMLElement13FindAttributeEPKc($4,$5)|0);
 $a = $6;
 $7 = $a;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $a;
  $10 = $3;
  $11 = (__ZNK8tinyxml212XMLAttribute13QueryIntValueEPi($9,$10)|0);
  $0 = $11;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 } else {
  $0 = 1;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function __ZN4NGIS4Data10CUdxKernelC2ENS0_11EKernelTypeEPKNS0_8CUdxNodeE($this,$pType,$pNode) {
 $this = $this|0;
 $pType = $pType|0;
 $pNode = $pNode|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $pType;
 $2 = $pNode;
 $3 = $0;
 __ZN4NGIS4Data10IUdxKernelC2Ev($3);
 $4 = 4752;
 HEAP32[$3>>2] = $4;
 $5 = $1;
 $6 = ((($3)) + 12|0);
 HEAP32[$6>>2] = $5;
 $7 = $2;
 $8 = ((($3)) + 8|0);
 HEAP32[$8>>2] = $7;
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data10CUdxKernelD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4NGIS4Data10IUdxKernelD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data10CUdxKernelD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4NGIS4Data10CUdxKernelD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data10CUdxKernel7getNodeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN4NGIS4Data10CUdxKernel7getTypeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN4NGIS4Data18CUdxKernelIntValue13setTypedValueEi($this,$pValue) {
 $this = $this|0;
 $pValue = $pValue|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 8|0;
 $1 = $this;
 $2 = $pValue;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)==($6|0);
 if ($7) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
 } else {
  $8 = $2;
  $9 = ((($3)) + 16|0);
  HEAP32[$9>>2] = $8;
  $$expand_i1_val2 = 1;
  HEAP8[$0>>0] = $$expand_i1_val2;
 }
 $$pre_trunc = HEAP8[$0>>0]|0;
 $10 = $$pre_trunc&1;
 STACKTOP = sp;return ($10|0);
}
function __ZN4NGIS4Data18CUdxKernelIntValue13getTypedValueEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN4NGIS4Data19CUdxKernelRealValue13setTypedValueEd($this,$pValue) {
 $this = $this|0;
 $pValue = +$pValue;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 12|0;
 $1 = $this;
 $2 = $pValue;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 16|0);
 $6 = +HEAPF64[$5>>3];
 $7 = $4 == $6;
 if ($7) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
 } else {
  $8 = $2;
  $9 = ((($3)) + 16|0);
  HEAPF64[$9>>3] = $8;
  $$expand_i1_val2 = 1;
  HEAP8[$0>>0] = $$expand_i1_val2;
 }
 $$pre_trunc = HEAP8[$0>>0]|0;
 $10 = $$pre_trunc&1;
 STACKTOP = sp;return ($10|0);
}
function __ZN4NGIS4Data19CUdxKernelRealValue13getTypedValueEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 16|0);
 $3 = +HEAPF64[$2>>3];
 STACKTOP = sp;return (+$3);
}
function __ZN4NGIS4Data21CUdxKernelStringValue13setTypedValueENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($this,$pValue) {
 $this = $this|0;
 $pValue = $pValue|0;
 var $$expand_i1_val = 0, $$expand_i1_val11 = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val9 = 0, $$pre_trunc = 0, $$pre_trunc13 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__lhs_sz$i = 0, $__lp$i = 0, $__rp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $51 = sp + 229|0;
 $54 = sp + 228|0;
 $55 = $this;
 $56 = $55;
 $57 = ((($56)) + 16|0);
 $52 = $pValue;
 $53 = $57;
 $58 = $52;
 $50 = $58;
 $59 = $50;
 $49 = $59;
 $60 = $49;
 $48 = $60;
 $61 = $48;
 $47 = $61;
 $62 = $47;
 $63 = HEAP8[$62>>0]|0;
 $64 = $63&255;
 $65 = $64 & 1;
 $66 = ($65|0)!=(0);
 if ($66) {
  $43 = $59;
  $67 = $43;
  $42 = $67;
  $68 = $42;
  $41 = $68;
  $69 = $41;
  $70 = ((($69)) + 4|0);
  $71 = HEAP32[$70>>2]|0;
  $78 = $71;
 } else {
  $46 = $59;
  $72 = $46;
  $45 = $72;
  $73 = $45;
  $44 = $73;
  $74 = $44;
  $75 = HEAP8[$74>>0]|0;
  $76 = $75&255;
  $77 = $76 >> 1;
  $78 = $77;
 }
 $__lhs_sz$i = $78;
 $79 = $__lhs_sz$i;
 $80 = $53;
 $40 = $80;
 $81 = $40;
 $39 = $81;
 $82 = $39;
 $38 = $82;
 $83 = $38;
 $37 = $83;
 $84 = $37;
 $85 = HEAP8[$84>>0]|0;
 $86 = $85&255;
 $87 = $86 & 1;
 $88 = ($87|0)!=(0);
 if ($88) {
  $33 = $81;
  $89 = $33;
  $32 = $89;
  $90 = $32;
  $31 = $90;
  $91 = $31;
  $92 = ((($91)) + 4|0);
  $93 = HEAP32[$92>>2]|0;
  $101 = $93;
 } else {
  $36 = $81;
  $94 = $36;
  $35 = $94;
  $95 = $35;
  $34 = $95;
  $96 = $34;
  $97 = HEAP8[$96>>0]|0;
  $98 = $97&255;
  $99 = $98 >> 1;
  $101 = $99;
 }
 $100 = ($79|0)!=($101|0);
 do {
  if ($100) {
   $$expand_i1_val = 0;
   HEAP8[$51>>0] = $$expand_i1_val;
  } else {
   $102 = $52;
   $30 = $102;
   $103 = $30;
   $29 = $103;
   $104 = $29;
   $28 = $104;
   $105 = $28;
   $27 = $105;
   $106 = $27;
   $26 = $106;
   $107 = $26;
   $108 = HEAP8[$107>>0]|0;
   $109 = $108&255;
   $110 = $109 & 1;
   $111 = ($110|0)!=(0);
   if ($111) {
    $20 = $104;
    $112 = $20;
    $19 = $112;
    $113 = $19;
    $18 = $113;
    $114 = $18;
    $115 = ((($114)) + 8|0);
    $116 = HEAP32[$115>>2]|0;
    $123 = $116;
   } else {
    $25 = $104;
    $117 = $25;
    $24 = $117;
    $118 = $24;
    $23 = $118;
    $119 = $23;
    $120 = ((($119)) + 1|0);
    $22 = $120;
    $121 = $22;
    $21 = $121;
    $122 = $21;
    $123 = $122;
   }
   $17 = $123;
   $124 = $17;
   $__lp$i = $124;
   $125 = $53;
   $13 = $125;
   $126 = $13;
   $12 = $126;
   $127 = $12;
   $11 = $127;
   $128 = $11;
   $10 = $128;
   $129 = $10;
   $9 = $129;
   $130 = $9;
   $131 = HEAP8[$130>>0]|0;
   $132 = $131&255;
   $133 = $132 & 1;
   $134 = ($133|0)!=(0);
   if ($134) {
    $3 = $127;
    $135 = $3;
    $2 = $135;
    $136 = $2;
    $1 = $136;
    $137 = $1;
    $138 = ((($137)) + 8|0);
    $139 = HEAP32[$138>>2]|0;
    $146 = $139;
   } else {
    $8 = $127;
    $140 = $8;
    $7 = $140;
    $141 = $7;
    $6 = $141;
    $142 = $6;
    $143 = ((($142)) + 1|0);
    $5 = $143;
    $144 = $5;
    $4 = $144;
    $145 = $4;
    $146 = $145;
   }
   $0 = $146;
   $147 = $0;
   $__rp$i = $147;
   $148 = $52;
   $16 = $148;
   $149 = $16;
   $15 = $149;
   $150 = $15;
   $14 = $150;
   $151 = $14;
   $152 = HEAP8[$151>>0]|0;
   $153 = $152&255;
   $154 = $153 & 1;
   $155 = ($154|0)!=(0);
   if ($155) {
    $156 = $__lp$i;
    $157 = $__rp$i;
    $158 = $__lhs_sz$i;
    __THREW__ = 0;
    $159 = (invoke_iiii(386,($156|0),($157|0),($158|0))|0);
    $160 = __THREW__; __THREW__ = 0;
    $161 = $160&1;
    if ($161) {
     $178 = ___cxa_find_matching_catch(0|0)|0;
     $179 = tempRet0;
     ___clang_call_terminate($178);
     // unreachable;
    } else {
     $162 = ($159|0)==(0);
     $$expand_i1_val2 = $162&1;
     HEAP8[$51>>0] = $$expand_i1_val2;
     break;
    }
   }
   while(1) {
    $163 = $__lhs_sz$i;
    $164 = ($163|0)!=(0);
    if (!($164)) {
     label = 22;
     break;
    }
    $165 = $__lp$i;
    $166 = HEAP8[$165>>0]|0;
    $167 = $166 << 24 >> 24;
    $168 = $__rp$i;
    $169 = HEAP8[$168>>0]|0;
    $170 = $169 << 24 >> 24;
    $171 = ($167|0)!=($170|0);
    if ($171) {
     label = 20;
     break;
    }
    $172 = $__lhs_sz$i;
    $173 = (($172) + -1)|0;
    $__lhs_sz$i = $173;
    $174 = $__lp$i;
    $175 = ((($174)) + 1|0);
    $__lp$i = $175;
    $176 = $__rp$i;
    $177 = ((($176)) + 1|0);
    $__rp$i = $177;
   }
   if ((label|0) == 20) {
    $$expand_i1_val4 = 0;
    HEAP8[$51>>0] = $$expand_i1_val4;
    break;
   }
   else if ((label|0) == 22) {
    $$expand_i1_val6 = 1;
    HEAP8[$51>>0] = $$expand_i1_val6;
    break;
   }
  }
 } while(0);
 $$pre_trunc = HEAP8[$51>>0]|0;
 $180 = $$pre_trunc&1;
 if ($180) {
  $$expand_i1_val9 = 0;
  HEAP8[$54>>0] = $$expand_i1_val9;
  $$pre_trunc13 = HEAP8[$54>>0]|0;
  $182 = $$pre_trunc13&1;
  STACKTOP = sp;return ($182|0);
 } else {
  $181 = ((($56)) + 16|0);
  (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($181,$pValue)|0);
  $$expand_i1_val11 = 1;
  HEAP8[$54>>0] = $$expand_i1_val11;
  $$pre_trunc13 = HEAP8[$54>>0]|0;
  $182 = $$pre_trunc13&1;
  STACKTOP = sp;return ($182|0);
 }
 return (0)|0;
}
function __ZN4NGIS4Data21CUdxKernelStringValue13getTypedValueEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 16|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$result,$2);
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data23CUdxKernelVector2dValue13setTypedValueEdd($this,$pX,$pY) {
 $this = $this|0;
 $pX = +$pX;
 $pY = +$pY;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $pX;
 $2 = $pY;
 $3 = $0;
 $4 = $1;
 $5 = ((($3)) + 16|0);
 HEAPF64[$5>>3] = $4;
 $6 = $2;
 $7 = ((($3)) + 16|0);
 $8 = ((($7)) + 8|0);
 HEAPF64[$8>>3] = $6;
 STACKTOP = sp;return 1;
}
function __ZN4NGIS4Data23CUdxKernelVector2dValue13getTypedValueEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 16|0);
 ;HEAP32[$agg$result>>2]=HEAP32[$2>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$agg$result+12>>2]=HEAP32[$2+12>>2]|0;
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data23CUdxKernelVector2dValue13getTypedValueERdS2_($this,$pX,$pY) {
 $this = $this|0;
 $pX = $pX|0;
 $pY = $pY|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $pX;
 $2 = $pY;
 $3 = $0;
 $4 = ((($3)) + 16|0);
 $5 = +HEAPF64[$4>>3];
 $6 = $1;
 HEAPF64[$6>>3] = $5;
 $7 = ((($3)) + 16|0);
 $8 = ((($7)) + 8|0);
 $9 = +HEAPF64[$8>>3];
 $10 = $2;
 HEAPF64[$10>>3] = $9;
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data23CUdxKernelVector3dValue13setTypedValueEddd($this,$pX,$pY,$pZ) {
 $this = $this|0;
 $pX = +$pX;
 $pY = +$pY;
 $pZ = +$pZ;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $pX;
 $2 = $pY;
 $3 = $pZ;
 $4 = $0;
 $5 = $1;
 $6 = ((($4)) + 16|0);
 HEAPF64[$6>>3] = $5;
 $7 = $2;
 $8 = ((($4)) + 16|0);
 $9 = ((($8)) + 8|0);
 HEAPF64[$9>>3] = $7;
 $10 = $3;
 $11 = ((($4)) + 16|0);
 $12 = ((($11)) + 16|0);
 HEAPF64[$12>>3] = $10;
 STACKTOP = sp;return 1;
}
function __ZN4NGIS4Data23CUdxKernelVector3dValue13getTypedValueEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 16|0);
 ;HEAP32[$agg$result>>2]=HEAP32[$2>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$agg$result+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[$agg$result+16>>2]=HEAP32[$2+16>>2]|0;HEAP32[$agg$result+20>>2]=HEAP32[$2+20>>2]|0;
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data23CUdxKernelVector3dValue13getTypedValueERdS2_S2_($this,$pX,$pY,$pZ) {
 $this = $this|0;
 $pX = $pX|0;
 $pY = $pY|0;
 $pZ = $pZ|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $pX;
 $2 = $pY;
 $3 = $pZ;
 $4 = $0;
 $5 = ((($4)) + 16|0);
 $6 = +HEAPF64[$5>>3];
 $7 = $1;
 HEAPF64[$7>>3] = $6;
 $8 = ((($4)) + 16|0);
 $9 = ((($8)) + 8|0);
 $10 = +HEAPF64[$9>>3];
 $11 = $2;
 HEAPF64[$11>>3] = $10;
 $12 = ((($4)) + 16|0);
 $13 = ((($12)) + 16|0);
 $14 = +HEAPF64[$13>>3];
 $15 = $3;
 HEAPF64[$15>>3] = $14;
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data23CUdxKernelVector4dValue13setTypedValueEdddd($this,$pX,$pY,$pZ,$pM) {
 $this = $this|0;
 $pX = +$pX;
 $pY = +$pY;
 $pZ = +$pZ;
 $pM = +$pM;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $pX;
 $2 = $pY;
 $3 = $pZ;
 $4 = $pM;
 $5 = $0;
 $6 = $1;
 $7 = ((($5)) + 16|0);
 HEAPF64[$7>>3] = $6;
 $8 = $2;
 $9 = ((($5)) + 16|0);
 $10 = ((($9)) + 8|0);
 HEAPF64[$10>>3] = $8;
 $11 = $3;
 $12 = ((($5)) + 16|0);
 $13 = ((($12)) + 16|0);
 HEAPF64[$13>>3] = $11;
 $14 = $4;
 $15 = ((($5)) + 16|0);
 $16 = ((($15)) + 24|0);
 HEAPF64[$16>>3] = $14;
 STACKTOP = sp;return 1;
}
function __ZN4NGIS4Data23CUdxKernelVector4dValue13getTypedValueEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 16|0);
 ;HEAP32[$agg$result>>2]=HEAP32[$2>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$agg$result+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[$agg$result+16>>2]=HEAP32[$2+16>>2]|0;HEAP32[$agg$result+20>>2]=HEAP32[$2+20>>2]|0;HEAP32[$agg$result+24>>2]=HEAP32[$2+24>>2]|0;HEAP32[$agg$result+28>>2]=HEAP32[$2+28>>2]|0;
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data23CUdxKernelVector4dValue13getTypedValueERdS2_S2_S2_($this,$pX,$pY,$pZ,$pM) {
 $this = $this|0;
 $pX = $pX|0;
 $pY = $pY|0;
 $pZ = $pZ|0;
 $pM = $pM|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $pX;
 $2 = $pY;
 $3 = $pZ;
 $4 = $pM;
 $5 = $0;
 $6 = ((($5)) + 16|0);
 $7 = +HEAPF64[$6>>3];
 $8 = $1;
 HEAPF64[$8>>3] = $7;
 $9 = ((($5)) + 16|0);
 $10 = ((($9)) + 8|0);
 $11 = +HEAPF64[$10>>3];
 $12 = $2;
 HEAPF64[$12>>3] = $11;
 $13 = ((($5)) + 16|0);
 $14 = ((($13)) + 16|0);
 $15 = +HEAPF64[$14>>3];
 $16 = $3;
 HEAPF64[$16>>3] = $15;
 $17 = ((($5)) + 16|0);
 $18 = ((($17)) + 24|0);
 $19 = +HEAPF64[$18>>3];
 $20 = $4;
 HEAPF64[$20>>3] = $19;
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data18CUdxKernelIntArray20getTypedValueByIndexEiRi($this,$idx,$val) {
 $this = $this|0;
 $idx = $idx|0;
 $val = $val|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 24|0;
 $4 = $this;
 $5 = $idx;
 $6 = $val;
 $7 = $4;
 $8 = $5;
 $9 = ($8|0)<(0);
 if (!($9)) {
  $10 = $5;
  $11 = ((($7)) + 16|0);
  $2 = $11;
  $12 = $2;
  $13 = ((($12)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[$12>>2]|0;
  $16 = $14;
  $17 = $15;
  $18 = (($16) - ($17))|0;
  $19 = (($18|0) / 4)&-1;
  $20 = ($10>>>0)>=($19>>>0);
  if (!($20)) {
   $21 = ((($7)) + 16|0);
   $22 = $5;
   $0 = $21;
   $1 = $22;
   $23 = $0;
   $24 = $1;
   $25 = HEAP32[$23>>2]|0;
   $26 = (($25) + ($24<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = $6;
   HEAP32[$28>>2] = $27;
   $$expand_i1_val2 = 1;
   HEAP8[$3>>0] = $$expand_i1_val2;
   $$pre_trunc = HEAP8[$3>>0]|0;
   $29 = $$pre_trunc&1;
   STACKTOP = sp;return ($29|0);
  }
 }
 $$expand_i1_val = 0;
 HEAP8[$3>>0] = $$expand_i1_val;
 $$pre_trunc = HEAP8[$3>>0]|0;
 $29 = $$pre_trunc&1;
 STACKTOP = sp;return ($29|0);
}
function __ZN4NGIS4Data18CUdxKernelIntArray13addTypedValueEi($this,$pValue) {
 $this = $this|0;
 $pValue = $pValue|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__annotator$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp;
 $13 = sp + 97|0;
 $__annotator$i = sp + 96|0;
 $24 = sp + 4|0;
 $23 = $this;
 HEAP32[$24>>2] = $pValue;
 $25 = $23;
 $26 = ((($25)) + 16|0);
 $21 = $26;
 $22 = $24;
 $27 = $21;
 $28 = ((($27)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $20 = $27;
 $30 = $20;
 $31 = ((($30)) + 8|0);
 $19 = $31;
 $32 = $19;
 $18 = $32;
 $33 = $18;
 $34 = HEAP32[$33>>2]|0;
 $35 = ($29|0)!=($34|0);
 if ($35) {
  __ZNSt3__16vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($__annotator$i,$27,1);
  $17 = $27;
  $36 = $17;
  $37 = ((($36)) + 8|0);
  $16 = $37;
  $38 = $16;
  $15 = $38;
  $39 = $15;
  $40 = ((($27)) + 4|0);
  $41 = HEAP32[$40>>2]|0;
  $14 = $41;
  $42 = $14;
  $43 = $22;
  $10 = $39;
  $11 = $42;
  $12 = $43;
  $44 = $10;
  $45 = $11;
  $46 = $12;
  $9 = $46;
  $47 = $9;
  ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
  $5 = $44;
  $6 = $45;
  $7 = $47;
  $48 = $5;
  $49 = $6;
  $50 = $7;
  $4 = $50;
  $51 = $4;
  $1 = $48;
  $2 = $49;
  $3 = $51;
  $52 = $2;
  $53 = $3;
  $0 = $53;
  $54 = $0;
  $55 = HEAP32[$54>>2]|0;
  HEAP32[$52>>2] = $55;
  __ZNSt3__16vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
  $56 = ((($27)) + 4|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = ((($57)) + 4|0);
  HEAP32[$56>>2] = $58;
  STACKTOP = sp;return 1;
 } else {
  $59 = $22;
  __ZNSt3__16vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIRKiEEvOT_($27,$59);
  STACKTOP = sp;return 1;
 }
 return (0)|0;
}
function __ZN4NGIS4Data18CUdxKernelIntArray13setTypedValueEii($this,$pValue,$idx) {
 $this = $this|0;
 $pValue = $pValue|0;
 $idx = $idx|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 24|0;
 $4 = $this;
 $5 = $pValue;
 $6 = $idx;
 $7 = $4;
 $8 = $6;
 $9 = ($8|0)<(0);
 if (!($9)) {
  $10 = $6;
  $11 = ((($7)) + 16|0);
  $2 = $11;
  $12 = $2;
  $13 = ((($12)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[$12>>2]|0;
  $16 = $14;
  $17 = $15;
  $18 = (($16) - ($17))|0;
  $19 = (($18|0) / 4)&-1;
  $20 = ($10>>>0)>=($19>>>0);
  if (!($20)) {
   $21 = $5;
   $22 = ((($7)) + 16|0);
   $23 = $6;
   $0 = $22;
   $1 = $23;
   $24 = $0;
   $25 = $1;
   $26 = HEAP32[$24>>2]|0;
   $27 = (($26) + ($25<<2)|0);
   HEAP32[$27>>2] = $21;
   $$expand_i1_val2 = 1;
   HEAP8[$3>>0] = $$expand_i1_val2;
   $$pre_trunc = HEAP8[$3>>0]|0;
   $28 = $$pre_trunc&1;
   STACKTOP = sp;return ($28|0);
  }
 }
 $$expand_i1_val = 0;
 HEAP8[$3>>0] = $$expand_i1_val;
 $$pre_trunc = HEAP8[$3>>0]|0;
 $28 = $$pre_trunc&1;
 STACKTOP = sp;return ($28|0);
}
function __ZN4NGIS4Data19CUdxKernelRealArray20getTypedValueByIndexEiRd($this,$idx,$val) {
 $this = $this|0;
 $idx = $idx|0;
 $val = $val|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 24|0;
 $4 = $this;
 $5 = $idx;
 $6 = $val;
 $7 = $4;
 $8 = $5;
 $9 = ($8|0)<(0);
 if (!($9)) {
  $10 = $5;
  $11 = ((($7)) + 16|0);
  $2 = $11;
  $12 = $2;
  $13 = ((($12)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[$12>>2]|0;
  $16 = $14;
  $17 = $15;
  $18 = (($16) - ($17))|0;
  $19 = (($18|0) / 8)&-1;
  $20 = ($10>>>0)>=($19>>>0);
  if (!($20)) {
   $21 = ((($7)) + 16|0);
   $22 = $5;
   $0 = $21;
   $1 = $22;
   $23 = $0;
   $24 = $1;
   $25 = HEAP32[$23>>2]|0;
   $26 = (($25) + ($24<<3)|0);
   $27 = +HEAPF64[$26>>3];
   $28 = $6;
   HEAPF64[$28>>3] = $27;
   $$expand_i1_val2 = 1;
   HEAP8[$3>>0] = $$expand_i1_val2;
   $$pre_trunc = HEAP8[$3>>0]|0;
   $29 = $$pre_trunc&1;
   STACKTOP = sp;return ($29|0);
  }
 }
 $$expand_i1_val = 0;
 HEAP8[$3>>0] = $$expand_i1_val;
 $$pre_trunc = HEAP8[$3>>0]|0;
 $29 = $$pre_trunc&1;
 STACKTOP = sp;return ($29|0);
}
function __ZN4NGIS4Data19CUdxKernelRealArray13addTypedValueEd($this,$pValue) {
 $this = $this|0;
 $pValue = +$pValue;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__annotator$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp + 8|0;
 $13 = sp + 101|0;
 $__annotator$i = sp + 100|0;
 $24 = sp;
 $23 = $this;
 HEAPF64[$24>>3] = $pValue;
 $25 = $23;
 $26 = ((($25)) + 16|0);
 $21 = $26;
 $22 = $24;
 $27 = $21;
 $28 = ((($27)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $20 = $27;
 $30 = $20;
 $31 = ((($30)) + 8|0);
 $19 = $31;
 $32 = $19;
 $18 = $32;
 $33 = $18;
 $34 = HEAP32[$33>>2]|0;
 $35 = ($29|0)!=($34|0);
 if ($35) {
  __ZNSt3__16vectorIdNS_9allocatorIdEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($__annotator$i,$27,1);
  $17 = $27;
  $36 = $17;
  $37 = ((($36)) + 8|0);
  $16 = $37;
  $38 = $16;
  $15 = $38;
  $39 = $15;
  $40 = ((($27)) + 4|0);
  $41 = HEAP32[$40>>2]|0;
  $14 = $41;
  $42 = $14;
  $43 = $22;
  $10 = $39;
  $11 = $42;
  $12 = $43;
  $44 = $10;
  $45 = $11;
  $46 = $12;
  $9 = $46;
  $47 = $9;
  ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
  $5 = $44;
  $6 = $45;
  $7 = $47;
  $48 = $5;
  $49 = $6;
  $50 = $7;
  $4 = $50;
  $51 = $4;
  $1 = $48;
  $2 = $49;
  $3 = $51;
  $52 = $2;
  $53 = $3;
  $0 = $53;
  $54 = $0;
  $55 = +HEAPF64[$54>>3];
  HEAPF64[$52>>3] = $55;
  __ZNSt3__16vectorIdNS_9allocatorIdEEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
  $56 = ((($27)) + 4|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = ((($57)) + 8|0);
  HEAP32[$56>>2] = $58;
  STACKTOP = sp;return 1;
 } else {
  $59 = $22;
  __ZNSt3__16vectorIdNS_9allocatorIdEEE21__push_back_slow_pathIRKdEEvOT_($27,$59);
  STACKTOP = sp;return 1;
 }
 return (0)|0;
}
function __ZN4NGIS4Data19CUdxKernelRealArray13setTypedValueEdi($this,$pValue,$idx) {
 $this = $this|0;
 $pValue = +$pValue;
 $idx = $idx|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 28|0;
 $4 = $this;
 $5 = $pValue;
 $6 = $idx;
 $7 = $4;
 $8 = $6;
 $9 = ($8|0)<(0);
 if (!($9)) {
  $10 = $6;
  $11 = ((($7)) + 16|0);
  $2 = $11;
  $12 = $2;
  $13 = ((($12)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[$12>>2]|0;
  $16 = $14;
  $17 = $15;
  $18 = (($16) - ($17))|0;
  $19 = (($18|0) / 8)&-1;
  $20 = ($10>>>0)>=($19>>>0);
  if (!($20)) {
   $21 = $5;
   $22 = ((($7)) + 16|0);
   $23 = $6;
   $0 = $22;
   $1 = $23;
   $24 = $0;
   $25 = $1;
   $26 = HEAP32[$24>>2]|0;
   $27 = (($26) + ($25<<3)|0);
   HEAPF64[$27>>3] = $21;
   $$expand_i1_val2 = 1;
   HEAP8[$3>>0] = $$expand_i1_val2;
   $$pre_trunc = HEAP8[$3>>0]|0;
   $28 = $$pre_trunc&1;
   STACKTOP = sp;return ($28|0);
  }
 }
 $$expand_i1_val = 0;
 HEAP8[$3>>0] = $$expand_i1_val;
 $$pre_trunc = HEAP8[$3>>0]|0;
 $28 = $$pre_trunc&1;
 STACKTOP = sp;return ($28|0);
}
function __ZN4NGIS4Data21CUdxKernelStringArray20getTypedValueByIndexEiRNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($this,$idx,$val) {
 $this = $this|0;
 $idx = $idx|0;
 $val = $val|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 24|0;
 $4 = $this;
 $5 = $idx;
 $6 = $val;
 $7 = $4;
 $8 = $5;
 $9 = ($8|0)<(0);
 if (!($9)) {
  $10 = $5;
  $11 = ((($7)) + 16|0);
  $2 = $11;
  $12 = $2;
  $13 = ((($12)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[$12>>2]|0;
  $16 = $14;
  $17 = $15;
  $18 = (($16) - ($17))|0;
  $19 = (($18|0) / 12)&-1;
  $20 = ($10>>>0)>=($19>>>0);
  if (!($20)) {
   $21 = $6;
   $22 = ((($7)) + 16|0);
   $23 = $5;
   $0 = $22;
   $1 = $23;
   $24 = $0;
   $25 = $1;
   $26 = HEAP32[$24>>2]|0;
   $27 = (($26) + (($25*12)|0)|0);
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($21,$27)|0);
   $$expand_i1_val2 = 1;
   HEAP8[$3>>0] = $$expand_i1_val2;
   $$pre_trunc = HEAP8[$3>>0]|0;
   $28 = $$pre_trunc&1;
   STACKTOP = sp;return ($28|0);
  }
 }
 $$expand_i1_val = 0;
 HEAP8[$3>>0] = $$expand_i1_val;
 $$pre_trunc = HEAP8[$3>>0]|0;
 $28 = $$pre_trunc&1;
 STACKTOP = sp;return ($28|0);
}
function __ZN4NGIS4Data21CUdxKernelStringArray13addTypedValueENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($this,$pValue) {
 $this = $this|0;
 $pValue = $pValue|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__annotator$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp;
 $13 = sp + 93|0;
 $__annotator$i = sp + 92|0;
 $23 = $this;
 $24 = $23;
 $25 = ((($24)) + 16|0);
 $21 = $25;
 $22 = $pValue;
 $26 = $21;
 $27 = ((($26)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $20 = $26;
 $29 = $20;
 $30 = ((($29)) + 8|0);
 $19 = $30;
 $31 = $19;
 $18 = $31;
 $32 = $18;
 $33 = HEAP32[$32>>2]|0;
 $34 = ($28|0)!=($33|0);
 if ($34) {
  __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__RAII_IncreaseAnnotatorC2ERKS8_j($__annotator$i,$26,1);
  $17 = $26;
  $35 = $17;
  $36 = ((($35)) + 8|0);
  $16 = $36;
  $37 = $16;
  $15 = $37;
  $38 = $15;
  $39 = ((($26)) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  $14 = $40;
  $41 = $14;
  $42 = $22;
  $10 = $38;
  $11 = $41;
  $12 = $42;
  $43 = $10;
  $44 = $11;
  $45 = $12;
  $9 = $45;
  $46 = $9;
  ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
  $5 = $43;
  $6 = $44;
  $7 = $46;
  $47 = $5;
  $48 = $6;
  $49 = $7;
  $4 = $49;
  $50 = $4;
  $1 = $47;
  $2 = $48;
  $3 = $50;
  $51 = $2;
  $52 = $3;
  $0 = $52;
  $53 = $0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($51,$53);
  __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
  $54 = ((($26)) + 4|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ((($55)) + 12|0);
  HEAP32[$54>>2] = $56;
  STACKTOP = sp;return 1;
 } else {
  $57 = $22;
  __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIRKS6_EEvOT_($26,$57);
  STACKTOP = sp;return 1;
 }
 return (0)|0;
}
function __ZN4NGIS4Data21CUdxKernelStringArray13setTypedValueENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEi($this,$pValue,$idx) {
 $this = $this|0;
 $pValue = $pValue|0;
 $idx = $idx|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 20|0;
 $4 = $this;
 $5 = $idx;
 $6 = $4;
 $7 = $5;
 $8 = ($7|0)<(0);
 if (!($8)) {
  $9 = $5;
  $10 = ((($6)) + 16|0);
  $2 = $10;
  $11 = $2;
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$11>>2]|0;
  $15 = $13;
  $16 = $14;
  $17 = (($15) - ($16))|0;
  $18 = (($17|0) / 12)&-1;
  $19 = ($9>>>0)>=($18>>>0);
  if (!($19)) {
   $20 = ((($6)) + 16|0);
   $21 = $5;
   $0 = $20;
   $1 = $21;
   $22 = $0;
   $23 = $1;
   $24 = HEAP32[$22>>2]|0;
   $25 = (($24) + (($23*12)|0)|0);
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($25,$pValue)|0);
   $$expand_i1_val2 = 1;
   HEAP8[$3>>0] = $$expand_i1_val2;
   $$pre_trunc = HEAP8[$3>>0]|0;
   $26 = $$pre_trunc&1;
   STACKTOP = sp;return ($26|0);
  }
 }
 $$expand_i1_val = 0;
 HEAP8[$3>>0] = $$expand_i1_val;
 $$pre_trunc = HEAP8[$3>>0]|0;
 $26 = $$pre_trunc&1;
 STACKTOP = sp;return ($26|0);
}
function __ZN4NGIS4Data23CUdxKernelVector2dArray20getTypedValueByIndexEiRNS0_8Vector2dE($this,$idx,$val) {
 $this = $this|0;
 $idx = $idx|0;
 $val = $val|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 24|0;
 $4 = $this;
 $5 = $idx;
 $6 = $val;
 $7 = $4;
 $8 = $5;
 $9 = ($8|0)<(0);
 if (!($9)) {
  $10 = $5;
  $11 = ((($7)) + 16|0);
  $2 = $11;
  $12 = $2;
  $13 = ((($12)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[$12>>2]|0;
  $16 = $14;
  $17 = $15;
  $18 = (($16) - ($17))|0;
  $19 = (($18|0) / 16)&-1;
  $20 = ($10>>>0)>=($19>>>0);
  if (!($20)) {
   $21 = $6;
   $22 = ((($7)) + 16|0);
   $23 = $5;
   $0 = $22;
   $1 = $23;
   $24 = $0;
   $25 = $1;
   $26 = HEAP32[$24>>2]|0;
   $27 = (($26) + ($25<<4)|0);
   ;HEAP32[$21>>2]=HEAP32[$27>>2]|0;HEAP32[$21+4>>2]=HEAP32[$27+4>>2]|0;HEAP32[$21+8>>2]=HEAP32[$27+8>>2]|0;HEAP32[$21+12>>2]=HEAP32[$27+12>>2]|0;
   $$expand_i1_val2 = 1;
   HEAP8[$3>>0] = $$expand_i1_val2;
   $$pre_trunc = HEAP8[$3>>0]|0;
   $28 = $$pre_trunc&1;
   STACKTOP = sp;return ($28|0);
  }
 }
 $$expand_i1_val = 0;
 HEAP8[$3>>0] = $$expand_i1_val;
 $$pre_trunc = HEAP8[$3>>0]|0;
 $28 = $$pre_trunc&1;
 STACKTOP = sp;return ($28|0);
}
function __ZN4NGIS4Data23CUdxKernelVector2dArray20getTypedValueByIndexEiRdS2_($this,$idx,$pX,$pY) {
 $this = $this|0;
 $idx = $idx|0;
 $pX = $pX|0;
 $pY = $pY|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 44|0;
 $val = sp;
 $4 = $this;
 $5 = $idx;
 $6 = $pX;
 $7 = $pY;
 $8 = $4;
 $9 = $5;
 $10 = ($9|0)<(0);
 if (!($10)) {
  $11 = $5;
  $12 = ((($8)) + 16|0);
  $2 = $12;
  $13 = $2;
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = HEAP32[$13>>2]|0;
  $17 = $15;
  $18 = $16;
  $19 = (($17) - ($18))|0;
  $20 = (($19|0) / 16)&-1;
  $21 = ($11>>>0)>=($20>>>0);
  if (!($21)) {
   $22 = ((($8)) + 16|0);
   $23 = $5;
   $0 = $22;
   $1 = $23;
   $24 = $0;
   $25 = $1;
   $26 = HEAP32[$24>>2]|0;
   $27 = (($26) + ($25<<4)|0);
   ;HEAP32[$val>>2]=HEAP32[$27>>2]|0;HEAP32[$val+4>>2]=HEAP32[$27+4>>2]|0;HEAP32[$val+8>>2]=HEAP32[$27+8>>2]|0;HEAP32[$val+12>>2]=HEAP32[$27+12>>2]|0;
   $28 = +HEAPF64[$val>>3];
   $29 = $6;
   HEAPF64[$29>>3] = $28;
   $30 = ((($val)) + 8|0);
   $31 = +HEAPF64[$30>>3];
   $32 = $7;
   HEAPF64[$32>>3] = $31;
   $$expand_i1_val2 = 1;
   HEAP8[$3>>0] = $$expand_i1_val2;
   $$pre_trunc = HEAP8[$3>>0]|0;
   $33 = $$pre_trunc&1;
   STACKTOP = sp;return ($33|0);
  }
 }
 $$expand_i1_val = 0;
 HEAP8[$3>>0] = $$expand_i1_val;
 $$pre_trunc = HEAP8[$3>>0]|0;
 $33 = $$pre_trunc&1;
 STACKTOP = sp;return ($33|0);
}
function __ZN4NGIS4Data23CUdxKernelVector2dArray13addTypedValueEdd($this,$pX,$pY) {
 $this = $this|0;
 $pX = +$pX;
 $pY = +$pY;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__annotator$i = 0, $pValue = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp + 32|0;
 $13 = sp + 125|0;
 $__annotator$i = sp + 124|0;
 $pValue = sp;
 $23 = $this;
 $24 = $pX;
 $25 = $pY;
 $26 = $23;
 __ZN4NGIS4Data8Vector2dC2Ev($pValue);
 $27 = $24;
 HEAPF64[$pValue>>3] = $27;
 $28 = $25;
 $29 = ((($pValue)) + 8|0);
 HEAPF64[$29>>3] = $28;
 $30 = ((($26)) + 16|0);
 $21 = $30;
 $22 = $pValue;
 $31 = $21;
 $32 = ((($31)) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 $20 = $31;
 $34 = $20;
 $35 = ((($34)) + 8|0);
 $19 = $35;
 $36 = $19;
 $18 = $36;
 $37 = $18;
 $38 = HEAP32[$37>>2]|0;
 $39 = ($33|0)!=($38|0);
 if ($39) {
  __ZNSt3__16vectorIN4NGIS4Data8Vector2dENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($__annotator$i,$31,1);
  $17 = $31;
  $40 = $17;
  $41 = ((($40)) + 8|0);
  $16 = $41;
  $42 = $16;
  $15 = $42;
  $43 = $15;
  $44 = ((($31)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $14 = $45;
  $46 = $14;
  $47 = $22;
  $10 = $43;
  $11 = $46;
  $12 = $47;
  $48 = $10;
  $49 = $11;
  $50 = $12;
  $9 = $50;
  $51 = $9;
  ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
  $5 = $48;
  $6 = $49;
  $7 = $51;
  $52 = $5;
  $53 = $6;
  $54 = $7;
  $4 = $54;
  $55 = $4;
  $1 = $52;
  $2 = $53;
  $3 = $55;
  $56 = $2;
  $57 = $3;
  $0 = $57;
  $58 = $0;
  ;HEAP32[$56>>2]=HEAP32[$58>>2]|0;HEAP32[$56+4>>2]=HEAP32[$58+4>>2]|0;HEAP32[$56+8>>2]=HEAP32[$58+8>>2]|0;HEAP32[$56+12>>2]=HEAP32[$58+12>>2]|0;
  __ZNSt3__16vectorIN4NGIS4Data8Vector2dENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
  $59 = ((($31)) + 4|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = ((($60)) + 16|0);
  HEAP32[$59>>2] = $61;
  STACKTOP = sp;return 1;
 } else {
  $62 = $22;
  __ZNSt3__16vectorIN4NGIS4Data8Vector2dENS_9allocatorIS3_EEE21__push_back_slow_pathIRKS3_EEvOT_($31,$62);
  STACKTOP = sp;return 1;
 }
 return (0)|0;
}
function __ZN4NGIS4Data23CUdxKernelVector2dArray13setTypedValueENS0_8Vector2dEi($this,$pValue,$idx) {
 $this = $this|0;
 $pValue = $pValue|0;
 $idx = $idx|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 28|0;
 $6 = $this;
 $7 = $idx;
 $8 = $6;
 $9 = $7;
 $10 = ($9|0)<(0);
 if (!($10)) {
  $11 = $7;
  $12 = ((($8)) + 16|0);
  $4 = $12;
  $13 = $4;
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = HEAP32[$13>>2]|0;
  $17 = $15;
  $18 = $16;
  $19 = (($17) - ($18))|0;
  $20 = (($19|0) / 16)&-1;
  $21 = ($11>>>0)>=($20>>>0);
  if (!($21)) {
   $22 = +HEAPF64[$pValue>>3];
   $23 = ((($8)) + 16|0);
   $24 = $7;
   $0 = $23;
   $1 = $24;
   $25 = $0;
   $26 = $1;
   $27 = HEAP32[$25>>2]|0;
   $28 = (($27) + ($26<<4)|0);
   HEAPF64[$28>>3] = $22;
   $29 = ((($pValue)) + 8|0);
   $30 = +HEAPF64[$29>>3];
   $31 = ((($8)) + 16|0);
   $32 = $7;
   $2 = $31;
   $3 = $32;
   $33 = $2;
   $34 = $3;
   $35 = HEAP32[$33>>2]|0;
   $36 = (($35) + ($34<<4)|0);
   $37 = ((($36)) + 8|0);
   HEAPF64[$37>>3] = $30;
   $$expand_i1_val2 = 1;
   HEAP8[$5>>0] = $$expand_i1_val2;
   $$pre_trunc = HEAP8[$5>>0]|0;
   $38 = $$pre_trunc&1;
   STACKTOP = sp;return ($38|0);
  }
 }
 $$expand_i1_val = 0;
 HEAP8[$5>>0] = $$expand_i1_val;
 $$pre_trunc = HEAP8[$5>>0]|0;
 $38 = $$pre_trunc&1;
 STACKTOP = sp;return ($38|0);
}
function __ZN4NGIS4Data23CUdxKernelVector3dArray20getTypedValueByIndexEiRNS0_8Vector3dE($this,$idx,$val) {
 $this = $this|0;
 $idx = $idx|0;
 $val = $val|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 24|0;
 $4 = $this;
 $5 = $idx;
 $6 = $val;
 $7 = $4;
 $8 = $5;
 $9 = ($8|0)<(0);
 if (!($9)) {
  $10 = $5;
  $11 = ((($7)) + 16|0);
  $2 = $11;
  $12 = $2;
  $13 = ((($12)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[$12>>2]|0;
  $16 = $14;
  $17 = $15;
  $18 = (($16) - ($17))|0;
  $19 = (($18|0) / 24)&-1;
  $20 = ($10>>>0)>=($19>>>0);
  if (!($20)) {
   $21 = $6;
   $22 = ((($7)) + 16|0);
   $23 = $5;
   $0 = $22;
   $1 = $23;
   $24 = $0;
   $25 = $1;
   $26 = HEAP32[$24>>2]|0;
   $27 = (($26) + (($25*24)|0)|0);
   ;HEAP32[$21>>2]=HEAP32[$27>>2]|0;HEAP32[$21+4>>2]=HEAP32[$27+4>>2]|0;HEAP32[$21+8>>2]=HEAP32[$27+8>>2]|0;HEAP32[$21+12>>2]=HEAP32[$27+12>>2]|0;HEAP32[$21+16>>2]=HEAP32[$27+16>>2]|0;HEAP32[$21+20>>2]=HEAP32[$27+20>>2]|0;
   $$expand_i1_val2 = 1;
   HEAP8[$3>>0] = $$expand_i1_val2;
   $$pre_trunc = HEAP8[$3>>0]|0;
   $28 = $$pre_trunc&1;
   STACKTOP = sp;return ($28|0);
  }
 }
 $$expand_i1_val = 0;
 HEAP8[$3>>0] = $$expand_i1_val;
 $$pre_trunc = HEAP8[$3>>0]|0;
 $28 = $$pre_trunc&1;
 STACKTOP = sp;return ($28|0);
}
function __ZN4NGIS4Data23CUdxKernelVector3dArray20getTypedValueByIndexEiRdS2_S2_($this,$idx,$pX,$pY,$pZ) {
 $this = $this|0;
 $idx = $idx|0;
 $pX = $pX|0;
 $pY = $pY|0;
 $pZ = $pZ|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 56|0;
 $val = sp;
 $4 = $this;
 $5 = $idx;
 $6 = $pX;
 $7 = $pY;
 $8 = $pZ;
 $9 = $4;
 $10 = $5;
 $11 = ($10|0)<(0);
 if (!($11)) {
  $12 = $5;
  $13 = ((($9)) + 16|0);
  $2 = $13;
  $14 = $2;
  $15 = ((($14)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$14>>2]|0;
  $18 = $16;
  $19 = $17;
  $20 = (($18) - ($19))|0;
  $21 = (($20|0) / 24)&-1;
  $22 = ($12>>>0)>=($21>>>0);
  if (!($22)) {
   $23 = ((($9)) + 16|0);
   $24 = $5;
   $0 = $23;
   $1 = $24;
   $25 = $0;
   $26 = $1;
   $27 = HEAP32[$25>>2]|0;
   $28 = (($27) + (($26*24)|0)|0);
   ;HEAP32[$val>>2]=HEAP32[$28>>2]|0;HEAP32[$val+4>>2]=HEAP32[$28+4>>2]|0;HEAP32[$val+8>>2]=HEAP32[$28+8>>2]|0;HEAP32[$val+12>>2]=HEAP32[$28+12>>2]|0;HEAP32[$val+16>>2]=HEAP32[$28+16>>2]|0;HEAP32[$val+20>>2]=HEAP32[$28+20>>2]|0;
   $29 = +HEAPF64[$val>>3];
   $30 = $6;
   HEAPF64[$30>>3] = $29;
   $31 = ((($val)) + 8|0);
   $32 = +HEAPF64[$31>>3];
   $33 = $7;
   HEAPF64[$33>>3] = $32;
   $34 = ((($val)) + 16|0);
   $35 = +HEAPF64[$34>>3];
   $36 = $8;
   HEAPF64[$36>>3] = $35;
   $$expand_i1_val2 = 1;
   HEAP8[$3>>0] = $$expand_i1_val2;
   $$pre_trunc = HEAP8[$3>>0]|0;
   $37 = $$pre_trunc&1;
   STACKTOP = sp;return ($37|0);
  }
 }
 $$expand_i1_val = 0;
 HEAP8[$3>>0] = $$expand_i1_val;
 $$pre_trunc = HEAP8[$3>>0]|0;
 $37 = $$pre_trunc&1;
 STACKTOP = sp;return ($37|0);
}
function __ZN4NGIS4Data23CUdxKernelVector3dArray13addTypedValueEddd($this,$pX,$pY,$pZ) {
 $this = $this|0;
 $pX = +$pX;
 $pY = +$pY;
 $pZ = +$pZ;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $__annotator$i = 0, $pValue = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp + 48|0;
 $13 = sp + 141|0;
 $__annotator$i = sp + 140|0;
 $pValue = sp;
 $23 = $this;
 $24 = $pX;
 $25 = $pY;
 $26 = $pZ;
 $27 = $23;
 __ZN4NGIS4Data8Vector3dC2Ev($pValue);
 $28 = $24;
 HEAPF64[$pValue>>3] = $28;
 $29 = $25;
 $30 = ((($pValue)) + 8|0);
 HEAPF64[$30>>3] = $29;
 $31 = $26;
 $32 = ((($pValue)) + 16|0);
 HEAPF64[$32>>3] = $31;
 $33 = ((($27)) + 16|0);
 $21 = $33;
 $22 = $pValue;
 $34 = $21;
 $35 = ((($34)) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $20 = $34;
 $37 = $20;
 $38 = ((($37)) + 8|0);
 $19 = $38;
 $39 = $19;
 $18 = $39;
 $40 = $18;
 $41 = HEAP32[$40>>2]|0;
 $42 = ($36|0)!=($41|0);
 if ($42) {
  __ZNSt3__16vectorIN4NGIS4Data8Vector3dENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($__annotator$i,$34,1);
  $17 = $34;
  $43 = $17;
  $44 = ((($43)) + 8|0);
  $16 = $44;
  $45 = $16;
  $15 = $45;
  $46 = $15;
  $47 = ((($34)) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $14 = $48;
  $49 = $14;
  $50 = $22;
  $10 = $46;
  $11 = $49;
  $12 = $50;
  $51 = $10;
  $52 = $11;
  $53 = $12;
  $9 = $53;
  $54 = $9;
  ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
  $5 = $51;
  $6 = $52;
  $7 = $54;
  $55 = $5;
  $56 = $6;
  $57 = $7;
  $4 = $57;
  $58 = $4;
  $1 = $55;
  $2 = $56;
  $3 = $58;
  $59 = $2;
  $60 = $3;
  $0 = $60;
  $61 = $0;
  ;HEAP32[$59>>2]=HEAP32[$61>>2]|0;HEAP32[$59+4>>2]=HEAP32[$61+4>>2]|0;HEAP32[$59+8>>2]=HEAP32[$61+8>>2]|0;HEAP32[$59+12>>2]=HEAP32[$61+12>>2]|0;HEAP32[$59+16>>2]=HEAP32[$61+16>>2]|0;HEAP32[$59+20>>2]=HEAP32[$61+20>>2]|0;
  __ZNSt3__16vectorIN4NGIS4Data8Vector3dENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
  $62 = ((($34)) + 4|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = ((($63)) + 24|0);
  HEAP32[$62>>2] = $64;
  STACKTOP = sp;return 1;
 } else {
  $65 = $22;
  __ZNSt3__16vectorIN4NGIS4Data8Vector3dENS_9allocatorIS3_EEE21__push_back_slow_pathIRKS3_EEvOT_($34,$65);
  STACKTOP = sp;return 1;
 }
 return (0)|0;
}
function __ZN4NGIS4Data23CUdxKernelVector3dArray13setTypedValueENS0_8Vector3dEi($this,$pValue,$idx) {
 $this = $this|0;
 $pValue = $pValue|0;
 $idx = $idx|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 20|0;
 $4 = $this;
 $5 = $idx;
 $6 = $4;
 $7 = $5;
 $8 = ($7|0)<(0);
 if (!($8)) {
  $9 = $5;
  $10 = ((($6)) + 16|0);
  $2 = $10;
  $11 = $2;
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$11>>2]|0;
  $15 = $13;
  $16 = $14;
  $17 = (($15) - ($16))|0;
  $18 = (($17|0) / 24)&-1;
  $19 = ($9>>>0)>=($18>>>0);
  if (!($19)) {
   $20 = ((($6)) + 16|0);
   $21 = $5;
   $0 = $20;
   $1 = $21;
   $22 = $0;
   $23 = $1;
   $24 = HEAP32[$22>>2]|0;
   $25 = (($24) + (($23*24)|0)|0);
   ;HEAP32[$25>>2]=HEAP32[$pValue>>2]|0;HEAP32[$25+4>>2]=HEAP32[$pValue+4>>2]|0;HEAP32[$25+8>>2]=HEAP32[$pValue+8>>2]|0;HEAP32[$25+12>>2]=HEAP32[$pValue+12>>2]|0;HEAP32[$25+16>>2]=HEAP32[$pValue+16>>2]|0;HEAP32[$25+20>>2]=HEAP32[$pValue+20>>2]|0;
   $$expand_i1_val2 = 1;
   HEAP8[$3>>0] = $$expand_i1_val2;
   $$pre_trunc = HEAP8[$3>>0]|0;
   $26 = $$pre_trunc&1;
   STACKTOP = sp;return ($26|0);
  }
 }
 $$expand_i1_val = 0;
 HEAP8[$3>>0] = $$expand_i1_val;
 $$pre_trunc = HEAP8[$3>>0]|0;
 $26 = $$pre_trunc&1;
 STACKTOP = sp;return ($26|0);
}
function __ZN4NGIS4Data23CUdxKernelVector4dArray20getTypedValueByIndexEiRNS0_8Vector4dE($this,$idx,$val) {
 $this = $this|0;
 $idx = $idx|0;
 $val = $val|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 24|0;
 $4 = $this;
 $5 = $idx;
 $6 = $val;
 $7 = $4;
 $8 = $5;
 $9 = ($8|0)<(0);
 if (!($9)) {
  $10 = $5;
  $11 = ((($7)) + 16|0);
  $2 = $11;
  $12 = $2;
  $13 = ((($12)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[$12>>2]|0;
  $16 = $14;
  $17 = $15;
  $18 = (($16) - ($17))|0;
  $19 = (($18|0) / 32)&-1;
  $20 = ($10>>>0)>=($19>>>0);
  if (!($20)) {
   $21 = $6;
   $22 = ((($7)) + 16|0);
   $23 = $5;
   $0 = $22;
   $1 = $23;
   $24 = $0;
   $25 = $1;
   $26 = HEAP32[$24>>2]|0;
   $27 = (($26) + ($25<<5)|0);
   ;HEAP32[$21>>2]=HEAP32[$27>>2]|0;HEAP32[$21+4>>2]=HEAP32[$27+4>>2]|0;HEAP32[$21+8>>2]=HEAP32[$27+8>>2]|0;HEAP32[$21+12>>2]=HEAP32[$27+12>>2]|0;HEAP32[$21+16>>2]=HEAP32[$27+16>>2]|0;HEAP32[$21+20>>2]=HEAP32[$27+20>>2]|0;HEAP32[$21+24>>2]=HEAP32[$27+24>>2]|0;HEAP32[$21+28>>2]=HEAP32[$27+28>>2]|0;
   $$expand_i1_val2 = 1;
   HEAP8[$3>>0] = $$expand_i1_val2;
   $$pre_trunc = HEAP8[$3>>0]|0;
   $28 = $$pre_trunc&1;
   STACKTOP = sp;return ($28|0);
  }
 }
 $$expand_i1_val = 0;
 HEAP8[$3>>0] = $$expand_i1_val;
 $$pre_trunc = HEAP8[$3>>0]|0;
 $28 = $$pre_trunc&1;
 STACKTOP = sp;return ($28|0);
}
function __ZN4NGIS4Data23CUdxKernelVector4dArray20getTypedValueByIndexEiRdS2_S2_S2_($this,$idx,$pX,$pY,$pZ,$pM) {
 $this = $this|0;
 $idx = $idx|0;
 $pX = $pX|0;
 $pY = $pY|0;
 $pZ = $pZ|0;
 $pM = $pM|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 68|0;
 $val = sp;
 $4 = $this;
 $5 = $idx;
 $6 = $pX;
 $7 = $pY;
 $8 = $pZ;
 $9 = $pM;
 $10 = $4;
 $11 = $5;
 $12 = ($11|0)<(0);
 if (!($12)) {
  $13 = $5;
  $14 = ((($10)) + 16|0);
  $2 = $14;
  $15 = $2;
  $16 = ((($15)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = HEAP32[$15>>2]|0;
  $19 = $17;
  $20 = $18;
  $21 = (($19) - ($20))|0;
  $22 = (($21|0) / 32)&-1;
  $23 = ($13>>>0)>=($22>>>0);
  if (!($23)) {
   $24 = ((($10)) + 16|0);
   $25 = $5;
   $0 = $24;
   $1 = $25;
   $26 = $0;
   $27 = $1;
   $28 = HEAP32[$26>>2]|0;
   $29 = (($28) + ($27<<5)|0);
   ;HEAP32[$val>>2]=HEAP32[$29>>2]|0;HEAP32[$val+4>>2]=HEAP32[$29+4>>2]|0;HEAP32[$val+8>>2]=HEAP32[$29+8>>2]|0;HEAP32[$val+12>>2]=HEAP32[$29+12>>2]|0;HEAP32[$val+16>>2]=HEAP32[$29+16>>2]|0;HEAP32[$val+20>>2]=HEAP32[$29+20>>2]|0;HEAP32[$val+24>>2]=HEAP32[$29+24>>2]|0;HEAP32[$val+28>>2]=HEAP32[$29+28>>2]|0;
   $30 = +HEAPF64[$val>>3];
   $31 = $6;
   HEAPF64[$31>>3] = $30;
   $32 = ((($val)) + 8|0);
   $33 = +HEAPF64[$32>>3];
   $34 = $7;
   HEAPF64[$34>>3] = $33;
   $35 = ((($val)) + 16|0);
   $36 = +HEAPF64[$35>>3];
   $37 = $8;
   HEAPF64[$37>>3] = $36;
   $38 = ((($val)) + 24|0);
   $39 = +HEAPF64[$38>>3];
   $40 = $9;
   HEAPF64[$40>>3] = $39;
   $$expand_i1_val2 = 1;
   HEAP8[$3>>0] = $$expand_i1_val2;
   $$pre_trunc = HEAP8[$3>>0]|0;
   $41 = $$pre_trunc&1;
   STACKTOP = sp;return ($41|0);
  }
 }
 $$expand_i1_val = 0;
 HEAP8[$3>>0] = $$expand_i1_val;
 $$pre_trunc = HEAP8[$3>>0]|0;
 $41 = $$pre_trunc&1;
 STACKTOP = sp;return ($41|0);
}
function __ZN4NGIS4Data23CUdxKernelVector4dArray13addTypedValueEdddd($this,$pX,$pY,$pZ,$pM) {
 $this = $this|0;
 $pX = +$pX;
 $pY = +$pY;
 $pZ = +$pZ;
 $pM = +$pM;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $__annotator$i = 0, $pValue = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp + 64|0;
 $13 = sp + 157|0;
 $__annotator$i = sp + 156|0;
 $pValue = sp;
 $23 = $this;
 $24 = $pX;
 $25 = $pY;
 $26 = $pZ;
 $27 = $pM;
 $28 = $23;
 __ZN4NGIS4Data8Vector4dC2Ev($pValue);
 $29 = $24;
 HEAPF64[$pValue>>3] = $29;
 $30 = $25;
 $31 = ((($pValue)) + 8|0);
 HEAPF64[$31>>3] = $30;
 $32 = $26;
 $33 = ((($pValue)) + 16|0);
 HEAPF64[$33>>3] = $32;
 $34 = $27;
 $35 = ((($pValue)) + 24|0);
 HEAPF64[$35>>3] = $34;
 $36 = ((($28)) + 16|0);
 $21 = $36;
 $22 = $pValue;
 $37 = $21;
 $38 = ((($37)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $20 = $37;
 $40 = $20;
 $41 = ((($40)) + 8|0);
 $19 = $41;
 $42 = $19;
 $18 = $42;
 $43 = $18;
 $44 = HEAP32[$43>>2]|0;
 $45 = ($39|0)!=($44|0);
 if ($45) {
  __ZNSt3__16vectorIN4NGIS4Data8Vector4dENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($__annotator$i,$37,1);
  $17 = $37;
  $46 = $17;
  $47 = ((($46)) + 8|0);
  $16 = $47;
  $48 = $16;
  $15 = $48;
  $49 = $15;
  $50 = ((($37)) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  $14 = $51;
  $52 = $14;
  $53 = $22;
  $10 = $49;
  $11 = $52;
  $12 = $53;
  $54 = $10;
  $55 = $11;
  $56 = $12;
  $9 = $56;
  $57 = $9;
  ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
  $5 = $54;
  $6 = $55;
  $7 = $57;
  $58 = $5;
  $59 = $6;
  $60 = $7;
  $4 = $60;
  $61 = $4;
  $1 = $58;
  $2 = $59;
  $3 = $61;
  $62 = $2;
  $63 = $3;
  $0 = $63;
  $64 = $0;
  ;HEAP32[$62>>2]=HEAP32[$64>>2]|0;HEAP32[$62+4>>2]=HEAP32[$64+4>>2]|0;HEAP32[$62+8>>2]=HEAP32[$64+8>>2]|0;HEAP32[$62+12>>2]=HEAP32[$64+12>>2]|0;HEAP32[$62+16>>2]=HEAP32[$64+16>>2]|0;HEAP32[$62+20>>2]=HEAP32[$64+20>>2]|0;HEAP32[$62+24>>2]=HEAP32[$64+24>>2]|0;HEAP32[$62+28>>2]=HEAP32[$64+28>>2]|0;
  __ZNSt3__16vectorIN4NGIS4Data8Vector4dENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
  $65 = ((($37)) + 4|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = ((($66)) + 32|0);
  HEAP32[$65>>2] = $67;
  STACKTOP = sp;return 1;
 } else {
  $68 = $22;
  __ZNSt3__16vectorIN4NGIS4Data8Vector4dENS_9allocatorIS3_EEE21__push_back_slow_pathIRKS3_EEvOT_($37,$68);
  STACKTOP = sp;return 1;
 }
 return (0)|0;
}
function __ZN4NGIS4Data23CUdxKernelVector4dArray13setTypedValueENS0_8Vector4dEi($this,$pValue,$idx) {
 $this = $this|0;
 $pValue = $pValue|0;
 $idx = $idx|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 20|0;
 $4 = $this;
 $5 = $idx;
 $6 = $4;
 $7 = $5;
 $8 = ($7|0)<(0);
 if (!($8)) {
  $9 = $5;
  $10 = ((($6)) + 16|0);
  $2 = $10;
  $11 = $2;
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$11>>2]|0;
  $15 = $13;
  $16 = $14;
  $17 = (($15) - ($16))|0;
  $18 = (($17|0) / 32)&-1;
  $19 = ($9>>>0)>=($18>>>0);
  if (!($19)) {
   $20 = ((($6)) + 16|0);
   $21 = $5;
   $0 = $20;
   $1 = $21;
   $22 = $0;
   $23 = $1;
   $24 = HEAP32[$22>>2]|0;
   $25 = (($24) + ($23<<5)|0);
   ;HEAP32[$25>>2]=HEAP32[$pValue>>2]|0;HEAP32[$25+4>>2]=HEAP32[$pValue+4>>2]|0;HEAP32[$25+8>>2]=HEAP32[$pValue+8>>2]|0;HEAP32[$25+12>>2]=HEAP32[$pValue+12>>2]|0;HEAP32[$25+16>>2]=HEAP32[$pValue+16>>2]|0;HEAP32[$25+20>>2]=HEAP32[$pValue+20>>2]|0;HEAP32[$25+24>>2]=HEAP32[$pValue+24>>2]|0;HEAP32[$25+28>>2]=HEAP32[$pValue+28>>2]|0;
   $$expand_i1_val2 = 1;
   HEAP8[$3>>0] = $$expand_i1_val2;
   $$pre_trunc = HEAP8[$3>>0]|0;
   $26 = $$pre_trunc&1;
   STACKTOP = sp;return ($26|0);
  }
 }
 $$expand_i1_val = 0;
 HEAP8[$3>>0] = $$expand_i1_val;
 $$pre_trunc = HEAP8[$3>>0]|0;
 $26 = $$pre_trunc&1;
 STACKTOP = sp;return ($26|0);
}
function __ZN4NGIS4Data10IUdxKernelC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4NGIS4Data10INxUnknownC2Ev($1);
 $2 = 5436;
 HEAP32[$1>>2] = $2;
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data10IUdxKernelD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4NGIS4Data10INxUnknownD2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIRKiEEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp + 8|0;
 $13 = sp + 201|0;
 $22 = sp;
 $25 = sp + 200|0;
 $33 = sp + 80|0;
 $34 = sp + 68|0;
 $__v = sp + 20|0;
 $39 = $this;
 $40 = $__x;
 $43 = $39;
 $38 = $43;
 $44 = $38;
 $45 = ((($44)) + 8|0);
 $37 = $45;
 $46 = $37;
 $36 = $46;
 $47 = $36;
 $__a = $47;
 $35 = $43;
 $48 = $35;
 $49 = ((($48)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP32[$48>>2]|0;
 $52 = $50;
 $53 = $51;
 $54 = (($52) - ($53))|0;
 $55 = (($54|0) / 4)&-1;
 $56 = (($55) + 1)|0;
 $32 = $43;
 HEAP32[$33>>2] = $56;
 $57 = $32;
 $58 = (__ZNKSt3__16vectorIiNS_9allocatorIiEEE8max_sizeEv($57)|0);
 $__ms$i = $58;
 $59 = HEAP32[$33>>2]|0;
 $60 = $__ms$i;
 $61 = ($59>>>0)>($60>>>0);
 if ($61) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($57);
  // unreachable;
 }
 $30 = $57;
 $62 = $30;
 $29 = $62;
 $63 = $29;
 $28 = $63;
 $64 = $28;
 $65 = ((($64)) + 8|0);
 $27 = $65;
 $66 = $27;
 $26 = $66;
 $67 = $26;
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$63>>2]|0;
 $70 = $68;
 $71 = $69;
 $72 = (($70) - ($71))|0;
 $73 = (($72|0) / 4)&-1;
 $__cap$i = $73;
 $74 = $__cap$i;
 $75 = $__ms$i;
 $76 = (($75>>>0) / 2)&-1;
 $77 = ($74>>>0)>=($76>>>0);
 if ($77) {
  $78 = $__ms$i;
  $31 = $78;
 } else {
  $79 = $__cap$i;
  $80 = $79<<1;
  HEAP32[$34>>2] = $80;
  $23 = $34;
  $24 = $33;
  $81 = $23;
  $82 = $24;
  ;HEAP8[$22>>0]=HEAP8[$25>>0]|0;
  $20 = $81;
  $21 = $82;
  $83 = $20;
  $84 = $21;
  $17 = $22;
  $18 = $83;
  $19 = $84;
  $85 = $18;
  $86 = HEAP32[$85>>2]|0;
  $87 = $19;
  $88 = HEAP32[$87>>2]|0;
  $89 = ($86>>>0)<($88>>>0);
  $90 = $21;
  $91 = $20;
  $92 = $89 ? $90 : $91;
  $93 = HEAP32[$92>>2]|0;
  $31 = $93;
 }
 $94 = $31;
 $16 = $43;
 $95 = $16;
 $96 = ((($95)) + 4|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = HEAP32[$95>>2]|0;
 $99 = $97;
 $100 = $98;
 $101 = (($99) - ($100))|0;
 $102 = (($101|0) / 4)&-1;
 $103 = $__a;
 __ZNSt3__114__split_bufferIiRNS_9allocatorIiEEEC2EjjS3_($__v,$94,$102,$103);
 $104 = $__a;
 $105 = ((($__v)) + 8|0);
 $106 = HEAP32[$105>>2]|0;
 $15 = $106;
 $107 = $15;
 $108 = $40;
 $14 = $108;
 $109 = $14;
 $10 = $104;
 $11 = $107;
 $12 = $109;
 $110 = $10;
 $111 = $11;
 $112 = $12;
 $9 = $112;
 $113 = $9;
 ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
 $5 = $110;
 $6 = $111;
 $7 = $113;
 $114 = $5;
 $115 = $6;
 $116 = $7;
 $4 = $116;
 $117 = $4;
 $1 = $114;
 $2 = $115;
 $3 = $117;
 $118 = $2;
 $119 = $3;
 $0 = $119;
 $120 = $0;
 $121 = HEAP32[$120>>2]|0;
 HEAP32[$118>>2] = $121;
 $122 = ((($__v)) + 8|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = ((($123)) + 4|0);
 HEAP32[$122>>2] = $124;
 __THREW__ = 0;
 invoke_vii(592,($43|0),($__v|0));
 $125 = __THREW__; __THREW__ = 0;
 $126 = $125&1;
 if ($126) {
  $127 = ___cxa_find_matching_catch()|0;
  $128 = tempRet0;
  $41 = $127;
  $42 = $128;
  __ZNSt3__114__split_bufferIiRNS_9allocatorIiEEED2Ev($__v);
  $129 = $41;
  $130 = $42;
  ___resumeException($129|0);
  // unreachable;
 } else {
  __ZNSt3__114__split_bufferIiRNS_9allocatorIiEEED2Ev($__v);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIdNS_9allocatorIdEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIdNS_9allocatorIdEEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIdNS_9allocatorIdEEE21__push_back_slow_pathIRKdEEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp + 8|0;
 $13 = sp + 201|0;
 $22 = sp;
 $25 = sp + 200|0;
 $33 = sp + 80|0;
 $34 = sp + 68|0;
 $__v = sp + 20|0;
 $39 = $this;
 $40 = $__x;
 $43 = $39;
 $38 = $43;
 $44 = $38;
 $45 = ((($44)) + 8|0);
 $37 = $45;
 $46 = $37;
 $36 = $46;
 $47 = $36;
 $__a = $47;
 $35 = $43;
 $48 = $35;
 $49 = ((($48)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP32[$48>>2]|0;
 $52 = $50;
 $53 = $51;
 $54 = (($52) - ($53))|0;
 $55 = (($54|0) / 8)&-1;
 $56 = (($55) + 1)|0;
 $32 = $43;
 HEAP32[$33>>2] = $56;
 $57 = $32;
 $58 = (__ZNKSt3__16vectorIdNS_9allocatorIdEEE8max_sizeEv($57)|0);
 $__ms$i = $58;
 $59 = HEAP32[$33>>2]|0;
 $60 = $__ms$i;
 $61 = ($59>>>0)>($60>>>0);
 if ($61) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($57);
  // unreachable;
 }
 $30 = $57;
 $62 = $30;
 $29 = $62;
 $63 = $29;
 $28 = $63;
 $64 = $28;
 $65 = ((($64)) + 8|0);
 $27 = $65;
 $66 = $27;
 $26 = $66;
 $67 = $26;
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$63>>2]|0;
 $70 = $68;
 $71 = $69;
 $72 = (($70) - ($71))|0;
 $73 = (($72|0) / 8)&-1;
 $__cap$i = $73;
 $74 = $__cap$i;
 $75 = $__ms$i;
 $76 = (($75>>>0) / 2)&-1;
 $77 = ($74>>>0)>=($76>>>0);
 if ($77) {
  $78 = $__ms$i;
  $31 = $78;
 } else {
  $79 = $__cap$i;
  $80 = $79<<1;
  HEAP32[$34>>2] = $80;
  $23 = $34;
  $24 = $33;
  $81 = $23;
  $82 = $24;
  ;HEAP8[$22>>0]=HEAP8[$25>>0]|0;
  $20 = $81;
  $21 = $82;
  $83 = $20;
  $84 = $21;
  $17 = $22;
  $18 = $83;
  $19 = $84;
  $85 = $18;
  $86 = HEAP32[$85>>2]|0;
  $87 = $19;
  $88 = HEAP32[$87>>2]|0;
  $89 = ($86>>>0)<($88>>>0);
  $90 = $21;
  $91 = $20;
  $92 = $89 ? $90 : $91;
  $93 = HEAP32[$92>>2]|0;
  $31 = $93;
 }
 $94 = $31;
 $16 = $43;
 $95 = $16;
 $96 = ((($95)) + 4|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = HEAP32[$95>>2]|0;
 $99 = $97;
 $100 = $98;
 $101 = (($99) - ($100))|0;
 $102 = (($101|0) / 8)&-1;
 $103 = $__a;
 __ZNSt3__114__split_bufferIdRNS_9allocatorIdEEEC2EjjS3_($__v,$94,$102,$103);
 $104 = $__a;
 $105 = ((($__v)) + 8|0);
 $106 = HEAP32[$105>>2]|0;
 $15 = $106;
 $107 = $15;
 $108 = $40;
 $14 = $108;
 $109 = $14;
 $10 = $104;
 $11 = $107;
 $12 = $109;
 $110 = $10;
 $111 = $11;
 $112 = $12;
 $9 = $112;
 $113 = $9;
 ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
 $5 = $110;
 $6 = $111;
 $7 = $113;
 $114 = $5;
 $115 = $6;
 $116 = $7;
 $4 = $116;
 $117 = $4;
 $1 = $114;
 $2 = $115;
 $3 = $117;
 $118 = $2;
 $119 = $3;
 $0 = $119;
 $120 = $0;
 $121 = +HEAPF64[$120>>3];
 HEAPF64[$118>>3] = $121;
 $122 = ((($__v)) + 8|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = ((($123)) + 8|0);
 HEAP32[$122>>2] = $124;
 __THREW__ = 0;
 invoke_vii(593,($43|0),($__v|0));
 $125 = __THREW__; __THREW__ = 0;
 $126 = $125&1;
 if ($126) {
  $127 = ___cxa_find_matching_catch()|0;
  $128 = tempRet0;
  $41 = $127;
  $42 = $128;
  __ZNSt3__114__split_bufferIdRNS_9allocatorIdEEED2Ev($__v);
  $129 = $41;
  $130 = $42;
  ___resumeException($129|0);
  // unreachable;
 } else {
  __ZNSt3__114__split_bufferIdRNS_9allocatorIdEEED2Ev($__v);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIRKS6_EEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp + 8|0;
 $13 = sp + 201|0;
 $22 = sp;
 $25 = sp + 200|0;
 $33 = sp + 80|0;
 $34 = sp + 68|0;
 $__v = sp + 20|0;
 $39 = $this;
 $40 = $__x;
 $43 = $39;
 $38 = $43;
 $44 = $38;
 $45 = ((($44)) + 8|0);
 $37 = $45;
 $46 = $37;
 $36 = $46;
 $47 = $36;
 $__a = $47;
 $35 = $43;
 $48 = $35;
 $49 = ((($48)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP32[$48>>2]|0;
 $52 = $50;
 $53 = $51;
 $54 = (($52) - ($53))|0;
 $55 = (($54|0) / 12)&-1;
 $56 = (($55) + 1)|0;
 $32 = $43;
 HEAP32[$33>>2] = $56;
 $57 = $32;
 $58 = (__ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8max_sizeEv($57)|0);
 $__ms$i = $58;
 $59 = HEAP32[$33>>2]|0;
 $60 = $__ms$i;
 $61 = ($59>>>0)>($60>>>0);
 if ($61) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($57);
  // unreachable;
 }
 $30 = $57;
 $62 = $30;
 $29 = $62;
 $63 = $29;
 $28 = $63;
 $64 = $28;
 $65 = ((($64)) + 8|0);
 $27 = $65;
 $66 = $27;
 $26 = $66;
 $67 = $26;
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$63>>2]|0;
 $70 = $68;
 $71 = $69;
 $72 = (($70) - ($71))|0;
 $73 = (($72|0) / 12)&-1;
 $__cap$i = $73;
 $74 = $__cap$i;
 $75 = $__ms$i;
 $76 = (($75>>>0) / 2)&-1;
 $77 = ($74>>>0)>=($76>>>0);
 if ($77) {
  $78 = $__ms$i;
  $31 = $78;
 } else {
  $79 = $__cap$i;
  $80 = $79<<1;
  HEAP32[$34>>2] = $80;
  $23 = $34;
  $24 = $33;
  $81 = $23;
  $82 = $24;
  ;HEAP8[$22>>0]=HEAP8[$25>>0]|0;
  $20 = $81;
  $21 = $82;
  $83 = $20;
  $84 = $21;
  $17 = $22;
  $18 = $83;
  $19 = $84;
  $85 = $18;
  $86 = HEAP32[$85>>2]|0;
  $87 = $19;
  $88 = HEAP32[$87>>2]|0;
  $89 = ($86>>>0)<($88>>>0);
  $90 = $21;
  $91 = $20;
  $92 = $89 ? $90 : $91;
  $93 = HEAP32[$92>>2]|0;
  $31 = $93;
 }
 $94 = $31;
 $16 = $43;
 $95 = $16;
 $96 = ((($95)) + 4|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = HEAP32[$95>>2]|0;
 $99 = $97;
 $100 = $98;
 $101 = (($99) - ($100))|0;
 $102 = (($101|0) / 12)&-1;
 $103 = $__a;
 __ZNSt3__114__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEEC2EjjS8_($__v,$94,$102,$103);
 $104 = $__a;
 $105 = ((($__v)) + 8|0);
 $106 = HEAP32[$105>>2]|0;
 $15 = $106;
 $107 = $15;
 $108 = $40;
 $14 = $108;
 $109 = $14;
 $10 = $104;
 $11 = $107;
 $12 = $109;
 $110 = $10;
 $111 = $11;
 $112 = $12;
 $9 = $112;
 $113 = $9;
 ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
 $5 = $110;
 $6 = $111;
 $7 = $113;
 $114 = $5;
 $115 = $6;
 $116 = $7;
 $4 = $116;
 $117 = $4;
 $1 = $114;
 $2 = $115;
 $3 = $117;
 $118 = $2;
 $119 = $3;
 $0 = $119;
 $120 = $0;
 __THREW__ = 0;
 invoke_vii(562,($118|0),($120|0));
 $121 = __THREW__; __THREW__ = 0;
 $122 = $121&1;
 if ($122) {
  $128 = ___cxa_find_matching_catch()|0;
  $129 = tempRet0;
  $41 = $128;
  $42 = $129;
  __ZNSt3__114__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEED2Ev($__v);
  $130 = $41;
  $131 = $42;
  ___resumeException($130|0);
  // unreachable;
 }
 $123 = ((($__v)) + 8|0);
 $124 = HEAP32[$123>>2]|0;
 $125 = ((($124)) + 12|0);
 HEAP32[$123>>2] = $125;
 __THREW__ = 0;
 invoke_vii(591,($43|0),($__v|0));
 $126 = __THREW__; __THREW__ = 0;
 $127 = $126&1;
 if ($127) {
  $128 = ___cxa_find_matching_catch()|0;
  $129 = tempRet0;
  $41 = $128;
  $42 = $129;
  __ZNSt3__114__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEED2Ev($__v);
  $130 = $41;
  $131 = $42;
  ___resumeException($130|0);
  // unreachable;
 } else {
  __ZNSt3__114__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIN4NGIS4Data8Vector2dENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN4NGIS4Data8Vector2dENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN4NGIS4Data8Vector2dENS_9allocatorIS3_EEE21__push_back_slow_pathIRKS3_EEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp + 8|0;
 $13 = sp + 201|0;
 $22 = sp;
 $25 = sp + 200|0;
 $33 = sp + 80|0;
 $34 = sp + 68|0;
 $__v = sp + 20|0;
 $39 = $this;
 $40 = $__x;
 $43 = $39;
 $38 = $43;
 $44 = $38;
 $45 = ((($44)) + 8|0);
 $37 = $45;
 $46 = $37;
 $36 = $46;
 $47 = $36;
 $__a = $47;
 $35 = $43;
 $48 = $35;
 $49 = ((($48)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP32[$48>>2]|0;
 $52 = $50;
 $53 = $51;
 $54 = (($52) - ($53))|0;
 $55 = (($54|0) / 16)&-1;
 $56 = (($55) + 1)|0;
 $32 = $43;
 HEAP32[$33>>2] = $56;
 $57 = $32;
 $58 = (__ZNKSt3__16vectorIN4NGIS4Data8Vector2dENS_9allocatorIS3_EEE8max_sizeEv($57)|0);
 $__ms$i = $58;
 $59 = HEAP32[$33>>2]|0;
 $60 = $__ms$i;
 $61 = ($59>>>0)>($60>>>0);
 if ($61) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($57);
  // unreachable;
 }
 $30 = $57;
 $62 = $30;
 $29 = $62;
 $63 = $29;
 $28 = $63;
 $64 = $28;
 $65 = ((($64)) + 8|0);
 $27 = $65;
 $66 = $27;
 $26 = $66;
 $67 = $26;
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$63>>2]|0;
 $70 = $68;
 $71 = $69;
 $72 = (($70) - ($71))|0;
 $73 = (($72|0) / 16)&-1;
 $__cap$i = $73;
 $74 = $__cap$i;
 $75 = $__ms$i;
 $76 = (($75>>>0) / 2)&-1;
 $77 = ($74>>>0)>=($76>>>0);
 if ($77) {
  $78 = $__ms$i;
  $31 = $78;
 } else {
  $79 = $__cap$i;
  $80 = $79<<1;
  HEAP32[$34>>2] = $80;
  $23 = $34;
  $24 = $33;
  $81 = $23;
  $82 = $24;
  ;HEAP8[$22>>0]=HEAP8[$25>>0]|0;
  $20 = $81;
  $21 = $82;
  $83 = $20;
  $84 = $21;
  $17 = $22;
  $18 = $83;
  $19 = $84;
  $85 = $18;
  $86 = HEAP32[$85>>2]|0;
  $87 = $19;
  $88 = HEAP32[$87>>2]|0;
  $89 = ($86>>>0)<($88>>>0);
  $90 = $21;
  $91 = $20;
  $92 = $89 ? $90 : $91;
  $93 = HEAP32[$92>>2]|0;
  $31 = $93;
 }
 $94 = $31;
 $16 = $43;
 $95 = $16;
 $96 = ((($95)) + 4|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = HEAP32[$95>>2]|0;
 $99 = $97;
 $100 = $98;
 $101 = (($99) - ($100))|0;
 $102 = (($101|0) / 16)&-1;
 $103 = $__a;
 __ZNSt3__114__split_bufferIN4NGIS4Data8Vector2dERNS_9allocatorIS3_EEEC2EjjS6_($__v,$94,$102,$103);
 $104 = $__a;
 $105 = ((($__v)) + 8|0);
 $106 = HEAP32[$105>>2]|0;
 $15 = $106;
 $107 = $15;
 $108 = $40;
 $14 = $108;
 $109 = $14;
 $10 = $104;
 $11 = $107;
 $12 = $109;
 $110 = $10;
 $111 = $11;
 $112 = $12;
 $9 = $112;
 $113 = $9;
 ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
 $5 = $110;
 $6 = $111;
 $7 = $113;
 $114 = $5;
 $115 = $6;
 $116 = $7;
 $4 = $116;
 $117 = $4;
 $1 = $114;
 $2 = $115;
 $3 = $117;
 $118 = $2;
 $119 = $3;
 $0 = $119;
 $120 = $0;
 ;HEAP32[$118>>2]=HEAP32[$120>>2]|0;HEAP32[$118+4>>2]=HEAP32[$120+4>>2]|0;HEAP32[$118+8>>2]=HEAP32[$120+8>>2]|0;HEAP32[$118+12>>2]=HEAP32[$120+12>>2]|0;
 $121 = ((($__v)) + 8|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = ((($122)) + 16|0);
 HEAP32[$121>>2] = $123;
 __THREW__ = 0;
 invoke_vii(594,($43|0),($__v|0));
 $124 = __THREW__; __THREW__ = 0;
 $125 = $124&1;
 if ($125) {
  $126 = ___cxa_find_matching_catch()|0;
  $127 = tempRet0;
  $41 = $126;
  $42 = $127;
  __ZNSt3__114__split_bufferIN4NGIS4Data8Vector2dERNS_9allocatorIS3_EEED2Ev($__v);
  $128 = $41;
  $129 = $42;
  ___resumeException($128|0);
  // unreachable;
 } else {
  __ZNSt3__114__split_bufferIN4NGIS4Data8Vector2dERNS_9allocatorIS3_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIN4NGIS4Data8Vector3dENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN4NGIS4Data8Vector3dENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN4NGIS4Data8Vector3dENS_9allocatorIS3_EEE21__push_back_slow_pathIRKS3_EEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp + 8|0;
 $13 = sp + 201|0;
 $22 = sp;
 $25 = sp + 200|0;
 $33 = sp + 80|0;
 $34 = sp + 68|0;
 $__v = sp + 20|0;
 $39 = $this;
 $40 = $__x;
 $43 = $39;
 $38 = $43;
 $44 = $38;
 $45 = ((($44)) + 8|0);
 $37 = $45;
 $46 = $37;
 $36 = $46;
 $47 = $36;
 $__a = $47;
 $35 = $43;
 $48 = $35;
 $49 = ((($48)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP32[$48>>2]|0;
 $52 = $50;
 $53 = $51;
 $54 = (($52) - ($53))|0;
 $55 = (($54|0) / 24)&-1;
 $56 = (($55) + 1)|0;
 $32 = $43;
 HEAP32[$33>>2] = $56;
 $57 = $32;
 $58 = (__ZNKSt3__16vectorIN4NGIS4Data8Vector3dENS_9allocatorIS3_EEE8max_sizeEv($57)|0);
 $__ms$i = $58;
 $59 = HEAP32[$33>>2]|0;
 $60 = $__ms$i;
 $61 = ($59>>>0)>($60>>>0);
 if ($61) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($57);
  // unreachable;
 }
 $30 = $57;
 $62 = $30;
 $29 = $62;
 $63 = $29;
 $28 = $63;
 $64 = $28;
 $65 = ((($64)) + 8|0);
 $27 = $65;
 $66 = $27;
 $26 = $66;
 $67 = $26;
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$63>>2]|0;
 $70 = $68;
 $71 = $69;
 $72 = (($70) - ($71))|0;
 $73 = (($72|0) / 24)&-1;
 $__cap$i = $73;
 $74 = $__cap$i;
 $75 = $__ms$i;
 $76 = (($75>>>0) / 2)&-1;
 $77 = ($74>>>0)>=($76>>>0);
 if ($77) {
  $78 = $__ms$i;
  $31 = $78;
 } else {
  $79 = $__cap$i;
  $80 = $79<<1;
  HEAP32[$34>>2] = $80;
  $23 = $34;
  $24 = $33;
  $81 = $23;
  $82 = $24;
  ;HEAP8[$22>>0]=HEAP8[$25>>0]|0;
  $20 = $81;
  $21 = $82;
  $83 = $20;
  $84 = $21;
  $17 = $22;
  $18 = $83;
  $19 = $84;
  $85 = $18;
  $86 = HEAP32[$85>>2]|0;
  $87 = $19;
  $88 = HEAP32[$87>>2]|0;
  $89 = ($86>>>0)<($88>>>0);
  $90 = $21;
  $91 = $20;
  $92 = $89 ? $90 : $91;
  $93 = HEAP32[$92>>2]|0;
  $31 = $93;
 }
 $94 = $31;
 $16 = $43;
 $95 = $16;
 $96 = ((($95)) + 4|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = HEAP32[$95>>2]|0;
 $99 = $97;
 $100 = $98;
 $101 = (($99) - ($100))|0;
 $102 = (($101|0) / 24)&-1;
 $103 = $__a;
 __ZNSt3__114__split_bufferIN4NGIS4Data8Vector3dERNS_9allocatorIS3_EEEC2EjjS6_($__v,$94,$102,$103);
 $104 = $__a;
 $105 = ((($__v)) + 8|0);
 $106 = HEAP32[$105>>2]|0;
 $15 = $106;
 $107 = $15;
 $108 = $40;
 $14 = $108;
 $109 = $14;
 $10 = $104;
 $11 = $107;
 $12 = $109;
 $110 = $10;
 $111 = $11;
 $112 = $12;
 $9 = $112;
 $113 = $9;
 ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
 $5 = $110;
 $6 = $111;
 $7 = $113;
 $114 = $5;
 $115 = $6;
 $116 = $7;
 $4 = $116;
 $117 = $4;
 $1 = $114;
 $2 = $115;
 $3 = $117;
 $118 = $2;
 $119 = $3;
 $0 = $119;
 $120 = $0;
 ;HEAP32[$118>>2]=HEAP32[$120>>2]|0;HEAP32[$118+4>>2]=HEAP32[$120+4>>2]|0;HEAP32[$118+8>>2]=HEAP32[$120+8>>2]|0;HEAP32[$118+12>>2]=HEAP32[$120+12>>2]|0;HEAP32[$118+16>>2]=HEAP32[$120+16>>2]|0;HEAP32[$118+20>>2]=HEAP32[$120+20>>2]|0;
 $121 = ((($__v)) + 8|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = ((($122)) + 24|0);
 HEAP32[$121>>2] = $123;
 __THREW__ = 0;
 invoke_vii(595,($43|0),($__v|0));
 $124 = __THREW__; __THREW__ = 0;
 $125 = $124&1;
 if ($125) {
  $126 = ___cxa_find_matching_catch()|0;
  $127 = tempRet0;
  $41 = $126;
  $42 = $127;
  __ZNSt3__114__split_bufferIN4NGIS4Data8Vector3dERNS_9allocatorIS3_EEED2Ev($__v);
  $128 = $41;
  $129 = $42;
  ___resumeException($128|0);
  // unreachable;
 } else {
  __ZNSt3__114__split_bufferIN4NGIS4Data8Vector3dERNS_9allocatorIS3_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIN4NGIS4Data8Vector4dENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN4NGIS4Data8Vector4dENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN4NGIS4Data8Vector4dENS_9allocatorIS3_EEE21__push_back_slow_pathIRKS3_EEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp + 8|0;
 $13 = sp + 201|0;
 $22 = sp;
 $25 = sp + 200|0;
 $33 = sp + 80|0;
 $34 = sp + 68|0;
 $__v = sp + 20|0;
 $39 = $this;
 $40 = $__x;
 $43 = $39;
 $38 = $43;
 $44 = $38;
 $45 = ((($44)) + 8|0);
 $37 = $45;
 $46 = $37;
 $36 = $46;
 $47 = $36;
 $__a = $47;
 $35 = $43;
 $48 = $35;
 $49 = ((($48)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP32[$48>>2]|0;
 $52 = $50;
 $53 = $51;
 $54 = (($52) - ($53))|0;
 $55 = (($54|0) / 32)&-1;
 $56 = (($55) + 1)|0;
 $32 = $43;
 HEAP32[$33>>2] = $56;
 $57 = $32;
 $58 = (__ZNKSt3__16vectorIN4NGIS4Data8Vector4dENS_9allocatorIS3_EEE8max_sizeEv($57)|0);
 $__ms$i = $58;
 $59 = HEAP32[$33>>2]|0;
 $60 = $__ms$i;
 $61 = ($59>>>0)>($60>>>0);
 if ($61) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($57);
  // unreachable;
 }
 $30 = $57;
 $62 = $30;
 $29 = $62;
 $63 = $29;
 $28 = $63;
 $64 = $28;
 $65 = ((($64)) + 8|0);
 $27 = $65;
 $66 = $27;
 $26 = $66;
 $67 = $26;
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$63>>2]|0;
 $70 = $68;
 $71 = $69;
 $72 = (($70) - ($71))|0;
 $73 = (($72|0) / 32)&-1;
 $__cap$i = $73;
 $74 = $__cap$i;
 $75 = $__ms$i;
 $76 = (($75>>>0) / 2)&-1;
 $77 = ($74>>>0)>=($76>>>0);
 if ($77) {
  $78 = $__ms$i;
  $31 = $78;
 } else {
  $79 = $__cap$i;
  $80 = $79<<1;
  HEAP32[$34>>2] = $80;
  $23 = $34;
  $24 = $33;
  $81 = $23;
  $82 = $24;
  ;HEAP8[$22>>0]=HEAP8[$25>>0]|0;
  $20 = $81;
  $21 = $82;
  $83 = $20;
  $84 = $21;
  $17 = $22;
  $18 = $83;
  $19 = $84;
  $85 = $18;
  $86 = HEAP32[$85>>2]|0;
  $87 = $19;
  $88 = HEAP32[$87>>2]|0;
  $89 = ($86>>>0)<($88>>>0);
  $90 = $21;
  $91 = $20;
  $92 = $89 ? $90 : $91;
  $93 = HEAP32[$92>>2]|0;
  $31 = $93;
 }
 $94 = $31;
 $16 = $43;
 $95 = $16;
 $96 = ((($95)) + 4|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = HEAP32[$95>>2]|0;
 $99 = $97;
 $100 = $98;
 $101 = (($99) - ($100))|0;
 $102 = (($101|0) / 32)&-1;
 $103 = $__a;
 __ZNSt3__114__split_bufferIN4NGIS4Data8Vector4dERNS_9allocatorIS3_EEEC2EjjS6_($__v,$94,$102,$103);
 $104 = $__a;
 $105 = ((($__v)) + 8|0);
 $106 = HEAP32[$105>>2]|0;
 $15 = $106;
 $107 = $15;
 $108 = $40;
 $14 = $108;
 $109 = $14;
 $10 = $104;
 $11 = $107;
 $12 = $109;
 $110 = $10;
 $111 = $11;
 $112 = $12;
 $9 = $112;
 $113 = $9;
 ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
 $5 = $110;
 $6 = $111;
 $7 = $113;
 $114 = $5;
 $115 = $6;
 $116 = $7;
 $4 = $116;
 $117 = $4;
 $1 = $114;
 $2 = $115;
 $3 = $117;
 $118 = $2;
 $119 = $3;
 $0 = $119;
 $120 = $0;
 ;HEAP32[$118>>2]=HEAP32[$120>>2]|0;HEAP32[$118+4>>2]=HEAP32[$120+4>>2]|0;HEAP32[$118+8>>2]=HEAP32[$120+8>>2]|0;HEAP32[$118+12>>2]=HEAP32[$120+12>>2]|0;HEAP32[$118+16>>2]=HEAP32[$120+16>>2]|0;HEAP32[$118+20>>2]=HEAP32[$120+20>>2]|0;HEAP32[$118+24>>2]=HEAP32[$120+24>>2]|0;HEAP32[$118+28>>2]=HEAP32[$120+28>>2]|0;
 $121 = ((($__v)) + 8|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = ((($122)) + 32|0);
 HEAP32[$121>>2] = $123;
 __THREW__ = 0;
 invoke_vii(596,($43|0),($__v|0));
 $124 = __THREW__; __THREW__ = 0;
 $125 = $124&1;
 if ($125) {
  $126 = ___cxa_find_matching_catch()|0;
  $127 = tempRet0;
  $41 = $126;
  $42 = $127;
  __ZNSt3__114__split_bufferIN4NGIS4Data8Vector4dERNS_9allocatorIS3_EEED2Ev($__v);
  $128 = $41;
  $129 = $42;
  ___resumeException($128|0);
  // unreachable;
 } else {
  __ZNSt3__114__split_bufferIN4NGIS4Data8Vector4dERNS_9allocatorIS3_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
}
function __ZN4NGIS4Data18CUdxKernelIntValueD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4NGIS4Data10CUdxKernelD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data18CUdxKernelIntValueD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4NGIS4Data18CUdxKernelIntValueD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data19CUdxKernelRealValueD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4NGIS4Data10CUdxKernelD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data19CUdxKernelRealValueD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4NGIS4Data19CUdxKernelRealValueD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data21CUdxKernelStringValueD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 4876;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 16|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
 __ZN4NGIS4Data10CUdxKernelD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data21CUdxKernelStringValueD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4NGIS4Data21CUdxKernelStringValueD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data23CUdxKernelVector2dValueD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4NGIS4Data10CUdxKernelD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data23CUdxKernelVector2dValueD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4NGIS4Data23CUdxKernelVector2dValueD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data23CUdxKernelVector3dValueD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4NGIS4Data10CUdxKernelD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data23CUdxKernelVector3dValueD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4NGIS4Data23CUdxKernelVector3dValueD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data23CUdxKernelVector4dValueD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4NGIS4Data10CUdxKernelD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data23CUdxKernelVector4dValueD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4NGIS4Data23CUdxKernelVector4dValueD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data18CUdxKernelIntArrayD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 5064;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 16|0);
 __ZNSt3__16vectorIiNS_9allocatorIiEEED2Ev($3);
 __ZN4NGIS4Data10CUdxKernelD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data18CUdxKernelIntArrayD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4NGIS4Data18CUdxKernelIntArrayD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data18CUdxKernelIntArray8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = ((($2)) + 16|0);
 $0 = $3;
 $4 = $0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$4>>2]|0;
 $8 = $6;
 $9 = $7;
 $10 = (($8) - ($9))|0;
 $11 = (($10|0) / 4)&-1;
 STACKTOP = sp;return ($11|0);
}
function __ZN4NGIS4Data18CUdxKernelIntArray10clearValueEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp;
 $8 = sp + 76|0;
 $18 = $this;
 $19 = $18;
 $20 = ((($19)) + 16|0);
 $17 = $20;
 $21 = $17;
 $16 = $21;
 $22 = $16;
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = HEAP32[$22>>2]|0;
 $26 = $24;
 $27 = $25;
 $28 = (($26) - ($27))|0;
 $29 = (($28|0) / 4)&-1;
 $__old_size$i = $29;
 $15 = $21;
 $30 = $15;
 $31 = HEAP32[$30>>2]|0;
 $13 = $30;
 $14 = $31;
 $32 = $13;
 while(1) {
  $33 = $14;
  $34 = ((($32)) + 4|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ($33|0)!=($35|0);
  if (!($36)) {
   break;
  }
  $12 = $32;
  $37 = $12;
  $38 = ((($37)) + 8|0);
  $11 = $38;
  $39 = $11;
  $10 = $39;
  $40 = $10;
  $41 = ((($32)) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ((($42)) + -4|0);
  HEAP32[$41>>2] = $43;
  $9 = $43;
  $44 = $9;
  $6 = $40;
  $7 = $44;
  $45 = $6;
  $46 = $7;
  ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
  $3 = $45;
  $4 = $46;
  $47 = $3;
  $48 = $4;
  $1 = $47;
  $2 = $48;
 }
 $49 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(597,($21|0),($49|0));
 $50 = __THREW__; __THREW__ = 0;
 $51 = $50&1;
 if ($51) {
  $52 = ___cxa_find_matching_catch(0|0)|0;
  $53 = tempRet0;
  ___clang_call_terminate($52);
  // unreachable;
 } else {
  $0 = $21;
  STACKTOP = sp;return;
 }
}
function __ZN4NGIS4Data18CUdxKernelIntArray18removeValueByIndexEi($this,$idx) {
 $this = $this|0;
 $idx = $idx|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__n$i$i$i = 0, $__old_size$i$i = 0, $__p$i = 0, $__ps$i = 0, $it = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp + 272|0;
 $11 = sp + 252|0;
 $14 = sp + 240|0;
 $27 = sp + 184|0;
 $38 = sp + 8|0;
 $41 = sp + 301|0;
 $53 = sp + 84|0;
 $56 = sp + 72|0;
 $58 = sp + 64|0;
 $60 = sp + 56|0;
 $62 = sp + 44|0;
 $63 = sp;
 $65 = sp + 300|0;
 $it = sp + 24|0;
 $68 = sp + 20|0;
 $69 = sp + 16|0;
 $70 = sp + 12|0;
 $66 = $this;
 $67 = $idx;
 $71 = $66;
 $72 = $67;
 $73 = ($72|0)<(0);
 if (!($73)) {
  $74 = $67;
  $75 = ((($71)) + 16|0);
  $64 = $75;
  $76 = $64;
  $77 = ((($76)) + 4|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = HEAP32[$76>>2]|0;
  $80 = $78;
  $81 = $79;
  $82 = (($80) - ($81))|0;
  $83 = (($82|0) / 4)&-1;
  $84 = ($74>>>0)>=($83>>>0);
  if (!($84)) {
   $85 = ((($71)) + 16|0);
   $15 = $85;
   $86 = $15;
   $87 = HEAP32[$86>>2]|0;
   $12 = $86;
   $13 = $87;
   $88 = $13;
   $9 = $11;
   $10 = $88;
   $89 = $9;
   $90 = $10;
   HEAP32[$89>>2] = $90;
   $91 = HEAP32[$11>>2]|0;
   HEAP32[$14>>2] = $91;
   $92 = HEAP32[$14>>2]|0;
   HEAP32[$it>>2] = $92;
   $93 = $67;
   $7 = $it;
   $8 = $93;
   $94 = $7;
   ;HEAP32[$6>>2]=HEAP32[$94>>2]|0;
   $95 = $8;
   $4 = $6;
   $5 = $95;
   $96 = $4;
   $97 = $5;
   $98 = HEAP32[$96>>2]|0;
   $99 = (($98) + ($97<<2)|0);
   HEAP32[$96>>2] = $99;
   $100 = HEAP32[$6>>2]|0;
   HEAP32[$68>>2] = $100;
   ;HEAP32[$it>>2]=HEAP32[$68>>2]|0;
   $101 = ((($71)) + 16|0);
   $1 = $69;
   $2 = $it;
   $3 = 0;
   $102 = $1;
   $103 = $2;
   $0 = $103;
   $104 = $0;
   $105 = HEAP32[$104>>2]|0;
   HEAP32[$102>>2] = $105;
   ;HEAP8[$63>>0]=HEAP8[$69>>0]|0;HEAP8[$63+1>>0]=HEAP8[$69+1>>0]|0;HEAP8[$63+2>>0]=HEAP8[$69+2>>0]|0;HEAP8[$63+3>>0]=HEAP8[$69+3>>0]|0;
   $61 = $101;
   $106 = $61;
   $59 = $106;
   $107 = $59;
   $57 = $107;
   $108 = $57;
   $109 = HEAP32[$108>>2]|0;
   $54 = $108;
   $55 = $109;
   $110 = $55;
   $51 = $53;
   $52 = $110;
   $111 = $51;
   $112 = $52;
   HEAP32[$111>>2] = $112;
   $113 = HEAP32[$53>>2]|0;
   HEAP32[$56>>2] = $113;
   $114 = HEAP32[$56>>2]|0;
   HEAP32[$58>>2] = $114;
   $115 = HEAP32[$58>>2]|0;
   HEAP32[$62>>2] = $115;
   $32 = $63;
   $33 = $62;
   $116 = $32;
   $31 = $116;
   $117 = $31;
   $118 = HEAP32[$117>>2]|0;
   $119 = $33;
   $30 = $119;
   $120 = $30;
   $121 = HEAP32[$120>>2]|0;
   $122 = $118;
   $123 = $121;
   $124 = (($122) - ($123))|0;
   $125 = (($124|0) / 4)&-1;
   $__ps$i = $125;
   $126 = HEAP32[$106>>2]|0;
   $127 = $__ps$i;
   $128 = (($126) + ($127<<2)|0);
   $__p$i = $128;
   $129 = $__p$i;
   $28 = $106;
   $29 = $129;
   $130 = $29;
   $25 = $27;
   $26 = $130;
   $131 = $25;
   $132 = $26;
   HEAP32[$131>>2] = $132;
   $133 = HEAP32[$27>>2]|0;
   HEAP32[$60>>2] = $133;
   $134 = $__p$i;
   $135 = ((($134)) + 4|0);
   $136 = ((($106)) + 4|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = $__p$i;
   $22 = $135;
   $23 = $137;
   $24 = $138;
   $139 = $22;
   $21 = $139;
   $140 = $21;
   $141 = $23;
   $16 = $141;
   $142 = $16;
   $143 = $24;
   $17 = $143;
   $144 = $17;
   $18 = $140;
   $19 = $142;
   $20 = $144;
   $145 = $19;
   $146 = $18;
   $147 = $145;
   $148 = $146;
   $149 = (($147) - ($148))|0;
   $150 = (($149|0) / 4)&-1;
   $__n$i$i$i = $150;
   $151 = $20;
   $152 = $18;
   $153 = $__n$i$i$i;
   $154 = $153<<2;
   _memmove(($151|0),($152|0),($154|0))|0;
   $155 = $20;
   $156 = $__n$i$i$i;
   $157 = (($155) + ($156<<2)|0);
   $49 = $106;
   $50 = $157;
   $158 = $49;
   $48 = $158;
   $159 = $48;
   $160 = ((($159)) + 4|0);
   $161 = HEAP32[$160>>2]|0;
   $162 = HEAP32[$159>>2]|0;
   $163 = $161;
   $164 = $162;
   $165 = (($163) - ($164))|0;
   $166 = (($165|0) / 4)&-1;
   $__old_size$i$i = $166;
   $167 = $50;
   $46 = $158;
   $47 = $167;
   $168 = $46;
   while(1) {
    $169 = $47;
    $170 = ((($168)) + 4|0);
    $171 = HEAP32[$170>>2]|0;
    $172 = ($169|0)!=($171|0);
    if (!($172)) {
     break;
    }
    $45 = $168;
    $173 = $45;
    $174 = ((($173)) + 8|0);
    $44 = $174;
    $175 = $44;
    $43 = $175;
    $176 = $43;
    $177 = ((($168)) + 4|0);
    $178 = HEAP32[$177>>2]|0;
    $179 = ((($178)) + -4|0);
    HEAP32[$177>>2] = $179;
    $42 = $179;
    $180 = $42;
    $39 = $176;
    $40 = $180;
    $181 = $39;
    $182 = $40;
    ;HEAP8[$38>>0]=HEAP8[$41>>0]|0;
    $36 = $181;
    $37 = $182;
    $183 = $36;
    $184 = $37;
    $34 = $183;
    $35 = $184;
   }
   $185 = $__old_size$i$i;
   __THREW__ = 0;
   invoke_vii(597,($158|0),($185|0));
   $186 = __THREW__; __THREW__ = 0;
   $187 = $186&1;
   if ($187) {
    $188 = ___cxa_find_matching_catch(0|0)|0;
    $189 = tempRet0;
    ___clang_call_terminate($188);
    // unreachable;
   }
   $190 = HEAP32[$60>>2]|0;
   HEAP32[$70>>2] = $190;
   $$expand_i1_val2 = 1;
   HEAP8[$65>>0] = $$expand_i1_val2;
   $$pre_trunc = HEAP8[$65>>0]|0;
   $191 = $$pre_trunc&1;
   STACKTOP = sp;return ($191|0);
  }
 }
 $$expand_i1_val = 0;
 HEAP8[$65>>0] = $$expand_i1_val;
 $$pre_trunc = HEAP8[$65>>0]|0;
 $191 = $$pre_trunc&1;
 STACKTOP = sp;return ($191|0);
}
function __ZN4NGIS4Data19CUdxKernelRealArrayD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 5124;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 16|0);
 __ZNSt3__16vectorIdNS_9allocatorIdEEED2Ev($3);
 __ZN4NGIS4Data10CUdxKernelD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data19CUdxKernelRealArrayD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4NGIS4Data19CUdxKernelRealArrayD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data19CUdxKernelRealArray8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = ((($2)) + 16|0);
 $0 = $3;
 $4 = $0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$4>>2]|0;
 $8 = $6;
 $9 = $7;
 $10 = (($8) - ($9))|0;
 $11 = (($10|0) / 8)&-1;
 STACKTOP = sp;return ($11|0);
}
function __ZN4NGIS4Data19CUdxKernelRealArray10clearValueEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp;
 $8 = sp + 76|0;
 $18 = $this;
 $19 = $18;
 $20 = ((($19)) + 16|0);
 $17 = $20;
 $21 = $17;
 $16 = $21;
 $22 = $16;
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = HEAP32[$22>>2]|0;
 $26 = $24;
 $27 = $25;
 $28 = (($26) - ($27))|0;
 $29 = (($28|0) / 8)&-1;
 $__old_size$i = $29;
 $15 = $21;
 $30 = $15;
 $31 = HEAP32[$30>>2]|0;
 $13 = $30;
 $14 = $31;
 $32 = $13;
 while(1) {
  $33 = $14;
  $34 = ((($32)) + 4|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ($33|0)!=($35|0);
  if (!($36)) {
   break;
  }
  $12 = $32;
  $37 = $12;
  $38 = ((($37)) + 8|0);
  $11 = $38;
  $39 = $11;
  $10 = $39;
  $40 = $10;
  $41 = ((($32)) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ((($42)) + -8|0);
  HEAP32[$41>>2] = $43;
  $9 = $43;
  $44 = $9;
  $6 = $40;
  $7 = $44;
  $45 = $6;
  $46 = $7;
  ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
  $3 = $45;
  $4 = $46;
  $47 = $3;
  $48 = $4;
  $1 = $47;
  $2 = $48;
 }
 $49 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(598,($21|0),($49|0));
 $50 = __THREW__; __THREW__ = 0;
 $51 = $50&1;
 if ($51) {
  $52 = ___cxa_find_matching_catch(0|0)|0;
  $53 = tempRet0;
  ___clang_call_terminate($52);
  // unreachable;
 } else {
  $0 = $21;
  STACKTOP = sp;return;
 }
}
function __ZN4NGIS4Data19CUdxKernelRealArray18removeValueByIndexEi($this,$idx) {
 $this = $this|0;
 $idx = $idx|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__n$i$i$i = 0, $__old_size$i$i = 0, $__p$i = 0, $__ps$i = 0, $it = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp + 272|0;
 $11 = sp + 252|0;
 $14 = sp + 240|0;
 $27 = sp + 184|0;
 $38 = sp + 8|0;
 $41 = sp + 301|0;
 $53 = sp + 84|0;
 $56 = sp + 72|0;
 $58 = sp + 64|0;
 $60 = sp + 56|0;
 $62 = sp + 44|0;
 $63 = sp;
 $65 = sp + 300|0;
 $it = sp + 24|0;
 $68 = sp + 20|0;
 $69 = sp + 16|0;
 $70 = sp + 12|0;
 $66 = $this;
 $67 = $idx;
 $71 = $66;
 $72 = $67;
 $73 = ($72|0)<(0);
 if (!($73)) {
  $74 = $67;
  $75 = ((($71)) + 16|0);
  $64 = $75;
  $76 = $64;
  $77 = ((($76)) + 4|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = HEAP32[$76>>2]|0;
  $80 = $78;
  $81 = $79;
  $82 = (($80) - ($81))|0;
  $83 = (($82|0) / 8)&-1;
  $84 = ($74>>>0)>=($83>>>0);
  if (!($84)) {
   $85 = ((($71)) + 16|0);
   $15 = $85;
   $86 = $15;
   $87 = HEAP32[$86>>2]|0;
   $12 = $86;
   $13 = $87;
   $88 = $13;
   $9 = $11;
   $10 = $88;
   $89 = $9;
   $90 = $10;
   HEAP32[$89>>2] = $90;
   $91 = HEAP32[$11>>2]|0;
   HEAP32[$14>>2] = $91;
   $92 = HEAP32[$14>>2]|0;
   HEAP32[$it>>2] = $92;
   $93 = $67;
   $7 = $it;
   $8 = $93;
   $94 = $7;
   ;HEAP32[$6>>2]=HEAP32[$94>>2]|0;
   $95 = $8;
   $4 = $6;
   $5 = $95;
   $96 = $4;
   $97 = $5;
   $98 = HEAP32[$96>>2]|0;
   $99 = (($98) + ($97<<3)|0);
   HEAP32[$96>>2] = $99;
   $100 = HEAP32[$6>>2]|0;
   HEAP32[$68>>2] = $100;
   ;HEAP32[$it>>2]=HEAP32[$68>>2]|0;
   $101 = ((($71)) + 16|0);
   $1 = $69;
   $2 = $it;
   $3 = 0;
   $102 = $1;
   $103 = $2;
   $0 = $103;
   $104 = $0;
   $105 = HEAP32[$104>>2]|0;
   HEAP32[$102>>2] = $105;
   ;HEAP8[$63>>0]=HEAP8[$69>>0]|0;HEAP8[$63+1>>0]=HEAP8[$69+1>>0]|0;HEAP8[$63+2>>0]=HEAP8[$69+2>>0]|0;HEAP8[$63+3>>0]=HEAP8[$69+3>>0]|0;
   $61 = $101;
   $106 = $61;
   $59 = $106;
   $107 = $59;
   $57 = $107;
   $108 = $57;
   $109 = HEAP32[$108>>2]|0;
   $54 = $108;
   $55 = $109;
   $110 = $55;
   $51 = $53;
   $52 = $110;
   $111 = $51;
   $112 = $52;
   HEAP32[$111>>2] = $112;
   $113 = HEAP32[$53>>2]|0;
   HEAP32[$56>>2] = $113;
   $114 = HEAP32[$56>>2]|0;
   HEAP32[$58>>2] = $114;
   $115 = HEAP32[$58>>2]|0;
   HEAP32[$62>>2] = $115;
   $32 = $63;
   $33 = $62;
   $116 = $32;
   $31 = $116;
   $117 = $31;
   $118 = HEAP32[$117>>2]|0;
   $119 = $33;
   $30 = $119;
   $120 = $30;
   $121 = HEAP32[$120>>2]|0;
   $122 = $118;
   $123 = $121;
   $124 = (($122) - ($123))|0;
   $125 = (($124|0) / 8)&-1;
   $__ps$i = $125;
   $126 = HEAP32[$106>>2]|0;
   $127 = $__ps$i;
   $128 = (($126) + ($127<<3)|0);
   $__p$i = $128;
   $129 = $__p$i;
   $28 = $106;
   $29 = $129;
   $130 = $29;
   $25 = $27;
   $26 = $130;
   $131 = $25;
   $132 = $26;
   HEAP32[$131>>2] = $132;
   $133 = HEAP32[$27>>2]|0;
   HEAP32[$60>>2] = $133;
   $134 = $__p$i;
   $135 = ((($134)) + 8|0);
   $136 = ((($106)) + 4|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = $__p$i;
   $22 = $135;
   $23 = $137;
   $24 = $138;
   $139 = $22;
   $21 = $139;
   $140 = $21;
   $141 = $23;
   $16 = $141;
   $142 = $16;
   $143 = $24;
   $17 = $143;
   $144 = $17;
   $18 = $140;
   $19 = $142;
   $20 = $144;
   $145 = $19;
   $146 = $18;
   $147 = $145;
   $148 = $146;
   $149 = (($147) - ($148))|0;
   $150 = (($149|0) / 8)&-1;
   $__n$i$i$i = $150;
   $151 = $20;
   $152 = $18;
   $153 = $__n$i$i$i;
   $154 = $153<<3;
   _memmove(($151|0),($152|0),($154|0))|0;
   $155 = $20;
   $156 = $__n$i$i$i;
   $157 = (($155) + ($156<<3)|0);
   $49 = $106;
   $50 = $157;
   $158 = $49;
   $48 = $158;
   $159 = $48;
   $160 = ((($159)) + 4|0);
   $161 = HEAP32[$160>>2]|0;
   $162 = HEAP32[$159>>2]|0;
   $163 = $161;
   $164 = $162;
   $165 = (($163) - ($164))|0;
   $166 = (($165|0) / 8)&-1;
   $__old_size$i$i = $166;
   $167 = $50;
   $46 = $158;
   $47 = $167;
   $168 = $46;
   while(1) {
    $169 = $47;
    $170 = ((($168)) + 4|0);
    $171 = HEAP32[$170>>2]|0;
    $172 = ($169|0)!=($171|0);
    if (!($172)) {
     break;
    }
    $45 = $168;
    $173 = $45;
    $174 = ((($173)) + 8|0);
    $44 = $174;
    $175 = $44;
    $43 = $175;
    $176 = $43;
    $177 = ((($168)) + 4|0);
    $178 = HEAP32[$177>>2]|0;
    $179 = ((($178)) + -8|0);
    HEAP32[$177>>2] = $179;
    $42 = $179;
    $180 = $42;
    $39 = $176;
    $40 = $180;
    $181 = $39;
    $182 = $40;
    ;HEAP8[$38>>0]=HEAP8[$41>>0]|0;
    $36 = $181;
    $37 = $182;
    $183 = $36;
    $184 = $37;
    $34 = $183;
    $35 = $184;
   }
   $185 = $__old_size$i$i;
   __THREW__ = 0;
   invoke_vii(598,($158|0),($185|0));
   $186 = __THREW__; __THREW__ = 0;
   $187 = $186&1;
   if ($187) {
    $188 = ___cxa_find_matching_catch(0|0)|0;
    $189 = tempRet0;
    ___clang_call_terminate($188);
    // unreachable;
   }
   $190 = HEAP32[$60>>2]|0;
   HEAP32[$70>>2] = $190;
   $$expand_i1_val2 = 1;
   HEAP8[$65>>0] = $$expand_i1_val2;
   $$pre_trunc = HEAP8[$65>>0]|0;
   $191 = $$pre_trunc&1;
   STACKTOP = sp;return ($191|0);
  }
 }
 $$expand_i1_val = 0;
 HEAP8[$65>>0] = $$expand_i1_val;
 $$pre_trunc = HEAP8[$65>>0]|0;
 $191 = $$pre_trunc&1;
 STACKTOP = sp;return ($191|0);
}
function __ZN4NGIS4Data21CUdxKernelStringArrayD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 5184;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 16|0);
 __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($3);
 __ZN4NGIS4Data10CUdxKernelD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data21CUdxKernelStringArrayD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4NGIS4Data21CUdxKernelStringArrayD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data21CUdxKernelStringArray8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = ((($2)) + 16|0);
 $0 = $3;
 $4 = $0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$4>>2]|0;
 $8 = $6;
 $9 = $7;
 $10 = (($8) - ($9))|0;
 $11 = (($10|0) / 12)&-1;
 STACKTOP = sp;return ($11|0);
}
function __ZN4NGIS4Data21CUdxKernelStringArray10clearValueEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp;
 $8 = sp + 76|0;
 $18 = $this;
 $19 = $18;
 $20 = ((($19)) + 16|0);
 $17 = $20;
 $21 = $17;
 $16 = $21;
 $22 = $16;
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = HEAP32[$22>>2]|0;
 $26 = $24;
 $27 = $25;
 $28 = (($26) - ($27))|0;
 $29 = (($28|0) / 12)&-1;
 $__old_size$i = $29;
 $15 = $21;
 $30 = $15;
 $31 = HEAP32[$30>>2]|0;
 $13 = $30;
 $14 = $31;
 $32 = $13;
 while(1) {
  $33 = $14;
  $34 = ((($32)) + 4|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ($33|0)!=($35|0);
  if (!($36)) {
   break;
  }
  $12 = $32;
  $37 = $12;
  $38 = ((($37)) + 8|0);
  $11 = $38;
  $39 = $11;
  $10 = $39;
  $40 = $10;
  $41 = ((($32)) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ((($42)) + -12|0);
  HEAP32[$41>>2] = $43;
  $9 = $43;
  $44 = $9;
  $6 = $40;
  $7 = $44;
  $45 = $6;
  $46 = $7;
  ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
  $3 = $45;
  $4 = $46;
  $47 = $3;
  $48 = $4;
  $1 = $47;
  $2 = $48;
  $49 = $2;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($49);
 }
 $50 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(599,($21|0),($50|0));
 $51 = __THREW__; __THREW__ = 0;
 $52 = $51&1;
 if ($52) {
  $53 = ___cxa_find_matching_catch(0|0)|0;
  $54 = tempRet0;
  ___clang_call_terminate($53);
  // unreachable;
 } else {
  $0 = $21;
  STACKTOP = sp;return;
 }
}
function __ZN4NGIS4Data21CUdxKernelStringArray18removeValueByIndexEi($this,$idx) {
 $this = $this|0;
 $idx = $idx|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i$i$i$i = 0, $__i$i$i$i$i$i$i = 0, $__old_size$i$i = 0, $__p$i = 0, $__ps$i = 0, $it = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp + 472|0;
 $11 = sp + 452|0;
 $14 = sp + 440|0;
 $30 = sp + 24|0;
 $33 = sp + 505|0;
 $60 = sp + 504|0;
 $61 = sp + 503|0;
 $64 = sp + 16|0;
 $67 = sp + 502|0;
 $78 = sp + 200|0;
 $89 = sp + 8|0;
 $92 = sp + 501|0;
 $104 = sp + 100|0;
 $107 = sp + 88|0;
 $109 = sp + 80|0;
 $111 = sp + 72|0;
 $113 = sp + 60|0;
 $114 = sp;
 $116 = sp + 500|0;
 $it = sp + 40|0;
 $119 = sp + 36|0;
 $120 = sp + 32|0;
 $121 = sp + 28|0;
 $117 = $this;
 $118 = $idx;
 $122 = $117;
 $123 = $118;
 $124 = ($123|0)<(0);
 if (!($124)) {
  $125 = $118;
  $126 = ((($122)) + 16|0);
  $115 = $126;
  $127 = $115;
  $128 = ((($127)) + 4|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = HEAP32[$127>>2]|0;
  $131 = $129;
  $132 = $130;
  $133 = (($131) - ($132))|0;
  $134 = (($133|0) / 12)&-1;
  $135 = ($125>>>0)>=($134>>>0);
  if (!($135)) {
   $136 = ((($122)) + 16|0);
   $15 = $136;
   $137 = $15;
   $138 = HEAP32[$137>>2]|0;
   $12 = $137;
   $13 = $138;
   $139 = $13;
   $9 = $11;
   $10 = $139;
   $140 = $9;
   $141 = $10;
   HEAP32[$140>>2] = $141;
   $142 = HEAP32[$11>>2]|0;
   HEAP32[$14>>2] = $142;
   $143 = HEAP32[$14>>2]|0;
   HEAP32[$it>>2] = $143;
   $144 = $118;
   $7 = $it;
   $8 = $144;
   $145 = $7;
   ;HEAP32[$6>>2]=HEAP32[$145>>2]|0;
   $146 = $8;
   $4 = $6;
   $5 = $146;
   $147 = $4;
   $148 = $5;
   $149 = HEAP32[$147>>2]|0;
   $150 = (($149) + (($148*12)|0)|0);
   HEAP32[$147>>2] = $150;
   $151 = HEAP32[$6>>2]|0;
   HEAP32[$119>>2] = $151;
   ;HEAP32[$it>>2]=HEAP32[$119>>2]|0;
   $152 = ((($122)) + 16|0);
   $1 = $120;
   $2 = $it;
   $3 = 0;
   $153 = $1;
   $154 = $2;
   $0 = $154;
   $155 = $0;
   $156 = HEAP32[$155>>2]|0;
   HEAP32[$153>>2] = $156;
   ;HEAP8[$114>>0]=HEAP8[$120>>0]|0;HEAP8[$114+1>>0]=HEAP8[$120+1>>0]|0;HEAP8[$114+2>>0]=HEAP8[$120+2>>0]|0;HEAP8[$114+3>>0]=HEAP8[$120+3>>0]|0;
   $112 = $152;
   $157 = $112;
   $110 = $157;
   $158 = $110;
   $108 = $158;
   $159 = $108;
   $160 = HEAP32[$159>>2]|0;
   $105 = $159;
   $106 = $160;
   $161 = $106;
   $102 = $104;
   $103 = $161;
   $162 = $102;
   $163 = $103;
   HEAP32[$162>>2] = $163;
   $164 = HEAP32[$104>>2]|0;
   HEAP32[$107>>2] = $164;
   $165 = HEAP32[$107>>2]|0;
   HEAP32[$109>>2] = $165;
   $166 = HEAP32[$109>>2]|0;
   HEAP32[$113>>2] = $166;
   $83 = $114;
   $84 = $113;
   $167 = $83;
   $82 = $167;
   $168 = $82;
   $169 = HEAP32[$168>>2]|0;
   $170 = $84;
   $81 = $170;
   $171 = $81;
   $172 = HEAP32[$171>>2]|0;
   $173 = $169;
   $174 = $172;
   $175 = (($173) - ($174))|0;
   $176 = (($175|0) / 12)&-1;
   $__ps$i = $176;
   $177 = HEAP32[$157>>2]|0;
   $178 = $__ps$i;
   $179 = (($177) + (($178*12)|0)|0);
   $__p$i = $179;
   $180 = $__p$i;
   $79 = $157;
   $80 = $180;
   $181 = $80;
   $76 = $78;
   $77 = $181;
   $182 = $76;
   $183 = $77;
   HEAP32[$182>>2] = $183;
   $184 = HEAP32[$78>>2]|0;
   HEAP32[$111>>2] = $184;
   $185 = $__p$i;
   $186 = ((($185)) + 12|0);
   $187 = ((($157)) + 4|0);
   $188 = HEAP32[$187>>2]|0;
   $189 = $__p$i;
   $73 = $186;
   $74 = $188;
   $75 = $189;
   $190 = $73;
   $72 = $190;
   $191 = $72;
   $192 = $74;
   $17 = $192;
   $193 = $17;
   $194 = $75;
   $16 = $194;
   $195 = $16;
   $69 = $191;
   $70 = $193;
   $71 = $195;
   while(1) {
    $196 = $69;
    $197 = $70;
    $198 = ($196|0)!=($197|0);
    $199 = $71;
    if (!($198)) {
     break;
    }
    $200 = $69;
    $68 = $200;
    $201 = $68;
    $65 = $199;
    $66 = $201;
    $202 = $65;
    $203 = $66;
    ;HEAP8[$64>>0]=HEAP8[$67>>0]|0;
    $62 = $202;
    $63 = $203;
    $204 = $62;
    $59 = $204;
    $205 = $59;
    $58 = $205;
    $57 = $205;
    $206 = $57;
    $56 = $206;
    $207 = $56;
    $55 = $207;
    $208 = $55;
    $209 = HEAP8[$208>>0]|0;
    $210 = $209&255;
    $211 = $210 & 1;
    $212 = ($211|0)!=(0);
    if ($212) {
     $50 = $205;
     $213 = $50;
     $49 = $213;
     $214 = $49;
     $48 = $214;
     $215 = $48;
     $216 = ((($215)) + 8|0);
     $217 = HEAP32[$216>>2]|0;
     HEAP8[$60>>0] = 0;
     __ZNSt3__111char_traitsIcE6assignERcRKc($217,$60);
     $41 = $205;
     $42 = 0;
     $218 = $41;
     $219 = $42;
     $40 = $218;
     $220 = $40;
     $39 = $220;
     $221 = $39;
     $222 = ((($221)) + 4|0);
     HEAP32[$222>>2] = $219;
    } else {
     $47 = $205;
     $223 = $47;
     $46 = $223;
     $224 = $46;
     $45 = $224;
     $225 = $45;
     $226 = ((($225)) + 1|0);
     $44 = $226;
     $227 = $44;
     $43 = $227;
     $228 = $43;
     HEAP8[$61>>0] = 0;
     __ZNSt3__111char_traitsIcE6assignERcRKc($228,$61);
     $53 = $205;
     $54 = 0;
     $229 = $53;
     $230 = $54;
     $231 = $230 << 1;
     $232 = $231&255;
     $52 = $229;
     $233 = $52;
     $51 = $233;
     $234 = $51;
     HEAP8[$234>>0] = $232;
    }
    $38 = $204;
    $235 = $38;
    __THREW__ = 0;
    invoke_vii(600,($235|0),0);
    $236 = __THREW__; __THREW__ = 0;
    $237 = $236&1;
    if ($237) {
     label = 10;
     break;
    }
    $37 = $204;
    $240 = $37;
    $36 = $240;
    $241 = $36;
    $242 = $63;
    $35 = $242;
    $243 = $35;
    $34 = $243;
    $244 = $34;
    ;HEAP32[$241>>2]=HEAP32[$244>>2]|0;HEAP32[$241+4>>2]=HEAP32[$244+4>>2]|0;HEAP32[$241+8>>2]=HEAP32[$244+8>>2]|0;
    $245 = $63;
    $31 = $204;
    $32 = $245;
    $246 = $31;
    $247 = $32;
    ;HEAP8[$30>>0]=HEAP8[$33>>0]|0;
    $28 = $246;
    $29 = $247;
    $248 = $28;
    $27 = $248;
    $249 = $27;
    $26 = $249;
    $250 = $26;
    $25 = $250;
    $251 = $29;
    $23 = $251;
    $252 = $23;
    $22 = $252;
    $253 = $22;
    $21 = $253;
    $254 = $21;
    $24 = $254;
    $255 = $63;
    $20 = $255;
    $256 = $20;
    $19 = $256;
    $257 = $19;
    $18 = $257;
    $258 = $18;
    $__a$i$i$i$i$i$i = $258;
    $__i$i$i$i$i$i$i = 0;
    while(1) {
     $259 = $__i$i$i$i$i$i$i;
     $260 = ($259>>>0)<(3);
     if (!($260)) {
      break;
     }
     $261 = $__i$i$i$i$i$i$i;
     $262 = $__a$i$i$i$i$i$i;
     $263 = (($262) + ($261<<2)|0);
     HEAP32[$263>>2] = 0;
     $264 = $__i$i$i$i$i$i$i;
     $265 = (($264) + 1)|0;
     $__i$i$i$i$i$i$i = $265;
    }
    $266 = $69;
    $267 = ((($266)) + 12|0);
    $69 = $267;
    $268 = $71;
    $269 = ((($268)) + 12|0);
    $71 = $269;
   }
   if ((label|0) == 10) {
    $238 = ___cxa_find_matching_catch(0|0)|0;
    $239 = tempRet0;
    ___clang_call_terminate($238);
    // unreachable;
   }
   $100 = $157;
   $101 = $199;
   $270 = $100;
   $99 = $270;
   $271 = $99;
   $272 = ((($271)) + 4|0);
   $273 = HEAP32[$272>>2]|0;
   $274 = HEAP32[$271>>2]|0;
   $275 = $273;
   $276 = $274;
   $277 = (($275) - ($276))|0;
   $278 = (($277|0) / 12)&-1;
   $__old_size$i$i = $278;
   $279 = $101;
   $97 = $270;
   $98 = $279;
   $280 = $97;
   while(1) {
    $281 = $98;
    $282 = ((($280)) + 4|0);
    $283 = HEAP32[$282>>2]|0;
    $284 = ($281|0)!=($283|0);
    if (!($284)) {
     break;
    }
    $96 = $280;
    $285 = $96;
    $286 = ((($285)) + 8|0);
    $95 = $286;
    $287 = $95;
    $94 = $287;
    $288 = $94;
    $289 = ((($280)) + 4|0);
    $290 = HEAP32[$289>>2]|0;
    $291 = ((($290)) + -12|0);
    HEAP32[$289>>2] = $291;
    $93 = $291;
    $292 = $93;
    $90 = $288;
    $91 = $292;
    $293 = $90;
    $294 = $91;
    ;HEAP8[$89>>0]=HEAP8[$92>>0]|0;
    $87 = $293;
    $88 = $294;
    $295 = $87;
    $296 = $88;
    $85 = $295;
    $86 = $296;
    $297 = $86;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($297);
   }
   $298 = $__old_size$i$i;
   __THREW__ = 0;
   invoke_vii(599,($270|0),($298|0));
   $299 = __THREW__; __THREW__ = 0;
   $300 = $299&1;
   if ($300) {
    $301 = ___cxa_find_matching_catch(0|0)|0;
    $302 = tempRet0;
    ___clang_call_terminate($301);
    // unreachable;
   }
   $303 = HEAP32[$111>>2]|0;
   HEAP32[$121>>2] = $303;
   $$expand_i1_val2 = 1;
   HEAP8[$116>>0] = $$expand_i1_val2;
   $$pre_trunc = HEAP8[$116>>0]|0;
   $304 = $$pre_trunc&1;
   STACKTOP = sp;return ($304|0);
  }
 }
 $$expand_i1_val = 0;
 HEAP8[$116>>0] = $$expand_i1_val;
 $$pre_trunc = HEAP8[$116>>0]|0;
 $304 = $$pre_trunc&1;
 STACKTOP = sp;return ($304|0);
}
function __ZN4NGIS4Data23CUdxKernelVector2dArrayD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 5244;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 16|0);
 __ZNSt3__16vectorIN4NGIS4Data8Vector2dENS_9allocatorIS3_EEED2Ev($3);
 __ZN4NGIS4Data10CUdxKernelD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data23CUdxKernelVector2dArrayD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4NGIS4Data23CUdxKernelVector2dArrayD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data23CUdxKernelVector2dArray8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = ((($2)) + 16|0);
 $0 = $3;
 $4 = $0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$4>>2]|0;
 $8 = $6;
 $9 = $7;
 $10 = (($8) - ($9))|0;
 $11 = (($10|0) / 16)&-1;
 STACKTOP = sp;return ($11|0);
}
function __ZN4NGIS4Data23CUdxKernelVector2dArray10clearValueEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp;
 $8 = sp + 76|0;
 $18 = $this;
 $19 = $18;
 $20 = ((($19)) + 16|0);
 $17 = $20;
 $21 = $17;
 $16 = $21;
 $22 = $16;
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = HEAP32[$22>>2]|0;
 $26 = $24;
 $27 = $25;
 $28 = (($26) - ($27))|0;
 $29 = (($28|0) / 16)&-1;
 $__old_size$i = $29;
 $15 = $21;
 $30 = $15;
 $31 = HEAP32[$30>>2]|0;
 $13 = $30;
 $14 = $31;
 $32 = $13;
 while(1) {
  $33 = $14;
  $34 = ((($32)) + 4|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ($33|0)!=($35|0);
  if (!($36)) {
   break;
  }
  $12 = $32;
  $37 = $12;
  $38 = ((($37)) + 8|0);
  $11 = $38;
  $39 = $11;
  $10 = $39;
  $40 = $10;
  $41 = ((($32)) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ((($42)) + -16|0);
  HEAP32[$41>>2] = $43;
  $9 = $43;
  $44 = $9;
  $6 = $40;
  $7 = $44;
  $45 = $6;
  $46 = $7;
  ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
  $3 = $45;
  $4 = $46;
  $47 = $3;
  $48 = $4;
  $1 = $47;
  $2 = $48;
 }
 $49 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(601,($21|0),($49|0));
 $50 = __THREW__; __THREW__ = 0;
 $51 = $50&1;
 if ($51) {
  $52 = ___cxa_find_matching_catch(0|0)|0;
  $53 = tempRet0;
  ___clang_call_terminate($52);
  // unreachable;
 } else {
  $0 = $21;
  STACKTOP = sp;return;
 }
}
function __ZN4NGIS4Data23CUdxKernelVector2dArray18removeValueByIndexEi($this,$idx) {
 $this = $this|0;
 $idx = $idx|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__n$i$i$i = 0, $__old_size$i$i = 0, $__p$i = 0, $__ps$i = 0, $it = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp + 272|0;
 $11 = sp + 252|0;
 $14 = sp + 240|0;
 $27 = sp + 184|0;
 $38 = sp + 8|0;
 $41 = sp + 301|0;
 $53 = sp + 84|0;
 $56 = sp + 72|0;
 $58 = sp + 64|0;
 $60 = sp + 56|0;
 $62 = sp + 44|0;
 $63 = sp;
 $65 = sp + 300|0;
 $it = sp + 24|0;
 $68 = sp + 20|0;
 $69 = sp + 16|0;
 $70 = sp + 12|0;
 $66 = $this;
 $67 = $idx;
 $71 = $66;
 $72 = $67;
 $73 = ($72|0)<(0);
 if (!($73)) {
  $74 = $67;
  $75 = ((($71)) + 16|0);
  $64 = $75;
  $76 = $64;
  $77 = ((($76)) + 4|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = HEAP32[$76>>2]|0;
  $80 = $78;
  $81 = $79;
  $82 = (($80) - ($81))|0;
  $83 = (($82|0) / 16)&-1;
  $84 = ($74>>>0)>=($83>>>0);
  if (!($84)) {
   $85 = ((($71)) + 16|0);
   $15 = $85;
   $86 = $15;
   $87 = HEAP32[$86>>2]|0;
   $12 = $86;
   $13 = $87;
   $88 = $13;
   $9 = $11;
   $10 = $88;
   $89 = $9;
   $90 = $10;
   HEAP32[$89>>2] = $90;
   $91 = HEAP32[$11>>2]|0;
   HEAP32[$14>>2] = $91;
   $92 = HEAP32[$14>>2]|0;
   HEAP32[$it>>2] = $92;
   $93 = $67;
   $7 = $it;
   $8 = $93;
   $94 = $7;
   ;HEAP32[$6>>2]=HEAP32[$94>>2]|0;
   $95 = $8;
   $4 = $6;
   $5 = $95;
   $96 = $4;
   $97 = $5;
   $98 = HEAP32[$96>>2]|0;
   $99 = (($98) + ($97<<4)|0);
   HEAP32[$96>>2] = $99;
   $100 = HEAP32[$6>>2]|0;
   HEAP32[$68>>2] = $100;
   ;HEAP32[$it>>2]=HEAP32[$68>>2]|0;
   $101 = ((($71)) + 16|0);
   $1 = $69;
   $2 = $it;
   $3 = 0;
   $102 = $1;
   $103 = $2;
   $0 = $103;
   $104 = $0;
   $105 = HEAP32[$104>>2]|0;
   HEAP32[$102>>2] = $105;
   ;HEAP8[$63>>0]=HEAP8[$69>>0]|0;HEAP8[$63+1>>0]=HEAP8[$69+1>>0]|0;HEAP8[$63+2>>0]=HEAP8[$69+2>>0]|0;HEAP8[$63+3>>0]=HEAP8[$69+3>>0]|0;
   $61 = $101;
   $106 = $61;
   $59 = $106;
   $107 = $59;
   $57 = $107;
   $108 = $57;
   $109 = HEAP32[$108>>2]|0;
   $54 = $108;
   $55 = $109;
   $110 = $55;
   $51 = $53;
   $52 = $110;
   $111 = $51;
   $112 = $52;
   HEAP32[$111>>2] = $112;
   $113 = HEAP32[$53>>2]|0;
   HEAP32[$56>>2] = $113;
   $114 = HEAP32[$56>>2]|0;
   HEAP32[$58>>2] = $114;
   $115 = HEAP32[$58>>2]|0;
   HEAP32[$62>>2] = $115;
   $32 = $63;
   $33 = $62;
   $116 = $32;
   $31 = $116;
   $117 = $31;
   $118 = HEAP32[$117>>2]|0;
   $119 = $33;
   $30 = $119;
   $120 = $30;
   $121 = HEAP32[$120>>2]|0;
   $122 = $118;
   $123 = $121;
   $124 = (($122) - ($123))|0;
   $125 = (($124|0) / 16)&-1;
   $__ps$i = $125;
   $126 = HEAP32[$106>>2]|0;
   $127 = $__ps$i;
   $128 = (($126) + ($127<<4)|0);
   $__p$i = $128;
   $129 = $__p$i;
   $28 = $106;
   $29 = $129;
   $130 = $29;
   $25 = $27;
   $26 = $130;
   $131 = $25;
   $132 = $26;
   HEAP32[$131>>2] = $132;
   $133 = HEAP32[$27>>2]|0;
   HEAP32[$60>>2] = $133;
   $134 = $__p$i;
   $135 = ((($134)) + 16|0);
   $136 = ((($106)) + 4|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = $__p$i;
   $22 = $135;
   $23 = $137;
   $24 = $138;
   $139 = $22;
   $21 = $139;
   $140 = $21;
   $141 = $23;
   $16 = $141;
   $142 = $16;
   $143 = $24;
   $17 = $143;
   $144 = $17;
   $18 = $140;
   $19 = $142;
   $20 = $144;
   $145 = $19;
   $146 = $18;
   $147 = $145;
   $148 = $146;
   $149 = (($147) - ($148))|0;
   $150 = (($149|0) / 16)&-1;
   $__n$i$i$i = $150;
   $151 = $20;
   $152 = $18;
   $153 = $__n$i$i$i;
   $154 = $153<<4;
   _memmove(($151|0),($152|0),($154|0))|0;
   $155 = $20;
   $156 = $__n$i$i$i;
   $157 = (($155) + ($156<<4)|0);
   $49 = $106;
   $50 = $157;
   $158 = $49;
   $48 = $158;
   $159 = $48;
   $160 = ((($159)) + 4|0);
   $161 = HEAP32[$160>>2]|0;
   $162 = HEAP32[$159>>2]|0;
   $163 = $161;
   $164 = $162;
   $165 = (($163) - ($164))|0;
   $166 = (($165|0) / 16)&-1;
   $__old_size$i$i = $166;
   $167 = $50;
   $46 = $158;
   $47 = $167;
   $168 = $46;
   while(1) {
    $169 = $47;
    $170 = ((($168)) + 4|0);
    $171 = HEAP32[$170>>2]|0;
    $172 = ($169|0)!=($171|0);
    if (!($172)) {
     break;
    }
    $45 = $168;
    $173 = $45;
    $174 = ((($173)) + 8|0);
    $44 = $174;
    $175 = $44;
    $43 = $175;
    $176 = $43;
    $177 = ((($168)) + 4|0);
    $178 = HEAP32[$177>>2]|0;
    $179 = ((($178)) + -16|0);
    HEAP32[$177>>2] = $179;
    $42 = $179;
    $180 = $42;
    $39 = $176;
    $40 = $180;
    $181 = $39;
    $182 = $40;
    ;HEAP8[$38>>0]=HEAP8[$41>>0]|0;
    $36 = $181;
    $37 = $182;
    $183 = $36;
    $184 = $37;
    $34 = $183;
    $35 = $184;
   }
   $185 = $__old_size$i$i;
   __THREW__ = 0;
   invoke_vii(601,($158|0),($185|0));
   $186 = __THREW__; __THREW__ = 0;
   $187 = $186&1;
   if ($187) {
    $188 = ___cxa_find_matching_catch(0|0)|0;
    $189 = tempRet0;
    ___clang_call_terminate($188);
    // unreachable;
   }
   $190 = HEAP32[$60>>2]|0;
   HEAP32[$70>>2] = $190;
   $$expand_i1_val2 = 1;
   HEAP8[$65>>0] = $$expand_i1_val2;
   $$pre_trunc = HEAP8[$65>>0]|0;
   $191 = $$pre_trunc&1;
   STACKTOP = sp;return ($191|0);
  }
 }
 $$expand_i1_val = 0;
 HEAP8[$65>>0] = $$expand_i1_val;
 $$pre_trunc = HEAP8[$65>>0]|0;
 $191 = $$pre_trunc&1;
 STACKTOP = sp;return ($191|0);
}
function __ZN4NGIS4Data23CUdxKernelVector3dArrayD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 5308;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 16|0);
 __ZNSt3__16vectorIN4NGIS4Data8Vector3dENS_9allocatorIS3_EEED2Ev($3);
 __ZN4NGIS4Data10CUdxKernelD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data23CUdxKernelVector3dArrayD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4NGIS4Data23CUdxKernelVector3dArrayD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data23CUdxKernelVector3dArray8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = ((($2)) + 16|0);
 $0 = $3;
 $4 = $0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$4>>2]|0;
 $8 = $6;
 $9 = $7;
 $10 = (($8) - ($9))|0;
 $11 = (($10|0) / 24)&-1;
 STACKTOP = sp;return ($11|0);
}
function __ZN4NGIS4Data23CUdxKernelVector3dArray10clearValueEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp;
 $8 = sp + 76|0;
 $18 = $this;
 $19 = $18;
 $20 = ((($19)) + 16|0);
 $17 = $20;
 $21 = $17;
 $16 = $21;
 $22 = $16;
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = HEAP32[$22>>2]|0;
 $26 = $24;
 $27 = $25;
 $28 = (($26) - ($27))|0;
 $29 = (($28|0) / 24)&-1;
 $__old_size$i = $29;
 $15 = $21;
 $30 = $15;
 $31 = HEAP32[$30>>2]|0;
 $13 = $30;
 $14 = $31;
 $32 = $13;
 while(1) {
  $33 = $14;
  $34 = ((($32)) + 4|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ($33|0)!=($35|0);
  if (!($36)) {
   break;
  }
  $12 = $32;
  $37 = $12;
  $38 = ((($37)) + 8|0);
  $11 = $38;
  $39 = $11;
  $10 = $39;
  $40 = $10;
  $41 = ((($32)) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ((($42)) + -24|0);
  HEAP32[$41>>2] = $43;
  $9 = $43;
  $44 = $9;
  $6 = $40;
  $7 = $44;
  $45 = $6;
  $46 = $7;
  ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
  $3 = $45;
  $4 = $46;
  $47 = $3;
  $48 = $4;
  $1 = $47;
  $2 = $48;
 }
 $49 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(602,($21|0),($49|0));
 $50 = __THREW__; __THREW__ = 0;
 $51 = $50&1;
 if ($51) {
  $52 = ___cxa_find_matching_catch(0|0)|0;
  $53 = tempRet0;
  ___clang_call_terminate($52);
  // unreachable;
 } else {
  $0 = $21;
  STACKTOP = sp;return;
 }
}
function __ZN4NGIS4Data23CUdxKernelVector3dArray18removeValueByIndexEi($this,$idx) {
 $this = $this|0;
 $idx = $idx|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__n$i$i$i = 0, $__old_size$i$i = 0, $__p$i = 0, $__ps$i = 0, $it = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp + 272|0;
 $11 = sp + 252|0;
 $14 = sp + 240|0;
 $27 = sp + 184|0;
 $38 = sp + 8|0;
 $41 = sp + 301|0;
 $53 = sp + 84|0;
 $56 = sp + 72|0;
 $58 = sp + 64|0;
 $60 = sp + 56|0;
 $62 = sp + 44|0;
 $63 = sp;
 $65 = sp + 300|0;
 $it = sp + 24|0;
 $68 = sp + 20|0;
 $69 = sp + 16|0;
 $70 = sp + 12|0;
 $66 = $this;
 $67 = $idx;
 $71 = $66;
 $72 = $67;
 $73 = ($72|0)<(0);
 if (!($73)) {
  $74 = $67;
  $75 = ((($71)) + 16|0);
  $64 = $75;
  $76 = $64;
  $77 = ((($76)) + 4|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = HEAP32[$76>>2]|0;
  $80 = $78;
  $81 = $79;
  $82 = (($80) - ($81))|0;
  $83 = (($82|0) / 24)&-1;
  $84 = ($74>>>0)>=($83>>>0);
  if (!($84)) {
   $85 = ((($71)) + 16|0);
   $15 = $85;
   $86 = $15;
   $87 = HEAP32[$86>>2]|0;
   $12 = $86;
   $13 = $87;
   $88 = $13;
   $9 = $11;
   $10 = $88;
   $89 = $9;
   $90 = $10;
   HEAP32[$89>>2] = $90;
   $91 = HEAP32[$11>>2]|0;
   HEAP32[$14>>2] = $91;
   $92 = HEAP32[$14>>2]|0;
   HEAP32[$it>>2] = $92;
   $93 = $67;
   $7 = $it;
   $8 = $93;
   $94 = $7;
   ;HEAP32[$6>>2]=HEAP32[$94>>2]|0;
   $95 = $8;
   $4 = $6;
   $5 = $95;
   $96 = $4;
   $97 = $5;
   $98 = HEAP32[$96>>2]|0;
   $99 = (($98) + (($97*24)|0)|0);
   HEAP32[$96>>2] = $99;
   $100 = HEAP32[$6>>2]|0;
   HEAP32[$68>>2] = $100;
   ;HEAP32[$it>>2]=HEAP32[$68>>2]|0;
   $101 = ((($71)) + 16|0);
   $1 = $69;
   $2 = $it;
   $3 = 0;
   $102 = $1;
   $103 = $2;
   $0 = $103;
   $104 = $0;
   $105 = HEAP32[$104>>2]|0;
   HEAP32[$102>>2] = $105;
   ;HEAP8[$63>>0]=HEAP8[$69>>0]|0;HEAP8[$63+1>>0]=HEAP8[$69+1>>0]|0;HEAP8[$63+2>>0]=HEAP8[$69+2>>0]|0;HEAP8[$63+3>>0]=HEAP8[$69+3>>0]|0;
   $61 = $101;
   $106 = $61;
   $59 = $106;
   $107 = $59;
   $57 = $107;
   $108 = $57;
   $109 = HEAP32[$108>>2]|0;
   $54 = $108;
   $55 = $109;
   $110 = $55;
   $51 = $53;
   $52 = $110;
   $111 = $51;
   $112 = $52;
   HEAP32[$111>>2] = $112;
   $113 = HEAP32[$53>>2]|0;
   HEAP32[$56>>2] = $113;
   $114 = HEAP32[$56>>2]|0;
   HEAP32[$58>>2] = $114;
   $115 = HEAP32[$58>>2]|0;
   HEAP32[$62>>2] = $115;
   $32 = $63;
   $33 = $62;
   $116 = $32;
   $31 = $116;
   $117 = $31;
   $118 = HEAP32[$117>>2]|0;
   $119 = $33;
   $30 = $119;
   $120 = $30;
   $121 = HEAP32[$120>>2]|0;
   $122 = $118;
   $123 = $121;
   $124 = (($122) - ($123))|0;
   $125 = (($124|0) / 24)&-1;
   $__ps$i = $125;
   $126 = HEAP32[$106>>2]|0;
   $127 = $__ps$i;
   $128 = (($126) + (($127*24)|0)|0);
   $__p$i = $128;
   $129 = $__p$i;
   $28 = $106;
   $29 = $129;
   $130 = $29;
   $25 = $27;
   $26 = $130;
   $131 = $25;
   $132 = $26;
   HEAP32[$131>>2] = $132;
   $133 = HEAP32[$27>>2]|0;
   HEAP32[$60>>2] = $133;
   $134 = $__p$i;
   $135 = ((($134)) + 24|0);
   $136 = ((($106)) + 4|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = $__p$i;
   $22 = $135;
   $23 = $137;
   $24 = $138;
   $139 = $22;
   $21 = $139;
   $140 = $21;
   $141 = $23;
   $16 = $141;
   $142 = $16;
   $143 = $24;
   $17 = $143;
   $144 = $17;
   $18 = $140;
   $19 = $142;
   $20 = $144;
   $145 = $19;
   $146 = $18;
   $147 = $145;
   $148 = $146;
   $149 = (($147) - ($148))|0;
   $150 = (($149|0) / 24)&-1;
   $__n$i$i$i = $150;
   $151 = $20;
   $152 = $18;
   $153 = $__n$i$i$i;
   $154 = ($153*24)|0;
   _memmove(($151|0),($152|0),($154|0))|0;
   $155 = $20;
   $156 = $__n$i$i$i;
   $157 = (($155) + (($156*24)|0)|0);
   $49 = $106;
   $50 = $157;
   $158 = $49;
   $48 = $158;
   $159 = $48;
   $160 = ((($159)) + 4|0);
   $161 = HEAP32[$160>>2]|0;
   $162 = HEAP32[$159>>2]|0;
   $163 = $161;
   $164 = $162;
   $165 = (($163) - ($164))|0;
   $166 = (($165|0) / 24)&-1;
   $__old_size$i$i = $166;
   $167 = $50;
   $46 = $158;
   $47 = $167;
   $168 = $46;
   while(1) {
    $169 = $47;
    $170 = ((($168)) + 4|0);
    $171 = HEAP32[$170>>2]|0;
    $172 = ($169|0)!=($171|0);
    if (!($172)) {
     break;
    }
    $45 = $168;
    $173 = $45;
    $174 = ((($173)) + 8|0);
    $44 = $174;
    $175 = $44;
    $43 = $175;
    $176 = $43;
    $177 = ((($168)) + 4|0);
    $178 = HEAP32[$177>>2]|0;
    $179 = ((($178)) + -24|0);
    HEAP32[$177>>2] = $179;
    $42 = $179;
    $180 = $42;
    $39 = $176;
    $40 = $180;
    $181 = $39;
    $182 = $40;
    ;HEAP8[$38>>0]=HEAP8[$41>>0]|0;
    $36 = $181;
    $37 = $182;
    $183 = $36;
    $184 = $37;
    $34 = $183;
    $35 = $184;
   }
   $185 = $__old_size$i$i;
   __THREW__ = 0;
   invoke_vii(602,($158|0),($185|0));
   $186 = __THREW__; __THREW__ = 0;
   $187 = $186&1;
   if ($187) {
    $188 = ___cxa_find_matching_catch(0|0)|0;
    $189 = tempRet0;
    ___clang_call_terminate($188);
    // unreachable;
   }
   $190 = HEAP32[$60>>2]|0;
   HEAP32[$70>>2] = $190;
   $$expand_i1_val2 = 1;
   HEAP8[$65>>0] = $$expand_i1_val2;
   $$pre_trunc = HEAP8[$65>>0]|0;
   $191 = $$pre_trunc&1;
   STACKTOP = sp;return ($191|0);
  }
 }
 $$expand_i1_val = 0;
 HEAP8[$65>>0] = $$expand_i1_val;
 $$pre_trunc = HEAP8[$65>>0]|0;
 $191 = $$pre_trunc&1;
 STACKTOP = sp;return ($191|0);
}
function __ZN4NGIS4Data23CUdxKernelVector4dArrayD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 5372;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 16|0);
 __ZNSt3__16vectorIN4NGIS4Data8Vector4dENS_9allocatorIS3_EEED2Ev($3);
 __ZN4NGIS4Data10CUdxKernelD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data23CUdxKernelVector4dArrayD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4NGIS4Data23CUdxKernelVector4dArrayD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data23CUdxKernelVector4dArray8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = ((($2)) + 16|0);
 $0 = $3;
 $4 = $0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$4>>2]|0;
 $8 = $6;
 $9 = $7;
 $10 = (($8) - ($9))|0;
 $11 = (($10|0) / 32)&-1;
 STACKTOP = sp;return ($11|0);
}
function __ZN4NGIS4Data23CUdxKernelVector4dArray10clearValueEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp;
 $8 = sp + 76|0;
 $18 = $this;
 $19 = $18;
 $20 = ((($19)) + 16|0);
 $17 = $20;
 $21 = $17;
 $16 = $21;
 $22 = $16;
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = HEAP32[$22>>2]|0;
 $26 = $24;
 $27 = $25;
 $28 = (($26) - ($27))|0;
 $29 = (($28|0) / 32)&-1;
 $__old_size$i = $29;
 $15 = $21;
 $30 = $15;
 $31 = HEAP32[$30>>2]|0;
 $13 = $30;
 $14 = $31;
 $32 = $13;
 while(1) {
  $33 = $14;
  $34 = ((($32)) + 4|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ($33|0)!=($35|0);
  if (!($36)) {
   break;
  }
  $12 = $32;
  $37 = $12;
  $38 = ((($37)) + 8|0);
  $11 = $38;
  $39 = $11;
  $10 = $39;
  $40 = $10;
  $41 = ((($32)) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ((($42)) + -32|0);
  HEAP32[$41>>2] = $43;
  $9 = $43;
  $44 = $9;
  $6 = $40;
  $7 = $44;
  $45 = $6;
  $46 = $7;
  ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
  $3 = $45;
  $4 = $46;
  $47 = $3;
  $48 = $4;
  $1 = $47;
  $2 = $48;
 }
 $49 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(603,($21|0),($49|0));
 $50 = __THREW__; __THREW__ = 0;
 $51 = $50&1;
 if ($51) {
  $52 = ___cxa_find_matching_catch(0|0)|0;
  $53 = tempRet0;
  ___clang_call_terminate($52);
  // unreachable;
 } else {
  $0 = $21;
  STACKTOP = sp;return;
 }
}
function __ZN4NGIS4Data23CUdxKernelVector4dArray18removeValueByIndexEi($this,$idx) {
 $this = $this|0;
 $idx = $idx|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__n$i$i$i = 0, $__old_size$i$i = 0, $__p$i = 0, $__ps$i = 0, $it = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp + 272|0;
 $11 = sp + 252|0;
 $14 = sp + 240|0;
 $27 = sp + 184|0;
 $38 = sp + 8|0;
 $41 = sp + 301|0;
 $53 = sp + 84|0;
 $56 = sp + 72|0;
 $58 = sp + 64|0;
 $60 = sp + 56|0;
 $62 = sp + 44|0;
 $63 = sp;
 $65 = sp + 300|0;
 $it = sp + 24|0;
 $68 = sp + 20|0;
 $69 = sp + 16|0;
 $70 = sp + 12|0;
 $66 = $this;
 $67 = $idx;
 $71 = $66;
 $72 = $67;
 $73 = ($72|0)<(0);
 if (!($73)) {
  $74 = $67;
  $75 = ((($71)) + 16|0);
  $64 = $75;
  $76 = $64;
  $77 = ((($76)) + 4|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = HEAP32[$76>>2]|0;
  $80 = $78;
  $81 = $79;
  $82 = (($80) - ($81))|0;
  $83 = (($82|0) / 32)&-1;
  $84 = ($74>>>0)>=($83>>>0);
  if (!($84)) {
   $85 = ((($71)) + 16|0);
   $15 = $85;
   $86 = $15;
   $87 = HEAP32[$86>>2]|0;
   $12 = $86;
   $13 = $87;
   $88 = $13;
   $9 = $11;
   $10 = $88;
   $89 = $9;
   $90 = $10;
   HEAP32[$89>>2] = $90;
   $91 = HEAP32[$11>>2]|0;
   HEAP32[$14>>2] = $91;
   $92 = HEAP32[$14>>2]|0;
   HEAP32[$it>>2] = $92;
   $93 = $67;
   $7 = $it;
   $8 = $93;
   $94 = $7;
   ;HEAP32[$6>>2]=HEAP32[$94>>2]|0;
   $95 = $8;
   $4 = $6;
   $5 = $95;
   $96 = $4;
   $97 = $5;
   $98 = HEAP32[$96>>2]|0;
   $99 = (($98) + ($97<<5)|0);
   HEAP32[$96>>2] = $99;
   $100 = HEAP32[$6>>2]|0;
   HEAP32[$68>>2] = $100;
   ;HEAP32[$it>>2]=HEAP32[$68>>2]|0;
   $101 = ((($71)) + 16|0);
   $1 = $69;
   $2 = $it;
   $3 = 0;
   $102 = $1;
   $103 = $2;
   $0 = $103;
   $104 = $0;
   $105 = HEAP32[$104>>2]|0;
   HEAP32[$102>>2] = $105;
   ;HEAP8[$63>>0]=HEAP8[$69>>0]|0;HEAP8[$63+1>>0]=HEAP8[$69+1>>0]|0;HEAP8[$63+2>>0]=HEAP8[$69+2>>0]|0;HEAP8[$63+3>>0]=HEAP8[$69+3>>0]|0;
   $61 = $101;
   $106 = $61;
   $59 = $106;
   $107 = $59;
   $57 = $107;
   $108 = $57;
   $109 = HEAP32[$108>>2]|0;
   $54 = $108;
   $55 = $109;
   $110 = $55;
   $51 = $53;
   $52 = $110;
   $111 = $51;
   $112 = $52;
   HEAP32[$111>>2] = $112;
   $113 = HEAP32[$53>>2]|0;
   HEAP32[$56>>2] = $113;
   $114 = HEAP32[$56>>2]|0;
   HEAP32[$58>>2] = $114;
   $115 = HEAP32[$58>>2]|0;
   HEAP32[$62>>2] = $115;
   $32 = $63;
   $33 = $62;
   $116 = $32;
   $31 = $116;
   $117 = $31;
   $118 = HEAP32[$117>>2]|0;
   $119 = $33;
   $30 = $119;
   $120 = $30;
   $121 = HEAP32[$120>>2]|0;
   $122 = $118;
   $123 = $121;
   $124 = (($122) - ($123))|0;
   $125 = (($124|0) / 32)&-1;
   $__ps$i = $125;
   $126 = HEAP32[$106>>2]|0;
   $127 = $__ps$i;
   $128 = (($126) + ($127<<5)|0);
   $__p$i = $128;
   $129 = $__p$i;
   $28 = $106;
   $29 = $129;
   $130 = $29;
   $25 = $27;
   $26 = $130;
   $131 = $25;
   $132 = $26;
   HEAP32[$131>>2] = $132;
   $133 = HEAP32[$27>>2]|0;
   HEAP32[$60>>2] = $133;
   $134 = $__p$i;
   $135 = ((($134)) + 32|0);
   $136 = ((($106)) + 4|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = $__p$i;
   $22 = $135;
   $23 = $137;
   $24 = $138;
   $139 = $22;
   $21 = $139;
   $140 = $21;
   $141 = $23;
   $16 = $141;
   $142 = $16;
   $143 = $24;
   $17 = $143;
   $144 = $17;
   $18 = $140;
   $19 = $142;
   $20 = $144;
   $145 = $19;
   $146 = $18;
   $147 = $145;
   $148 = $146;
   $149 = (($147) - ($148))|0;
   $150 = (($149|0) / 32)&-1;
   $__n$i$i$i = $150;
   $151 = $20;
   $152 = $18;
   $153 = $__n$i$i$i;
   $154 = $153<<5;
   _memmove(($151|0),($152|0),($154|0))|0;
   $155 = $20;
   $156 = $__n$i$i$i;
   $157 = (($155) + ($156<<5)|0);
   $49 = $106;
   $50 = $157;
   $158 = $49;
   $48 = $158;
   $159 = $48;
   $160 = ((($159)) + 4|0);
   $161 = HEAP32[$160>>2]|0;
   $162 = HEAP32[$159>>2]|0;
   $163 = $161;
   $164 = $162;
   $165 = (($163) - ($164))|0;
   $166 = (($165|0) / 32)&-1;
   $__old_size$i$i = $166;
   $167 = $50;
   $46 = $158;
   $47 = $167;
   $168 = $46;
   while(1) {
    $169 = $47;
    $170 = ((($168)) + 4|0);
    $171 = HEAP32[$170>>2]|0;
    $172 = ($169|0)!=($171|0);
    if (!($172)) {
     break;
    }
    $45 = $168;
    $173 = $45;
    $174 = ((($173)) + 8|0);
    $44 = $174;
    $175 = $44;
    $43 = $175;
    $176 = $43;
    $177 = ((($168)) + 4|0);
    $178 = HEAP32[$177>>2]|0;
    $179 = ((($178)) + -32|0);
    HEAP32[$177>>2] = $179;
    $42 = $179;
    $180 = $42;
    $39 = $176;
    $40 = $180;
    $181 = $39;
    $182 = $40;
    ;HEAP8[$38>>0]=HEAP8[$41>>0]|0;
    $36 = $181;
    $37 = $182;
    $183 = $36;
    $184 = $37;
    $34 = $183;
    $35 = $184;
   }
   $185 = $__old_size$i$i;
   __THREW__ = 0;
   invoke_vii(603,($158|0),($185|0));
   $186 = __THREW__; __THREW__ = 0;
   $187 = $186&1;
   if ($187) {
    $188 = ___cxa_find_matching_catch(0|0)|0;
    $189 = tempRet0;
    ___clang_call_terminate($188);
    // unreachable;
   }
   $190 = HEAP32[$60>>2]|0;
   HEAP32[$70>>2] = $190;
   $$expand_i1_val2 = 1;
   HEAP8[$65>>0] = $$expand_i1_val2;
   $$pre_trunc = HEAP8[$65>>0]|0;
   $191 = $$pre_trunc&1;
   STACKTOP = sp;return ($191|0);
  }
 }
 $$expand_i1_val = 0;
 HEAP8[$65>>0] = $$expand_i1_val;
 $$pre_trunc = HEAP8[$65>>0]|0;
 $191 = $$pre_trunc&1;
 STACKTOP = sp;return ($191|0);
}
function __ZNKSt3__16vectorIN4NGIS4Data8Vector4dENS_9allocatorIS3_EEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 32)&-1;
 $35 = (($22) + ($34<<5)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + ($39<<5)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 32)&-1;
 $52 = (($43) + ($51<<5)|0);
 __ZNKSt3__16vectorIN4NGIS4Data8Vector4dENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN4NGIS4Data8Vector4dENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN4NGIS4Data8Vector4dENS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIN4NGIS4Data8Vector4dENS_9allocatorIS3_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIN4NGIS4Data8Vector4dENS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -32|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
 }
 $6 = $30;
 $52 = $6;
 $53 = ((($52)) + 8|0);
 $5 = $53;
 $54 = $5;
 $4 = $54;
 $55 = $4;
 $56 = HEAP32[$30>>2]|0;
 $3 = $30;
 $57 = $3;
 $2 = $57;
 $58 = $2;
 $59 = ((($58)) + 8|0);
 $1 = $59;
 $60 = $1;
 $0 = $60;
 $61 = $0;
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$57>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $67 = (($66|0) / 32)&-1;
 $11 = $55;
 $12 = $56;
 $13 = $67;
 $68 = $11;
 $69 = $12;
 $70 = $13;
 $8 = $68;
 $9 = $69;
 $10 = $70;
 $71 = $9;
 $7 = $71;
 $72 = $7;
 __ZdlPv($72);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN4NGIS4Data8Vector3dENS_9allocatorIS3_EEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 24)&-1;
 $35 = (($22) + (($34*24)|0)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + (($39*24)|0)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 24)&-1;
 $52 = (($43) + (($51*24)|0)|0);
 __ZNKSt3__16vectorIN4NGIS4Data8Vector3dENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN4NGIS4Data8Vector3dENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN4NGIS4Data8Vector3dENS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIN4NGIS4Data8Vector3dENS_9allocatorIS3_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIN4NGIS4Data8Vector3dENS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -24|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
 }
 $6 = $30;
 $52 = $6;
 $53 = ((($52)) + 8|0);
 $5 = $53;
 $54 = $5;
 $4 = $54;
 $55 = $4;
 $56 = HEAP32[$30>>2]|0;
 $3 = $30;
 $57 = $3;
 $2 = $57;
 $58 = $2;
 $59 = ((($58)) + 8|0);
 $1 = $59;
 $60 = $1;
 $0 = $60;
 $61 = $0;
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$57>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $67 = (($66|0) / 24)&-1;
 $11 = $55;
 $12 = $56;
 $13 = $67;
 $68 = $11;
 $69 = $12;
 $70 = $13;
 $8 = $68;
 $9 = $69;
 $10 = $70;
 $71 = $9;
 $7 = $71;
 $72 = $7;
 __ZdlPv($72);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN4NGIS4Data8Vector2dENS_9allocatorIS3_EEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 16)&-1;
 $35 = (($22) + ($34<<4)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + ($39<<4)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 16)&-1;
 $52 = (($43) + ($51<<4)|0);
 __ZNKSt3__16vectorIN4NGIS4Data8Vector2dENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN4NGIS4Data8Vector2dENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN4NGIS4Data8Vector2dENS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIN4NGIS4Data8Vector2dENS_9allocatorIS3_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIN4NGIS4Data8Vector2dENS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -16|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
 }
 $6 = $30;
 $52 = $6;
 $53 = ((($52)) + 8|0);
 $5 = $53;
 $54 = $5;
 $4 = $54;
 $55 = $4;
 $56 = HEAP32[$30>>2]|0;
 $3 = $30;
 $57 = $3;
 $2 = $57;
 $58 = $2;
 $59 = ((($58)) + 8|0);
 $1 = $59;
 $60 = $1;
 $0 = $60;
 $61 = $0;
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$57>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $67 = (($66|0) / 16)&-1;
 $11 = $55;
 $12 = $56;
 $13 = $67;
 $68 = $11;
 $69 = $12;
 $70 = $13;
 $8 = $68;
 $9 = $69;
 $10 = $70;
 $71 = $9;
 $7 = $71;
 $72 = $7;
 __ZdlPv($72);
 STACKTOP = sp;return;
}
function __ZNSt3__111char_traitsIcE6assignERcRKc($__c1,$__c2) {
 $__c1 = $__c1|0;
 $__c2 = $__c2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c1;
 $1 = $__c2;
 $2 = $1;
 $3 = HEAP8[$2>>0]|0;
 $4 = $0;
 HEAP8[$4>>0] = $3;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 12)&-1;
 $35 = (($22) + (($34*12)|0)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + (($39*12)|0)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 12)&-1;
 $52 = (($43) + (($51*12)|0)|0);
 __ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE31__annotate_contiguous_containerEPKvSA_SA_SA_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIdNS_9allocatorIdEEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 8)&-1;
 $35 = (($22) + ($34<<3)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + ($39<<3)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 8)&-1;
 $52 = (($43) + ($51<<3)|0);
 __ZNKSt3__16vectorIdNS_9allocatorIdEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIdNS_9allocatorIdEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIdNS_9allocatorIdEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIdNS_9allocatorIdEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIdNS_9allocatorIdEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -8|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
 }
 $6 = $30;
 $52 = $6;
 $53 = ((($52)) + 8|0);
 $5 = $53;
 $54 = $5;
 $4 = $54;
 $55 = $4;
 $56 = HEAP32[$30>>2]|0;
 $3 = $30;
 $57 = $3;
 $2 = $57;
 $58 = $2;
 $59 = ((($58)) + 8|0);
 $1 = $59;
 $60 = $1;
 $0 = $60;
 $61 = $0;
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$57>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $67 = (($66|0) / 8)&-1;
 $11 = $55;
 $12 = $56;
 $13 = $67;
 $68 = $11;
 $69 = $12;
 $70 = $13;
 $8 = $68;
 $9 = $69;
 $10 = $70;
 $71 = $9;
 $7 = $71;
 $72 = $7;
 __ZdlPv($72);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIiNS_9allocatorIiEEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 4)&-1;
 $35 = (($22) + ($34<<2)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + ($39<<2)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 4)&-1;
 $52 = (($43) + ($51<<2)|0);
 __ZNKSt3__16vectorIiNS_9allocatorIiEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIiNS_9allocatorIiEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIiNS_9allocatorIiEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIiNS_9allocatorIiEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIiNS_9allocatorIiEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -4|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
 }
 $6 = $30;
 $52 = $6;
 $53 = ((($52)) + 8|0);
 $5 = $53;
 $54 = $5;
 $4 = $54;
 $55 = $4;
 $56 = HEAP32[$30>>2]|0;
 $3 = $30;
 $57 = $3;
 $2 = $57;
 $58 = $2;
 $59 = ((($58)) + 8|0);
 $1 = $59;
 $60 = $1;
 $0 = $60;
 $61 = $0;
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$57>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $67 = (($66|0) / 4)&-1;
 $11 = $55;
 $12 = $56;
 $13 = $67;
 $68 = $11;
 $69 = $12;
 $70 = $13;
 $8 = $68;
 $9 = $69;
 $10 = $70;
 $71 = $9;
 $7 = $71;
 $72 = $7;
 __ZdlPv($72);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN4NGIS4Data8Vector4dENS_9allocatorIS3_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 77|0;
 $11 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 134217727;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNSt3__114__split_bufferIN4NGIS4Data8Vector4dERNS_9allocatorIS3_EEEC2EjjS6_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 36|0;
 $20 = sp + 20|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = ((($26)) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = ((($34)) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = ((($42)) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = $51<<5;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + ($57<<5)|0);
 $59 = ((($26)) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = ((($26)) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + ($62<<5)|0);
 $11 = $26;
 $64 = $11;
 $65 = ((($64)) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN4NGIS4Data8Vector4dENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 120|0;
 $__t$i1 = sp + 96|0;
 $__t$i = sp + 48|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 __ZNKSt3__16vectorIN4NGIS4Data8Vector4dENS_9allocatorIS3_EEE17__annotate_deleteEv($32);
 $29 = $32;
 $33 = $29;
 $34 = ((($33)) + 8|0);
 $28 = $34;
 $35 = $28;
 $27 = $35;
 $36 = $27;
 $37 = HEAP32[$32>>2]|0;
 $38 = ((($32)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = ((($40)) + 4|0);
 $22 = $36;
 $23 = $37;
 $24 = $39;
 $25 = $41;
 $42 = $24;
 $43 = $23;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = (($46|0) / 32)&-1;
 $_Np$i = $47;
 $48 = $_Np$i;
 $49 = $25;
 $50 = HEAP32[$49>>2]|0;
 $51 = (0 - ($48))|0;
 $52 = (($50) + ($51<<5)|0);
 HEAP32[$49>>2] = $52;
 $53 = $25;
 $54 = HEAP32[$53>>2]|0;
 $55 = $23;
 $56 = $_Np$i;
 $57 = $56<<5;
 _memcpy(($54|0),($55|0),($57|0))|0;
 $58 = $31;
 $59 = ((($58)) + 4|0);
 $3 = $32;
 $4 = $59;
 $60 = $3;
 $2 = $60;
 $61 = $2;
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$__t$i2>>2] = $62;
 $63 = $4;
 $0 = $63;
 $64 = $0;
 $65 = HEAP32[$64>>2]|0;
 $66 = $3;
 HEAP32[$66>>2] = $65;
 $1 = $__t$i2;
 $67 = $1;
 $68 = HEAP32[$67>>2]|0;
 $69 = $4;
 HEAP32[$69>>2] = $68;
 $70 = ((($32)) + 4|0);
 $71 = $31;
 $72 = ((($71)) + 8|0);
 $8 = $70;
 $9 = $72;
 $73 = $8;
 $7 = $73;
 $74 = $7;
 $75 = HEAP32[$74>>2]|0;
 HEAP32[$__t$i1>>2] = $75;
 $76 = $9;
 $5 = $76;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = $8;
 HEAP32[$79>>2] = $78;
 $6 = $__t$i1;
 $80 = $6;
 $81 = HEAP32[$80>>2]|0;
 $82 = $9;
 HEAP32[$82>>2] = $81;
 $12 = $32;
 $83 = $12;
 $84 = ((($83)) + 8|0);
 $11 = $84;
 $85 = $11;
 $10 = $85;
 $86 = $10;
 $87 = $31;
 $15 = $87;
 $88 = $15;
 $89 = ((($88)) + 12|0);
 $14 = $89;
 $90 = $14;
 $13 = $90;
 $91 = $13;
 $19 = $86;
 $20 = $91;
 $92 = $19;
 $18 = $92;
 $93 = $18;
 $94 = HEAP32[$93>>2]|0;
 HEAP32[$__t$i>>2] = $94;
 $95 = $20;
 $16 = $95;
 $96 = $16;
 $97 = HEAP32[$96>>2]|0;
 $98 = $19;
 HEAP32[$98>>2] = $97;
 $17 = $__t$i;
 $99 = $17;
 $100 = HEAP32[$99>>2]|0;
 $101 = $20;
 HEAP32[$101>>2] = $100;
 $102 = $31;
 $103 = ((($102)) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $31;
 HEAP32[$105>>2] = $104;
 $21 = $32;
 $106 = $21;
 $107 = ((($106)) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[$106>>2]|0;
 $110 = $108;
 $111 = $109;
 $112 = (($110) - ($111))|0;
 $113 = (($112|0) / 32)&-1;
 __ZNKSt3__16vectorIN4NGIS4Data8Vector4dENS_9allocatorIS3_EEE14__annotate_newEj($32,$113);
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN4NGIS4Data8Vector4dERNS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp + 8|0;
 $21 = sp + 133|0;
 $28 = sp;
 $31 = sp + 132|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = ((($40)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = ((($45)) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($40)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + -32|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
 }
 $59 = HEAP32[$34>>2]|0;
 $60 = ($59|0)!=(0|0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $61 = $13;
 $62 = ((($61)) + 12|0);
 $12 = $62;
 $63 = $12;
 $11 = $63;
 $64 = $11;
 $65 = ((($64)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$34>>2]|0;
 $3 = $34;
 $68 = $3;
 $2 = $68;
 $69 = $2;
 $70 = ((($69)) + 12|0);
 $1 = $70;
 $71 = $1;
 $0 = $71;
 $72 = $0;
 $73 = HEAP32[$72>>2]|0;
 $74 = HEAP32[$68>>2]|0;
 $75 = $73;
 $76 = $74;
 $77 = (($75) - ($76))|0;
 $78 = (($77|0) / 32)&-1;
 $8 = $66;
 $9 = $67;
 $10 = $78;
 $79 = $8;
 $80 = $9;
 $81 = $10;
 $5 = $79;
 $6 = $80;
 $7 = $81;
 $82 = $6;
 $4 = $82;
 $83 = $4;
 __ZdlPv($83);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN4NGIS4Data8Vector4dENS_9allocatorIS3_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 32)&-1;
 $39 = (($26) + ($38<<5)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 32)&-1;
 $51 = (($42) + ($50<<5)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 32)&-1;
 $67 = (($54) + ($66<<5)|0);
 __ZNKSt3__16vectorIN4NGIS4Data8Vector4dENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN4NGIS4Data8Vector4dENS_9allocatorIS3_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 32)&-1;
 $39 = (($26) + ($38<<5)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 32)&-1;
 $55 = (($42) + ($54<<5)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + ($59<<5)|0);
 __ZNKSt3__16vectorIN4NGIS4Data8Vector4dENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN4NGIS4Data8Vector3dENS_9allocatorIS3_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 77|0;
 $11 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 178956970;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNSt3__114__split_bufferIN4NGIS4Data8Vector3dERNS_9allocatorIS3_EEEC2EjjS6_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 36|0;
 $20 = sp + 20|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = ((($26)) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = ((($34)) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = ((($42)) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = ($51*24)|0;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + (($57*24)|0)|0);
 $59 = ((($26)) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = ((($26)) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + (($62*24)|0)|0);
 $11 = $26;
 $64 = $11;
 $65 = ((($64)) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN4NGIS4Data8Vector3dENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 120|0;
 $__t$i1 = sp + 96|0;
 $__t$i = sp + 48|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 __ZNKSt3__16vectorIN4NGIS4Data8Vector3dENS_9allocatorIS3_EEE17__annotate_deleteEv($32);
 $29 = $32;
 $33 = $29;
 $34 = ((($33)) + 8|0);
 $28 = $34;
 $35 = $28;
 $27 = $35;
 $36 = $27;
 $37 = HEAP32[$32>>2]|0;
 $38 = ((($32)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = ((($40)) + 4|0);
 $22 = $36;
 $23 = $37;
 $24 = $39;
 $25 = $41;
 $42 = $24;
 $43 = $23;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = (($46|0) / 24)&-1;
 $_Np$i = $47;
 $48 = $_Np$i;
 $49 = $25;
 $50 = HEAP32[$49>>2]|0;
 $51 = (0 - ($48))|0;
 $52 = (($50) + (($51*24)|0)|0);
 HEAP32[$49>>2] = $52;
 $53 = $25;
 $54 = HEAP32[$53>>2]|0;
 $55 = $23;
 $56 = $_Np$i;
 $57 = ($56*24)|0;
 _memcpy(($54|0),($55|0),($57|0))|0;
 $58 = $31;
 $59 = ((($58)) + 4|0);
 $3 = $32;
 $4 = $59;
 $60 = $3;
 $2 = $60;
 $61 = $2;
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$__t$i2>>2] = $62;
 $63 = $4;
 $0 = $63;
 $64 = $0;
 $65 = HEAP32[$64>>2]|0;
 $66 = $3;
 HEAP32[$66>>2] = $65;
 $1 = $__t$i2;
 $67 = $1;
 $68 = HEAP32[$67>>2]|0;
 $69 = $4;
 HEAP32[$69>>2] = $68;
 $70 = ((($32)) + 4|0);
 $71 = $31;
 $72 = ((($71)) + 8|0);
 $8 = $70;
 $9 = $72;
 $73 = $8;
 $7 = $73;
 $74 = $7;
 $75 = HEAP32[$74>>2]|0;
 HEAP32[$__t$i1>>2] = $75;
 $76 = $9;
 $5 = $76;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = $8;
 HEAP32[$79>>2] = $78;
 $6 = $__t$i1;
 $80 = $6;
 $81 = HEAP32[$80>>2]|0;
 $82 = $9;
 HEAP32[$82>>2] = $81;
 $12 = $32;
 $83 = $12;
 $84 = ((($83)) + 8|0);
 $11 = $84;
 $85 = $11;
 $10 = $85;
 $86 = $10;
 $87 = $31;
 $15 = $87;
 $88 = $15;
 $89 = ((($88)) + 12|0);
 $14 = $89;
 $90 = $14;
 $13 = $90;
 $91 = $13;
 $19 = $86;
 $20 = $91;
 $92 = $19;
 $18 = $92;
 $93 = $18;
 $94 = HEAP32[$93>>2]|0;
 HEAP32[$__t$i>>2] = $94;
 $95 = $20;
 $16 = $95;
 $96 = $16;
 $97 = HEAP32[$96>>2]|0;
 $98 = $19;
 HEAP32[$98>>2] = $97;
 $17 = $__t$i;
 $99 = $17;
 $100 = HEAP32[$99>>2]|0;
 $101 = $20;
 HEAP32[$101>>2] = $100;
 $102 = $31;
 $103 = ((($102)) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $31;
 HEAP32[$105>>2] = $104;
 $21 = $32;
 $106 = $21;
 $107 = ((($106)) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[$106>>2]|0;
 $110 = $108;
 $111 = $109;
 $112 = (($110) - ($111))|0;
 $113 = (($112|0) / 24)&-1;
 __ZNKSt3__16vectorIN4NGIS4Data8Vector3dENS_9allocatorIS3_EEE14__annotate_newEj($32,$113);
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN4NGIS4Data8Vector3dERNS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp + 8|0;
 $21 = sp + 133|0;
 $28 = sp;
 $31 = sp + 132|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = ((($40)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = ((($45)) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($40)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + -24|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
 }
 $59 = HEAP32[$34>>2]|0;
 $60 = ($59|0)!=(0|0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $61 = $13;
 $62 = ((($61)) + 12|0);
 $12 = $62;
 $63 = $12;
 $11 = $63;
 $64 = $11;
 $65 = ((($64)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$34>>2]|0;
 $3 = $34;
 $68 = $3;
 $2 = $68;
 $69 = $2;
 $70 = ((($69)) + 12|0);
 $1 = $70;
 $71 = $1;
 $0 = $71;
 $72 = $0;
 $73 = HEAP32[$72>>2]|0;
 $74 = HEAP32[$68>>2]|0;
 $75 = $73;
 $76 = $74;
 $77 = (($75) - ($76))|0;
 $78 = (($77|0) / 24)&-1;
 $8 = $66;
 $9 = $67;
 $10 = $78;
 $79 = $8;
 $80 = $9;
 $81 = $10;
 $5 = $79;
 $6 = $80;
 $7 = $81;
 $82 = $6;
 $4 = $82;
 $83 = $4;
 __ZdlPv($83);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN4NGIS4Data8Vector3dENS_9allocatorIS3_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 24)&-1;
 $39 = (($26) + (($38*24)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 24)&-1;
 $51 = (($42) + (($50*24)|0)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 24)&-1;
 $67 = (($54) + (($66*24)|0)|0);
 __ZNKSt3__16vectorIN4NGIS4Data8Vector3dENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN4NGIS4Data8Vector3dENS_9allocatorIS3_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 24)&-1;
 $39 = (($26) + (($38*24)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 24)&-1;
 $55 = (($42) + (($54*24)|0)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + (($59*24)|0)|0);
 __ZNKSt3__16vectorIN4NGIS4Data8Vector3dENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN4NGIS4Data8Vector2dENS_9allocatorIS3_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 77|0;
 $11 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 268435455;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNSt3__114__split_bufferIN4NGIS4Data8Vector2dERNS_9allocatorIS3_EEEC2EjjS6_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 36|0;
 $20 = sp + 20|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = ((($26)) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = ((($34)) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = ((($42)) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = $51<<4;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + ($57<<4)|0);
 $59 = ((($26)) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = ((($26)) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + ($62<<4)|0);
 $11 = $26;
 $64 = $11;
 $65 = ((($64)) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN4NGIS4Data8Vector2dENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 120|0;
 $__t$i1 = sp + 96|0;
 $__t$i = sp + 48|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 __ZNKSt3__16vectorIN4NGIS4Data8Vector2dENS_9allocatorIS3_EEE17__annotate_deleteEv($32);
 $29 = $32;
 $33 = $29;
 $34 = ((($33)) + 8|0);
 $28 = $34;
 $35 = $28;
 $27 = $35;
 $36 = $27;
 $37 = HEAP32[$32>>2]|0;
 $38 = ((($32)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = ((($40)) + 4|0);
 $22 = $36;
 $23 = $37;
 $24 = $39;
 $25 = $41;
 $42 = $24;
 $43 = $23;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = (($46|0) / 16)&-1;
 $_Np$i = $47;
 $48 = $_Np$i;
 $49 = $25;
 $50 = HEAP32[$49>>2]|0;
 $51 = (0 - ($48))|0;
 $52 = (($50) + ($51<<4)|0);
 HEAP32[$49>>2] = $52;
 $53 = $25;
 $54 = HEAP32[$53>>2]|0;
 $55 = $23;
 $56 = $_Np$i;
 $57 = $56<<4;
 _memcpy(($54|0),($55|0),($57|0))|0;
 $58 = $31;
 $59 = ((($58)) + 4|0);
 $3 = $32;
 $4 = $59;
 $60 = $3;
 $2 = $60;
 $61 = $2;
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$__t$i2>>2] = $62;
 $63 = $4;
 $0 = $63;
 $64 = $0;
 $65 = HEAP32[$64>>2]|0;
 $66 = $3;
 HEAP32[$66>>2] = $65;
 $1 = $__t$i2;
 $67 = $1;
 $68 = HEAP32[$67>>2]|0;
 $69 = $4;
 HEAP32[$69>>2] = $68;
 $70 = ((($32)) + 4|0);
 $71 = $31;
 $72 = ((($71)) + 8|0);
 $8 = $70;
 $9 = $72;
 $73 = $8;
 $7 = $73;
 $74 = $7;
 $75 = HEAP32[$74>>2]|0;
 HEAP32[$__t$i1>>2] = $75;
 $76 = $9;
 $5 = $76;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = $8;
 HEAP32[$79>>2] = $78;
 $6 = $__t$i1;
 $80 = $6;
 $81 = HEAP32[$80>>2]|0;
 $82 = $9;
 HEAP32[$82>>2] = $81;
 $12 = $32;
 $83 = $12;
 $84 = ((($83)) + 8|0);
 $11 = $84;
 $85 = $11;
 $10 = $85;
 $86 = $10;
 $87 = $31;
 $15 = $87;
 $88 = $15;
 $89 = ((($88)) + 12|0);
 $14 = $89;
 $90 = $14;
 $13 = $90;
 $91 = $13;
 $19 = $86;
 $20 = $91;
 $92 = $19;
 $18 = $92;
 $93 = $18;
 $94 = HEAP32[$93>>2]|0;
 HEAP32[$__t$i>>2] = $94;
 $95 = $20;
 $16 = $95;
 $96 = $16;
 $97 = HEAP32[$96>>2]|0;
 $98 = $19;
 HEAP32[$98>>2] = $97;
 $17 = $__t$i;
 $99 = $17;
 $100 = HEAP32[$99>>2]|0;
 $101 = $20;
 HEAP32[$101>>2] = $100;
 $102 = $31;
 $103 = ((($102)) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $31;
 HEAP32[$105>>2] = $104;
 $21 = $32;
 $106 = $21;
 $107 = ((($106)) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[$106>>2]|0;
 $110 = $108;
 $111 = $109;
 $112 = (($110) - ($111))|0;
 $113 = (($112|0) / 16)&-1;
 __ZNKSt3__16vectorIN4NGIS4Data8Vector2dENS_9allocatorIS3_EEE14__annotate_newEj($32,$113);
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN4NGIS4Data8Vector2dERNS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp + 8|0;
 $21 = sp + 133|0;
 $28 = sp;
 $31 = sp + 132|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = ((($40)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = ((($45)) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($40)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + -16|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
 }
 $59 = HEAP32[$34>>2]|0;
 $60 = ($59|0)!=(0|0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $61 = $13;
 $62 = ((($61)) + 12|0);
 $12 = $62;
 $63 = $12;
 $11 = $63;
 $64 = $11;
 $65 = ((($64)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$34>>2]|0;
 $3 = $34;
 $68 = $3;
 $2 = $68;
 $69 = $2;
 $70 = ((($69)) + 12|0);
 $1 = $70;
 $71 = $1;
 $0 = $71;
 $72 = $0;
 $73 = HEAP32[$72>>2]|0;
 $74 = HEAP32[$68>>2]|0;
 $75 = $73;
 $76 = $74;
 $77 = (($75) - ($76))|0;
 $78 = (($77|0) / 16)&-1;
 $8 = $66;
 $9 = $67;
 $10 = $78;
 $79 = $8;
 $80 = $9;
 $81 = $10;
 $5 = $79;
 $6 = $80;
 $7 = $81;
 $82 = $6;
 $4 = $82;
 $83 = $4;
 __ZdlPv($83);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN4NGIS4Data8Vector2dENS_9allocatorIS3_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 16)&-1;
 $39 = (($26) + ($38<<4)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 16)&-1;
 $51 = (($42) + ($50<<4)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 16)&-1;
 $67 = (($54) + ($66<<4)|0);
 __ZNKSt3__16vectorIN4NGIS4Data8Vector2dENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN4NGIS4Data8Vector2dENS_9allocatorIS3_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 16)&-1;
 $39 = (($26) + ($38<<4)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 16)&-1;
 $55 = (($42) + ($54<<4)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + ($59<<4)|0);
 __ZNKSt3__16vectorIN4NGIS4Data8Vector2dENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIdNS_9allocatorIdEEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 77|0;
 $11 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 536870911;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNSt3__114__split_bufferIdRNS_9allocatorIdEEEC2EjjS3_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 36|0;
 $20 = sp + 20|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = ((($26)) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = ((($34)) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = ((($42)) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = $51<<3;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + ($57<<3)|0);
 $59 = ((($26)) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = ((($26)) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + ($62<<3)|0);
 $11 = $26;
 $64 = $11;
 $65 = ((($64)) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIdNS_9allocatorIdEEE26__swap_out_circular_bufferERNS_14__split_bufferIdRS2_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 120|0;
 $__t$i1 = sp + 96|0;
 $__t$i = sp + 48|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 __ZNKSt3__16vectorIdNS_9allocatorIdEEE17__annotate_deleteEv($32);
 $29 = $32;
 $33 = $29;
 $34 = ((($33)) + 8|0);
 $28 = $34;
 $35 = $28;
 $27 = $35;
 $36 = $27;
 $37 = HEAP32[$32>>2]|0;
 $38 = ((($32)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = ((($40)) + 4|0);
 $22 = $36;
 $23 = $37;
 $24 = $39;
 $25 = $41;
 $42 = $24;
 $43 = $23;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = (($46|0) / 8)&-1;
 $_Np$i = $47;
 $48 = $_Np$i;
 $49 = $25;
 $50 = HEAP32[$49>>2]|0;
 $51 = (0 - ($48))|0;
 $52 = (($50) + ($51<<3)|0);
 HEAP32[$49>>2] = $52;
 $53 = $25;
 $54 = HEAP32[$53>>2]|0;
 $55 = $23;
 $56 = $_Np$i;
 $57 = $56<<3;
 _memcpy(($54|0),($55|0),($57|0))|0;
 $58 = $31;
 $59 = ((($58)) + 4|0);
 $3 = $32;
 $4 = $59;
 $60 = $3;
 $2 = $60;
 $61 = $2;
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$__t$i2>>2] = $62;
 $63 = $4;
 $0 = $63;
 $64 = $0;
 $65 = HEAP32[$64>>2]|0;
 $66 = $3;
 HEAP32[$66>>2] = $65;
 $1 = $__t$i2;
 $67 = $1;
 $68 = HEAP32[$67>>2]|0;
 $69 = $4;
 HEAP32[$69>>2] = $68;
 $70 = ((($32)) + 4|0);
 $71 = $31;
 $72 = ((($71)) + 8|0);
 $8 = $70;
 $9 = $72;
 $73 = $8;
 $7 = $73;
 $74 = $7;
 $75 = HEAP32[$74>>2]|0;
 HEAP32[$__t$i1>>2] = $75;
 $76 = $9;
 $5 = $76;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = $8;
 HEAP32[$79>>2] = $78;
 $6 = $__t$i1;
 $80 = $6;
 $81 = HEAP32[$80>>2]|0;
 $82 = $9;
 HEAP32[$82>>2] = $81;
 $12 = $32;
 $83 = $12;
 $84 = ((($83)) + 8|0);
 $11 = $84;
 $85 = $11;
 $10 = $85;
 $86 = $10;
 $87 = $31;
 $15 = $87;
 $88 = $15;
 $89 = ((($88)) + 12|0);
 $14 = $89;
 $90 = $14;
 $13 = $90;
 $91 = $13;
 $19 = $86;
 $20 = $91;
 $92 = $19;
 $18 = $92;
 $93 = $18;
 $94 = HEAP32[$93>>2]|0;
 HEAP32[$__t$i>>2] = $94;
 $95 = $20;
 $16 = $95;
 $96 = $16;
 $97 = HEAP32[$96>>2]|0;
 $98 = $19;
 HEAP32[$98>>2] = $97;
 $17 = $__t$i;
 $99 = $17;
 $100 = HEAP32[$99>>2]|0;
 $101 = $20;
 HEAP32[$101>>2] = $100;
 $102 = $31;
 $103 = ((($102)) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $31;
 HEAP32[$105>>2] = $104;
 $21 = $32;
 $106 = $21;
 $107 = ((($106)) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[$106>>2]|0;
 $110 = $108;
 $111 = $109;
 $112 = (($110) - ($111))|0;
 $113 = (($112|0) / 8)&-1;
 __ZNKSt3__16vectorIdNS_9allocatorIdEEE14__annotate_newEj($32,$113);
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIdRNS_9allocatorIdEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp + 8|0;
 $21 = sp + 133|0;
 $28 = sp;
 $31 = sp + 132|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = ((($40)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = ((($45)) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($40)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + -8|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
 }
 $59 = HEAP32[$34>>2]|0;
 $60 = ($59|0)!=(0|0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $61 = $13;
 $62 = ((($61)) + 12|0);
 $12 = $62;
 $63 = $12;
 $11 = $63;
 $64 = $11;
 $65 = ((($64)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$34>>2]|0;
 $3 = $34;
 $68 = $3;
 $2 = $68;
 $69 = $2;
 $70 = ((($69)) + 12|0);
 $1 = $70;
 $71 = $1;
 $0 = $71;
 $72 = $0;
 $73 = HEAP32[$72>>2]|0;
 $74 = HEAP32[$68>>2]|0;
 $75 = $73;
 $76 = $74;
 $77 = (($75) - ($76))|0;
 $78 = (($77|0) / 8)&-1;
 $8 = $66;
 $9 = $67;
 $10 = $78;
 $79 = $8;
 $80 = $9;
 $81 = $10;
 $5 = $79;
 $6 = $80;
 $7 = $81;
 $82 = $6;
 $4 = $82;
 $83 = $4;
 __ZdlPv($83);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIdNS_9allocatorIdEEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 8)&-1;
 $39 = (($26) + ($38<<3)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 8)&-1;
 $51 = (($42) + ($50<<3)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 8)&-1;
 $67 = (($54) + ($66<<3)|0);
 __ZNKSt3__16vectorIdNS_9allocatorIdEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIdNS_9allocatorIdEEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 8)&-1;
 $39 = (($26) + ($38<<3)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 8)&-1;
 $55 = (($42) + ($54<<3)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + ($59<<3)|0);
 __ZNKSt3__16vectorIdNS_9allocatorIdEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIiNS_9allocatorIiEEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 77|0;
 $11 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 1073741823;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNSt3__114__split_bufferIiRNS_9allocatorIiEEEC2EjjS3_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 36|0;
 $20 = sp + 20|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = ((($26)) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = ((($34)) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = ((($42)) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = $51<<2;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + ($57<<2)|0);
 $59 = ((($26)) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = ((($26)) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + ($62<<2)|0);
 $11 = $26;
 $64 = $11;
 $65 = ((($64)) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIiNS_9allocatorIiEEE26__swap_out_circular_bufferERNS_14__split_bufferIiRS2_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 120|0;
 $__t$i1 = sp + 96|0;
 $__t$i = sp + 48|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 __ZNKSt3__16vectorIiNS_9allocatorIiEEE17__annotate_deleteEv($32);
 $29 = $32;
 $33 = $29;
 $34 = ((($33)) + 8|0);
 $28 = $34;
 $35 = $28;
 $27 = $35;
 $36 = $27;
 $37 = HEAP32[$32>>2]|0;
 $38 = ((($32)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = ((($40)) + 4|0);
 $22 = $36;
 $23 = $37;
 $24 = $39;
 $25 = $41;
 $42 = $24;
 $43 = $23;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = (($46|0) / 4)&-1;
 $_Np$i = $47;
 $48 = $_Np$i;
 $49 = $25;
 $50 = HEAP32[$49>>2]|0;
 $51 = (0 - ($48))|0;
 $52 = (($50) + ($51<<2)|0);
 HEAP32[$49>>2] = $52;
 $53 = $25;
 $54 = HEAP32[$53>>2]|0;
 $55 = $23;
 $56 = $_Np$i;
 $57 = $56<<2;
 _memcpy(($54|0),($55|0),($57|0))|0;
 $58 = $31;
 $59 = ((($58)) + 4|0);
 $3 = $32;
 $4 = $59;
 $60 = $3;
 $2 = $60;
 $61 = $2;
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$__t$i2>>2] = $62;
 $63 = $4;
 $0 = $63;
 $64 = $0;
 $65 = HEAP32[$64>>2]|0;
 $66 = $3;
 HEAP32[$66>>2] = $65;
 $1 = $__t$i2;
 $67 = $1;
 $68 = HEAP32[$67>>2]|0;
 $69 = $4;
 HEAP32[$69>>2] = $68;
 $70 = ((($32)) + 4|0);
 $71 = $31;
 $72 = ((($71)) + 8|0);
 $8 = $70;
 $9 = $72;
 $73 = $8;
 $7 = $73;
 $74 = $7;
 $75 = HEAP32[$74>>2]|0;
 HEAP32[$__t$i1>>2] = $75;
 $76 = $9;
 $5 = $76;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = $8;
 HEAP32[$79>>2] = $78;
 $6 = $__t$i1;
 $80 = $6;
 $81 = HEAP32[$80>>2]|0;
 $82 = $9;
 HEAP32[$82>>2] = $81;
 $12 = $32;
 $83 = $12;
 $84 = ((($83)) + 8|0);
 $11 = $84;
 $85 = $11;
 $10 = $85;
 $86 = $10;
 $87 = $31;
 $15 = $87;
 $88 = $15;
 $89 = ((($88)) + 12|0);
 $14 = $89;
 $90 = $14;
 $13 = $90;
 $91 = $13;
 $19 = $86;
 $20 = $91;
 $92 = $19;
 $18 = $92;
 $93 = $18;
 $94 = HEAP32[$93>>2]|0;
 HEAP32[$__t$i>>2] = $94;
 $95 = $20;
 $16 = $95;
 $96 = $16;
 $97 = HEAP32[$96>>2]|0;
 $98 = $19;
 HEAP32[$98>>2] = $97;
 $17 = $__t$i;
 $99 = $17;
 $100 = HEAP32[$99>>2]|0;
 $101 = $20;
 HEAP32[$101>>2] = $100;
 $102 = $31;
 $103 = ((($102)) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $31;
 HEAP32[$105>>2] = $104;
 $21 = $32;
 $106 = $21;
 $107 = ((($106)) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[$106>>2]|0;
 $110 = $108;
 $111 = $109;
 $112 = (($110) - ($111))|0;
 $113 = (($112|0) / 4)&-1;
 __ZNKSt3__16vectorIiNS_9allocatorIiEEE14__annotate_newEj($32,$113);
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIiRNS_9allocatorIiEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp + 8|0;
 $21 = sp + 133|0;
 $28 = sp;
 $31 = sp + 132|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = ((($40)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = ((($45)) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($40)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + -4|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
 }
 $59 = HEAP32[$34>>2]|0;
 $60 = ($59|0)!=(0|0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $61 = $13;
 $62 = ((($61)) + 12|0);
 $12 = $62;
 $63 = $12;
 $11 = $63;
 $64 = $11;
 $65 = ((($64)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$34>>2]|0;
 $3 = $34;
 $68 = $3;
 $2 = $68;
 $69 = $2;
 $70 = ((($69)) + 12|0);
 $1 = $70;
 $71 = $1;
 $0 = $71;
 $72 = $0;
 $73 = HEAP32[$72>>2]|0;
 $74 = HEAP32[$68>>2]|0;
 $75 = $73;
 $76 = $74;
 $77 = (($75) - ($76))|0;
 $78 = (($77|0) / 4)&-1;
 $8 = $66;
 $9 = $67;
 $10 = $78;
 $79 = $8;
 $80 = $9;
 $81 = $10;
 $5 = $79;
 $6 = $80;
 $7 = $81;
 $82 = $6;
 $4 = $82;
 $83 = $4;
 __ZdlPv($83);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIiNS_9allocatorIiEEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 4)&-1;
 $51 = (($42) + ($50<<2)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 4)&-1;
 $67 = (($54) + ($66<<2)|0);
 __ZNKSt3__16vectorIiNS_9allocatorIiEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIiNS_9allocatorIiEEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 4)&-1;
 $55 = (($42) + ($54<<2)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + ($59<<2)|0);
 __ZNKSt3__16vectorIiNS_9allocatorIiEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data10IUdxKernelD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4NGIS4Data10IUdxKernelD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data8CUdxNodeC2EPNS0_8IUdxNodeEPKcNS0_11EKernelTypeE($this,$pParent,$pName,$pType) {
 $this = $this|0;
 $pParent = $pParent|0;
 $pName = $pName|0;
 $pType = $pType|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var $__a$i$i = 0, $__i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 84|0;
 $8 = sp + 72|0;
 $19 = $this;
 $20 = $pParent;
 $21 = $pName;
 $22 = $pType;
 $25 = $19;
 __ZN4NGIS4Data8IUdxNodeC2Ev($25);
 $26 = 5472;
 HEAP32[$25>>2] = $26;
 $27 = ((($25)) + 8|0);
 $18 = $27;
 $28 = $18;
 $17 = $28;
 $29 = $17;
 $16 = $29;
 $30 = $16;
 $15 = $30;
 $14 = $28;
 $31 = $14;
 $13 = $31;
 $32 = $13;
 $12 = $32;
 $33 = $12;
 $__a$i$i = $33;
 $__i$i$i = 0;
 while(1) {
  $34 = $__i$i$i;
  $35 = ($34>>>0)<(3);
  if (!($35)) {
   break;
  }
  $36 = $__i$i$i;
  $37 = $__a$i$i;
  $38 = (($37) + ($36<<2)|0);
  HEAP32[$38>>2] = 0;
  $39 = $__i$i$i;
  $40 = (($39) + 1)|0;
  $__i$i$i = $40;
 }
 $41 = ((($25)) + 24|0);
 $11 = $41;
 $42 = $11;
 $10 = $42;
 $43 = $10;
 $9 = $43;
 HEAP32[$43>>2] = 0;
 $44 = ((($43)) + 4|0);
 HEAP32[$44>>2] = 0;
 $45 = ((($43)) + 8|0);
 $7 = $45;
 HEAP32[$8>>2] = 0;
 $46 = $7;
 $6 = $8;
 $47 = $6;
 $48 = HEAP32[$47>>2]|0;
 $4 = $46;
 HEAP32[$5>>2] = $48;
 $49 = $4;
 $3 = $49;
 $2 = $5;
 $50 = $2;
 $51 = HEAP32[$50>>2]|0;
 HEAP32[$49>>2] = $51;
 $52 = ((($25)) + 36|0);
 $53 = $20;
 HEAP32[$52>>2] = $53;
 $54 = ((($25)) + 8|0);
 $55 = $21;
 $0 = $54;
 $1 = $55;
 $56 = $0;
 $57 = $1;
 __THREW__ = 0;
 (invoke_iii(387,($56|0),($57|0))|0);
 $58 = __THREW__; __THREW__ = 0;
 $59 = $58&1;
 do {
  if (!($59)) {
   $60 = ((($25)) + 20|0);
   HEAP32[$60>>2] = 0;
   $61 = $20;
   $62 = ($61|0)!=(0|0);
   if ($62) {
    $63 = $21;
    $64 = $22;
    __THREW__ = 0;
    invoke_viii(604,($25|0),($63|0),($64|0));
    $65 = __THREW__; __THREW__ = 0;
    $66 = $65&1;
    if ($66) {
     break;
    }
    STACKTOP = sp;return;
   }
   __THREW__ = 0;
   $69 = (invoke_ii(484,16)|0);
   $70 = __THREW__; __THREW__ = 0;
   $71 = $70&1;
   if (!($71)) {
    $72 = $22;
    __THREW__ = 0;
    invoke_viii(605,($69|0),($72|0),($25|0));
    $73 = __THREW__; __THREW__ = 0;
    $74 = $73&1;
    if ($74) {
     $76 = ___cxa_find_matching_catch()|0;
     $77 = tempRet0;
     $23 = $76;
     $24 = $77;
     __ZdlPv($69);
     __ZNSt3__16vectorIPN4NGIS4Data8IUdxNodeENS_9allocatorIS4_EEED2Ev($41);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($27);
     __ZN4NGIS4Data8IUdxNodeD2Ev($25);
     $78 = $23;
     $79 = $24;
     ___resumeException($78|0);
     // unreachable;
    } else {
     $75 = ((($25)) + 20|0);
     HEAP32[$75>>2] = $69;
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 $67 = ___cxa_find_matching_catch()|0;
 $68 = tempRet0;
 $23 = $67;
 $24 = $68;
 __ZNSt3__16vectorIPN4NGIS4Data8IUdxNodeENS_9allocatorIS4_EEED2Ev($41);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($27);
 __ZN4NGIS4Data8IUdxNodeD2Ev($25);
 $78 = $23;
 $79 = $24;
 ___resumeException($78|0);
 // unreachable;
}
function __ZN4NGIS4Data8CUdxNode12createKernelEPKcNS0_11EKernelTypeE($this,$pName,$pType) {
 $this = $this|0;
 $pName = $pName|0;
 $pType = $pType|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $pName;
 $2 = $pType;
 $5 = $0;
 $6 = $2;
 L1: do {
  switch ($6|0) {
  case 2:  {
   $7 = (__Znwj(20)|0);
   $8 = $2;
   __THREW__ = 0;
   invoke_viii(606,($7|0),($8|0),($5|0));
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if ($10) {
    $12 = ___cxa_find_matching_catch()|0;
    $13 = tempRet0;
    $3 = $12;
    $4 = $13;
    __ZdlPv($7);
    break L1;
   }
   $11 = ((($5)) + 20|0);
   HEAP32[$11>>2] = $7;
   STACKTOP = sp;return;
   break;
  }
  case 4:  {
   $14 = (__Znwj(24)|0);
   $15 = $2;
   __THREW__ = 0;
   invoke_viii(607,($14|0),($15|0),($5|0));
   $16 = __THREW__; __THREW__ = 0;
   $17 = $16&1;
   if ($17) {
    $19 = ___cxa_find_matching_catch()|0;
    $20 = tempRet0;
    $3 = $19;
    $4 = $20;
    __ZdlPv($14);
    break L1;
   }
   $18 = ((($5)) + 20|0);
   HEAP32[$18>>2] = $14;
   STACKTOP = sp;return;
   break;
  }
  case 8:  {
   $21 = (__Znwj(28)|0);
   $22 = $2;
   __THREW__ = 0;
   invoke_viii(608,($21|0),($22|0),($5|0));
   $23 = __THREW__; __THREW__ = 0;
   $24 = $23&1;
   if ($24) {
    $26 = ___cxa_find_matching_catch()|0;
    $27 = tempRet0;
    $3 = $26;
    $4 = $27;
    __ZdlPv($21);
    break L1;
   }
   $25 = ((($5)) + 20|0);
   HEAP32[$25>>2] = $21;
   STACKTOP = sp;return;
   break;
  }
  case 16:  {
   $28 = (__Znwj(32)|0);
   $29 = $2;
   __THREW__ = 0;
   invoke_viii(609,($28|0),($29|0),($5|0));
   $30 = __THREW__; __THREW__ = 0;
   $31 = $30&1;
   if ($31) {
    $33 = ___cxa_find_matching_catch()|0;
    $34 = tempRet0;
    $3 = $33;
    $4 = $34;
    __ZdlPv($28);
    break L1;
   }
   $32 = ((($5)) + 20|0);
   HEAP32[$32>>2] = $28;
   STACKTOP = sp;return;
   break;
  }
  case 32:  {
   $35 = (__Znwj(40)|0);
   $36 = $2;
   __THREW__ = 0;
   invoke_viii(610,($35|0),($36|0),($5|0));
   $37 = __THREW__; __THREW__ = 0;
   $38 = $37&1;
   if ($38) {
    $40 = ___cxa_find_matching_catch()|0;
    $41 = tempRet0;
    $3 = $40;
    $4 = $41;
    __ZdlPv($35);
    break L1;
   }
   $39 = ((($5)) + 20|0);
   HEAP32[$39>>2] = $35;
   STACKTOP = sp;return;
   break;
  }
  case 64:  {
   $42 = (__Znwj(48)|0);
   $43 = $2;
   __THREW__ = 0;
   invoke_viii(611,($42|0),($43|0),($5|0));
   $44 = __THREW__; __THREW__ = 0;
   $45 = $44&1;
   if ($45) {
    $47 = ___cxa_find_matching_catch()|0;
    $48 = tempRet0;
    $3 = $47;
    $4 = $48;
    __ZdlPv($42);
    break L1;
   }
   $46 = ((($5)) + 20|0);
   HEAP32[$46>>2] = $42;
   STACKTOP = sp;return;
   break;
  }
  case 258:  {
   $49 = (__Znwj(28)|0);
   $50 = $2;
   __THREW__ = 0;
   invoke_viii(612,($49|0),($50|0),($5|0));
   $51 = __THREW__; __THREW__ = 0;
   $52 = $51&1;
   if ($52) {
    $54 = ___cxa_find_matching_catch()|0;
    $55 = tempRet0;
    $3 = $54;
    $4 = $55;
    __ZdlPv($49);
    break L1;
   }
   $53 = ((($5)) + 20|0);
   HEAP32[$53>>2] = $49;
   STACKTOP = sp;return;
   break;
  }
  case 260:  {
   $56 = (__Znwj(28)|0);
   $57 = $2;
   __THREW__ = 0;
   invoke_viii(613,($56|0),($57|0),($5|0));
   $58 = __THREW__; __THREW__ = 0;
   $59 = $58&1;
   if ($59) {
    $61 = ___cxa_find_matching_catch()|0;
    $62 = tempRet0;
    $3 = $61;
    $4 = $62;
    __ZdlPv($56);
    break L1;
   }
   $60 = ((($5)) + 20|0);
   HEAP32[$60>>2] = $56;
   STACKTOP = sp;return;
   break;
  }
  case 264:  {
   $63 = (__Znwj(28)|0);
   $64 = $2;
   __THREW__ = 0;
   invoke_viii(614,($63|0),($64|0),($5|0));
   $65 = __THREW__; __THREW__ = 0;
   $66 = $65&1;
   if ($66) {
    $68 = ___cxa_find_matching_catch()|0;
    $69 = tempRet0;
    $3 = $68;
    $4 = $69;
    __ZdlPv($63);
    break L1;
   }
   $67 = ((($5)) + 20|0);
   HEAP32[$67>>2] = $63;
   STACKTOP = sp;return;
   break;
  }
  case 272:  {
   $70 = (__Znwj(28)|0);
   $71 = $2;
   __THREW__ = 0;
   invoke_viii(615,($70|0),($71|0),($5|0));
   $72 = __THREW__; __THREW__ = 0;
   $73 = $72&1;
   if ($73) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $3 = $75;
    $4 = $76;
    __ZdlPv($70);
    break L1;
   }
   $74 = ((($5)) + 20|0);
   HEAP32[$74>>2] = $70;
   STACKTOP = sp;return;
   break;
  }
  case 288:  {
   $77 = (__Znwj(28)|0);
   $78 = $2;
   __THREW__ = 0;
   invoke_viii(616,($77|0),($78|0),($5|0));
   $79 = __THREW__; __THREW__ = 0;
   $80 = $79&1;
   if ($80) {
    $82 = ___cxa_find_matching_catch()|0;
    $83 = tempRet0;
    $3 = $82;
    $4 = $83;
    __ZdlPv($77);
    break L1;
   }
   $81 = ((($5)) + 20|0);
   HEAP32[$81>>2] = $77;
   STACKTOP = sp;return;
   break;
  }
  case 320:  {
   $84 = (__Znwj(28)|0);
   $85 = $2;
   __THREW__ = 0;
   invoke_viii(617,($84|0),($85|0),($5|0));
   $86 = __THREW__; __THREW__ = 0;
   $87 = $86&1;
   if ($87) {
    $89 = ___cxa_find_matching_catch()|0;
    $90 = tempRet0;
    $3 = $89;
    $4 = $90;
    __ZdlPv($84);
    break L1;
   }
   $88 = ((($5)) + 20|0);
   HEAP32[$88>>2] = $84;
   STACKTOP = sp;return;
   break;
  }
  case 1024: case 512: case 256: case 128:  {
   $91 = (__Znwj(16)|0);
   $92 = $2;
   __THREW__ = 0;
   invoke_viii(605,($91|0),($92|0),($5|0));
   $93 = __THREW__; __THREW__ = 0;
   $94 = $93&1;
   if ($94) {
    $96 = ___cxa_find_matching_catch()|0;
    $97 = tempRet0;
    $3 = $96;
    $4 = $97;
    __ZdlPv($91);
    break L1;
   }
   $95 = ((($5)) + 20|0);
   HEAP32[$95>>2] = $91;
   STACKTOP = sp;return;
   break;
  }
  default: {
   STACKTOP = sp;return;
  }
  }
 } while(0);
 $98 = $3;
 $99 = $4;
 ___resumeException($98|0);
 // unreachable;
}
function __ZN4NGIS4Data8CUdxNodeD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__old_size$i = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp;
 $8 = sp + 100|0;
 $21 = $this;
 $24 = $21;
 $25 = 5472;
 HEAP32[$24>>2] = $25;
 $26 = ((($24)) + 20|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)!=(0|0);
 do {
  if ($28) {
   $29 = ((($24)) + 20|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = HEAP32[$30>>2]|0;
   $32 = ((($31)) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   __THREW__ = 0;
   (invoke_ii($33|0,($30|0))|0);
   $34 = __THREW__; __THREW__ = 0;
   $35 = $34&1;
   if ($35) {
    $37 = ___cxa_find_matching_catch(0|0)|0;
    $38 = tempRet0;
    $22 = $37;
    $23 = $38;
    $39 = ((($24)) + 24|0);
    __ZNSt3__16vectorIPN4NGIS4Data8IUdxNodeENS_9allocatorIS4_EEED2Ev($39);
    $40 = ((($24)) + 8|0);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($40);
    __ZN4NGIS4Data8IUdxNodeD2Ev($24);
    $41 = $22;
    ___clang_call_terminate($41);
    // unreachable;
   } else {
    $36 = ((($24)) + 20|0);
    HEAP32[$36>>2] = 0;
    break;
   }
  }
 } while(0);
 $i = 0;
 while(1) {
  $42 = $i;
  $43 = ((($24)) + 24|0);
  $20 = $43;
  $44 = $20;
  $45 = ((($44)) + 4|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = HEAP32[$44>>2]|0;
  $48 = $46;
  $49 = $47;
  $50 = (($48) - ($49))|0;
  $51 = (($50|0) / 4)&-1;
  $52 = ($42>>>0)<($51>>>0);
  $53 = ((($24)) + 24|0);
  if (!($52)) {
   break;
  }
  $54 = $i;
  $18 = $53;
  $19 = $54;
  $55 = $18;
  $56 = $19;
  $57 = HEAP32[$55>>2]|0;
  $58 = (($57) + ($56<<2)|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = HEAP32[$59>>2]|0;
  $61 = ((($60)) + 12|0);
  $62 = HEAP32[$61>>2]|0;
  __THREW__ = 0;
  (invoke_ii($62|0,($59|0))|0);
  $63 = __THREW__; __THREW__ = 0;
  $64 = $63&1;
  if ($64) {
   label = 4;
   break;
  }
  $65 = $i;
  $66 = (($65) + 1)|0;
  $i = $66;
 }
 if ((label|0) == 4) {
  $37 = ___cxa_find_matching_catch(0|0)|0;
  $38 = tempRet0;
  $22 = $37;
  $23 = $38;
  $39 = ((($24)) + 24|0);
  __ZNSt3__16vectorIPN4NGIS4Data8IUdxNodeENS_9allocatorIS4_EEED2Ev($39);
  $40 = ((($24)) + 8|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($40);
  __ZN4NGIS4Data8IUdxNodeD2Ev($24);
  $41 = $22;
  ___clang_call_terminate($41);
  // unreachable;
 }
 $17 = $53;
 $67 = $17;
 $16 = $67;
 $68 = $16;
 $69 = ((($68)) + 4|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = HEAP32[$68>>2]|0;
 $72 = $70;
 $73 = $71;
 $74 = (($72) - ($73))|0;
 $75 = (($74|0) / 4)&-1;
 $__old_size$i = $75;
 $15 = $67;
 $76 = $15;
 $77 = HEAP32[$76>>2]|0;
 $13 = $76;
 $14 = $77;
 $78 = $13;
 while(1) {
  $79 = $14;
  $80 = ((($78)) + 4|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = ($79|0)!=($81|0);
  if (!($82)) {
   break;
  }
  $12 = $78;
  $83 = $12;
  $84 = ((($83)) + 8|0);
  $11 = $84;
  $85 = $11;
  $10 = $85;
  $86 = $10;
  $87 = ((($78)) + 4|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = ((($88)) + -4|0);
  HEAP32[$87>>2] = $89;
  $9 = $89;
  $90 = $9;
  $6 = $86;
  $7 = $90;
  $91 = $6;
  $92 = $7;
  ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
  $3 = $91;
  $4 = $92;
  $93 = $3;
  $94 = $4;
  $1 = $93;
  $2 = $94;
 }
 $95 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(618,($67|0),($95|0));
 $96 = __THREW__; __THREW__ = 0;
 $97 = $96&1;
 if ($97) {
  $98 = ___cxa_find_matching_catch(0|0)|0;
  $99 = tempRet0;
  ___clang_call_terminate($98);
  // unreachable;
 } else {
  $0 = $67;
  $100 = ((($24)) + 24|0);
  __ZNSt3__16vectorIPN4NGIS4Data8IUdxNodeENS_9allocatorIS4_EEED2Ev($100);
  $101 = ((($24)) + 8|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($101);
  __ZN4NGIS4Data8IUdxNodeD2Ev($24);
  STACKTOP = sp;return;
 }
}
function __ZN4NGIS4Data8CUdxNodeD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4NGIS4Data8CUdxNodeD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data8CUdxNode7getNameEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $15 = $this;
 $16 = $15;
 $17 = ((($16)) + 8|0);
 $14 = $17;
 $18 = $14;
 $13 = $18;
 $19 = $13;
 $12 = $19;
 $20 = $12;
 $11 = $20;
 $21 = $11;
 $10 = $21;
 $22 = $10;
 $9 = $22;
 $23 = $9;
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 $26 = $25 & 1;
 $27 = ($26|0)!=(0);
 if ($27) {
  $3 = $20;
  $28 = $3;
  $2 = $28;
  $29 = $2;
  $1 = $29;
  $30 = $1;
  $31 = ((($30)) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $39 = $32;
  $0 = $39;
  $40 = $0;
  STACKTOP = sp;return ($40|0);
 } else {
  $8 = $20;
  $33 = $8;
  $7 = $33;
  $34 = $7;
  $6 = $34;
  $35 = $6;
  $36 = ((($35)) + 1|0);
  $5 = $36;
  $37 = $5;
  $4 = $37;
  $38 = $4;
  $39 = $38;
  $0 = $39;
  $40 = $0;
  STACKTOP = sp;return ($40|0);
 }
 return (0)|0;
}
function __ZN4NGIS4Data8CUdxNode7setNameEPKc($this,$pName) {
 $this = $this|0;
 $pName = $pName|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $this;
 $3 = $pName;
 $4 = $2;
 $5 = ((($4)) + 8|0);
 $6 = $3;
 $0 = $5;
 $1 = $6;
 $7 = $0;
 $8 = $1;
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($7,$8)|0);
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data8CUdxNode9getKernelEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN4NGIS4Data8CUdxNode17getChildNodeCountEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = ((($2)) + 24|0);
 $0 = $3;
 $4 = $0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$4>>2]|0;
 $8 = $6;
 $9 = $7;
 $10 = (($8) - ($9))|0;
 $11 = (($10|0) / 4)&-1;
 STACKTOP = sp;return ($11|0);
}
function __ZN4NGIS4Data8CUdxNode12getChildNodeEi($this,$idx) {
 $this = $this|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = $this;
 $5 = $idx;
 $6 = $4;
 $7 = $5;
 $8 = ($7|0)<(0);
 if (!($8)) {
  $9 = $5;
  $10 = ((($6)) + 24|0);
  $2 = $10;
  $11 = $2;
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$11>>2]|0;
  $15 = $13;
  $16 = $14;
  $17 = (($15) - ($16))|0;
  $18 = (($17|0) / 4)&-1;
  $19 = ($9>>>0)>=($18>>>0);
  if (!($19)) {
   $20 = ((($6)) + 24|0);
   $21 = $5;
   $0 = $20;
   $1 = $21;
   $22 = $0;
   $23 = $1;
   $24 = HEAP32[$22>>2]|0;
   $25 = (($24) + ($23<<2)|0);
   $26 = HEAP32[$25>>2]|0;
   $3 = $26;
   $27 = $3;
   STACKTOP = sp;return ($27|0);
  }
 }
 $3 = 0;
 $27 = $3;
 STACKTOP = sp;return ($27|0);
}
function __ZN4NGIS4Data8CUdxNode12addChildNodeEPKcNS0_11EKernelTypeE($this,$pName,$pType) {
 $this = $this|0;
 $pName = $pName|0;
 $pType = $pType|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $__annotator$i = 0;
 var $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $9 = sp;
 $14 = sp + 125|0;
 $__annotator$i = sp + 124|0;
 $30 = sp + 4|0;
 $25 = $this;
 $26 = $pName;
 $27 = $pType;
 $31 = $25;
 $32 = (__Znwj(40)|0);
 $33 = $26;
 $34 = $27;
 __THREW__ = 0;
 invoke_viiii(487,($32|0),($31|0),($33|0),($34|0));
 $35 = __THREW__; __THREW__ = 0;
 $36 = $35&1;
 if ($36) {
  $75 = ___cxa_find_matching_catch()|0;
  $76 = tempRet0;
  $28 = $75;
  $29 = $76;
  __ZdlPv($32);
  $77 = $28;
  $78 = $29;
  ___resumeException($77|0);
  // unreachable;
 }
 $node = $32;
 $37 = ((($31)) + 24|0);
 $38 = $node;
 HEAP32[$30>>2] = $38;
 $23 = $37;
 $24 = $30;
 $39 = $23;
 $40 = ((($39)) + 4|0);
 $41 = HEAP32[$40>>2]|0;
 $22 = $39;
 $42 = $22;
 $43 = ((($42)) + 8|0);
 $21 = $43;
 $44 = $21;
 $20 = $44;
 $45 = $20;
 $46 = HEAP32[$45>>2]|0;
 $47 = ($41>>>0)<($46>>>0);
 if ($47) {
  __ZNSt3__16vectorIPN4NGIS4Data8IUdxNodeENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotatorC2ERKS7_j($__annotator$i,$39,1);
  $19 = $39;
  $48 = $19;
  $49 = ((($48)) + 8|0);
  $18 = $49;
  $50 = $18;
  $17 = $50;
  $51 = $17;
  $52 = ((($39)) + 4|0);
  $53 = HEAP32[$52>>2]|0;
  $15 = $53;
  $54 = $15;
  $55 = $24;
  $0 = $55;
  $56 = $0;
  $11 = $51;
  $12 = $54;
  $13 = $56;
  $57 = $11;
  $58 = $12;
  $59 = $13;
  $10 = $59;
  $60 = $10;
  ;HEAP8[$9>>0]=HEAP8[$14>>0]|0;
  $6 = $57;
  $7 = $58;
  $8 = $60;
  $61 = $6;
  $62 = $7;
  $63 = $8;
  $5 = $63;
  $64 = $5;
  $2 = $61;
  $3 = $62;
  $4 = $64;
  $65 = $3;
  $66 = $4;
  $1 = $66;
  $67 = $1;
  $68 = HEAP32[$67>>2]|0;
  HEAP32[$65>>2] = $68;
  __ZNSt3__16vectorIPN4NGIS4Data8IUdxNodeENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
  $69 = ((($39)) + 4|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ((($70)) + 4|0);
  HEAP32[$69>>2] = $71;
  $74 = $node;
  STACKTOP = sp;return ($74|0);
 } else {
  $72 = $24;
  $16 = $72;
  $73 = $16;
  __ZNSt3__16vectorIPN4NGIS4Data8IUdxNodeENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_($39,$73);
  $74 = $node;
  STACKTOP = sp;return ($74|0);
 }
 return (0)|0;
}
function __ZN4NGIS4Data8CUdxNode15removeChildNodeEPNS0_8IUdxNodeE($this,$pNode) {
 $this = $this|0;
 $pNode = $pNode|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__n$i$i$i = 0;
 var $__old_size$i$i = 0, $__p$i = 0, $__ps$i = 0, $end = 0, $it = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $22 = sp + 256|0;
 $33 = sp + 8|0;
 $36 = sp + 353|0;
 $48 = sp + 156|0;
 $51 = sp + 144|0;
 $53 = sp + 136|0;
 $55 = sp + 128|0;
 $57 = sp + 116|0;
 $58 = sp;
 $61 = sp + 100|0;
 $64 = sp + 88|0;
 $67 = sp + 76|0;
 $72 = sp + 56|0;
 $75 = sp + 44|0;
 $77 = sp + 352|0;
 $it = sp + 28|0;
 $end = sp + 24|0;
 $80 = sp + 20|0;
 $81 = sp + 16|0;
 $82 = sp + 12|0;
 $78 = $this;
 $79 = $pNode;
 $83 = $78;
 $84 = ((($83)) + 24|0);
 $76 = $84;
 $85 = $76;
 $86 = HEAP32[$85>>2]|0;
 $73 = $85;
 $74 = $86;
 $87 = $74;
 $70 = $72;
 $71 = $87;
 $88 = $70;
 $89 = $71;
 HEAP32[$88>>2] = $89;
 $90 = HEAP32[$72>>2]|0;
 HEAP32[$75>>2] = $90;
 $91 = HEAP32[$75>>2]|0;
 HEAP32[$it>>2] = $91;
 $92 = ((($83)) + 24|0);
 $65 = $92;
 $93 = $65;
 $94 = ((($93)) + 4|0);
 $95 = HEAP32[$94>>2]|0;
 $62 = $93;
 $63 = $95;
 $96 = $63;
 $59 = $61;
 $60 = $96;
 $97 = $59;
 $98 = $60;
 HEAP32[$97>>2] = $98;
 $99 = HEAP32[$61>>2]|0;
 HEAP32[$64>>2] = $99;
 $100 = HEAP32[$64>>2]|0;
 HEAP32[$end>>2] = $100;
 while(1) {
  $9 = $it;
  $10 = $end;
  $101 = $9;
  $102 = $10;
  $7 = $101;
  $8 = $102;
  $103 = $7;
  $6 = $103;
  $104 = $6;
  $105 = HEAP32[$104>>2]|0;
  $106 = $8;
  $5 = $106;
  $107 = $5;
  $108 = HEAP32[$107>>2]|0;
  $109 = ($105|0)==($108|0);
  $110 = $109 ^ 1;
  if (!($110)) {
   label = 11;
   break;
  }
  $4 = $it;
  $111 = $4;
  $112 = HEAP32[$111>>2]|0;
  $113 = HEAP32[$112>>2]|0;
  $114 = $79;
  $115 = ($113|0)==($114|0);
  if ($115) {
   break;
  }
  $68 = $it;
  $69 = 0;
  $210 = $68;
  ;HEAP32[$67>>2]=HEAP32[$210>>2]|0;
  $66 = $210;
  $211 = $66;
  $212 = HEAP32[$211>>2]|0;
  $213 = ((($212)) + 4|0);
  HEAP32[$211>>2] = $213;
  $214 = HEAP32[$67>>2]|0;
  HEAP32[$82>>2] = $214;
 }
 if ((label|0) == 11) {
  $$expand_i1_val2 = 0;
  HEAP8[$77>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$77>>0]|0;
  $215 = $$pre_trunc&1;
  STACKTOP = sp;return ($215|0);
 }
 $116 = ((($83)) + 24|0);
 $1 = $80;
 $2 = $it;
 $3 = 0;
 $117 = $1;
 $118 = $2;
 $0 = $118;
 $119 = $0;
 $120 = HEAP32[$119>>2]|0;
 HEAP32[$117>>2] = $120;
 ;HEAP8[$58>>0]=HEAP8[$80>>0]|0;HEAP8[$58+1>>0]=HEAP8[$80+1>>0]|0;HEAP8[$58+2>>0]=HEAP8[$80+2>>0]|0;HEAP8[$58+3>>0]=HEAP8[$80+3>>0]|0;
 $56 = $116;
 $121 = $56;
 $54 = $121;
 $122 = $54;
 $52 = $122;
 $123 = $52;
 $124 = HEAP32[$123>>2]|0;
 $49 = $123;
 $50 = $124;
 $125 = $50;
 $46 = $48;
 $47 = $125;
 $126 = $46;
 $127 = $47;
 HEAP32[$126>>2] = $127;
 $128 = HEAP32[$48>>2]|0;
 HEAP32[$51>>2] = $128;
 $129 = HEAP32[$51>>2]|0;
 HEAP32[$53>>2] = $129;
 $130 = HEAP32[$53>>2]|0;
 HEAP32[$57>>2] = $130;
 $27 = $58;
 $28 = $57;
 $131 = $27;
 $26 = $131;
 $132 = $26;
 $133 = HEAP32[$132>>2]|0;
 $134 = $28;
 $25 = $134;
 $135 = $25;
 $136 = HEAP32[$135>>2]|0;
 $137 = $133;
 $138 = $136;
 $139 = (($137) - ($138))|0;
 $140 = (($139|0) / 4)&-1;
 $__ps$i = $140;
 $141 = HEAP32[$121>>2]|0;
 $142 = $__ps$i;
 $143 = (($141) + ($142<<2)|0);
 $__p$i = $143;
 $144 = $__p$i;
 $23 = $121;
 $24 = $144;
 $145 = $24;
 $20 = $22;
 $21 = $145;
 $146 = $20;
 $147 = $21;
 HEAP32[$146>>2] = $147;
 $148 = HEAP32[$22>>2]|0;
 HEAP32[$55>>2] = $148;
 $149 = $__p$i;
 $150 = ((($149)) + 4|0);
 $151 = ((($121)) + 4|0);
 $152 = HEAP32[$151>>2]|0;
 $153 = $__p$i;
 $17 = $150;
 $18 = $152;
 $19 = $153;
 $154 = $17;
 $16 = $154;
 $155 = $16;
 $156 = $18;
 $11 = $156;
 $157 = $11;
 $158 = $19;
 $12 = $158;
 $159 = $12;
 $13 = $155;
 $14 = $157;
 $15 = $159;
 $160 = $14;
 $161 = $13;
 $162 = $160;
 $163 = $161;
 $164 = (($162) - ($163))|0;
 $165 = (($164|0) / 4)&-1;
 $__n$i$i$i = $165;
 $166 = $15;
 $167 = $13;
 $168 = $__n$i$i$i;
 $169 = $168<<2;
 _memmove(($166|0),($167|0),($169|0))|0;
 $170 = $15;
 $171 = $__n$i$i$i;
 $172 = (($170) + ($171<<2)|0);
 $44 = $121;
 $45 = $172;
 $173 = $44;
 $43 = $173;
 $174 = $43;
 $175 = ((($174)) + 4|0);
 $176 = HEAP32[$175>>2]|0;
 $177 = HEAP32[$174>>2]|0;
 $178 = $176;
 $179 = $177;
 $180 = (($178) - ($179))|0;
 $181 = (($180|0) / 4)&-1;
 $__old_size$i$i = $181;
 $182 = $45;
 $41 = $173;
 $42 = $182;
 $183 = $41;
 while(1) {
  $184 = $42;
  $185 = ((($183)) + 4|0);
  $186 = HEAP32[$185>>2]|0;
  $187 = ($184|0)!=($186|0);
  if (!($187)) {
   break;
  }
  $40 = $183;
  $188 = $40;
  $189 = ((($188)) + 8|0);
  $39 = $189;
  $190 = $39;
  $38 = $190;
  $191 = $38;
  $192 = ((($183)) + 4|0);
  $193 = HEAP32[$192>>2]|0;
  $194 = ((($193)) + -4|0);
  HEAP32[$192>>2] = $194;
  $37 = $194;
  $195 = $37;
  $34 = $191;
  $35 = $195;
  $196 = $34;
  $197 = $35;
  ;HEAP8[$33>>0]=HEAP8[$36>>0]|0;
  $31 = $196;
  $32 = $197;
  $198 = $31;
  $199 = $32;
  $29 = $198;
  $30 = $199;
 }
 $200 = $__old_size$i$i;
 __THREW__ = 0;
 invoke_vii(618,($173|0),($200|0));
 $201 = __THREW__; __THREW__ = 0;
 $202 = $201&1;
 if ($202) {
  $203 = ___cxa_find_matching_catch(0|0)|0;
  $204 = tempRet0;
  ___clang_call_terminate($203);
  // unreachable;
 }
 $205 = HEAP32[$55>>2]|0;
 HEAP32[$81>>2] = $205;
 $206 = $79;
 $207 = HEAP32[$206>>2]|0;
 $208 = ((($207)) + 12|0);
 $209 = HEAP32[$208>>2]|0;
 (FUNCTION_TABLE_ii[$209 & 1023]($206)|0);
 $$expand_i1_val = 1;
 HEAP8[$77>>0] = $$expand_i1_val;
 $$pre_trunc = HEAP8[$77>>0]|0;
 $215 = $$pre_trunc&1;
 STACKTOP = sp;return ($215|0);
}
function __ZN4NGIS4Data8CUdxNode15removeChildNodeEi($this,$idx) {
 $this = $this|0;
 $idx = $idx|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__n$i$i$i = 0, $__old_size$i$i = 0, $__p$i = 0, $__ps$i = 0, $end = 0, $it = 0, $pNode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $22 = sp + 260|0;
 $33 = sp + 8|0;
 $36 = sp + 357|0;
 $48 = sp + 160|0;
 $51 = sp + 148|0;
 $53 = sp + 140|0;
 $55 = sp + 132|0;
 $57 = sp + 120|0;
 $58 = sp;
 $61 = sp + 104|0;
 $64 = sp + 92|0;
 $67 = sp + 80|0;
 $72 = sp + 60|0;
 $75 = sp + 48|0;
 $77 = sp + 356|0;
 $it = sp + 28|0;
 $end = sp + 24|0;
 $80 = sp + 20|0;
 $81 = sp + 16|0;
 $82 = sp + 12|0;
 $78 = $this;
 $79 = $idx;
 $83 = $78;
 $84 = HEAP32[$83>>2]|0;
 $85 = ((($84)) + 36|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = $79;
 $88 = (FUNCTION_TABLE_iii[$86 & 1023]($83,$87)|0);
 $pNode = $88;
 $89 = $pNode;
 $90 = ($89|0)==(0|0);
 if ($90) {
  $$expand_i1_val = 0;
  HEAP8[$77>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$77>>0]|0;
  $222 = $$pre_trunc&1;
  STACKTOP = sp;return ($222|0);
 }
 $91 = ((($83)) + 24|0);
 $76 = $91;
 $92 = $76;
 $93 = HEAP32[$92>>2]|0;
 $73 = $92;
 $74 = $93;
 $94 = $74;
 $70 = $72;
 $71 = $94;
 $95 = $70;
 $96 = $71;
 HEAP32[$95>>2] = $96;
 $97 = HEAP32[$72>>2]|0;
 HEAP32[$75>>2] = $97;
 $98 = HEAP32[$75>>2]|0;
 HEAP32[$it>>2] = $98;
 $99 = ((($83)) + 24|0);
 $65 = $99;
 $100 = $65;
 $101 = ((($100)) + 4|0);
 $102 = HEAP32[$101>>2]|0;
 $62 = $100;
 $63 = $102;
 $103 = $63;
 $59 = $61;
 $60 = $103;
 $104 = $59;
 $105 = $60;
 HEAP32[$104>>2] = $105;
 $106 = HEAP32[$61>>2]|0;
 HEAP32[$64>>2] = $106;
 $107 = HEAP32[$64>>2]|0;
 HEAP32[$end>>2] = $107;
 while(1) {
  $9 = $it;
  $10 = $end;
  $108 = $9;
  $109 = $10;
  $7 = $108;
  $8 = $109;
  $110 = $7;
  $6 = $110;
  $111 = $6;
  $112 = HEAP32[$111>>2]|0;
  $113 = $8;
  $5 = $113;
  $114 = $5;
  $115 = HEAP32[$114>>2]|0;
  $116 = ($112|0)==($115|0);
  $117 = $116 ^ 1;
  if (!($117)) {
   label = 13;
   break;
  }
  $4 = $it;
  $118 = $4;
  $119 = HEAP32[$118>>2]|0;
  $120 = HEAP32[$119>>2]|0;
  $121 = $pNode;
  $122 = ($120|0)==($121|0);
  if ($122) {
   break;
  }
  $68 = $it;
  $69 = 0;
  $217 = $68;
  ;HEAP32[$67>>2]=HEAP32[$217>>2]|0;
  $66 = $217;
  $218 = $66;
  $219 = HEAP32[$218>>2]|0;
  $220 = ((($219)) + 4|0);
  HEAP32[$218>>2] = $220;
  $221 = HEAP32[$67>>2]|0;
  HEAP32[$82>>2] = $221;
 }
 if ((label|0) == 13) {
  $$expand_i1_val4 = 0;
  HEAP8[$77>>0] = $$expand_i1_val4;
  $$pre_trunc = HEAP8[$77>>0]|0;
  $222 = $$pre_trunc&1;
  STACKTOP = sp;return ($222|0);
 }
 $123 = ((($83)) + 24|0);
 $1 = $80;
 $2 = $it;
 $3 = 0;
 $124 = $1;
 $125 = $2;
 $0 = $125;
 $126 = $0;
 $127 = HEAP32[$126>>2]|0;
 HEAP32[$124>>2] = $127;
 ;HEAP8[$58>>0]=HEAP8[$80>>0]|0;HEAP8[$58+1>>0]=HEAP8[$80+1>>0]|0;HEAP8[$58+2>>0]=HEAP8[$80+2>>0]|0;HEAP8[$58+3>>0]=HEAP8[$80+3>>0]|0;
 $56 = $123;
 $128 = $56;
 $54 = $128;
 $129 = $54;
 $52 = $129;
 $130 = $52;
 $131 = HEAP32[$130>>2]|0;
 $49 = $130;
 $50 = $131;
 $132 = $50;
 $46 = $48;
 $47 = $132;
 $133 = $46;
 $134 = $47;
 HEAP32[$133>>2] = $134;
 $135 = HEAP32[$48>>2]|0;
 HEAP32[$51>>2] = $135;
 $136 = HEAP32[$51>>2]|0;
 HEAP32[$53>>2] = $136;
 $137 = HEAP32[$53>>2]|0;
 HEAP32[$57>>2] = $137;
 $27 = $58;
 $28 = $57;
 $138 = $27;
 $26 = $138;
 $139 = $26;
 $140 = HEAP32[$139>>2]|0;
 $141 = $28;
 $25 = $141;
 $142 = $25;
 $143 = HEAP32[$142>>2]|0;
 $144 = $140;
 $145 = $143;
 $146 = (($144) - ($145))|0;
 $147 = (($146|0) / 4)&-1;
 $__ps$i = $147;
 $148 = HEAP32[$128>>2]|0;
 $149 = $__ps$i;
 $150 = (($148) + ($149<<2)|0);
 $__p$i = $150;
 $151 = $__p$i;
 $23 = $128;
 $24 = $151;
 $152 = $24;
 $20 = $22;
 $21 = $152;
 $153 = $20;
 $154 = $21;
 HEAP32[$153>>2] = $154;
 $155 = HEAP32[$22>>2]|0;
 HEAP32[$55>>2] = $155;
 $156 = $__p$i;
 $157 = ((($156)) + 4|0);
 $158 = ((($128)) + 4|0);
 $159 = HEAP32[$158>>2]|0;
 $160 = $__p$i;
 $17 = $157;
 $18 = $159;
 $19 = $160;
 $161 = $17;
 $16 = $161;
 $162 = $16;
 $163 = $18;
 $11 = $163;
 $164 = $11;
 $165 = $19;
 $12 = $165;
 $166 = $12;
 $13 = $162;
 $14 = $164;
 $15 = $166;
 $167 = $14;
 $168 = $13;
 $169 = $167;
 $170 = $168;
 $171 = (($169) - ($170))|0;
 $172 = (($171|0) / 4)&-1;
 $__n$i$i$i = $172;
 $173 = $15;
 $174 = $13;
 $175 = $__n$i$i$i;
 $176 = $175<<2;
 _memmove(($173|0),($174|0),($176|0))|0;
 $177 = $15;
 $178 = $__n$i$i$i;
 $179 = (($177) + ($178<<2)|0);
 $44 = $128;
 $45 = $179;
 $180 = $44;
 $43 = $180;
 $181 = $43;
 $182 = ((($181)) + 4|0);
 $183 = HEAP32[$182>>2]|0;
 $184 = HEAP32[$181>>2]|0;
 $185 = $183;
 $186 = $184;
 $187 = (($185) - ($186))|0;
 $188 = (($187|0) / 4)&-1;
 $__old_size$i$i = $188;
 $189 = $45;
 $41 = $180;
 $42 = $189;
 $190 = $41;
 while(1) {
  $191 = $42;
  $192 = ((($190)) + 4|0);
  $193 = HEAP32[$192>>2]|0;
  $194 = ($191|0)!=($193|0);
  if (!($194)) {
   break;
  }
  $40 = $190;
  $195 = $40;
  $196 = ((($195)) + 8|0);
  $39 = $196;
  $197 = $39;
  $38 = $197;
  $198 = $38;
  $199 = ((($190)) + 4|0);
  $200 = HEAP32[$199>>2]|0;
  $201 = ((($200)) + -4|0);
  HEAP32[$199>>2] = $201;
  $37 = $201;
  $202 = $37;
  $34 = $198;
  $35 = $202;
  $203 = $34;
  $204 = $35;
  ;HEAP8[$33>>0]=HEAP8[$36>>0]|0;
  $31 = $203;
  $32 = $204;
  $205 = $31;
  $206 = $32;
  $29 = $205;
  $30 = $206;
 }
 $207 = $__old_size$i$i;
 __THREW__ = 0;
 invoke_vii(618,($180|0),($207|0));
 $208 = __THREW__; __THREW__ = 0;
 $209 = $208&1;
 if ($209) {
  $210 = ___cxa_find_matching_catch(0|0)|0;
  $211 = tempRet0;
  ___clang_call_terminate($210);
  // unreachable;
 }
 $212 = HEAP32[$55>>2]|0;
 HEAP32[$81>>2] = $212;
 $213 = $pNode;
 $214 = HEAP32[$213>>2]|0;
 $215 = ((($214)) + 12|0);
 $216 = HEAP32[$215>>2]|0;
 (FUNCTION_TABLE_ii[$216 & 1023]($213)|0);
 $$expand_i1_val2 = 1;
 HEAP8[$77>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$77>>0]|0;
 $222 = $$pre_trunc&1;
 STACKTOP = sp;return ($222|0);
}
function __ZN4NGIS4Data8CUdxNode14validateSchemaEPNS0_6Schema14IUdxNodeSchemaE($this,$pSchema) {
 $this = $this|0;
 $pSchema = $pSchema|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, $iChild = 0, $pChildNode_D = 0, $pChildNode_S = 0, $pType = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 25|0;
 $1 = $this;
 $2 = $pSchema;
 $3 = $1;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_ii[$7 & 1023]($4)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_ii[$11 & 1023]($8)|0);
 $13 = (__ZN4NGIS4Data8CUdxNode21getKernelTypeBySchemaENS0_6Schema15ESchemaNodeTypeE($12)|0);
 $pType = $13;
 $14 = HEAP32[$3>>2]|0;
 $15 = ((($14)) + 28|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (FUNCTION_TABLE_ii[$16 & 1023]($3)|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($18)) + 24|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (FUNCTION_TABLE_ii[$20 & 1023]($17)|0);
 $22 = $pType;
 $23 = ($21|0)!=($22|0);
 if ($23) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $62 = $$pre_trunc&1;
  STACKTOP = sp;return ($62|0);
 }
 $24 = HEAP32[$3>>2]|0;
 $25 = ((($24)) + 32|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (FUNCTION_TABLE_ii[$26 & 1023]($3)|0);
 $28 = $2;
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($29)) + 36|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (FUNCTION_TABLE_ii[$31 & 1023]($28)|0);
 $33 = ($27|0)<($32|0);
 if ($33) {
  $$expand_i1_val2 = 0;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $62 = $$pre_trunc&1;
  STACKTOP = sp;return ($62|0);
 }
 $iChild = 0;
 while(1) {
  $34 = $iChild;
  $35 = $2;
  $36 = HEAP32[$35>>2]|0;
  $37 = ((($36)) + 36|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (FUNCTION_TABLE_ii[$38 & 1023]($35)|0);
  $40 = ($34|0)<($39|0);
  if (!($40)) {
   label = 10;
   break;
  }
  $41 = $2;
  $42 = HEAP32[$41>>2]|0;
  $43 = ((($42)) + 40|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $iChild;
  $46 = (FUNCTION_TABLE_iii[$44 & 1023]($41,$45)|0);
  $pChildNode_S = $46;
  $47 = HEAP32[$3>>2]|0;
  $48 = ((($47)) + 36|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = $iChild;
  $51 = (FUNCTION_TABLE_iii[$49 & 1023]($3,$50)|0);
  $pChildNode_D = $51;
  $52 = $pChildNode_D;
  $53 = $pChildNode_S;
  $54 = (__ZN4NGIS4Data8CUdxNode22iterateAndValidateNodeEPNS0_8IUdxNodeEPNS0_6Schema14IUdxNodeSchemaE($3,$52,$53)|0);
  $55 = $54&1;
  $ret = $55;
  $56 = $ret;
  $57 = $56&1;
  $58 = $57&1;
  $59 = ($58|0)==(0);
  if ($59) {
   label = 8;
   break;
  }
  $60 = $iChild;
  $61 = (($60) + 1)|0;
  $iChild = $61;
 }
 if ((label|0) == 8) {
  $$expand_i1_val4 = 0;
  HEAP8[$0>>0] = $$expand_i1_val4;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $62 = $$pre_trunc&1;
  STACKTOP = sp;return ($62|0);
 }
 else if ((label|0) == 10) {
  $$expand_i1_val6 = 1;
  HEAP8[$0>>0] = $$expand_i1_val6;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $62 = $$pre_trunc&1;
  STACKTOP = sp;return ($62|0);
 }
 return (0)|0;
}
function __ZN4NGIS4Data8CUdxNode22iterateAndValidateNodeEPNS0_8IUdxNodeEPNS0_6Schema14IUdxNodeSchemaE($this,$pDNode,$pSNode) {
 $this = $this|0;
 $pDNode = $pDNode|0;
 $pSNode = $pSNode|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $iChild = 0, $pChildNode_D = 0, $pChildNode_S = 0, $pType = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 29|0;
 $1 = $this;
 $2 = $pDNode;
 $3 = $pSNode;
 $4 = $1;
 $5 = $3;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (FUNCTION_TABLE_ii[$8 & 1023]($5)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (FUNCTION_TABLE_ii[$12 & 1023]($9)|0);
 $14 = (__ZN4NGIS4Data8CUdxNode21getKernelTypeBySchemaENS0_6Schema15ESchemaNodeTypeE($13)|0);
 $pType = $14;
 $15 = $2;
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($16)) + 28|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (FUNCTION_TABLE_ii[$18 & 1023]($15)|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($20)) + 24|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (FUNCTION_TABLE_ii[$22 & 1023]($19)|0);
 $24 = $pType;
 $25 = ($23|0)!=($24|0);
 if ($25) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $66 = $$pre_trunc&1;
  STACKTOP = sp;return ($66|0);
 }
 $26 = $2;
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($27)) + 32|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (FUNCTION_TABLE_ii[$29 & 1023]($26)|0);
 $31 = $3;
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($32)) + 36|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (FUNCTION_TABLE_ii[$34 & 1023]($31)|0);
 $36 = ($30|0)<($35|0);
 if ($36) {
  $$expand_i1_val2 = 0;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $66 = $$pre_trunc&1;
  STACKTOP = sp;return ($66|0);
 }
 $iChild = 0;
 while(1) {
  $37 = $iChild;
  $38 = $3;
  $39 = HEAP32[$38>>2]|0;
  $40 = ((($39)) + 36|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (FUNCTION_TABLE_ii[$41 & 1023]($38)|0);
  $43 = ($37|0)<($42|0);
  if (!($43)) {
   label = 10;
   break;
  }
  $44 = $3;
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + 40|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $iChild;
  $49 = (FUNCTION_TABLE_iii[$47 & 1023]($44,$48)|0);
  $pChildNode_S = $49;
  $50 = $2;
  $51 = HEAP32[$50>>2]|0;
  $52 = ((($51)) + 36|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $iChild;
  $55 = (FUNCTION_TABLE_iii[$53 & 1023]($50,$54)|0);
  $pChildNode_D = $55;
  $56 = $pChildNode_D;
  $57 = $pChildNode_S;
  $58 = (__ZN4NGIS4Data8CUdxNode22iterateAndValidateNodeEPNS0_8IUdxNodeEPNS0_6Schema14IUdxNodeSchemaE($4,$56,$57)|0);
  $59 = $58&1;
  $ret = $59;
  $60 = $ret;
  $61 = $60&1;
  $62 = $61&1;
  $63 = ($62|0)==(0);
  if ($63) {
   label = 8;
   break;
  }
  $64 = $iChild;
  $65 = (($64) + 1)|0;
  $iChild = $65;
 }
 if ((label|0) == 8) {
  $$expand_i1_val4 = 0;
  HEAP8[$0>>0] = $$expand_i1_val4;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $66 = $$pre_trunc&1;
  STACKTOP = sp;return ($66|0);
 }
 else if ((label|0) == 10) {
  $$expand_i1_val6 = 1;
  HEAP8[$0>>0] = $$expand_i1_val6;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $66 = $$pre_trunc&1;
  STACKTOP = sp;return ($66|0);
 }
 return (0)|0;
}
function __ZN4NGIS4Data8CUdxNode17FormatToXmlStreamERNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($this,$xmlStr) {
 $this = $this|0;
 $xmlStr = $xmlStr|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $xmlStr;
 STACKTOP = sp;return 0;
}
function __ZN4NGIS4Data8CUdxNode18FormatToJsonStreamERNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($this,$jsonStr) {
 $this = $this|0;
 $jsonStr = $jsonStr|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $jsonStr;
 STACKTOP = sp;return 0;
}
function __ZNSt3__16vectorIPN4NGIS4Data8IUdxNodeENS_9allocatorIS4_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIPN4NGIS4Data8IUdxNodeENS_9allocatorIS4_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data18CUdxKernelIntValueC2ENS0_11EKernelTypeEPKNS0_8CUdxNodeE($this,$pType,$pNode) {
 $this = $this|0;
 $pType = $pType|0;
 $pNode = $pNode|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $pType;
 $2 = $pNode;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 __ZN4NGIS4Data10CUdxKernelC2ENS0_11EKernelTypeEPKNS0_8CUdxNodeE($3,$4,$5);
 $6 = 4788;
 HEAP32[$3>>2] = $6;
 $7 = ((($3)) + 16|0);
 HEAP32[$7>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data19CUdxKernelRealValueC2ENS0_11EKernelTypeEPKNS0_8CUdxNodeE($this,$pType,$pNode) {
 $this = $this|0;
 $pType = $pType|0;
 $pNode = $pNode|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $pType;
 $2 = $pNode;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 __ZN4NGIS4Data10CUdxKernelC2ENS0_11EKernelTypeEPKNS0_8CUdxNodeE($3,$4,$5);
 $6 = 4832;
 HEAP32[$3>>2] = $6;
 $7 = ((($3)) + 16|0);
 HEAPF64[$7>>3] = 0.0;
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data21CUdxKernelStringValueC2ENS0_11EKernelTypeEPKNS0_8CUdxNodeE($this,$pType,$pNode) {
 $this = $this|0;
 $pType = $pType|0;
 $pNode = $pNode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = $this;
 $6 = $pType;
 $7 = $pNode;
 $10 = $5;
 $11 = $6;
 $12 = $7;
 __ZN4NGIS4Data10CUdxKernelC2ENS0_11EKernelTypeEPKNS0_8CUdxNodeE($10,$11,$12);
 $13 = 4876;
 HEAP32[$10>>2] = $13;
 $14 = ((($10)) + 16|0);
 $3 = $14;
 $4 = 11786;
 $15 = $3;
 $2 = $15;
 $16 = $2;
 $1 = $16;
 $17 = $1;
 $0 = $17;
 $18 = $4;
 $19 = $4;
 __THREW__ = 0;
 $20 = (invoke_ii(383,($19|0))|0);
 $21 = __THREW__; __THREW__ = 0;
 $22 = $21&1;
 if (!($22)) {
  __THREW__ = 0;
  invoke_viii(384,($15|0),($18|0),($20|0));
  $23 = __THREW__; __THREW__ = 0;
  $24 = $23&1;
  if (!($24)) {
   STACKTOP = sp;return;
  }
 }
 $25 = ___cxa_find_matching_catch()|0;
 $26 = tempRet0;
 $8 = $25;
 $9 = $26;
 __ZN4NGIS4Data10CUdxKernelD2Ev($10);
 $27 = $8;
 $28 = $9;
 ___resumeException($27|0);
 // unreachable;
}
function __ZN4NGIS4Data23CUdxKernelVector2dValueC2ENS0_11EKernelTypeEPKNS0_8CUdxNodeE($this,$pType,$pNode) {
 $this = $this|0;
 $pType = $pType|0;
 $pNode = $pNode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $pType;
 $2 = $pNode;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 __ZN4NGIS4Data10CUdxKernelC2ENS0_11EKernelTypeEPKNS0_8CUdxNodeE($5,$6,$7);
 $8 = 4920;
 HEAP32[$5>>2] = $8;
 $9 = ((($5)) + 16|0);
 __THREW__ = 0;
 invoke_vi(555,($9|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $12 = ___cxa_find_matching_catch()|0;
  $13 = tempRet0;
  $3 = $12;
  $4 = $13;
  __ZN4NGIS4Data10CUdxKernelD2Ev($5);
  $14 = $3;
  $15 = $4;
  ___resumeException($14|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN4NGIS4Data23CUdxKernelVector3dValueC2ENS0_11EKernelTypeEPKNS0_8CUdxNodeE($this,$pType,$pNode) {
 $this = $this|0;
 $pType = $pType|0;
 $pNode = $pNode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $pType;
 $2 = $pNode;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 __ZN4NGIS4Data10CUdxKernelC2ENS0_11EKernelTypeEPKNS0_8CUdxNodeE($5,$6,$7);
 $8 = 4968;
 HEAP32[$5>>2] = $8;
 $9 = ((($5)) + 16|0);
 __THREW__ = 0;
 invoke_vi(554,($9|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $12 = ___cxa_find_matching_catch()|0;
  $13 = tempRet0;
  $3 = $12;
  $4 = $13;
  __ZN4NGIS4Data10CUdxKernelD2Ev($5);
  $14 = $3;
  $15 = $4;
  ___resumeException($14|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN4NGIS4Data23CUdxKernelVector4dValueC2ENS0_11EKernelTypeEPKNS0_8CUdxNodeE($this,$pType,$pNode) {
 $this = $this|0;
 $pType = $pType|0;
 $pNode = $pNode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $pType;
 $2 = $pNode;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 __ZN4NGIS4Data10CUdxKernelC2ENS0_11EKernelTypeEPKNS0_8CUdxNodeE($5,$6,$7);
 $8 = 5016;
 HEAP32[$5>>2] = $8;
 $9 = ((($5)) + 16|0);
 __THREW__ = 0;
 invoke_vi(553,($9|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $12 = ___cxa_find_matching_catch()|0;
  $13 = tempRet0;
  $3 = $12;
  $4 = $13;
  __ZN4NGIS4Data10CUdxKernelD2Ev($5);
  $14 = $3;
  $15 = $4;
  ___resumeException($14|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN4NGIS4Data18CUdxKernelIntArrayC2ENS0_11EKernelTypeEPKNS0_8CUdxNodeE($this,$pType,$pNode) {
 $this = $this|0;
 $pType = $pType|0;
 $pNode = $pNode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 36|0;
 $6 = sp + 24|0;
 $10 = $this;
 $11 = $pType;
 $12 = $pNode;
 $13 = $10;
 $14 = $11;
 $15 = $12;
 __ZN4NGIS4Data10CUdxKernelC2ENS0_11EKernelTypeEPKNS0_8CUdxNodeE($13,$14,$15);
 $16 = 5064;
 HEAP32[$13>>2] = $16;
 $17 = ((($13)) + 16|0);
 $9 = $17;
 $18 = $9;
 $8 = $18;
 $19 = $8;
 $7 = $19;
 HEAP32[$19>>2] = 0;
 $20 = ((($19)) + 4|0);
 HEAP32[$20>>2] = 0;
 $21 = ((($19)) + 8|0);
 $5 = $21;
 HEAP32[$6>>2] = 0;
 $22 = $5;
 $4 = $6;
 $23 = $4;
 $24 = HEAP32[$23>>2]|0;
 $2 = $22;
 HEAP32[$3>>2] = $24;
 $25 = $2;
 $1 = $25;
 $0 = $3;
 $26 = $0;
 $27 = HEAP32[$26>>2]|0;
 HEAP32[$25>>2] = $27;
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data19CUdxKernelRealArrayC2ENS0_11EKernelTypeEPKNS0_8CUdxNodeE($this,$pType,$pNode) {
 $this = $this|0;
 $pType = $pType|0;
 $pNode = $pNode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 36|0;
 $6 = sp + 24|0;
 $10 = $this;
 $11 = $pType;
 $12 = $pNode;
 $13 = $10;
 $14 = $11;
 $15 = $12;
 __ZN4NGIS4Data10CUdxKernelC2ENS0_11EKernelTypeEPKNS0_8CUdxNodeE($13,$14,$15);
 $16 = 5124;
 HEAP32[$13>>2] = $16;
 $17 = ((($13)) + 16|0);
 $9 = $17;
 $18 = $9;
 $8 = $18;
 $19 = $8;
 $7 = $19;
 HEAP32[$19>>2] = 0;
 $20 = ((($19)) + 4|0);
 HEAP32[$20>>2] = 0;
 $21 = ((($19)) + 8|0);
 $5 = $21;
 HEAP32[$6>>2] = 0;
 $22 = $5;
 $4 = $6;
 $23 = $4;
 $24 = HEAP32[$23>>2]|0;
 $2 = $22;
 HEAP32[$3>>2] = $24;
 $25 = $2;
 $1 = $25;
 $0 = $3;
 $26 = $0;
 $27 = HEAP32[$26>>2]|0;
 HEAP32[$25>>2] = $27;
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data21CUdxKernelStringArrayC2ENS0_11EKernelTypeEPKNS0_8CUdxNodeE($this,$pType,$pNode) {
 $this = $this|0;
 $pType = $pType|0;
 $pNode = $pNode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 36|0;
 $6 = sp + 24|0;
 $10 = $this;
 $11 = $pType;
 $12 = $pNode;
 $13 = $10;
 $14 = $11;
 $15 = $12;
 __ZN4NGIS4Data10CUdxKernelC2ENS0_11EKernelTypeEPKNS0_8CUdxNodeE($13,$14,$15);
 $16 = 5184;
 HEAP32[$13>>2] = $16;
 $17 = ((($13)) + 16|0);
 $9 = $17;
 $18 = $9;
 $8 = $18;
 $19 = $8;
 $7 = $19;
 HEAP32[$19>>2] = 0;
 $20 = ((($19)) + 4|0);
 HEAP32[$20>>2] = 0;
 $21 = ((($19)) + 8|0);
 $5 = $21;
 HEAP32[$6>>2] = 0;
 $22 = $5;
 $4 = $6;
 $23 = $4;
 $24 = HEAP32[$23>>2]|0;
 $2 = $22;
 HEAP32[$3>>2] = $24;
 $25 = $2;
 $1 = $25;
 $0 = $3;
 $26 = $0;
 $27 = HEAP32[$26>>2]|0;
 HEAP32[$25>>2] = $27;
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data23CUdxKernelVector2dArrayC2ENS0_11EKernelTypeEPKNS0_8CUdxNodeE($this,$pType,$pNode) {
 $this = $this|0;
 $pType = $pType|0;
 $pNode = $pNode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 36|0;
 $6 = sp + 24|0;
 $10 = $this;
 $11 = $pType;
 $12 = $pNode;
 $13 = $10;
 $14 = $11;
 $15 = $12;
 __ZN4NGIS4Data10CUdxKernelC2ENS0_11EKernelTypeEPKNS0_8CUdxNodeE($13,$14,$15);
 $16 = 5244;
 HEAP32[$13>>2] = $16;
 $17 = ((($13)) + 16|0);
 $9 = $17;
 $18 = $9;
 $8 = $18;
 $19 = $8;
 $7 = $19;
 HEAP32[$19>>2] = 0;
 $20 = ((($19)) + 4|0);
 HEAP32[$20>>2] = 0;
 $21 = ((($19)) + 8|0);
 $5 = $21;
 HEAP32[$6>>2] = 0;
 $22 = $5;
 $4 = $6;
 $23 = $4;
 $24 = HEAP32[$23>>2]|0;
 $2 = $22;
 HEAP32[$3>>2] = $24;
 $25 = $2;
 $1 = $25;
 $0 = $3;
 $26 = $0;
 $27 = HEAP32[$26>>2]|0;
 HEAP32[$25>>2] = $27;
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data23CUdxKernelVector3dArrayC2ENS0_11EKernelTypeEPKNS0_8CUdxNodeE($this,$pType,$pNode) {
 $this = $this|0;
 $pType = $pType|0;
 $pNode = $pNode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 36|0;
 $6 = sp + 24|0;
 $10 = $this;
 $11 = $pType;
 $12 = $pNode;
 $13 = $10;
 $14 = $11;
 $15 = $12;
 __ZN4NGIS4Data10CUdxKernelC2ENS0_11EKernelTypeEPKNS0_8CUdxNodeE($13,$14,$15);
 $16 = 5308;
 HEAP32[$13>>2] = $16;
 $17 = ((($13)) + 16|0);
 $9 = $17;
 $18 = $9;
 $8 = $18;
 $19 = $8;
 $7 = $19;
 HEAP32[$19>>2] = 0;
 $20 = ((($19)) + 4|0);
 HEAP32[$20>>2] = 0;
 $21 = ((($19)) + 8|0);
 $5 = $21;
 HEAP32[$6>>2] = 0;
 $22 = $5;
 $4 = $6;
 $23 = $4;
 $24 = HEAP32[$23>>2]|0;
 $2 = $22;
 HEAP32[$3>>2] = $24;
 $25 = $2;
 $1 = $25;
 $0 = $3;
 $26 = $0;
 $27 = HEAP32[$26>>2]|0;
 HEAP32[$25>>2] = $27;
 STACKTOP = sp;return;
}
function __ZN4NGIS4Data23CUdxKernelVector4dArrayC2ENS0_11EKernelTypeEPKNS0_8CUdxNodeE($this,$pType,$pNode) {
 $this = $this|0;
 $pType = $pType|0;
 $pNode = $pNode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 36|0;
 $6 = sp + 24|0;
 $10 = $this;
 $11 = $pType;
 $12 = $pNode;
 $13 = $10;
 $14 = $11;
 $15 = $12;
 __ZN4NGIS4Data10CUdxKernelC2ENS0_11EKernelTypeEPKNS0_8CUdxNodeE($13,$14,$15);
 $16 = 5372;
 HEAP32[$13>>2] = $16;
 $17 = ((($13)) + 16|0);
 $9 = $17;
 $18 = $9;
 $8 = $18;
 $19 = $8;
 $7 = $19;
 HEAP32[$19>>2] = 0;
 $20 = ((($19)) + 4|0);
 HEAP32[$20>>2] = 0;
 $21 = ((($19)) + 8|0);
 $5 = $21;
 HEAP32[$6>>2] = 0;
 $22 = $5;
 $4 = $6;
 $23 = $4;
 $24 = HEAP32[$23>>2]|0;
 $2 = $22;
 HEAP32[$3>>2] = $24;
 $25 = $2;
 $1 = $25;
 $0 = $3;
 $26 = $0;
 $27 = HEAP32[$26>>2]|0;
 HEAP32[$25>>2] = $27;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIPN4NGIS4Data8IUdxNodeENS_9allocatorIS4_EEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 4)&-1;
 $35 = (($22) + ($34<<2)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + ($39<<2)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 4)&-1;
 $52 = (($43) + ($51<<2)|0);
 __ZNKSt3__16vectorIPN4NGIS4Data8IUdxNodeENS_9allocatorIS4_EEE31__annotate_contiguous_containerEPKvS9_S9_S9_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPN4NGIS4Data8IUdxNodeENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotatorC2ERKS7_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPN4NGIS4Data8IUdxNodeENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPN4NGIS4Data8IUdxNodeENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp + 8|0;
 $13 = sp + 201|0;
 $22 = sp;
 $25 = sp + 200|0;
 $33 = sp + 80|0;
 $34 = sp + 68|0;
 $__v = sp + 20|0;
 $39 = $this;
 $40 = $__x;
 $43 = $39;
 $38 = $43;
 $44 = $38;
 $45 = ((($44)) + 8|0);
 $37 = $45;
 $46 = $37;
 $36 = $46;
 $47 = $36;
 $__a = $47;
 $35 = $43;
 $48 = $35;
 $49 = ((($48)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP32[$48>>2]|0;
 $52 = $50;
 $53 = $51;
 $54 = (($52) - ($53))|0;
 $55 = (($54|0) / 4)&-1;
 $56 = (($55) + 1)|0;
 $32 = $43;
 HEAP32[$33>>2] = $56;
 $57 = $32;
 $58 = (__ZNKSt3__16vectorIPN4NGIS4Data8IUdxNodeENS_9allocatorIS4_EEE8max_sizeEv($57)|0);
 $__ms$i = $58;
 $59 = HEAP32[$33>>2]|0;
 $60 = $__ms$i;
 $61 = ($59>>>0)>($60>>>0);
 if ($61) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($57);
  // unreachable;
 }
 $30 = $57;
 $62 = $30;
 $29 = $62;
 $63 = $29;
 $28 = $63;
 $64 = $28;
 $65 = ((($64)) + 8|0);
 $27 = $65;
 $66 = $27;
 $26 = $66;
 $67 = $26;
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$63>>2]|0;
 $70 = $68;
 $71 = $69;
 $72 = (($70) - ($71))|0;
 $73 = (($72|0) / 4)&-1;
 $__cap$i = $73;
 $74 = $__cap$i;
 $75 = $__ms$i;
 $76 = (($75>>>0) / 2)&-1;
 $77 = ($74>>>0)>=($76>>>0);
 if ($77) {
  $78 = $__ms$i;
  $31 = $78;
 } else {
  $79 = $__cap$i;
  $80 = $79<<1;
  HEAP32[$34>>2] = $80;
  $23 = $34;
  $24 = $33;
  $81 = $23;
  $82 = $24;
  ;HEAP8[$22>>0]=HEAP8[$25>>0]|0;
  $20 = $81;
  $21 = $82;
  $83 = $20;
  $84 = $21;
  $17 = $22;
  $18 = $83;
  $19 = $84;
  $85 = $18;
  $86 = HEAP32[$85>>2]|0;
  $87 = $19;
  $88 = HEAP32[$87>>2]|0;
  $89 = ($86>>>0)<($88>>>0);
  $90 = $21;
  $91 = $20;
  $92 = $89 ? $90 : $91;
  $93 = HEAP32[$92>>2]|0;
  $31 = $93;
 }
 $94 = $31;
 $16 = $43;
 $95 = $16;
 $96 = ((($95)) + 4|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = HEAP32[$95>>2]|0;
 $99 = $97;
 $100 = $98;
 $101 = (($99) - ($100))|0;
 $102 = (($101|0) / 4)&-1;
 $103 = $__a;
 __ZNSt3__114__split_bufferIPN4NGIS4Data8IUdxNodeERNS_9allocatorIS4_EEEC2EjjS7_($__v,$94,$102,$103);
 $104 = $__a;
 $105 = ((($__v)) + 8|0);
 $106 = HEAP32[$105>>2]|0;
 $15 = $106;
 $107 = $15;
 $108 = $40;
 $14 = $108;
 $109 = $14;
 $10 = $104;
 $11 = $107;
 $12 = $109;
 $110 = $10;
 $111 = $11;
 $112 = $12;
 $9 = $112;
 $113 = $9;
 ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
 $5 = $110;
 $6 = $111;
 $7 = $113;
 $114 = $5;
 $115 = $6;
 $116 = $7;
 $4 = $116;
 $117 = $4;
 $1 = $114;
 $2 = $115;
 $3 = $117;
 $118 = $2;
 $119 = $3;
 $0 = $119;
 $120 = $0;
 $121 = HEAP32[$120>>2]|0;
 HEAP32[$118>>2] = $121;
 $122 = ((($__v)) + 8|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = ((($123)) + 4|0);
 HEAP32[$122>>2] = $124;
 __THREW__ = 0;
 invoke_vii(619,($43|0),($__v|0));
 $125 = __THREW__; __THREW__ = 0;
 $126 = $125&1;
 if ($126) {
  $127 = ___cxa_find_matching_catch()|0;
  $128 = tempRet0;
  $41 = $127;
  $42 = $128;
  __ZNSt3__114__split_bufferIPN4NGIS4Data8IUdxNodeERNS_9allocatorIS4_EEED2Ev($__v);
  $129 = $41;
  $130 = $42;
  ___resumeException($129|0);
  // unreachable;
 } else {
  __ZNSt3__114__split_bufferIPN4NGIS4Data8IUdxNodeERNS_9allocatorIS4_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__16vectorIPN4NGIS4Data8IUdxNodeENS_9allocatorIS4_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 77|0;
 $11 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 1073741823;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNSt3__114__split_bufferIPN4NGIS4Data8IUdxNodeERNS_9allocatorIS4_EEEC2EjjS7_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 36|0;
 $20 = sp + 20|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = ((($26)) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = ((($34)) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = ((($42)) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = $51<<2;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + ($57<<2)|0);
 $59 = ((($26)) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = ((($26)) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + ($62<<2)|0);
 $11 = $26;
 $64 = $11;
 $65 = ((($64)) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPN4NGIS4Data8IUdxNodeENS_9allocatorIS4_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS4_RS6_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 120|0;
 $__t$i1 = sp + 96|0;
 $__t$i = sp + 48|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 __ZNKSt3__16vectorIPN4NGIS4Data8IUdxNodeENS_9allocatorIS4_EEE17__annotate_deleteEv($32);
 $29 = $32;
 $33 = $29;
 $34 = ((($33)) + 8|0);
 $28 = $34;
 $35 = $28;
 $27 = $35;
 $36 = $27;
 $37 = HEAP32[$32>>2]|0;
 $38 = ((($32)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = ((($40)) + 4|0);
 $22 = $36;
 $23 = $37;
 $24 = $39;
 $25 = $41;
 $42 = $24;
 $43 = $23;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = (($46|0) / 4)&-1;
 $_Np$i = $47;
 $48 = $_Np$i;
 $49 = $25;
 $50 = HEAP32[$49>>2]|0;
 $51 = (0 - ($48))|0;
 $52 = (($50) + ($51<<2)|0);
 HEAP32[$49>>2] = $52;
 $53 = $25;
 $54 = HEAP32[$53>>2]|0;
 $55 = $23;
 $56 = $_Np$i;
 $57 = $56<<2;
 _memcpy(($54|0),($55|0),($57|0))|0;
 $58 = $31;
 $59 = ((($58)) + 4|0);
 $3 = $32;
 $4 = $59;
 $60 = $3;
 $2 = $60;
 $61 = $2;
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$__t$i2>>2] = $62;
 $63 = $4;
 $0 = $63;
 $64 = $0;
 $65 = HEAP32[$64>>2]|0;
 $66 = $3;
 HEAP32[$66>>2] = $65;
 $1 = $__t$i2;
 $67 = $1;
 $68 = HEAP32[$67>>2]|0;
 $69 = $4;
 HEAP32[$69>>2] = $68;
 $70 = ((($32)) + 4|0);
 $71 = $31;
 $72 = ((($71)) + 8|0);
 $8 = $70;
 $9 = $72;
 $73 = $8;
 $7 = $73;
 $74 = $7;
 $75 = HEAP32[$74>>2]|0;
 HEAP32[$__t$i1>>2] = $75;
 $76 = $9;
 $5 = $76;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = $8;
 HEAP32[$79>>2] = $78;
 $6 = $__t$i1;
 $80 = $6;
 $81 = HEAP32[$80>>2]|0;
 $82 = $9;
 HEAP32[$82>>2] = $81;
 $12 = $32;
 $83 = $12;
 $84 = ((($83)) + 8|0);
 $11 = $84;
 $85 = $11;
 $10 = $85;
 $86 = $10;
 $87 = $31;
 $15 = $87;
 $88 = $15;
 $89 = ((($88)) + 12|0);
 $14 = $89;
 $90 = $14;
 $13 = $90;
 $91 = $13;
 $19 = $86;
 $20 = $91;
 $92 = $19;
 $18 = $92;
 $93 = $18;
 $94 = HEAP32[$93>>2]|0;
 HEAP32[$__t$i>>2] = $94;
 $95 = $20;
 $16 = $95;
 $96 = $16;
 $97 = HEAP32[$96>>2]|0;
 $98 = $19;
 HEAP32[$98>>2] = $97;
 $17 = $__t$i;
 $99 = $17;
 $100 = HEAP32[$99>>2]|0;
 $101 = $20;
 HEAP32[$101>>2] = $100;
 $102 = $31;
 $103 = ((($102)) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $31;
 HEAP32[$105>>2] = $104;
 $21 = $32;
 $106 = $21;
 $107 = ((($106)) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[$106>>2]|0;
 $110 = $108;
 $111 = $109;
 $112 = (($110) - ($111))|0;
 $113 = (($112|0) / 4)&-1;
 __ZNKSt3__16vectorIPN4NGIS4Data8IUdxNodeENS_9allocatorIS4_EEE14__annotate_newEj($32,$113);
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPN4NGIS4Data8IUdxNodeERNS_9allocatorIS4_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp + 8|0;
 $21 = sp + 133|0;
 $28 = sp;
 $31 = sp + 132|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = ((($40)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = ((($45)) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($40)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + -4|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
 }
 $59 = HEAP32[$34>>2]|0;
 $60 = ($59|0)!=(0|0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $61 = $13;
 $62 = ((($61)) + 12|0);
 $12 = $62;
 $63 = $12;
 $11 = $63;
 $64 = $11;
 $65 = ((($64)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$34>>2]|0;
 $3 = $34;
 $68 = $3;
 $2 = $68;
 $69 = $2;
 $70 = ((($69)) + 12|0);
 $1 = $70;
 $71 = $1;
 $0 = $71;
 $72 = $0;
 $73 = HEAP32[$72>>2]|0;
 $74 = HEAP32[$68>>2]|0;
 $75 = $73;
 $76 = $74;
 $77 = (($75) - ($76))|0;
 $78 = (($77|0) / 4)&-1;
 $8 = $66;
 $9 = $67;
 $10 = $78;
 $79 = $8;
 $80 = $9;
 $81 = $10;
 $5 = $79;
 $6 = $80;
 $7 = $81;
 $82 = $6;
 $4 = $82;
 $83 = $4;
 __ZdlPv($83);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIPN4NGIS4Data8IUdxNodeENS_9allocatorIS4_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 4)&-1;
 $51 = (($42) + ($50<<2)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 4)&-1;
 $67 = (($54) + ($66<<2)|0);
 __ZNKSt3__16vectorIPN4NGIS4Data8IUdxNodeENS_9allocatorIS4_EEE31__annotate_contiguous_containerEPKvS9_S9_S9_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIPN4NGIS4Data8IUdxNodeENS_9allocatorIS4_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 4)&-1;
 $55 = (($42) + ($54<<2)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + ($59<<2)|0);
 __ZNKSt3__16vectorIPN4NGIS4Data8IUdxNodeENS_9allocatorIS4_EEE31__annotate_contiguous_containerEPKvS9_S9_S9_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIPN4NGIS4Data8IUdxNodeENS_9allocatorIS4_EEE31__annotate_contiguous_containerEPKvS9_S9_S9_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIPN4NGIS4Data8IUdxNodeENS_9allocatorIS4_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -4|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
 }
 $6 = $30;
 $52 = $6;
 $53 = ((($52)) + 8|0);
 $5 = $53;
 $54 = $5;
 $4 = $54;
 $55 = $4;
 $56 = HEAP32[$30>>2]|0;
 $3 = $30;
 $57 = $3;
 $2 = $57;
 $58 = $2;
 $59 = ((($58)) + 8|0);
 $1 = $59;
 $60 = $1;
 $0 = $60;
 $61 = $0;
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$57>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $67 = (($66|0) / 4)&-1;
 $11 = $55;
 $12 = $56;
 $13 = $67;
 $68 = $11;
 $69 = $12;
 $70 = $13;
 $8 = $68;
 $9 = $69;
 $10 = $70;
 $71 = $9;
 $7 = $71;
 $72 = $7;
 __ZdlPv($72);
 STACKTOP = sp;return;
}
function ___getTypeName($ti) {
 $ti = $ti|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ti;
 $2 = $1;
 $0 = $2;
 $3 = $0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (___strdup($5)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal6TypeIDIvE3getEv()|0);
 __embind_register_void(($1|0),(11787|0));
 $2 = (__ZN10emscripten8internal6TypeIDIbE3getEv()|0);
 __embind_register_bool(($2|0),(11792|0),1,1,0);
 __ZN12_GLOBAL__N_1L16register_integerIcEEvPKc(11797);
 __ZN12_GLOBAL__N_1L16register_integerIaEEvPKc(11802);
 __ZN12_GLOBAL__N_1L16register_integerIhEEvPKc(11814);
 __ZN12_GLOBAL__N_1L16register_integerIsEEvPKc(11828);
 __ZN12_GLOBAL__N_1L16register_integerItEEvPKc(11834);
 __ZN12_GLOBAL__N_1L16register_integerIiEEvPKc(11849);
 __ZN12_GLOBAL__N_1L16register_integerIjEEvPKc(11853);
 __ZN12_GLOBAL__N_1L16register_integerIlEEvPKc(11866);
 __ZN12_GLOBAL__N_1L16register_integerImEEvPKc(11871);
 __ZN12_GLOBAL__N_1L14register_floatIfEEvPKc(11885);
 __ZN12_GLOBAL__N_1L14register_floatIdEEvPKc(11891);
 $3 = (__ZN10emscripten8internal6TypeIDINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv()|0);
 __embind_register_std_string(($3|0),(11898|0));
 $4 = (__ZN10emscripten8internal6TypeIDINSt3__112basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv()|0);
 __embind_register_std_string(($4|0),(11910|0));
 $5 = (__ZN10emscripten8internal6TypeIDINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv()|0);
 __embind_register_std_wstring(($5|0),4,(11943|0));
 $6 = (__ZN10emscripten8internal6TypeIDINS_3valEE3getEv()|0);
 __embind_register_emval(($6|0),(11956|0));
 __ZN12_GLOBAL__N_1L20register_memory_viewIcEEvPKc(11972);
 __ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc(12002);
 __ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc(12039);
 __ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc(12078);
 __ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc(12109);
 __ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc(12149);
 __ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc(12178);
 __ZN12_GLOBAL__N_1L20register_memory_viewIlEEvPKc(12216);
 __ZN12_GLOBAL__N_1L20register_memory_viewImEEvPKc(12246);
 __ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc(12285);
 __ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc(12317);
 __ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc(12350);
 __ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc(12383);
 __ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc(12417);
 __ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc(12450);
 __ZN12_GLOBAL__N_1L20register_memory_viewIfEEvPKc(12484);
 __ZN12_GLOBAL__N_1L20register_memory_viewIdEEvPKc(12515);
 __ZN12_GLOBAL__N_1L20register_memory_viewIeEEvPKc(12547);
 STACKTOP = sp;return;
}
function __GLOBAL__sub_I_bind_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init272();
 return;
}
function __ZN10emscripten8internal6TypeIDIvE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIvE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDIbE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIbE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_1L16register_integerIcEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDIcE3getEv()|0);
 $2 = $0;
 $3 = -128 << 24 >> 24;
 $4 = 127 << 24 >> 24;
 __embind_register_integer(($1|0),($2|0),1,($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIaEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDIaE3getEv()|0);
 $2 = $0;
 $3 = -128 << 24 >> 24;
 $4 = 127 << 24 >> 24;
 __embind_register_integer(($1|0),($2|0),1,($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIhEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDIhE3getEv()|0);
 $2 = $0;
 $3 = 0;
 $4 = 255;
 __embind_register_integer(($1|0),($2|0),1,($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIsEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDIsE3getEv()|0);
 $2 = $0;
 $3 = -32768 << 16 >> 16;
 $4 = 32767 << 16 >> 16;
 __embind_register_integer(($1|0),($2|0),2,($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerItEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDItE3getEv()|0);
 $2 = $0;
 $3 = 0;
 $4 = 65535;
 __embind_register_integer(($1|0),($2|0),2,($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIiEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0);
 $2 = $0;
 __embind_register_integer(($1|0),($2|0),4,-2147483648,2147483647);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIjEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDIjE3getEv()|0);
 $2 = $0;
 __embind_register_integer(($1|0),($2|0),4,0,-1);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIlEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDIlE3getEv()|0);
 $2 = $0;
 __embind_register_integer(($1|0),($2|0),4,-2147483648,2147483647);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerImEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDImE3getEv()|0);
 $2 = $0;
 __embind_register_integer(($1|0),($2|0),4,0,-1);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L14register_floatIfEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDIfE3getEv()|0);
 $2 = $0;
 __embind_register_float(($1|0),($2|0),4);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L14register_floatIdEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDIdE3getEv()|0);
 $2 = $0;
 __embind_register_float(($1|0),($2|0),8);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINSt3__112basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__112basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS_3valEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIcEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEE3getEv()|0);
 $2 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIcEENS_15TypedArrayIndexEv()|0);
 $3 = $0;
 __embind_register_memory_view(($1|0),($2|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEE3getEv()|0);
 $2 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIaEENS_15TypedArrayIndexEv()|0);
 $3 = $0;
 __embind_register_memory_view(($1|0),($2|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEE3getEv()|0);
 $2 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIhEENS_15TypedArrayIndexEv()|0);
 $3 = $0;
 __embind_register_memory_view(($1|0),($2|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEE3getEv()|0);
 $2 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIsEENS_15TypedArrayIndexEv()|0);
 $3 = $0;
 __embind_register_memory_view(($1|0),($2|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewItEEE3getEv()|0);
 $2 = (__ZN12_GLOBAL__N_118getTypedArrayIndexItEENS_15TypedArrayIndexEv()|0);
 $3 = $0;
 __embind_register_memory_view(($1|0),($2|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEE3getEv()|0);
 $2 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIiEENS_15TypedArrayIndexEv()|0);
 $3 = $0;
 __embind_register_memory_view(($1|0),($2|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEE3getEv()|0);
 $2 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIjEENS_15TypedArrayIndexEv()|0);
 $3 = $0;
 __embind_register_memory_view(($1|0),($2|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIlEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEE3getEv()|0);
 $2 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIlEENS_15TypedArrayIndexEv()|0);
 $3 = $0;
 __embind_register_memory_view(($1|0),($2|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewImEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewImEEE3getEv()|0);
 $2 = (__ZN12_GLOBAL__N_118getTypedArrayIndexImEENS_15TypedArrayIndexEv()|0);
 $3 = $0;
 __embind_register_memory_view(($1|0),($2|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIfEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEE3getEv()|0);
 $2 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIfEENS_15TypedArrayIndexEv()|0);
 $3 = $0;
 __embind_register_memory_view(($1|0),($2|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIdEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEE3getEv()|0);
 $2 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIdEENS_15TypedArrayIndexEv()|0);
 $3 = $0;
 __embind_register_memory_view(($1|0),($2|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIeEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEE3getEv()|0);
 $2 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIeEENS_15TypedArrayIndexEv()|0);
 $3 = $0;
 __embind_register_memory_view(($1|0),($2|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIeEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 7;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (752|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIdEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 7;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (760|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIfEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 6;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (768|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewImEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexImEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 5;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (776|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIlEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (784|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIjEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 5;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (792|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIiEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (800|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewItEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexItEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (808|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIsEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (816|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIhEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (824|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIaEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (832|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIcEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (840|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (848|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (352|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__112basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (856|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (312|0);
}
function __ZN10emscripten8internal6TypeIDIfE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIfE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIfE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1080|0);
}
function __ZN10emscripten8internal6TypeIDImE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDImE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDImE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1072|0);
}
function __ZN10emscripten8internal6TypeIDIlE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIlE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIlE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1064|0);
}
function __ZN10emscripten8internal6TypeIDIjE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIjE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIjE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1056|0);
}
function __ZN10emscripten8internal6TypeIDIiE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIiE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIiE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1048|0);
}
function __ZN10emscripten8internal6TypeIDItE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDItE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDItE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1040|0);
}
function __ZN10emscripten8internal6TypeIDIsE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIsE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIsE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1032|0);
}
function __ZN10emscripten8internal6TypeIDIhE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIhE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIhE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1016|0);
}
function __ZN10emscripten8internal6TypeIDIaE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIaE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIaE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1024|0);
}
function __ZN10emscripten8internal6TypeIDIcE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIcE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIcE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1008|0);
}
function __ZN10emscripten8internal11LightTypeIDIbE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1000|0);
}
function __ZN10emscripten8internal11LightTypeIDIvE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (992|0);
}
function ___cxx_global_var_init272() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev(13038);
 return;
}
function _abort_message($format,$varargs) {
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $list = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $list = sp;
 HEAP32[$list>>2] = $varargs;
 $0 = HEAP32[6000>>2]|0;
 (_vfprintf($0,$format,$list)|0);
 (_fputc(10,$0)|0);
 _abort();
 // unreachable;
}
function __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___assert_fail((13389|0),(13412|0),303,(13487|0));
 // unreachable;
}
function ___cxa_get_globals_fast() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_pthread_once((5744|0),(620|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[5740>>2]|0;
  $3 = (_pthread_getspecific(($2|0))|0);
  STACKTOP = sp;return ($3|0);
 } else {
  _abort_message(13508,$vararg_buffer);
  // unreachable;
 }
 return (0)|0;
}
function __Znwj($size) {
 $size = $size|0;
 var $$lcssa = 0, $$size = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($size|0)==(0);
 $$size = $0 ? 1 : $size;
 $1 = (_malloc($$size)|0);
 $2 = ($1|0)==(0|0);
 L1: do {
  if ($2) {
   while(1) {
    $3 = (__ZSt15get_new_handlerv()|0);
    $4 = ($3|0)==(0|0);
    if ($4) {
     break;
    }
    FUNCTION_TABLE_v[$3 & 1023]();
    $5 = (_malloc($$size)|0);
    $6 = ($5|0)==(0|0);
    if (!($6)) {
     $$lcssa = $5;
     break L1;
    }
   }
   $7 = (___cxa_allocate_exception(4)|0);
   HEAP32[$7>>2] = (5548);
   ___cxa_throw(($7|0),(880|0),(325|0));
   // unreachable;
  } else {
   $$lcssa = $1;
  }
 } while(0);
 return ($$lcssa|0);
}
function __Znaj($size) {
 $size = $size|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj($size)|0);
 return ($0|0);
}
function __ZdlPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($ptr);
 return;
}
function __ZdaPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($ptr);
 return;
}
function __ZNSt9bad_allocD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9bad_allocD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt9bad_alloc4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (13557|0);
}
function __ZSt11__terminatePFvvE($func) {
 $func = $func|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 __THREW__ = 0;
 invoke_v($func|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if (!($1)) {
  __THREW__ = 0;
  invoke_vii(621,(13572|0),($vararg_buffer|0));
  $2 = __THREW__; __THREW__ = 0;
 }
 $3 = ___cxa_find_matching_catch(0|0)|0;
 $4 = tempRet0;
 (___cxa_begin_catch(($3|0))|0);
 __THREW__ = 0;
 invoke_vii(621,(13612|0),($vararg_buffer1|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = ___cxa_find_matching_catch(0|0)|0;
 $7 = tempRet0;
 __THREW__ = 0;
 invoke_v(622);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch(0|0)|0;
  $11 = tempRet0;
  ___clang_call_terminate($10);
  // unreachable;
 } else {
  ___clang_call_terminate($6);
  // unreachable;
 }
}
function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(623)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $21 = ___cxa_find_matching_catch(0|0)|0;
  $22 = tempRet0;
  ___clang_call_terminate($21);
  // unreachable;
 }
 $3 = ($0|0)==(0|0);
 if (!($3)) {
  $4 = HEAP32[$0>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   $6 = ((($4)) + 48|0);
   $7 = $6;
   $8 = $7;
   $9 = HEAP32[$8>>2]|0;
   $10 = (($7) + 4)|0;
   $11 = $10;
   $12 = HEAP32[$11>>2]|0;
   $13 = $9 & -256;
   $14 = ($13|0)==(1126902528);
   $15 = ($12|0)==(1129074247);
   $16 = $14 & $15;
   if ($16) {
    $17 = ((($4)) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    __ZSt11__terminatePFvvE($18);
    // unreachable;
   }
  }
 }
 $19 = HEAP32[1384]|0;HEAP32[1384] = (($19+0)|0);
 $20 = $19;
 __ZSt11__terminatePFvvE($20);
 // unreachable;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[5560>>2]|0;HEAP32[5560>>2] = (($0+0)|0);
 $1 = $0;
 return ($1|0);
}
function __ZNSt9exceptionD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv123__fundamental_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN10__cxxabiv116__enum_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$0) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this|0)==($thrown_type|0);
 return ($1|0);
}
function __ZNK10__cxxabiv116__enum_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$0) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this|0)==($thrown_type|0);
 return ($1|0);
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = ($this|0)==($thrown_type|0);
 if ($0) {
  $$1 = 1;
 } else {
  $1 = ($thrown_type|0)==(0|0);
  if ($1) {
   $$1 = 0;
  } else {
   $2 = (___dynamic_cast($thrown_type,912,928,0)|0);
   $3 = ($2|0)==(0|0);
   if ($3) {
    $$1 = 0;
   } else {
    dest=$info; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$info>>2] = $2;
    $4 = ((($info)) + 8|0);
    HEAP32[$4>>2] = $this;
    $5 = ((($info)) + 12|0);
    HEAP32[$5>>2] = -1;
    $6 = ((($info)) + 48|0);
    HEAP32[$6>>2] = 1;
    $7 = HEAP32[$2>>2]|0;
    $8 = ((($7)) + 28|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = HEAP32[$adjustedPtr>>2]|0;
    FUNCTION_TABLE_viiii[$9 & 1023]($2,$info,$10,1);
    $11 = ((($info)) + 24|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(1);
    if ($13) {
     $14 = ((($info)) + 16|0);
     $15 = HEAP32[$14>>2]|0;
     HEAP32[$adjustedPtr>>2] = $15;
     $$0 = 1;
    } else {
     $$0 = 0;
    }
    $$1 = $$0;
   }
  }
 }
 STACKTOP = sp;return ($$1|0);
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   HEAP32[$0>>2] = $adjustedPtr;
   $3 = ((($info)) + 24|0);
   HEAP32[$3>>2] = $path_below;
   $4 = ((($info)) + 36|0);
   HEAP32[$4>>2] = 1;
  } else {
   $5 = ($1|0)==($adjustedPtr|0);
   if (!($5)) {
    $9 = ((($info)) + 36|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + 1)|0;
    HEAP32[$9>>2] = $11;
    $12 = ((($info)) + 24|0);
    HEAP32[$12>>2] = 2;
    $13 = ((($info)) + 54|0);
    HEAP8[$13>>0] = 1;
    break;
   }
   $6 = ((($info)) + 24|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(2);
   if ($8) {
    HEAP32[$6>>2] = $path_below;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 } else {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiii[$7 & 1023]($4,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$adjustedPtr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($adjustedPtr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiii[$11 & 1023]($8,$info,$12,$15);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 L1: do {
  if ($2) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
  } else {
   $3 = ((($this)) + 16|0);
   $4 = ((($this)) + 12|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (((($this)) + 16|0) + ($5<<3)|0);
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($3,$info,$adjustedPtr,$path_below);
   $7 = ($5|0)>(1);
   if ($7) {
    $8 = ((($this)) + 24|0);
    $9 = ((($info)) + 54|0);
    $p$0 = $8;
    while(1) {
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($p$0,$info,$adjustedPtr,$path_below);
     $10 = HEAP8[$9>>0]|0;
     $11 = ($10<<24>>24)==(0);
     if (!($11)) {
      break L1;
     }
     $12 = ((($p$0)) + 8|0);
     $13 = ($12>>>0)<($6>>>0);
     if ($13) {
      $p$0 = $12;
     } else {
      break;
     }
    }
   }
  }
 } while(0);
 return;
}
function ___dynamic_cast($static_ptr,$static_type,$dst_type,$src2dst_offset) {
 $static_ptr = $static_ptr|0;
 $static_type = $static_type|0;
 $dst_type = $dst_type|0;
 $src2dst_offset = $src2dst_offset|0;
 var $$ = 0, $$8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst_ptr$0 = 0, $info = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = HEAP32[$static_ptr>>2]|0;
 $1 = ((($0)) + -8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = (($static_ptr) + ($3)|0);
 $5 = ((($0)) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$info>>2] = $dst_type;
 $7 = ((($info)) + 4|0);
 HEAP32[$7>>2] = $static_ptr;
 $8 = ((($info)) + 8|0);
 HEAP32[$8>>2] = $static_type;
 $9 = ((($info)) + 12|0);
 HEAP32[$9>>2] = $src2dst_offset;
 $10 = ((($info)) + 16|0);
 $11 = ((($info)) + 20|0);
 $12 = ((($info)) + 24|0);
 $13 = ((($info)) + 28|0);
 $14 = ((($info)) + 32|0);
 $15 = ((($info)) + 40|0);
 $16 = ($6|0)==($dst_type|0);
 dest=$10; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$10+36>>1]=0|0;HEAP8[$10+38>>0]=0|0;
 L1: do {
  if ($16) {
   $17 = ((($info)) + 48|0);
   HEAP32[$17>>2] = 1;
   $18 = HEAP32[$dst_type>>2]|0;
   $19 = ((($18)) + 20|0);
   $20 = HEAP32[$19>>2]|0;
   FUNCTION_TABLE_viiiiii[$20 & 511]($dst_type,$info,$4,$4,1,0);
   $21 = HEAP32[$12>>2]|0;
   $22 = ($21|0)==(1);
   $$ = $22 ? $4 : 0;
   $dst_ptr$0 = $$;
  } else {
   $23 = ((($info)) + 36|0);
   $24 = HEAP32[$6>>2]|0;
   $25 = ((($24)) + 24|0);
   $26 = HEAP32[$25>>2]|0;
   FUNCTION_TABLE_viiiii[$26 & 511]($6,$info,$4,1,0);
   $27 = HEAP32[$23>>2]|0;
   switch ($27|0) {
   case 0:  {
    $28 = HEAP32[$15>>2]|0;
    $29 = ($28|0)==(1);
    $30 = HEAP32[$13>>2]|0;
    $31 = ($30|0)==(1);
    $or$cond = $29 & $31;
    $32 = HEAP32[$14>>2]|0;
    $33 = ($32|0)==(1);
    $or$cond3 = $or$cond & $33;
    $34 = HEAP32[$11>>2]|0;
    $$8 = $or$cond3 ? $34 : 0;
    $dst_ptr$0 = $$8;
    break L1;
    break;
   }
   case 1:  {
    break;
   }
   default: {
    $dst_ptr$0 = 0;
    break L1;
   }
   }
   $35 = HEAP32[$12>>2]|0;
   $36 = ($35|0)==(1);
   if (!($36)) {
    $37 = HEAP32[$15>>2]|0;
    $38 = ($37|0)==(0);
    $39 = HEAP32[$13>>2]|0;
    $40 = ($39|0)==(1);
    $or$cond5 = $38 & $40;
    $41 = HEAP32[$14>>2]|0;
    $42 = ($41|0)==(1);
    $or$cond7 = $or$cond5 & $42;
    if (!($or$cond7)) {
     $dst_ptr$0 = 0;
     break;
    }
   }
   $43 = HEAP32[$10>>2]|0;
   $dst_ptr$0 = $43;
  }
 } while(0);
 STACKTOP = sp;return ($dst_ptr$0|0);
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this,$info,$dst_ptr,$current_ptr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 53|0);
 HEAP8[$0>>0] = 1;
 $1 = ((($info)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==($current_ptr|0);
 do {
  if ($3) {
   $4 = ((($info)) + 52|0);
   HEAP8[$4>>0] = 1;
   $5 = ((($info)) + 16|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   if ($7) {
    HEAP32[$5>>2] = $dst_ptr;
    $8 = ((($info)) + 24|0);
    HEAP32[$8>>2] = $path_below;
    $9 = ((($info)) + 36|0);
    HEAP32[$9>>2] = 1;
    $10 = ((($info)) + 48|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==(1);
    $13 = ($path_below|0)==(1);
    $or$cond = $12 & $13;
    if (!($or$cond)) {
     break;
    }
    $14 = ((($info)) + 54|0);
    HEAP8[$14>>0] = 1;
    break;
   }
   $15 = ($6|0)==($dst_ptr|0);
   if (!($15)) {
    $25 = ((($info)) + 36|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($26) + 1)|0;
    HEAP32[$25>>2] = $27;
    $28 = ((($info)) + 54|0);
    HEAP8[$28>>0] = 1;
    break;
   }
   $16 = ((($info)) + 24|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(2);
   if ($18) {
    HEAP32[$16>>2] = $path_below;
    $22 = $path_below;
   } else {
    $22 = $17;
   }
   $19 = ((($info)) + 48|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(1);
   $23 = ($22|0)==(1);
   $or$cond1 = $21 & $23;
   if ($or$cond1) {
    $24 = ((($info)) + 54|0);
    HEAP8[$24>>0] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $does_dst_type_point_to_our_static_type$0$off0$lcssa = 0, $does_dst_type_point_to_our_static_type$0$off023 = 0, $does_dst_type_point_to_our_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$0$off025 = 0, $is_dst_type_derived_from_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$2$off0 = 0;
 var $p$024 = 0, $p2$0 = 0, $p2$1 = 0, $p2$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 L1: do {
  if ($2) {
   $3 = ((($info)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = ((($info)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if (!($10)) {
    $57 = ((($this)) + 16|0);
    $58 = ((($this)) + 12|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = (((($this)) + 16|0) + ($59<<3)|0);
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($57,$info,$current_ptr,$path_below,$use_strcmp);
    $61 = ((($this)) + 24|0);
    $62 = ($59|0)>(1);
    if (!($62)) {
     break;
    }
    $63 = ((($this)) + 8|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = $64 & 2;
    $66 = ($65|0)==(0);
    if ($66) {
     $67 = ((($info)) + 36|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ($68|0)==(1);
     if (!($69)) {
      $75 = $64 & 1;
      $76 = ($75|0)==(0);
      if ($76) {
       $79 = ((($info)) + 54|0);
       $p2$2 = $61;
       while(1) {
        $88 = HEAP8[$79>>0]|0;
        $89 = ($88<<24>>24)==(0);
        if (!($89)) {
         break L1;
        }
        $90 = HEAP32[$67>>2]|0;
        $91 = ($90|0)==(1);
        if ($91) {
         break L1;
        }
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$2,$info,$current_ptr,$path_below,$use_strcmp);
        $92 = ((($p2$2)) + 8|0);
        $93 = ($92>>>0)<($60>>>0);
        if ($93) {
         $p2$2 = $92;
        } else {
         break L1;
        }
       }
      }
      $77 = ((($info)) + 24|0);
      $78 = ((($info)) + 54|0);
      $p2$1 = $61;
      while(1) {
       $80 = HEAP8[$78>>0]|0;
       $81 = ($80<<24>>24)==(0);
       if (!($81)) {
        break L1;
       }
       $82 = HEAP32[$67>>2]|0;
       $83 = ($82|0)==(1);
       if ($83) {
        $84 = HEAP32[$77>>2]|0;
        $85 = ($84|0)==(1);
        if ($85) {
         break L1;
        }
       }
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$1,$info,$current_ptr,$path_below,$use_strcmp);
       $86 = ((($p2$1)) + 8|0);
       $87 = ($86>>>0)<($60>>>0);
       if ($87) {
        $p2$1 = $86;
       } else {
        break L1;
       }
      }
     }
    }
    $70 = ((($info)) + 54|0);
    $p2$0 = $61;
    while(1) {
     $71 = HEAP8[$70>>0]|0;
     $72 = ($71<<24>>24)==(0);
     if (!($72)) {
      break L1;
     }
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$0,$info,$current_ptr,$path_below,$use_strcmp);
     $73 = ((($p2$0)) + 8|0);
     $74 = ($73>>>0)<($60>>>0);
     if ($74) {
      $p2$0 = $73;
     } else {
      break L1;
     }
    }
   }
   $11 = ((($info)) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==($current_ptr|0);
   if (!($13)) {
    $14 = ((($info)) + 20|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==($current_ptr|0);
    if (!($16)) {
     $19 = ((($info)) + 32|0);
     HEAP32[$19>>2] = $path_below;
     $20 = ((($info)) + 44|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(4);
     if ($22) {
      break;
     }
     $23 = ((($this)) + 12|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (((($this)) + 16|0) + ($24<<3)|0);
     $26 = ((($info)) + 52|0);
     $27 = ((($info)) + 53|0);
     $28 = ((($info)) + 54|0);
     $29 = ((($this)) + 8|0);
     $30 = ((($info)) + 24|0);
     $31 = ($24|0)>(0);
     L34: do {
      if ($31) {
       $32 = ((($this)) + 16|0);
       $does_dst_type_point_to_our_static_type$0$off023 = 0;$is_dst_type_derived_from_static_type$0$off025 = 0;$p$024 = $32;
       while(1) {
        HEAP8[$26>>0] = 0;
        HEAP8[$27>>0] = 0;
        __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$024,$info,$current_ptr,$current_ptr,1,$use_strcmp);
        $33 = HEAP8[$28>>0]|0;
        $34 = ($33<<24>>24)==(0);
        if (!($34)) {
         $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off023;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$0$off025;
         label = 20;
         break L34;
        }
        $35 = HEAP8[$27>>0]|0;
        $36 = ($35<<24>>24)==(0);
        do {
         if ($36) {
          $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off023;$is_dst_type_derived_from_static_type$1$off0 = $is_dst_type_derived_from_static_type$0$off025;
         } else {
          $37 = HEAP8[$26>>0]|0;
          $38 = ($37<<24>>24)==(0);
          if ($38) {
           $44 = HEAP32[$29>>2]|0;
           $45 = $44 & 1;
           $46 = ($45|0)==(0);
           if ($46) {
            $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off023;$is_dst_type_derived_from_static_type$2$off0 = 1;
            label = 20;
            break L34;
           } else {
            $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off023;$is_dst_type_derived_from_static_type$1$off0 = 1;
            break;
           }
          }
          $39 = HEAP32[$30>>2]|0;
          $40 = ($39|0)==(1);
          if ($40) {
           break L34;
          }
          $41 = HEAP32[$29>>2]|0;
          $42 = $41 & 2;
          $43 = ($42|0)==(0);
          if ($43) {
           break L34;
          } else {
           $does_dst_type_point_to_our_static_type$1$off0 = 1;$is_dst_type_derived_from_static_type$1$off0 = 1;
          }
         }
        } while(0);
        $47 = ((($p$024)) + 8|0);
        $48 = ($47>>>0)<($25>>>0);
        if ($48) {
         $does_dst_type_point_to_our_static_type$0$off023 = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$0$off025 = $is_dst_type_derived_from_static_type$1$off0;$p$024 = $47;
        } else {
         $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$1$off0;
         label = 20;
         break;
        }
       }
      } else {
       $does_dst_type_point_to_our_static_type$0$off0$lcssa = 0;$is_dst_type_derived_from_static_type$2$off0 = 0;
       label = 20;
      }
     } while(0);
     do {
      if ((label|0) == 20) {
       if ($does_dst_type_point_to_our_static_type$0$off0$lcssa) {
        label = 24;
       } else {
        HEAP32[$14>>2] = $current_ptr;
        $49 = ((($info)) + 40|0);
        $50 = HEAP32[$49>>2]|0;
        $51 = (($50) + 1)|0;
        HEAP32[$49>>2] = $51;
        $52 = ((($info)) + 36|0);
        $53 = HEAP32[$52>>2]|0;
        $54 = ($53|0)==(1);
        if ($54) {
         $55 = HEAP32[$30>>2]|0;
         $56 = ($55|0)==(2);
         if ($56) {
          HEAP8[$28>>0] = 1;
          if ($is_dst_type_derived_from_static_type$2$off0) {
           break;
          }
         } else {
          label = 24;
         }
        } else {
         label = 24;
        }
       }
       if ((label|0) == 24) {
        if ($is_dst_type_derived_from_static_type$2$off0) {
         break;
        }
       }
       HEAP32[$20>>2] = 4;
       break L1;
      }
     } while(0);
     HEAP32[$20>>2] = 3;
     break;
    }
   }
   $17 = ($path_below|0)==(1);
   if ($17) {
    $18 = ((($info)) + 32|0);
    HEAP32[$18>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$current_ptr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($current_ptr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiiiii[$11 & 511]($8,$info,$dst_ptr,$12,$15,$use_strcmp);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$current_ptr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($current_ptr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiiii[$11 & 511]($8,$info,$12,$15,$use_strcmp);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $is_dst_type_derived_from_static_type$0$off01 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 L1: do {
  if ($2) {
   $3 = ((($info)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = ((($info)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if (!($10)) {
    $43 = ((($this)) + 8|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = HEAP32[$44>>2]|0;
    $46 = ((($45)) + 24|0);
    $47 = HEAP32[$46>>2]|0;
    FUNCTION_TABLE_viiiii[$47 & 511]($44,$info,$current_ptr,$path_below,$use_strcmp);
    break;
   }
   $11 = ((($info)) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==($current_ptr|0);
   if (!($13)) {
    $14 = ((($info)) + 20|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==($current_ptr|0);
    if (!($16)) {
     $19 = ((($info)) + 32|0);
     HEAP32[$19>>2] = $path_below;
     $20 = ((($info)) + 44|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(4);
     if ($22) {
      break;
     }
     $23 = ((($info)) + 52|0);
     HEAP8[$23>>0] = 0;
     $24 = ((($info)) + 53|0);
     HEAP8[$24>>0] = 0;
     $25 = ((($this)) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = HEAP32[$26>>2]|0;
     $28 = ((($27)) + 20|0);
     $29 = HEAP32[$28>>2]|0;
     FUNCTION_TABLE_viiiiii[$29 & 511]($26,$info,$current_ptr,$current_ptr,1,$use_strcmp);
     $30 = HEAP8[$24>>0]|0;
     $31 = ($30<<24>>24)==(0);
     if ($31) {
      $is_dst_type_derived_from_static_type$0$off01 = 0;
      label = 13;
     } else {
      $32 = HEAP8[$23>>0]|0;
      $not$ = ($32<<24>>24)==(0);
      if ($not$) {
       $is_dst_type_derived_from_static_type$0$off01 = 1;
       label = 13;
      }
     }
     do {
      if ((label|0) == 13) {
       HEAP32[$14>>2] = $current_ptr;
       $33 = ((($info)) + 40|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = (($34) + 1)|0;
       HEAP32[$33>>2] = $35;
       $36 = ((($info)) + 36|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = ($37|0)==(1);
       if ($38) {
        $39 = ((($info)) + 24|0);
        $40 = HEAP32[$39>>2]|0;
        $41 = ($40|0)==(2);
        if ($41) {
         $42 = ((($info)) + 54|0);
         HEAP8[$42>>0] = 1;
         if ($is_dst_type_derived_from_static_type$0$off01) {
          break;
         }
        } else {
         label = 16;
        }
       } else {
        label = 16;
       }
       if ((label|0) == 16) {
        if ($is_dst_type_derived_from_static_type$0$off01) {
         break;
        }
       }
       HEAP32[$20>>2] = 4;
       break L1;
      }
     } while(0);
     HEAP32[$20>>2] = 3;
     break;
    }
   }
   $17 = ($path_below|0)==(1);
   if ($17) {
    $18 = ((($info)) + 32|0);
    HEAP32[$18>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 do {
  if ($2) {
   $3 = ((($info)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = ((($info)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if ($10) {
    $11 = ((($info)) + 16|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==($current_ptr|0);
    if (!($13)) {
     $14 = ((($info)) + 20|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==($current_ptr|0);
     if (!($16)) {
      $19 = ((($info)) + 32|0);
      HEAP32[$19>>2] = $path_below;
      HEAP32[$14>>2] = $current_ptr;
      $20 = ((($info)) + 40|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = (($21) + 1)|0;
      HEAP32[$20>>2] = $22;
      $23 = ((($info)) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = ($24|0)==(1);
      if ($25) {
       $26 = ((($info)) + 24|0);
       $27 = HEAP32[$26>>2]|0;
       $28 = ($27|0)==(2);
       if ($28) {
        $29 = ((($info)) + 54|0);
        HEAP8[$29>>0] = 1;
       }
      }
      $30 = ((($info)) + 44|0);
      HEAP32[$30>>2] = 4;
      break;
     }
    }
    $17 = ($path_below|0)==(1);
    if ($17) {
     $18 = ((($info)) + 32|0);
     HEAP32[$18>>2] = 1;
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 } else {
  $3 = ((($info)) + 52|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ((($info)) + 53|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = ((($this)) + 16|0);
  $8 = ((($this)) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (((($this)) + 16|0) + ($9<<3)|0);
  HEAP8[$3>>0] = 0;
  HEAP8[$5>>0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($7,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
  $11 = ($9|0)>(1);
  L4: do {
   if ($11) {
    $12 = ((($this)) + 24|0);
    $13 = ((($info)) + 24|0);
    $14 = ((($this)) + 8|0);
    $15 = ((($info)) + 54|0);
    $p$0 = $12;
    while(1) {
     $16 = HEAP8[$15>>0]|0;
     $17 = ($16<<24>>24)==(0);
     if (!($17)) {
      break L4;
     }
     $18 = HEAP8[$3>>0]|0;
     $19 = ($18<<24>>24)==(0);
     if ($19) {
      $25 = HEAP8[$5>>0]|0;
      $26 = ($25<<24>>24)==(0);
      if (!($26)) {
       $27 = HEAP32[$14>>2]|0;
       $28 = $27 & 1;
       $29 = ($28|0)==(0);
       if ($29) {
        break L4;
       }
      }
     } else {
      $20 = HEAP32[$13>>2]|0;
      $21 = ($20|0)==(1);
      if ($21) {
       break L4;
      }
      $22 = HEAP32[$14>>2]|0;
      $23 = $22 & 2;
      $24 = ($23|0)==(0);
      if ($24) {
       break L4;
      }
     }
     HEAP8[$3>>0] = 0;
     HEAP8[$5>>0] = 0;
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
     $30 = ((($p$0)) + 8|0);
     $31 = ($30>>>0)<($10>>>0);
     if ($31) {
      $p$0 = $30;
     } else {
      break;
     }
    }
   }
  } while(0);
  HEAP8[$3>>0] = $4;
  HEAP8[$5>>0] = $6;
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 } else {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiiiii[$7 & 511]($4,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 }
 return;
}
function ___cxa_can_catch($catchType,$excpType,$thrown) {
 $catchType = $catchType|0;
 $excpType = $excpType|0;
 $thrown = $thrown|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $temp = sp;
 $0 = HEAP32[$thrown>>2]|0;
 HEAP32[$temp>>2] = $0;
 $1 = HEAP32[$catchType>>2]|0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiii[$3 & 1023]($catchType,$excpType,$temp)|0);
 $5 = $4&1;
 if ($4) {
  $6 = HEAP32[$temp>>2]|0;
  HEAP32[$thrown>>2] = $6;
 }
 STACKTOP = sp;return ($5|0);
}
function ___cxa_is_pointer_type($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type|0)==(0|0);
 if ($0) {
  $3 = 0;
 } else {
  $1 = (___dynamic_cast($type,912,960,0)|0);
  $phitmp = ($1|0)!=(0|0);
  $3 = $phitmp;
 }
 $2 = $3&1;
 return ($2|0);
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $thrown_object = 0, $vararg_buffer = 0, $vararg_buffer10 = 0;
 var $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $thrown_object = sp + 36|0;
 $0 = (___cxa_get_globals_fast()|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $4 = ((($2)) + 80|0);
   $5 = ((($2)) + 48|0);
   $6 = $5;
   $7 = $6;
   $8 = HEAP32[$7>>2]|0;
   $9 = (($6) + 4)|0;
   $10 = $9;
   $11 = HEAP32[$10>>2]|0;
   $12 = $8 & -256;
   $13 = ($12|0)==(1126902528);
   $14 = ($11|0)==(1129074247);
   $15 = $13 & $14;
   if (!($15)) {
    $36 = HEAP32[5748>>2]|0;
    HEAP32[$vararg_buffer7>>2] = $36;
    _abort_message(14005,$vararg_buffer7);
    // unreachable;
   }
   $16 = ($8|0)==(1126902529);
   $17 = ($11|0)==(1129074247);
   $18 = $16 & $17;
   if ($18) {
    $19 = ((($2)) + 44|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $20;
   } else {
    $21 = $4;
   }
   HEAP32[$thrown_object>>2] = $21;
   $22 = HEAP32[$2>>2]|0;
   $23 = ((($22)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = HEAP32[896>>2]|0;
   $26 = ((($25)) + 16|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (FUNCTION_TABLE_iiii[$27 & 1023](896,$22,$thrown_object)|0);
   if ($28) {
    $29 = HEAP32[$thrown_object>>2]|0;
    $30 = HEAP32[5748>>2]|0;
    $31 = HEAP32[$29>>2]|0;
    $32 = ((($31)) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (FUNCTION_TABLE_ii[$33 & 1023]($29)|0);
    HEAP32[$vararg_buffer>>2] = $30;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $24;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $34;
    _abort_message(13919,$vararg_buffer);
    // unreachable;
   } else {
    $35 = HEAP32[5748>>2]|0;
    HEAP32[$vararg_buffer3>>2] = $35;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $24;
    _abort_message(13964,$vararg_buffer3);
    // unreachable;
   }
  }
 }
 _abort_message(14043,$vararg_buffer10);
 // unreachable;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_pthread_key_create((5740|0),(624|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 } else {
  _abort_message(13662,$vararg_buffer);
  // unreachable;
 }
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _free($p);
 $0 = HEAP32[5740>>2]|0;
 $1 = (_pthread_setspecific(($0|0),(0|0))|0);
 $2 = ($1|0)==(0);
 if ($2) {
  STACKTOP = sp;return;
 } else {
  _abort_message(13712,$vararg_buffer);
  // unreachable;
 }
}
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___assert_fail((13765|0),(13794|0),1164,(13487|0));
 // unreachable;
}
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___assert_fail((13869|0),(13794|0),1175,(13898|0));
 // unreachable;
}
function _isalpha($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c | 32;
 $1 = (($0) + -97)|0;
 $2 = ($1>>>0)<(26);
 $3 = $2&1;
 return ($3|0);
}
function _isdigit($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -48)|0;
 $1 = ($0>>>0)<(10);
 $2 = $1&1;
 return ($2|0);
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 $1 = (($c) + -9)|0;
 $2 = ($1>>>0)<(5);
 $3 = $0 | $2;
 $4 = $3&1;
 return ($4|0);
}
function _strerror($e) {
 $e = $e|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, $i$03$lcssa = 0, $i$12 = 0, $s$0$lcssa = 0, $s$01 = 0, $s$1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $i$03 = 0;
 while(1) {
  $1 = (14064 + ($i$03)|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = $2&255;
  $4 = ($3|0)==($e|0);
  if ($4) {
   $i$03$lcssa = $i$03;
   label = 2;
   break;
  }
  $5 = (($i$03) + 1)|0;
  $6 = ($5|0)==(87);
  if ($6) {
   $i$12 = 87;$s$01 = 14152;
   label = 5;
   break;
  } else {
   $i$03 = $5;
  }
 }
 if ((label|0) == 2) {
  $0 = ($i$03$lcssa|0)==(0);
  if ($0) {
   $s$0$lcssa = 14152;
  } else {
   $i$12 = $i$03$lcssa;$s$01 = 14152;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $s$1 = $s$01;
   while(1) {
    $7 = HEAP8[$s$1>>0]|0;
    $8 = ($7<<24>>24)==(0);
    $9 = ((($s$1)) + 1|0);
    if ($8) {
     $$lcssa = $9;
     break;
    } else {
     $s$1 = $9;
    }
   }
   $10 = (($i$12) + -1)|0;
   $11 = ($10|0)==(0);
   if ($11) {
    $s$0$lcssa = $$lcssa;
    break;
   } else {
    $i$12 = $10;$s$01 = $$lcssa;
    label = 5;
   }
  }
 }
 return ($s$0$lcssa|0);
}
function ___errno_location() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[5752>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 6012;
 } else {
  $2 = (_pthread_self()|0);
  $3 = ((($2)) + 60|0);
  $4 = HEAP32[$3>>2]|0;
  $$0 = $4;
 }
 return ($$0|0);
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $$$i = 0, $$0 = 0.0, $$0$i27 = 0.0, $$010$i = 0, $$07$i = 0, $$0710$i = 0, $$0711$i = 0, $$09$i = 0, $$1$be$i = 0, $$1$ph$i = 0, $$11$i = 0, $$18$i = 0, $$2$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$3105$i = 0, $$in = 0, $$k$0$i = 0, $$lcssa = 0, $$lcssa256 = 0;
 var $$lcssa256$lcssa = 0, $$lcssa257 = 0, $$lcssa257$lcssa = 0, $$lcssa263 = 0, $$lcssa264 = 0, $$lcssa265 = 0, $$lcssa275 = 0, $$lnz$0$i = 0, $$neg32$i = 0, $$not$i = 0, $$old8 = 0, $$pn$i = 0.0, $$pre$i = 0, $$pre$i17 = 0, $$pre$phi42$iZ2D = 0.0, $$pre41$i = 0.0, $$promoted$i = 0, $$sink$off0$i = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0.0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0.0, $259 = 0.0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0, $324 = 0, $325 = 0.0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0.0, $425 = 0.0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0.0;
 var $442 = 0.0, $443 = 0.0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0.0, $454 = 0.0, $455 = 0.0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0.0, $466 = 0.0, $467 = 0.0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0.0, $48 = 0, $480 = 0, $481 = 0.0, $482 = 0.0, $483 = 0, $484 = 0.0, $485 = 0, $486 = 0.0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0.0, $492 = 0.0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0.0, $500 = 0.0, $501 = 0, $502 = 0, $503 = 0, $504 = 0.0, $505 = 0.0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0.0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
 var $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0.0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0;
 var $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0;
 var $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0;
 var $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0;
 var $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0;
 var $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0.0, $62 = 0, $620 = 0, $621 = 0;
 var $622 = 0, $623 = 0, $624 = 0.0, $625 = 0.0, $626 = 0.0, $627 = 0, $628 = 0.0, $629 = 0.0, $63 = 0, $630 = 0.0, $631 = 0.0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0;
 var $640 = 0, $641 = 0, $642 = 0.0, $643 = 0.0, $644 = 0.0, $645 = 0, $646 = 0.0, $647 = 0.0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0.0, $652 = 0.0, $653 = 0.0, $654 = 0.0, $655 = 0, $656 = 0, $657 = 0.0, $658 = 0;
 var $659 = 0.0, $66 = 0, $660 = 0.0, $661 = 0.0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0.0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0.0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0;
 var $677 = 0, $678 = 0.0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0.0, $684 = 0, $685 = 0, $686 = 0.0, $687 = 0.0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0;
 var $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0;
 var $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a$0$lcssa151$i = 0, $a$085$i = 0, $a$1$i = 0, $a$1$i$lcssa = 0, $a$2$ph38$i = 0, $a$3$i = 0, $a$3$i$lcssa248 = 0, $a$3$i249 = 0, $a$3$ph$i = 0, $a$3$ph157$i = 0, $a$478$i = 0, $a$5$i = 0, $a$5$i$lcssa = 0, $a$5$i$lcssa$lcssa = 0, $bias$0$i = 0.0, $bias$0$i25 = 0.0, $bits$0$ph = 0, $brmerge$i28 = 0;
 var $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$179 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$377 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $carry$087$i = 0, $carry1$0$i = 0, $carry1$1$i = 0, $carry1$1$i$lcssa = 0, $carry1$1$i$lcssa$lcssa = 0, $carry3$081$i = 0, $cond$i = 0, $d$0$i = 0;
 var $denormal$0$i = 0, $denormal$1$i = 0, $denormal$2$i = 0, $e2$0$i19 = 0, $e2$0$ph$i = 0, $e2$1$i = 0, $e2$1$i246 = 0, $e2$1$ph$i = 0, $e2$1$ph156$i = 0, $e2$2$i = 0, $e2$3$i = 0, $emin$0$ph = 0, $exitcond$i = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i$lcssa242 = 0, $gotdig$0$i12 = 0, $gotdig$0$i12$lcssa273 = 0;
 var $gotdig$2$i = 0, $gotdig$2$i$lcssa = 0, $gotdig$2$i13 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$3101$i = 0, $gotdig$3101$i$lcssa = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i$lcssa = 0, $gotrad$0$i14 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0, $gotrad$1102$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$078 = 0;
 var $i$1 = 0, $i$276 = 0, $i$3 = 0, $i$4 = 0, $i$4$lcssa = 0, $j$0$lcssa$i = 0, $j$0104$i = 0, $j$0104$i$lcssa = 0, $j$067$i = 0, $j$068$i = 0, $j$069$i = 0, $j$2$i = 0, $j$394$i = 0, $k$0$lcssa$i = 0, $k$0103$i = 0, $k$0103$i$lcssa = 0, $k$063$i = 0, $k$064$i = 0, $k$065$i = 0, $k$2$i = 0;
 var $k$3$i = 0, $k$486$i = 0, $k$5$i = 0, $k$5$in$i = 0, $k$5$z$2$i = 0, $k$679$i = 0, $lnz$0$lcssa$i = 0, $lnz$0100$i = 0, $lnz$0100$i$lcssa = 0, $lnz$057$i = 0, $lnz$058$i = 0, $lnz$059$i = 0, $lnz$2$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i16 = 0, $or$cond13$i = 0, $or$cond15$i = 0, $or$cond16$i = 0, $or$cond17$i = 0;
 var $or$cond182$i = 0, $or$cond19$i = 0, $or$cond20$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond5 = 0, $or$cond6$i = 0, $or$cond7 = 0, $or$cond8$i = 0, $or$cond9 = 0, $or$cond9$i = 0, $rp$0$lcssa152$i = 0, $rp$084$i = 0, $rp$1$i18 = 0, $rp$1$i18$lcssa = 0, $rp$2$ph36$i = 0, $rp$3$ph$i = 0, $rp$3$ph34$i = 0, $rp$477$i = 0, $rp$5$i = 0;
 var $rp$5$i$lcssa = 0, $rp$5$i$lcssa$lcssa = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$0$i$lcssa = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$324$i = 0, $x$4$lcssa$i = 0, $x$419$i = 0, $x$5$i = 0, $x$6$i = 0, $x$i = 0, $y$0$i = 0.0;
 var $y$0$i$lcssa = 0.0, $y$1$i = 0.0, $y$1$i24 = 0.0, $y$2$i = 0.0, $y$2$i26 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$320$i = 0.0, $y$4$i = 0.0, $y$5$i = 0.0, $z$0$i = 0, $z$1$i = 0, $z$1$ph37$i = 0, $z$2$i = 0, $z$3$i = 0, $z$3$i$lcssa = 0, $z$3$i$lcssa$lcssa = 0, $z$4$i = 0, $z$5$ph$i = 0, $z$7$1$i = 0;
 var $z$7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x$i = sp;
 switch ($prec|0) {
 case 0:  {
  $bits$0$ph = 24;$emin$0$ph = -149;
  label = 4;
  break;
 }
 case 1:  {
  $bits$0$ph = 53;$emin$0$ph = -1074;
  label = 4;
  break;
 }
 case 2:  {
  $bits$0$ph = 53;$emin$0$ph = -1074;
  label = 4;
  break;
 }
 default: {
  $$0 = 0.0;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $0 = ((($f)) + 4|0);
   $1 = ((($f)) + 100|0);
   while(1) {
    $2 = HEAP32[$0>>2]|0;
    $3 = HEAP32[$1>>2]|0;
    $4 = ($2>>>0)<($3>>>0);
    if ($4) {
     $5 = ((($2)) + 1|0);
     HEAP32[$0>>2] = $5;
     $6 = HEAP8[$2>>0]|0;
     $7 = $6&255;
     $9 = $7;
    } else {
     $8 = (___shgetc($f)|0);
     $9 = $8;
    }
    $10 = (_isspace($9)|0);
    $11 = ($10|0)==(0);
    if ($11) {
     $$lcssa275 = $9;
     break;
    }
   }
   $12 = ($$lcssa275|0)==(45);
   L13: do {
    switch ($$lcssa275|0) {
    case 43: case 45:  {
     $13 = $12&1;
     $14 = $13 << 1;
     $15 = (1 - ($14))|0;
     $16 = HEAP32[$0>>2]|0;
     $17 = HEAP32[$1>>2]|0;
     $18 = ($16>>>0)<($17>>>0);
     if ($18) {
      $19 = ((($16)) + 1|0);
      HEAP32[$0>>2] = $19;
      $20 = HEAP8[$16>>0]|0;
      $21 = $20&255;
      $c$0 = $21;$sign$0 = $15;
      break L13;
     } else {
      $22 = (___shgetc($f)|0);
      $c$0 = $22;$sign$0 = $15;
      break L13;
     }
     break;
    }
    default: {
     $c$0 = $$lcssa275;$sign$0 = 1;
    }
    }
   } while(0);
   $c$179 = $c$0;$i$078 = 0;
   while(1) {
    $23 = $c$179 | 32;
    $24 = (15956 + ($i$078)|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = $25 << 24 >> 24;
    $27 = ($23|0)==($26|0);
    if (!($27)) {
     $c$1$lcssa = $c$179;$i$0$lcssa = $i$078;
     break;
    }
    $28 = ($i$078>>>0)<(7);
    do {
     if ($28) {
      $29 = HEAP32[$0>>2]|0;
      $30 = HEAP32[$1>>2]|0;
      $31 = ($29>>>0)<($30>>>0);
      if ($31) {
       $32 = ((($29)) + 1|0);
       HEAP32[$0>>2] = $32;
       $33 = HEAP8[$29>>0]|0;
       $34 = $33&255;
       $c$2 = $34;
       break;
      } else {
       $35 = (___shgetc($f)|0);
       $c$2 = $35;
       break;
      }
     } else {
      $c$2 = $c$179;
     }
    } while(0);
    $36 = (($i$078) + 1)|0;
    $37 = ($36>>>0)<(8);
    if ($37) {
     $c$179 = $c$2;$i$078 = $36;
    } else {
     $c$1$lcssa = $c$2;$i$0$lcssa = $36;
     break;
    }
   }
   L29: do {
    switch ($i$0$lcssa|0) {
    case 8:  {
     break;
    }
    case 3:  {
     label = 23;
     break;
    }
    default: {
     $38 = ($i$0$lcssa>>>0)>(3);
     $39 = ($pok|0)!=(0);
     $or$cond5 = $39 & $38;
     if ($or$cond5) {
      $40 = ($i$0$lcssa|0)==(8);
      if ($40) {
       break L29;
      } else {
       label = 23;
       break L29;
      }
     }
     $53 = ($i$0$lcssa|0)==(0);
     L34: do {
      if ($53) {
       $c$377 = $c$1$lcssa;$i$276 = 0;
       while(1) {
        $54 = $c$377 | 32;
        $55 = (17807 + ($i$276)|0);
        $56 = HEAP8[$55>>0]|0;
        $57 = $56 << 24 >> 24;
        $58 = ($54|0)==($57|0);
        if (!($58)) {
         $c$5 = $c$377;$i$3 = $i$276;
         break L34;
        }
        $59 = ($i$276>>>0)<(2);
        do {
         if ($59) {
          $60 = HEAP32[$0>>2]|0;
          $61 = HEAP32[$1>>2]|0;
          $62 = ($60>>>0)<($61>>>0);
          if ($62) {
           $63 = ((($60)) + 1|0);
           HEAP32[$0>>2] = $63;
           $64 = HEAP8[$60>>0]|0;
           $65 = $64&255;
           $c$4 = $65;
           break;
          } else {
           $66 = (___shgetc($f)|0);
           $c$4 = $66;
           break;
          }
         } else {
          $c$4 = $c$377;
         }
        } while(0);
        $67 = (($i$276) + 1)|0;
        $68 = ($67>>>0)<(3);
        if ($68) {
         $c$377 = $c$4;$i$276 = $67;
        } else {
         $c$5 = $c$4;$i$3 = $67;
         break;
        }
       }
      } else {
       $c$5 = $c$1$lcssa;$i$3 = $i$0$lcssa;
      }
     } while(0);
     switch ($i$3|0) {
     case 3:  {
      $69 = HEAP32[$0>>2]|0;
      $70 = HEAP32[$1>>2]|0;
      $71 = ($69>>>0)<($70>>>0);
      if ($71) {
       $72 = ((($69)) + 1|0);
       HEAP32[$0>>2] = $72;
       $73 = HEAP8[$69>>0]|0;
       $74 = $73&255;
       $76 = $74;
      } else {
       $75 = (___shgetc($f)|0);
       $76 = $75;
      }
      $77 = ($76|0)==(40);
      if ($77) {
       $i$4 = 1;
      } else {
       $78 = HEAP32[$1>>2]|0;
       $79 = ($78|0)==(0|0);
       if ($79) {
        $$0 = nan;
        break L4;
       }
       $80 = HEAP32[$0>>2]|0;
       $81 = ((($80)) + -1|0);
       HEAP32[$0>>2] = $81;
       $$0 = nan;
       break L4;
      }
      while(1) {
       $82 = HEAP32[$0>>2]|0;
       $83 = HEAP32[$1>>2]|0;
       $84 = ($82>>>0)<($83>>>0);
       if ($84) {
        $85 = ((($82)) + 1|0);
        HEAP32[$0>>2] = $85;
        $86 = HEAP8[$82>>0]|0;
        $87 = $86&255;
        $90 = $87;
       } else {
        $88 = (___shgetc($f)|0);
        $90 = $88;
       }
       $89 = (($90) + -48)|0;
       $91 = ($89>>>0)<(10);
       $92 = (($90) + -65)|0;
       $93 = ($92>>>0)<(26);
       $or$cond = $91 | $93;
       if (!($or$cond)) {
        $94 = (($90) + -97)|0;
        $95 = ($94>>>0)<(26);
        $96 = ($90|0)==(95);
        $or$cond7 = $96 | $95;
        if (!($or$cond7)) {
         $$lcssa = $90;$i$4$lcssa = $i$4;
         break;
        }
       }
       $108 = (($i$4) + 1)|0;
       $i$4 = $108;
      }
      $97 = ($$lcssa|0)==(41);
      if ($97) {
       $$0 = nan;
       break L4;
      }
      $98 = HEAP32[$1>>2]|0;
      $99 = ($98|0)==(0|0);
      if (!($99)) {
       $100 = HEAP32[$0>>2]|0;
       $101 = ((($100)) + -1|0);
       HEAP32[$0>>2] = $101;
      }
      if (!($39)) {
       $103 = (___errno_location()|0);
       HEAP32[$103>>2] = 22;
       ___shlim($f,0);
       $$0 = 0.0;
       break L4;
      }
      $102 = ($i$4$lcssa|0)==(0);
      if ($102) {
       $$0 = nan;
       break L4;
      } else {
       $$in = $i$4$lcssa;
      }
      while(1) {
       $104 = (($$in) + -1)|0;
       if (!($99)) {
        $105 = HEAP32[$0>>2]|0;
        $106 = ((($105)) + -1|0);
        HEAP32[$0>>2] = $106;
       }
       $107 = ($104|0)==(0);
       if ($107) {
        $$0 = nan;
        break L4;
       } else {
        $$in = $104;
       }
      }
      break;
     }
     case 0:  {
      $114 = ($c$5|0)==(48);
      do {
       if ($114) {
        $115 = HEAP32[$0>>2]|0;
        $116 = HEAP32[$1>>2]|0;
        $117 = ($115>>>0)<($116>>>0);
        if ($117) {
         $118 = ((($115)) + 1|0);
         HEAP32[$0>>2] = $118;
         $119 = HEAP8[$115>>0]|0;
         $120 = $119&255;
         $123 = $120;
        } else {
         $121 = (___shgetc($f)|0);
         $123 = $121;
        }
        $122 = $123 | 32;
        $124 = ($122|0)==(120);
        if (!($124)) {
         $326 = HEAP32[$1>>2]|0;
         $327 = ($326|0)==(0|0);
         if ($327) {
          $c$6 = 48;
          break;
         }
         $328 = HEAP32[$0>>2]|0;
         $329 = ((($328)) + -1|0);
         HEAP32[$0>>2] = $329;
         $c$6 = 48;
         break;
        }
        $125 = HEAP32[$0>>2]|0;
        $126 = HEAP32[$1>>2]|0;
        $127 = ($125>>>0)<($126>>>0);
        if ($127) {
         $128 = ((($125)) + 1|0);
         HEAP32[$0>>2] = $128;
         $129 = HEAP8[$125>>0]|0;
         $130 = $129&255;
         $c$0$i = $130;$gotdig$0$i = 0;
        } else {
         $131 = (___shgetc($f)|0);
         $c$0$i = $131;$gotdig$0$i = 0;
        }
        L94: while(1) {
         switch ($c$0$i|0) {
         case 46:  {
          $gotdig$0$i$lcssa242 = $gotdig$0$i;
          label = 74;
          break L94;
          break;
         }
         case 48:  {
          break;
         }
         default: {
          $168 = 0;$170 = 0;$694 = 0;$695 = 0;$c$2$i = $c$0$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 0;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
          break L94;
         }
         }
         $132 = HEAP32[$0>>2]|0;
         $133 = HEAP32[$1>>2]|0;
         $134 = ($132>>>0)<($133>>>0);
         if ($134) {
          $135 = ((($132)) + 1|0);
          HEAP32[$0>>2] = $135;
          $136 = HEAP8[$132>>0]|0;
          $137 = $136&255;
          $c$0$i = $137;$gotdig$0$i = 1;
          continue;
         } else {
          $138 = (___shgetc($f)|0);
          $c$0$i = $138;$gotdig$0$i = 1;
          continue;
         }
        }
        if ((label|0) == 74) {
         $139 = HEAP32[$0>>2]|0;
         $140 = HEAP32[$1>>2]|0;
         $141 = ($139>>>0)<($140>>>0);
         if ($141) {
          $142 = ((($139)) + 1|0);
          HEAP32[$0>>2] = $142;
          $143 = HEAP8[$139>>0]|0;
          $144 = $143&255;
          $c$1$ph$i = $144;
         } else {
          $145 = (___shgetc($f)|0);
          $c$1$ph$i = $145;
         }
         $146 = ($c$1$ph$i|0)==(48);
         if ($146) {
          $154 = 0;$155 = 0;
          while(1) {
           $147 = HEAP32[$0>>2]|0;
           $148 = HEAP32[$1>>2]|0;
           $149 = ($147>>>0)<($148>>>0);
           if ($149) {
            $150 = ((($147)) + 1|0);
            HEAP32[$0>>2] = $150;
            $151 = HEAP8[$147>>0]|0;
            $152 = $151&255;
            $158 = $152;
           } else {
            $153 = (___shgetc($f)|0);
            $158 = $153;
           }
           $156 = (_i64Add(($154|0),($155|0),-1,-1)|0);
           $157 = tempRet0;
           $159 = ($158|0)==(48);
           if ($159) {
            $154 = $156;$155 = $157;
           } else {
            $168 = 0;$170 = 0;$694 = $156;$695 = $157;$c$2$i = $158;$gotdig$2$i = 1;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
            break;
           }
          }
         } else {
          $168 = 0;$170 = 0;$694 = 0;$695 = 0;$c$2$i = $c$1$ph$i;$gotdig$2$i = $gotdig$0$i$lcssa242;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
         }
        }
        while(1) {
         $160 = (($c$2$i) + -48)|0;
         $161 = ($160>>>0)<(10);
         $$pre$i = $c$2$i | 32;
         if ($161) {
          label = 86;
         } else {
          $162 = (($$pre$i) + -97)|0;
          $163 = ($162>>>0)<(6);
          $164 = ($c$2$i|0)==(46);
          $or$cond6$i = $164 | $163;
          if (!($or$cond6$i)) {
           $212 = $694;$213 = $170;$215 = $695;$216 = $168;$c$2$lcssa$i = $c$2$i;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
           break;
          }
          if ($164) {
           $165 = ($gotrad$0$i|0)==(0);
           if ($165) {
            $696 = $170;$697 = $168;$698 = $170;$699 = $168;$gotdig$3$i = $gotdig$2$i;$gotrad$1$i = 1;$gottail$2$i = $gottail$0$i;$scale$2$i = $scale$0$i;$x$2$i = $x$0$i;$y$2$i = $y$0$i;
           } else {
            $212 = $694;$213 = $170;$215 = $695;$216 = $168;$c$2$lcssa$i = 46;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
            break;
           }
          } else {
           label = 86;
          }
         }
         if ((label|0) == 86) {
          label = 0;
          $166 = ($c$2$i|0)>(57);
          $167 = (($$pre$i) + -87)|0;
          $d$0$i = $166 ? $167 : $160;
          $169 = ($168|0)<(0);
          $171 = ($170>>>0)<(8);
          $172 = ($168|0)==(0);
          $173 = $172 & $171;
          $174 = $169 | $173;
          do {
           if ($174) {
            $175 = $x$0$i << 4;
            $176 = (($d$0$i) + ($175))|0;
            $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $176;$y$1$i = $y$0$i;
           } else {
            $177 = ($168|0)<(0);
            $178 = ($170>>>0)<(14);
            $179 = ($168|0)==(0);
            $180 = $179 & $178;
            $181 = $177 | $180;
            if ($181) {
             $182 = (+($d$0$i|0));
             $183 = $scale$0$i * 0.0625;
             $184 = $183 * $182;
             $185 = $y$0$i + $184;
             $gottail$1$i = $gottail$0$i;$scale$1$i = $183;$x$1$i = $x$0$i;$y$1$i = $185;
             break;
            }
            $186 = ($d$0$i|0)==(0);
            $187 = ($gottail$0$i|0)!=(0);
            $or$cond$i = $187 | $186;
            if ($or$cond$i) {
             $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $y$0$i;
            } else {
             $188 = $scale$0$i * 0.5;
             $189 = $y$0$i + $188;
             $gottail$1$i = 1;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $189;
            }
           }
          } while(0);
          $190 = (_i64Add(($170|0),($168|0),1,0)|0);
          $191 = tempRet0;
          $696 = $694;$697 = $695;$698 = $190;$699 = $191;$gotdig$3$i = 1;$gotrad$1$i = $gotrad$0$i;$gottail$2$i = $gottail$1$i;$scale$2$i = $scale$1$i;$x$2$i = $x$1$i;$y$2$i = $y$1$i;
         }
         $192 = HEAP32[$0>>2]|0;
         $193 = HEAP32[$1>>2]|0;
         $194 = ($192>>>0)<($193>>>0);
         if ($194) {
          $195 = ((($192)) + 1|0);
          HEAP32[$0>>2] = $195;
          $196 = HEAP8[$192>>0]|0;
          $197 = $196&255;
          $168 = $699;$170 = $698;$694 = $696;$695 = $697;$c$2$i = $197;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
          continue;
         } else {
          $198 = (___shgetc($f)|0);
          $168 = $699;$170 = $698;$694 = $696;$695 = $697;$c$2$i = $198;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
          continue;
         }
        }
        $199 = ($gotdig$2$i$lcssa|0)==(0);
        if ($199) {
         $200 = HEAP32[$1>>2]|0;
         $201 = ($200|0)==(0|0);
         if (!($201)) {
          $202 = HEAP32[$0>>2]|0;
          $203 = ((($202)) + -1|0);
          HEAP32[$0>>2] = $203;
         }
         $204 = ($pok|0)==(0);
         if ($204) {
          ___shlim($f,0);
         } else {
          if (!($201)) {
           $205 = HEAP32[$0>>2]|0;
           $206 = ((($205)) + -1|0);
           HEAP32[$0>>2] = $206;
           $207 = ($gotrad$0$i$lcssa|0)==(0);
           if (!($207)) {
            $208 = ((($205)) + -2|0);
            HEAP32[$0>>2] = $208;
           }
          }
         }
         $209 = (+($sign$0|0));
         $210 = $209 * 0.0;
         $$0 = $210;
         break L4;
        }
        $211 = ($gotrad$0$i$lcssa|0)==(0);
        $214 = $211 ? $213 : $212;
        $217 = $211 ? $216 : $215;
        $218 = ($216|0)<(0);
        $219 = ($213>>>0)<(8);
        $220 = ($216|0)==(0);
        $221 = $220 & $219;
        $222 = $218 | $221;
        if ($222) {
         $224 = $213;$225 = $216;$x$324$i = $x$0$i$lcssa;
         while(1) {
          $223 = $x$324$i << 4;
          $226 = (_i64Add(($224|0),($225|0),1,0)|0);
          $227 = tempRet0;
          $228 = ($227|0)<(0);
          $229 = ($226>>>0)<(8);
          $230 = ($227|0)==(0);
          $231 = $230 & $229;
          $232 = $228 | $231;
          if ($232) {
           $224 = $226;$225 = $227;$x$324$i = $223;
          } else {
           $x$3$lcssa$i = $223;
           break;
          }
         }
        } else {
         $x$3$lcssa$i = $x$0$i$lcssa;
        }
        $233 = $c$2$lcssa$i | 32;
        $234 = ($233|0)==(112);
        if ($234) {
         $235 = (_scanexp($f,$pok)|0);
         $236 = tempRet0;
         $237 = ($235|0)==(0);
         $238 = ($236|0)==(-2147483648);
         $239 = $237 & $238;
         if ($239) {
          $240 = ($pok|0)==(0);
          if ($240) {
           ___shlim($f,0);
           $$0 = 0.0;
           break L4;
          }
          $241 = HEAP32[$1>>2]|0;
          $242 = ($241|0)==(0|0);
          if ($242) {
           $253 = 0;$254 = 0;
          } else {
           $243 = HEAP32[$0>>2]|0;
           $244 = ((($243)) + -1|0);
           HEAP32[$0>>2] = $244;
           $253 = 0;$254 = 0;
          }
         } else {
          $253 = $235;$254 = $236;
         }
        } else {
         $245 = HEAP32[$1>>2]|0;
         $246 = ($245|0)==(0|0);
         if ($246) {
          $253 = 0;$254 = 0;
         } else {
          $247 = HEAP32[$0>>2]|0;
          $248 = ((($247)) + -1|0);
          HEAP32[$0>>2] = $248;
          $253 = 0;$254 = 0;
         }
        }
        $249 = (_bitshift64Shl(($214|0),($217|0),2)|0);
        $250 = tempRet0;
        $251 = (_i64Add(($249|0),($250|0),-32,-1)|0);
        $252 = tempRet0;
        $255 = (_i64Add(($251|0),($252|0),($253|0),($254|0))|0);
        $256 = tempRet0;
        $257 = ($x$3$lcssa$i|0)==(0);
        if ($257) {
         $258 = (+($sign$0|0));
         $259 = $258 * 0.0;
         $$0 = $259;
         break L4;
        }
        $260 = (0 - ($emin$0$ph))|0;
        $261 = ($256|0)>(0);
        $262 = ($255>>>0)>($260>>>0);
        $263 = ($256|0)==(0);
        $264 = $263 & $262;
        $265 = $261 | $264;
        if ($265) {
         $266 = (___errno_location()|0);
         HEAP32[$266>>2] = 34;
         $267 = (+($sign$0|0));
         $268 = $267 * 1.7976931348623157E+308;
         $269 = $268 * 1.7976931348623157E+308;
         $$0 = $269;
         break L4;
        }
        $270 = (($emin$0$ph) + -106)|0;
        $271 = ($270|0)<(0);
        $272 = $271 << 31 >> 31;
        $273 = ($256|0)<($272|0);
        $274 = ($255>>>0)<($270>>>0);
        $275 = ($256|0)==($272|0);
        $276 = $275 & $274;
        $277 = $273 | $276;
        if ($277) {
         $279 = (___errno_location()|0);
         HEAP32[$279>>2] = 34;
         $280 = (+($sign$0|0));
         $281 = $280 * 2.2250738585072014E-308;
         $282 = $281 * 2.2250738585072014E-308;
         $$0 = $282;
         break L4;
        }
        $278 = ($x$3$lcssa$i|0)>(-1);
        if ($278) {
         $288 = $255;$289 = $256;$x$419$i = $x$3$lcssa$i;$y$320$i = $y$0$i$lcssa;
         while(1) {
          $283 = !($y$320$i >= 0.5);
          $284 = $x$419$i << 1;
          $285 = $y$320$i + -1.0;
          $286 = $283&1;
          $287 = $286 | $284;
          $x$5$i = $287 ^ 1;
          $$pn$i = $283 ? $y$320$i : $285;
          $y$4$i = $y$320$i + $$pn$i;
          $290 = (_i64Add(($288|0),($289|0),-1,-1)|0);
          $291 = tempRet0;
          $292 = ($287|0)>(-1);
          if ($292) {
           $288 = $290;$289 = $291;$x$419$i = $x$5$i;$y$320$i = $y$4$i;
          } else {
           $297 = $290;$298 = $291;$x$4$lcssa$i = $x$5$i;$y$3$lcssa$i = $y$4$i;
           break;
          }
         }
        } else {
         $297 = $255;$298 = $256;$x$4$lcssa$i = $x$3$lcssa$i;$y$3$lcssa$i = $y$0$i$lcssa;
        }
        $293 = ($emin$0$ph|0)<(0);
        $294 = $293 << 31 >> 31;
        $295 = (_i64Subtract(32,0,($emin$0$ph|0),($294|0))|0);
        $296 = tempRet0;
        $299 = (_i64Add(($297|0),($298|0),($295|0),($296|0))|0);
        $300 = tempRet0;
        $301 = (0)>($300|0);
        $302 = ($bits$0$ph>>>0)>($299>>>0);
        $303 = (0)==($300|0);
        $304 = $303 & $302;
        $305 = $301 | $304;
        if ($305) {
         $306 = ($299|0)<(0);
         if ($306) {
          $$0710$i = 0;
          label = 127;
         } else {
          $$07$i = $299;
          label = 125;
         }
        } else {
         $$07$i = $bits$0$ph;
         label = 125;
        }
        if ((label|0) == 125) {
         $307 = ($$07$i|0)<(53);
         if ($307) {
          $$0710$i = $$07$i;
          label = 127;
         } else {
          $$pre41$i = (+($sign$0|0));
          $$0711$i = $$07$i;$$pre$phi42$iZ2D = $$pre41$i;$bias$0$i = 0.0;
         }
        }
        if ((label|0) == 127) {
         $308 = (84 - ($$0710$i))|0;
         $309 = (+_scalbn(1.0,$308));
         $310 = (+($sign$0|0));
         $311 = (+_copysignl($309,$310));
         $$0711$i = $$0710$i;$$pre$phi42$iZ2D = $310;$bias$0$i = $311;
        }
        $312 = ($$0711$i|0)<(32);
        $313 = $y$3$lcssa$i != 0.0;
        $or$cond4$i = $313 & $312;
        $314 = $x$4$lcssa$i & 1;
        $315 = ($314|0)==(0);
        $or$cond9$i = $315 & $or$cond4$i;
        $316 = $or$cond9$i&1;
        $x$6$i = (($316) + ($x$4$lcssa$i))|0;
        $y$5$i = $or$cond9$i ? 0.0 : $y$3$lcssa$i;
        $317 = (+($x$6$i>>>0));
        $318 = $$pre$phi42$iZ2D * $317;
        $319 = $bias$0$i + $318;
        $320 = $$pre$phi42$iZ2D * $y$5$i;
        $321 = $320 + $319;
        $322 = $321 - $bias$0$i;
        $323 = $322 != 0.0;
        if (!($323)) {
         $324 = (___errno_location()|0);
         HEAP32[$324>>2] = 34;
        }
        $325 = (+_scalbnl($322,$297));
        $$0 = $325;
        break L4;
       } else {
        $c$6 = $c$5;
       }
      } while(0);
      $sum$i = (($emin$0$ph) + ($bits$0$ph))|0;
      $330 = (0 - ($sum$i))|0;
      $$09$i = $c$6;$gotdig$0$i12 = 0;
      L184: while(1) {
       switch ($$09$i|0) {
       case 46:  {
        $gotdig$0$i12$lcssa273 = $gotdig$0$i12;
        label = 138;
        break L184;
        break;
       }
       case 48:  {
        break;
       }
       default: {
        $$2$i = $$09$i;$700 = 0;$701 = 0;$gotdig$2$i13 = $gotdig$0$i12;$gotrad$0$i14 = 0;
        break L184;
       }
       }
       $331 = HEAP32[$0>>2]|0;
       $332 = HEAP32[$1>>2]|0;
       $333 = ($331>>>0)<($332>>>0);
       if ($333) {
        $334 = ((($331)) + 1|0);
        HEAP32[$0>>2] = $334;
        $335 = HEAP8[$331>>0]|0;
        $336 = $335&255;
        $$09$i = $336;$gotdig$0$i12 = 1;
        continue;
       } else {
        $337 = (___shgetc($f)|0);
        $$09$i = $337;$gotdig$0$i12 = 1;
        continue;
       }
      }
      if ((label|0) == 138) {
       $338 = HEAP32[$0>>2]|0;
       $339 = HEAP32[$1>>2]|0;
       $340 = ($338>>>0)<($339>>>0);
       if ($340) {
        $341 = ((($338)) + 1|0);
        HEAP32[$0>>2] = $341;
        $342 = HEAP8[$338>>0]|0;
        $343 = $342&255;
        $$1$ph$i = $343;
       } else {
        $344 = (___shgetc($f)|0);
        $$1$ph$i = $344;
       }
       $345 = ($$1$ph$i|0)==(48);
       if ($345) {
        $346 = 0;$347 = 0;
        while(1) {
         $348 = (_i64Add(($346|0),($347|0),-1,-1)|0);
         $349 = tempRet0;
         $350 = HEAP32[$0>>2]|0;
         $351 = HEAP32[$1>>2]|0;
         $352 = ($350>>>0)<($351>>>0);
         if ($352) {
          $353 = ((($350)) + 1|0);
          HEAP32[$0>>2] = $353;
          $354 = HEAP8[$350>>0]|0;
          $355 = $354&255;
          $$1$be$i = $355;
         } else {
          $356 = (___shgetc($f)|0);
          $$1$be$i = $356;
         }
         $357 = ($$1$be$i|0)==(48);
         if ($357) {
          $346 = $348;$347 = $349;
         } else {
          $$2$i = $$1$be$i;$700 = $348;$701 = $349;$gotdig$2$i13 = 1;$gotrad$0$i14 = 1;
          break;
         }
        }
       } else {
        $$2$i = $$1$ph$i;$700 = 0;$701 = 0;$gotdig$2$i13 = $gotdig$0$i12$lcssa273;$gotrad$0$i14 = 1;
       }
      }
      HEAP32[$x$i>>2] = 0;
      $358 = (($$2$i) + -48)|0;
      $359 = ($358>>>0)<(10);
      $360 = ($$2$i|0)==(46);
      $361 = $360 | $359;
      L203: do {
       if ($361) {
        $362 = ((($x$i)) + 496|0);
        $$3105$i = $$2$i;$365 = 0;$366 = 0;$702 = $360;$703 = $358;$704 = $700;$705 = $701;$gotdig$3101$i = $gotdig$2$i13;$gotrad$1102$i = $gotrad$0$i14;$j$0104$i = 0;$k$0103$i = 0;$lnz$0100$i = 0;
        L205: while(1) {
         do {
          if ($702) {
           $cond$i = ($gotrad$1102$i|0)==(0);
           if ($cond$i) {
            $706 = $365;$707 = $366;$708 = $365;$709 = $366;$gotdig$4$i = $gotdig$3101$i;$gotrad$2$i = 1;$j$2$i = $j$0104$i;$k$2$i = $k$0103$i;$lnz$2$i = $lnz$0100$i;
           } else {
            $710 = $704;$711 = $705;$712 = $365;$713 = $366;$gotdig$3101$i$lcssa = $gotdig$3101$i;$j$0104$i$lcssa = $j$0104$i;$k$0103$i$lcssa = $k$0103$i;$lnz$0100$i$lcssa = $lnz$0100$i;
            break L205;
           }
          } else {
           $364 = ($k$0103$i|0)<(125);
           $367 = (_i64Add(($365|0),($366|0),1,0)|0);
           $368 = tempRet0;
           $369 = ($$3105$i|0)!=(48);
           if (!($364)) {
            if (!($369)) {
             $706 = $704;$707 = $705;$708 = $367;$709 = $368;$gotdig$4$i = $gotdig$3101$i;$gotrad$2$i = $gotrad$1102$i;$j$2$i = $j$0104$i;$k$2$i = $k$0103$i;$lnz$2$i = $lnz$0100$i;
             break;
            }
            $379 = HEAP32[$362>>2]|0;
            $380 = $379 | 1;
            HEAP32[$362>>2] = $380;
            $706 = $704;$707 = $705;$708 = $367;$709 = $368;$gotdig$4$i = $gotdig$3101$i;$gotrad$2$i = $gotrad$1102$i;$j$2$i = $j$0104$i;$k$2$i = $k$0103$i;$lnz$2$i = $lnz$0100$i;
            break;
           }
           $$lnz$0$i = $369 ? $367 : $lnz$0100$i;
           $370 = ($j$0104$i|0)==(0);
           $371 = (($x$i) + ($k$0103$i<<2)|0);
           if ($370) {
            $storemerge$i = $703;
           } else {
            $372 = HEAP32[$371>>2]|0;
            $373 = ($372*10)|0;
            $374 = (($$3105$i) + -48)|0;
            $375 = (($374) + ($373))|0;
            $storemerge$i = $375;
           }
           HEAP32[$371>>2] = $storemerge$i;
           $376 = (($j$0104$i) + 1)|0;
           $377 = ($376|0)==(9);
           $378 = $377&1;
           $$k$0$i = (($378) + ($k$0103$i))|0;
           $$11$i = $377 ? 0 : $376;
           $706 = $704;$707 = $705;$708 = $367;$709 = $368;$gotdig$4$i = 1;$gotrad$2$i = $gotrad$1102$i;$j$2$i = $$11$i;$k$2$i = $$k$0$i;$lnz$2$i = $$lnz$0$i;
          }
         } while(0);
         $381 = HEAP32[$0>>2]|0;
         $382 = HEAP32[$1>>2]|0;
         $383 = ($381>>>0)<($382>>>0);
         if ($383) {
          $384 = ((($381)) + 1|0);
          HEAP32[$0>>2] = $384;
          $385 = HEAP8[$381>>0]|0;
          $386 = $385&255;
          $$3$be$i = $386;
         } else {
          $387 = (___shgetc($f)|0);
          $$3$be$i = $387;
         }
         $388 = (($$3$be$i) + -48)|0;
         $389 = ($388>>>0)<(10);
         $390 = ($$3$be$i|0)==(46);
         $391 = $390 | $389;
         if ($391) {
          $$3105$i = $$3$be$i;$365 = $708;$366 = $709;$702 = $390;$703 = $388;$704 = $706;$705 = $707;$gotdig$3101$i = $gotdig$4$i;$gotrad$1102$i = $gotrad$2$i;$j$0104$i = $j$2$i;$k$0103$i = $k$2$i;$lnz$0100$i = $lnz$2$i;
         } else {
          $$3$lcssa$i = $$3$be$i;$393 = $706;$394 = $708;$396 = $707;$397 = $709;$gotdig$3$lcssa$i = $gotdig$4$i;$gotrad$1$lcssa$i = $gotrad$2$i;$j$0$lcssa$i = $j$2$i;$k$0$lcssa$i = $k$2$i;$lnz$0$lcssa$i = $lnz$2$i;
          label = 161;
          break L203;
         }
        }
        $363 = ($gotdig$3101$i$lcssa|0)!=(0);
        $714 = $712;$715 = $713;$716 = $710;$717 = $711;$718 = $363;$j$069$i = $j$0104$i$lcssa;$k$065$i = $k$0103$i$lcssa;$lnz$059$i = $lnz$0100$i$lcssa;
        label = 169;
       } else {
        $$3$lcssa$i = $$2$i;$393 = $700;$394 = 0;$396 = $701;$397 = 0;$gotdig$3$lcssa$i = $gotdig$2$i13;$gotrad$1$lcssa$i = $gotrad$0$i14;$j$0$lcssa$i = 0;$k$0$lcssa$i = 0;$lnz$0$lcssa$i = 0;
        label = 161;
       }
      } while(0);
      do {
       if ((label|0) == 161) {
        $392 = ($gotrad$1$lcssa$i|0)==(0);
        $395 = $392 ? $394 : $393;
        $398 = $392 ? $397 : $396;
        $399 = ($gotdig$3$lcssa$i|0)!=(0);
        $400 = $$3$lcssa$i | 32;
        $401 = ($400|0)==(101);
        $or$cond13$i = $401 & $399;
        if (!($or$cond13$i)) {
         $416 = ($$3$lcssa$i|0)>(-1);
         if ($416) {
          $714 = $394;$715 = $397;$716 = $395;$717 = $398;$718 = $399;$j$069$i = $j$0$lcssa$i;$k$065$i = $k$0$lcssa$i;$lnz$059$i = $lnz$0$lcssa$i;
          label = 169;
          break;
         } else {
          $719 = $394;$720 = $397;$721 = $399;$722 = $395;$723 = $398;$j$068$i = $j$0$lcssa$i;$k$064$i = $k$0$lcssa$i;$lnz$058$i = $lnz$0$lcssa$i;
          label = 171;
          break;
         }
        }
        $402 = (_scanexp($f,$pok)|0);
        $403 = tempRet0;
        $404 = ($402|0)==(0);
        $405 = ($403|0)==(-2147483648);
        $406 = $404 & $405;
        if ($406) {
         $407 = ($pok|0)==(0);
         if ($407) {
          ___shlim($f,0);
          $$0$i27 = 0.0;
          break;
         }
         $408 = HEAP32[$1>>2]|0;
         $409 = ($408|0)==(0|0);
         if ($409) {
          $412 = 0;$413 = 0;
         } else {
          $410 = HEAP32[$0>>2]|0;
          $411 = ((($410)) + -1|0);
          HEAP32[$0>>2] = $411;
          $412 = 0;$413 = 0;
         }
        } else {
         $412 = $402;$413 = $403;
        }
        $414 = (_i64Add(($412|0),($413|0),($395|0),($398|0))|0);
        $415 = tempRet0;
        $426 = $414;$428 = $394;$429 = $415;$431 = $397;$j$067$i = $j$0$lcssa$i;$k$063$i = $k$0$lcssa$i;$lnz$057$i = $lnz$0$lcssa$i;
        label = 173;
       }
      } while(0);
      if ((label|0) == 169) {
       $417 = HEAP32[$1>>2]|0;
       $418 = ($417|0)==(0|0);
       if ($418) {
        $719 = $714;$720 = $715;$721 = $718;$722 = $716;$723 = $717;$j$068$i = $j$069$i;$k$064$i = $k$065$i;$lnz$058$i = $lnz$059$i;
        label = 171;
       } else {
        $419 = HEAP32[$0>>2]|0;
        $420 = ((($419)) + -1|0);
        HEAP32[$0>>2] = $420;
        if ($718) {
         $426 = $716;$428 = $714;$429 = $717;$431 = $715;$j$067$i = $j$069$i;$k$063$i = $k$065$i;$lnz$057$i = $lnz$059$i;
         label = 173;
        } else {
         label = 172;
        }
       }
      }
      if ((label|0) == 171) {
       if ($721) {
        $426 = $722;$428 = $719;$429 = $723;$431 = $720;$j$067$i = $j$068$i;$k$063$i = $k$064$i;$lnz$057$i = $lnz$058$i;
        label = 173;
       } else {
        label = 172;
       }
      }
      do {
       if ((label|0) == 172) {
        $421 = (___errno_location()|0);
        HEAP32[$421>>2] = 22;
        ___shlim($f,0);
        $$0$i27 = 0.0;
       }
       else if ((label|0) == 173) {
        $422 = HEAP32[$x$i>>2]|0;
        $423 = ($422|0)==(0);
        if ($423) {
         $424 = (+($sign$0|0));
         $425 = $424 * 0.0;
         $$0$i27 = $425;
         break;
        }
        $427 = ($426|0)==($428|0);
        $430 = ($429|0)==($431|0);
        $432 = $427 & $430;
        $433 = ($431|0)<(0);
        $434 = ($428>>>0)<(10);
        $435 = ($431|0)==(0);
        $436 = $435 & $434;
        $437 = $433 | $436;
        $or$cond$i16 = $437 & $432;
        if ($or$cond$i16) {
         $438 = ($bits$0$ph>>>0)>(30);
         $439 = $422 >>> $bits$0$ph;
         $440 = ($439|0)==(0);
         $or$cond15$i = $438 | $440;
         if ($or$cond15$i) {
          $441 = (+($sign$0|0));
          $442 = (+($422>>>0));
          $443 = $441 * $442;
          $$0$i27 = $443;
          break;
         }
        }
        $444 = (($emin$0$ph|0) / -2)&-1;
        $445 = ($444|0)<(0);
        $446 = $445 << 31 >> 31;
        $447 = ($429|0)>($446|0);
        $448 = ($426>>>0)>($444>>>0);
        $449 = ($429|0)==($446|0);
        $450 = $449 & $448;
        $451 = $447 | $450;
        if ($451) {
         $452 = (___errno_location()|0);
         HEAP32[$452>>2] = 34;
         $453 = (+($sign$0|0));
         $454 = $453 * 1.7976931348623157E+308;
         $455 = $454 * 1.7976931348623157E+308;
         $$0$i27 = $455;
         break;
        }
        $456 = (($emin$0$ph) + -106)|0;
        $457 = ($456|0)<(0);
        $458 = $457 << 31 >> 31;
        $459 = ($429|0)<($458|0);
        $460 = ($426>>>0)<($456>>>0);
        $461 = ($429|0)==($458|0);
        $462 = $461 & $460;
        $463 = $459 | $462;
        if ($463) {
         $464 = (___errno_location()|0);
         HEAP32[$464>>2] = 34;
         $465 = (+($sign$0|0));
         $466 = $465 * 2.2250738585072014E-308;
         $467 = $466 * 2.2250738585072014E-308;
         $$0$i27 = $467;
         break;
        }
        $468 = ($j$067$i|0)==(0);
        if ($468) {
         $k$3$i = $k$063$i;
        } else {
         $469 = ($j$067$i|0)<(9);
         if ($469) {
          $470 = (($x$i) + ($k$063$i<<2)|0);
          $$promoted$i = HEAP32[$470>>2]|0;
          $472 = $$promoted$i;$j$394$i = $j$067$i;
          while(1) {
           $471 = ($472*10)|0;
           $473 = (($j$394$i) + 1)|0;
           $exitcond$i = ($473|0)==(9);
           if ($exitcond$i) {
            $$lcssa265 = $471;
            break;
           } else {
            $472 = $471;$j$394$i = $473;
           }
          }
          HEAP32[$470>>2] = $$lcssa265;
         }
         $474 = (($k$063$i) + 1)|0;
         $k$3$i = $474;
        }
        $475 = ($lnz$057$i|0)<(9);
        if ($475) {
         $476 = ($lnz$057$i|0)<=($426|0);
         $477 = ($426|0)<(18);
         $or$cond3$i = $476 & $477;
         if ($or$cond3$i) {
          $478 = ($426|0)==(9);
          if ($478) {
           $479 = (+($sign$0|0));
           $480 = HEAP32[$x$i>>2]|0;
           $481 = (+($480>>>0));
           $482 = $479 * $481;
           $$0$i27 = $482;
           break;
          }
          $483 = ($426|0)<(9);
          if ($483) {
           $484 = (+($sign$0|0));
           $485 = HEAP32[$x$i>>2]|0;
           $486 = (+($485>>>0));
           $487 = $484 * $486;
           $488 = (8 - ($426))|0;
           $489 = (6016 + ($488<<2)|0);
           $490 = HEAP32[$489>>2]|0;
           $491 = (+($490|0));
           $492 = $487 / $491;
           $$0$i27 = $492;
           break;
          }
          $$neg32$i = (($bits$0$ph) + 27)|0;
          $493 = Math_imul($426, -3)|0;
          $494 = (($$neg32$i) + ($493))|0;
          $495 = ($494|0)>(30);
          $$pre$i17 = HEAP32[$x$i>>2]|0;
          $496 = $$pre$i17 >>> $494;
          $497 = ($496|0)==(0);
          $or$cond182$i = $495 | $497;
          if ($or$cond182$i) {
           $498 = (+($sign$0|0));
           $499 = (+($$pre$i17>>>0));
           $500 = $498 * $499;
           $501 = (($426) + -10)|0;
           $502 = (6016 + ($501<<2)|0);
           $503 = HEAP32[$502>>2]|0;
           $504 = (+($503|0));
           $505 = $500 * $504;
           $$0$i27 = $505;
           break;
          }
         }
        }
        $506 = (($426|0) % 9)&-1;
        $507 = ($506|0)==(0);
        if ($507) {
         $a$2$ph38$i = 0;$e2$0$ph$i = 0;$rp$2$ph36$i = $426;$z$1$ph37$i = $k$3$i;
        } else {
         $508 = ($426|0)>(-1);
         $509 = (($506) + 9)|0;
         $510 = $508 ? $506 : $509;
         $511 = (8 - ($510))|0;
         $512 = (6016 + ($511<<2)|0);
         $513 = HEAP32[$512>>2]|0;
         $514 = ($k$3$i|0)==(0);
         if ($514) {
          $a$0$lcssa151$i = 0;$rp$0$lcssa152$i = $426;$z$0$i = 0;
         } else {
          $515 = (1000000000 / ($513|0))&-1;
          $a$085$i = 0;$carry$087$i = 0;$k$486$i = 0;$rp$084$i = $426;
          while(1) {
           $516 = (($x$i) + ($k$486$i<<2)|0);
           $517 = HEAP32[$516>>2]|0;
           $518 = (($517>>>0) % ($513>>>0))&-1;
           $519 = (($517>>>0) / ($513>>>0))&-1;
           $520 = (($519) + ($carry$087$i))|0;
           HEAP32[$516>>2] = $520;
           $521 = Math_imul($518, $515)|0;
           $522 = ($k$486$i|0)==($a$085$i|0);
           $523 = ($520|0)==(0);
           $or$cond16$i = $522 & $523;
           $524 = (($k$486$i) + 1)|0;
           $525 = $524 & 127;
           $526 = (($rp$084$i) + -9)|0;
           $rp$1$i18 = $or$cond16$i ? $526 : $rp$084$i;
           $a$1$i = $or$cond16$i ? $525 : $a$085$i;
           $527 = ($524|0)==($k$3$i|0);
           if ($527) {
            $$lcssa264 = $521;$a$1$i$lcssa = $a$1$i;$rp$1$i18$lcssa = $rp$1$i18;
            break;
           } else {
            $a$085$i = $a$1$i;$carry$087$i = $521;$k$486$i = $524;$rp$084$i = $rp$1$i18;
           }
          }
          $528 = ($$lcssa264|0)==(0);
          if ($528) {
           $a$0$lcssa151$i = $a$1$i$lcssa;$rp$0$lcssa152$i = $rp$1$i18$lcssa;$z$0$i = $k$3$i;
          } else {
           $529 = (($k$3$i) + 1)|0;
           $530 = (($x$i) + ($k$3$i<<2)|0);
           HEAP32[$530>>2] = $$lcssa264;
           $a$0$lcssa151$i = $a$1$i$lcssa;$rp$0$lcssa152$i = $rp$1$i18$lcssa;$z$0$i = $529;
          }
         }
         $531 = (9 - ($510))|0;
         $532 = (($531) + ($rp$0$lcssa152$i))|0;
         $a$2$ph38$i = $a$0$lcssa151$i;$e2$0$ph$i = 0;$rp$2$ph36$i = $532;$z$1$ph37$i = $z$0$i;
        }
        L284: while(1) {
         $533 = ($rp$2$ph36$i|0)<(18);
         $534 = ($rp$2$ph36$i|0)==(18);
         $535 = (($x$i) + ($a$2$ph38$i<<2)|0);
         $e2$0$i19 = $e2$0$ph$i;$z$1$i = $z$1$ph37$i;
         while(1) {
          if (!($533)) {
           if (!($534)) {
            $a$3$ph$i = $a$2$ph38$i;$e2$1$ph$i = $e2$0$i19;$rp$3$ph34$i = $rp$2$ph36$i;$z$5$ph$i = $z$1$i;
            break L284;
           }
           $536 = HEAP32[$535>>2]|0;
           $537 = ($536>>>0)<(9007199);
           if (!($537)) {
            $a$3$ph$i = $a$2$ph38$i;$e2$1$ph$i = $e2$0$i19;$rp$3$ph34$i = 18;$z$5$ph$i = $z$1$i;
            break L284;
           }
          }
          $538 = (($z$1$i) + 127)|0;
          $carry1$0$i = 0;$k$5$in$i = $538;$z$2$i = $z$1$i;
          while(1) {
           $k$5$i = $k$5$in$i & 127;
           $539 = (($x$i) + ($k$5$i<<2)|0);
           $540 = HEAP32[$539>>2]|0;
           $541 = (_bitshift64Shl(($540|0),0,29)|0);
           $542 = tempRet0;
           $543 = (_i64Add(($541|0),($542|0),($carry1$0$i|0),0)|0);
           $544 = tempRet0;
           $545 = ($544>>>0)>(0);
           $546 = ($543>>>0)>(1000000000);
           $547 = ($544|0)==(0);
           $548 = $547 & $546;
           $549 = $545 | $548;
           if ($549) {
            $550 = (___udivdi3(($543|0),($544|0),1000000000,0)|0);
            $551 = tempRet0;
            $552 = (___uremdi3(($543|0),($544|0),1000000000,0)|0);
            $553 = tempRet0;
            $$sink$off0$i = $552;$carry1$1$i = $550;
           } else {
            $$sink$off0$i = $543;$carry1$1$i = 0;
           }
           HEAP32[$539>>2] = $$sink$off0$i;
           $554 = (($z$2$i) + 127)|0;
           $555 = $554 & 127;
           $556 = ($k$5$i|0)!=($555|0);
           $557 = ($k$5$i|0)==($a$2$ph38$i|0);
           $or$cond17$i = $556 | $557;
           $558 = ($$sink$off0$i|0)==(0);
           $k$5$z$2$i = $558 ? $k$5$i : $z$2$i;
           $z$3$i = $or$cond17$i ? $z$2$i : $k$5$z$2$i;
           $559 = (($k$5$i) + -1)|0;
           if ($557) {
            $carry1$1$i$lcssa = $carry1$1$i;$z$3$i$lcssa = $z$3$i;
            break;
           } else {
            $carry1$0$i = $carry1$1$i;$k$5$in$i = $559;$z$2$i = $z$3$i;
           }
          }
          $560 = (($e2$0$i19) + -29)|0;
          $561 = ($carry1$1$i$lcssa|0)==(0);
          if ($561) {
           $e2$0$i19 = $560;$z$1$i = $z$3$i$lcssa;
          } else {
           $$lcssa263 = $560;$carry1$1$i$lcssa$lcssa = $carry1$1$i$lcssa;$z$3$i$lcssa$lcssa = $z$3$i$lcssa;
           break;
          }
         }
         $562 = (($rp$2$ph36$i) + 9)|0;
         $563 = (($a$2$ph38$i) + 127)|0;
         $564 = $563 & 127;
         $565 = ($564|0)==($z$3$i$lcssa$lcssa|0);
         if ($565) {
          $566 = (($z$3$i$lcssa$lcssa) + 127)|0;
          $567 = $566 & 127;
          $568 = (($x$i) + ($567<<2)|0);
          $569 = HEAP32[$568>>2]|0;
          $570 = (($z$3$i$lcssa$lcssa) + 126)|0;
          $571 = $570 & 127;
          $572 = (($x$i) + ($571<<2)|0);
          $573 = HEAP32[$572>>2]|0;
          $574 = $573 | $569;
          HEAP32[$572>>2] = $574;
          $z$4$i = $567;
         } else {
          $z$4$i = $z$3$i$lcssa$lcssa;
         }
         $575 = (($x$i) + ($564<<2)|0);
         HEAP32[$575>>2] = $carry1$1$i$lcssa$lcssa;
         $a$2$ph38$i = $564;$e2$0$ph$i = $$lcssa263;$rp$2$ph36$i = $562;$z$1$ph37$i = $z$4$i;
        }
        L302: while(1) {
         $606 = (($z$5$ph$i) + 1)|0;
         $603 = $606 & 127;
         $607 = (($z$5$ph$i) + 127)|0;
         $608 = $607 & 127;
         $609 = (($x$i) + ($608<<2)|0);
         $a$3$ph157$i = $a$3$ph$i;$e2$1$ph156$i = $e2$1$ph$i;$rp$3$ph$i = $rp$3$ph34$i;
         while(1) {
          $610 = ($rp$3$ph$i|0)==(18);
          $611 = ($rp$3$ph$i|0)>(27);
          $$18$i = $611 ? 9 : 1;
          $$not$i = $610 ^ 1;
          $a$3$i = $a$3$ph157$i;$e2$1$i = $e2$1$ph156$i;
          while(1) {
           $576 = $a$3$i & 127;
           $577 = ($576|0)==($z$5$ph$i|0);
           do {
            if ($577) {
             label = 219;
            } else {
             $578 = (($x$i) + ($576<<2)|0);
             $579 = HEAP32[$578>>2]|0;
             $580 = ($579>>>0)<(9007199);
             if ($580) {
              label = 219;
              break;
             }
             $581 = ($579>>>0)>(9007199);
             if ($581) {
              break;
             }
             $582 = (($a$3$i) + 1)|0;
             $583 = $582 & 127;
             $584 = ($583|0)==($z$5$ph$i|0);
             if ($584) {
              label = 219;
              break;
             }
             $690 = (($x$i) + ($583<<2)|0);
             $691 = HEAP32[$690>>2]|0;
             $692 = ($691>>>0)<(254740991);
             if ($692) {
              label = 219;
              break;
             }
             $693 = ($691>>>0)>(254740991);
             $brmerge$i28 = $693 | $$not$i;
             if (!($brmerge$i28)) {
              $617 = $576;$a$3$i249 = $a$3$i;$e2$1$i246 = $e2$1$i;$z$7$i = $z$5$ph$i;
              break L302;
             }
            }
           } while(0);
           if ((label|0) == 219) {
            label = 0;
            if ($610) {
             label = 220;
             break L302;
            }
           }
           $585 = (($e2$1$i) + ($$18$i))|0;
           $586 = ($a$3$i|0)==($z$5$ph$i|0);
           if ($586) {
            $a$3$i = $z$5$ph$i;$e2$1$i = $585;
           } else {
            $$lcssa256 = $585;$a$3$i$lcssa248 = $a$3$i;
            break;
           }
          }
          $587 = 1 << $$18$i;
          $588 = (($587) + -1)|0;
          $589 = 1000000000 >>> $$18$i;
          $a$478$i = $a$3$i$lcssa248;$carry3$081$i = 0;$k$679$i = $a$3$i$lcssa248;$rp$477$i = $rp$3$ph$i;
          while(1) {
           $590 = (($x$i) + ($k$679$i<<2)|0);
           $591 = HEAP32[$590>>2]|0;
           $592 = $591 & $588;
           $593 = $591 >>> $$18$i;
           $594 = (($593) + ($carry3$081$i))|0;
           HEAP32[$590>>2] = $594;
           $595 = Math_imul($592, $589)|0;
           $596 = ($k$679$i|0)==($a$478$i|0);
           $597 = ($594|0)==(0);
           $or$cond19$i = $596 & $597;
           $598 = (($k$679$i) + 1)|0;
           $599 = $598 & 127;
           $600 = (($rp$477$i) + -9)|0;
           $rp$5$i = $or$cond19$i ? $600 : $rp$477$i;
           $a$5$i = $or$cond19$i ? $599 : $a$478$i;
           $601 = ($599|0)==($z$5$ph$i|0);
           if ($601) {
            $$lcssa257 = $595;$a$5$i$lcssa = $a$5$i;$rp$5$i$lcssa = $rp$5$i;
            break;
           } else {
            $a$478$i = $a$5$i;$carry3$081$i = $595;$k$679$i = $599;$rp$477$i = $rp$5$i;
           }
          }
          $602 = ($$lcssa257|0)==(0);
          if ($602) {
           $a$3$ph157$i = $a$5$i$lcssa;$e2$1$ph156$i = $$lcssa256;$rp$3$ph$i = $rp$5$i$lcssa;
           continue;
          }
          $604 = ($603|0)==($a$5$i$lcssa|0);
          if (!($604)) {
           $$lcssa256$lcssa = $$lcssa256;$$lcssa257$lcssa = $$lcssa257;$a$5$i$lcssa$lcssa = $a$5$i$lcssa;$rp$5$i$lcssa$lcssa = $rp$5$i$lcssa;
           break;
          }
          $612 = HEAP32[$609>>2]|0;
          $613 = $612 | 1;
          HEAP32[$609>>2] = $613;
          $a$3$ph157$i = $a$5$i$lcssa;$e2$1$ph156$i = $$lcssa256;$rp$3$ph$i = $rp$5$i$lcssa;
         }
         $605 = (($x$i) + ($z$5$ph$i<<2)|0);
         HEAP32[$605>>2] = $$lcssa257$lcssa;
         $a$3$ph$i = $a$5$i$lcssa$lcssa;$e2$1$ph$i = $$lcssa256$lcssa;$rp$3$ph34$i = $rp$5$i$lcssa$lcssa;$z$5$ph$i = $603;
        }
        if ((label|0) == 220) {
         if ($577) {
          $614 = (($603) + -1)|0;
          $615 = (($x$i) + ($614<<2)|0);
          HEAP32[$615>>2] = 0;
          $617 = $z$5$ph$i;$a$3$i249 = $a$3$i;$e2$1$i246 = $e2$1$i;$z$7$i = $603;
         } else {
          $617 = $576;$a$3$i249 = $a$3$i;$e2$1$i246 = $e2$1$i;$z$7$i = $z$5$ph$i;
         }
        }
        $616 = (($x$i) + ($617<<2)|0);
        $618 = HEAP32[$616>>2]|0;
        $619 = (+($618>>>0));
        $620 = (($a$3$i249) + 1)|0;
        $621 = $620 & 127;
        $622 = ($621|0)==($z$7$i|0);
        if ($622) {
         $679 = (($a$3$i249) + 2)|0;
         $680 = $679 & 127;
         $681 = (($680) + -1)|0;
         $682 = (($x$i) + ($681<<2)|0);
         HEAP32[$682>>2] = 0;
         $z$7$1$i = $680;
        } else {
         $z$7$1$i = $z$7$i;
        }
        $683 = $619 * 1.0E+9;
        $684 = (($x$i) + ($621<<2)|0);
        $685 = HEAP32[$684>>2]|0;
        $686 = (+($685>>>0));
        $687 = $683 + $686;
        $643 = (+($sign$0|0));
        $625 = $643 * $687;
        $663 = (($e2$1$i246) + 53)|0;
        $669 = (($663) - ($emin$0$ph))|0;
        $670 = ($669|0)<($bits$0$ph|0);
        $688 = ($669|0)<(0);
        $$$i = $688 ? 0 : $669;
        $denormal$0$i = $670&1;
        $$010$i = $670 ? $$$i : $bits$0$ph;
        $689 = ($$010$i|0)<(53);
        if ($689) {
         $623 = (105 - ($$010$i))|0;
         $624 = (+_scalbn(1.0,$623));
         $626 = (+_copysignl($624,$625));
         $627 = (53 - ($$010$i))|0;
         $628 = (+_scalbn(1.0,$627));
         $629 = (+_fmodl($625,$628));
         $630 = $625 - $629;
         $631 = $626 + $630;
         $bias$0$i25 = $626;$frac$0$i = $629;$y$1$i24 = $631;
        } else {
         $bias$0$i25 = 0.0;$frac$0$i = 0.0;$y$1$i24 = $625;
        }
        $632 = (($a$3$i249) + 2)|0;
        $633 = $632 & 127;
        $634 = ($633|0)==($z$7$1$i|0);
        do {
         if ($634) {
          $frac$2$i = $frac$0$i;
         } else {
          $635 = (($x$i) + ($633<<2)|0);
          $636 = HEAP32[$635>>2]|0;
          $637 = ($636>>>0)<(500000000);
          do {
           if ($637) {
            $638 = ($636|0)==(0);
            if ($638) {
             $639 = (($a$3$i249) + 3)|0;
             $640 = $639 & 127;
             $641 = ($640|0)==($z$7$1$i|0);
             if ($641) {
              $frac$1$i = $frac$0$i;
              break;
             }
            }
            $642 = $643 * 0.25;
            $644 = $642 + $frac$0$i;
            $frac$1$i = $644;
           } else {
            $645 = ($636>>>0)>(500000000);
            if ($645) {
             $646 = $643 * 0.75;
             $647 = $646 + $frac$0$i;
             $frac$1$i = $647;
             break;
            }
            $648 = (($a$3$i249) + 3)|0;
            $649 = $648 & 127;
            $650 = ($649|0)==($z$7$1$i|0);
            if ($650) {
             $651 = $643 * 0.5;
             $652 = $651 + $frac$0$i;
             $frac$1$i = $652;
             break;
            } else {
             $653 = $643 * 0.75;
             $654 = $653 + $frac$0$i;
             $frac$1$i = $654;
             break;
            }
           }
          } while(0);
          $655 = (53 - ($$010$i))|0;
          $656 = ($655|0)>(1);
          if (!($656)) {
           $frac$2$i = $frac$1$i;
           break;
          }
          $657 = (+_fmodl($frac$1$i,1.0));
          $658 = $657 != 0.0;
          if ($658) {
           $frac$2$i = $frac$1$i;
           break;
          }
          $659 = $frac$1$i + 1.0;
          $frac$2$i = $659;
         }
        } while(0);
        $660 = $y$1$i24 + $frac$2$i;
        $661 = $660 - $bias$0$i25;
        $662 = $663 & 2147483647;
        $664 = (-2 - ($sum$i))|0;
        $665 = ($662|0)>($664|0);
        do {
         if ($665) {
          $666 = (+Math_abs((+$661)));
          $667 = !($666 >= 9007199254740992.0);
          if ($667) {
           $denormal$2$i = $denormal$0$i;$e2$2$i = $e2$1$i246;$y$2$i26 = $661;
          } else {
           $668 = ($$010$i|0)==($669|0);
           $or$cond20$i = $670 & $668;
           $denormal$1$i = $or$cond20$i ? 0 : $denormal$0$i;
           $671 = $661 * 0.5;
           $672 = (($e2$1$i246) + 1)|0;
           $denormal$2$i = $denormal$1$i;$e2$2$i = $672;$y$2$i26 = $671;
          }
          $673 = (($e2$2$i) + 50)|0;
          $674 = ($673|0)>($330|0);
          if (!($674)) {
           $675 = ($denormal$2$i|0)!=(0);
           $676 = $frac$2$i != 0.0;
           $or$cond8$i = $676 & $675;
           if (!($or$cond8$i)) {
            $e2$3$i = $e2$2$i;$y$3$i = $y$2$i26;
            break;
           }
          }
          $677 = (___errno_location()|0);
          HEAP32[$677>>2] = 34;
          $e2$3$i = $e2$2$i;$y$3$i = $y$2$i26;
         } else {
          $e2$3$i = $e2$1$i246;$y$3$i = $661;
         }
        } while(0);
        $678 = (+_scalbnl($y$3$i,$e2$3$i));
        $$0$i27 = $678;
       }
      } while(0);
      $$0 = $$0$i27;
      break L4;
      break;
     }
     default: {
      $109 = HEAP32[$1>>2]|0;
      $110 = ($109|0)==(0|0);
      if (!($110)) {
       $111 = HEAP32[$0>>2]|0;
       $112 = ((($111)) + -1|0);
       HEAP32[$0>>2] = $112;
      }
      $113 = (___errno_location()|0);
      HEAP32[$113>>2] = 22;
      ___shlim($f,0);
      $$0 = 0.0;
      break L4;
     }
     }
    }
    }
   } while(0);
   if ((label|0) == 23) {
    $41 = HEAP32[$1>>2]|0;
    $42 = ($41|0)==(0|0);
    if (!($42)) {
     $43 = HEAP32[$0>>2]|0;
     $44 = ((($43)) + -1|0);
     HEAP32[$0>>2] = $44;
    }
    $45 = ($pok|0)!=(0);
    $46 = ($i$0$lcssa>>>0)>(3);
    $or$cond9 = $45 & $46;
    if ($or$cond9) {
     $i$1 = $i$0$lcssa;
     while(1) {
      if (!($42)) {
       $47 = HEAP32[$0>>2]|0;
       $48 = ((($47)) + -1|0);
       HEAP32[$0>>2] = $48;
      }
      $49 = (($i$1) + -1)|0;
      $$old8 = ($49>>>0)>(3);
      if ($$old8) {
       $i$1 = $49;
      } else {
       break;
      }
     }
    }
   }
   $50 = (+($sign$0|0));
   $51 = $50 * inf;
   $52 = $51;
   $$0 = $52;
  }
 } while(0);
 STACKTOP = sp;return (+$$0);
}
function ___intscan($f,$base,$pok,$0,$1) {
 $f = $f|0;
 $base = $base|0;
 $pok = $pok|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $$122 = 0, $$123 = 0, $$base21 = 0, $$lcssa = 0, $$lcssa130 = 0, $$lcssa131 = 0, $$lcssa132 = 0, $$lcssa133 = 0, $$lcssa134 = 0, $$lcssa135 = 0, $$sum = 0, $$sum14 = 0, $$sum1445 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum1865 = 0, $$sum19 = 0;
 var $$sum20 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$124 = 0, $c$2$be = 0, $c$2$be$lcssa = 0;
 var $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$371 = 0, $c$4$be = 0, $c$4$be$lcssa = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$be$lcssa = 0, $c$6$lcssa = 0, $c$7$be = 0, $c$753 = 0, $c$8 = 0, $c$9$be = 0, $neg$0 = 0, $neg$0$ = 0, $neg$1 = 0, $or$cond = 0, $or$cond12 = 0;
 var $or$cond40 = 0, $or$cond5 = 0, $or$cond7 = 0, $x$082 = 0, $x$146 = 0, $x$266 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($base>>>0)>(36);
 L1: do {
  if ($2) {
   $5 = (___errno_location()|0);
   HEAP32[$5>>2] = 22;
   $286 = 0;$287 = 0;
  } else {
   $3 = ((($f)) + 4|0);
   $4 = ((($f)) + 100|0);
   while(1) {
    $6 = HEAP32[$3>>2]|0;
    $7 = HEAP32[$4>>2]|0;
    $8 = ($6>>>0)<($7>>>0);
    if ($8) {
     $9 = ((($6)) + 1|0);
     HEAP32[$3>>2] = $9;
     $10 = HEAP8[$6>>0]|0;
     $11 = $10&255;
     $13 = $11;
    } else {
     $12 = (___shgetc($f)|0);
     $13 = $12;
    }
    $14 = (_isspace($13)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     $$lcssa135 = $13;
     break;
    }
   }
   $16 = ($$lcssa135|0)==(45);
   L11: do {
    switch ($$lcssa135|0) {
    case 43: case 45:  {
     $17 = $16 << 31 >> 31;
     $18 = HEAP32[$3>>2]|0;
     $19 = HEAP32[$4>>2]|0;
     $20 = ($18>>>0)<($19>>>0);
     if ($20) {
      $21 = ((($18)) + 1|0);
      HEAP32[$3>>2] = $21;
      $22 = HEAP8[$18>>0]|0;
      $23 = $22&255;
      $c$0 = $23;$neg$0 = $17;
      break L11;
     } else {
      $24 = (___shgetc($f)|0);
      $c$0 = $24;$neg$0 = $17;
      break L11;
     }
     break;
    }
    default: {
     $c$0 = $$lcssa135;$neg$0 = 0;
    }
    }
   } while(0);
   $25 = ($base|0)==(0);
   $26 = $base & -17;
   $27 = ($26|0)==(0);
   $28 = ($c$0|0)==(48);
   $or$cond5 = $27 & $28;
   do {
    if ($or$cond5) {
     $29 = HEAP32[$3>>2]|0;
     $30 = HEAP32[$4>>2]|0;
     $31 = ($29>>>0)<($30>>>0);
     if ($31) {
      $32 = ((($29)) + 1|0);
      HEAP32[$3>>2] = $32;
      $33 = HEAP8[$29>>0]|0;
      $34 = $33&255;
      $37 = $34;
     } else {
      $35 = (___shgetc($f)|0);
      $37 = $35;
     }
     $36 = $37 | 32;
     $38 = ($36|0)==(120);
     if (!($38)) {
      if ($25) {
       $$123 = 8;$c$124 = $37;
       label = 46;
       break;
      } else {
       $$1 = $base;$c$1 = $37;
       label = 32;
       break;
      }
     }
     $39 = HEAP32[$3>>2]|0;
     $40 = HEAP32[$4>>2]|0;
     $41 = ($39>>>0)<($40>>>0);
     if ($41) {
      $42 = ((($39)) + 1|0);
      HEAP32[$3>>2] = $42;
      $43 = HEAP8[$39>>0]|0;
      $44 = $43&255;
      $46 = $44;
     } else {
      $45 = (___shgetc($f)|0);
      $46 = $45;
     }
     $$sum20 = (($46) + 1)|0;
     $47 = (15965 + ($$sum20)|0);
     $48 = HEAP8[$47>>0]|0;
     $49 = ($48&255)>(15);
     if ($49) {
      $50 = HEAP32[$4>>2]|0;
      $51 = ($50|0)==(0|0);
      if (!($51)) {
       $52 = HEAP32[$3>>2]|0;
       $53 = ((($52)) + -1|0);
       HEAP32[$3>>2] = $53;
      }
      $54 = ($pok|0)==(0);
      if ($54) {
       ___shlim($f,0);
       $286 = 0;$287 = 0;
       break L1;
      }
      if ($51) {
       $286 = 0;$287 = 0;
       break L1;
      }
      $55 = HEAP32[$3>>2]|0;
      $56 = ((($55)) + -1|0);
      HEAP32[$3>>2] = $56;
      $286 = 0;$287 = 0;
      break L1;
     } else {
      $$123 = 16;$c$124 = $46;
      label = 46;
     }
    } else {
     $$base21 = $25 ? 10 : $base;
     $$sum = (($c$0) + 1)|0;
     $57 = (15965 + ($$sum)|0);
     $58 = HEAP8[$57>>0]|0;
     $59 = $58&255;
     $60 = ($59>>>0)<($$base21>>>0);
     if ($60) {
      $$1 = $$base21;$c$1 = $c$0;
      label = 32;
     } else {
      $61 = HEAP32[$4>>2]|0;
      $62 = ($61|0)==(0|0);
      if (!($62)) {
       $63 = HEAP32[$3>>2]|0;
       $64 = ((($63)) + -1|0);
       HEAP32[$3>>2] = $64;
      }
      ___shlim($f,0);
      $65 = (___errno_location()|0);
      HEAP32[$65>>2] = 22;
      $286 = 0;$287 = 0;
      break L1;
     }
    }
   } while(0);
   if ((label|0) == 32) {
    $66 = ($$1|0)==(10);
    if ($66) {
     $67 = (($c$1) + -48)|0;
     $68 = ($67>>>0)<(10);
     if ($68) {
      $71 = $67;$x$082 = 0;
      while(1) {
       $69 = ($x$082*10)|0;
       $70 = (($69) + ($71))|0;
       $72 = HEAP32[$3>>2]|0;
       $73 = HEAP32[$4>>2]|0;
       $74 = ($72>>>0)<($73>>>0);
       if ($74) {
        $75 = ((($72)) + 1|0);
        HEAP32[$3>>2] = $75;
        $76 = HEAP8[$72>>0]|0;
        $77 = $76&255;
        $c$2$be = $77;
       } else {
        $78 = (___shgetc($f)|0);
        $c$2$be = $78;
       }
       $79 = (($c$2$be) + -48)|0;
       $80 = ($79>>>0)<(10);
       $81 = ($70>>>0)<(429496729);
       $82 = $80 & $81;
       if ($82) {
        $71 = $79;$x$082 = $70;
       } else {
        $$lcssa134 = $70;$c$2$be$lcssa = $c$2$be;
        break;
       }
      }
      $288 = $$lcssa134;$289 = 0;$c$2$lcssa = $c$2$be$lcssa;
     } else {
      $288 = 0;$289 = 0;$c$2$lcssa = $c$1;
     }
     $83 = (($c$2$lcssa) + -48)|0;
     $84 = ($83>>>0)<(10);
     if ($84) {
      $85 = $288;$86 = $289;$89 = $83;$c$371 = $c$2$lcssa;
      while(1) {
       $87 = (___muldi3(($85|0),($86|0),10,0)|0);
       $88 = tempRet0;
       $90 = ($89|0)<(0);
       $91 = $90 << 31 >> 31;
       $92 = $89 ^ -1;
       $93 = $91 ^ -1;
       $94 = ($88>>>0)>($93>>>0);
       $95 = ($87>>>0)>($92>>>0);
       $96 = ($88|0)==($93|0);
       $97 = $96 & $95;
       $98 = $94 | $97;
       if ($98) {
        $$lcssa = $89;$290 = $85;$291 = $86;$c$3$lcssa = $c$371;
        break;
       }
       $99 = (_i64Add(($87|0),($88|0),($89|0),($91|0))|0);
       $100 = tempRet0;
       $101 = HEAP32[$3>>2]|0;
       $102 = HEAP32[$4>>2]|0;
       $103 = ($101>>>0)<($102>>>0);
       if ($103) {
        $104 = ((($101)) + 1|0);
        HEAP32[$3>>2] = $104;
        $105 = HEAP8[$101>>0]|0;
        $106 = $105&255;
        $c$3$be = $106;
       } else {
        $107 = (___shgetc($f)|0);
        $c$3$be = $107;
       }
       $108 = (($c$3$be) + -48)|0;
       $109 = ($108>>>0)<(10);
       $110 = ($100>>>0)<(429496729);
       $111 = ($99>>>0)<(2576980378);
       $112 = ($100|0)==(429496729);
       $113 = $112 & $111;
       $114 = $110 | $113;
       $or$cond7 = $109 & $114;
       if ($or$cond7) {
        $85 = $99;$86 = $100;$89 = $108;$c$371 = $c$3$be;
       } else {
        $$lcssa = $108;$290 = $99;$291 = $100;$c$3$lcssa = $c$3$be;
        break;
       }
      }
      $115 = ($$lcssa>>>0)>(9);
      if ($115) {
       $259 = $291;$261 = $290;$neg$1 = $neg$0;
      } else {
       $$122 = 10;$292 = $290;$293 = $291;$c$8 = $c$3$lcssa;
       label = 72;
      }
     } else {
      $259 = $289;$261 = $288;$neg$1 = $neg$0;
     }
    } else {
     $$123 = $$1;$c$124 = $c$1;
     label = 46;
    }
   }
   L63: do {
    if ((label|0) == 46) {
     $116 = (($$123) + -1)|0;
     $117 = $116 & $$123;
     $118 = ($117|0)==(0);
     if ($118) {
      $123 = ($$123*23)|0;
      $124 = $123 >>> 5;
      $125 = $124 & 7;
      $126 = (16222 + ($125)|0);
      $127 = HEAP8[$126>>0]|0;
      $128 = $127 << 24 >> 24;
      $$sum1445 = (($c$124) + 1)|0;
      $129 = (15965 + ($$sum1445)|0);
      $130 = HEAP8[$129>>0]|0;
      $131 = $130&255;
      $132 = ($131>>>0)<($$123>>>0);
      if ($132) {
       $135 = $131;$x$146 = 0;
       while(1) {
        $133 = $x$146 << $128;
        $134 = $135 | $133;
        $136 = HEAP32[$3>>2]|0;
        $137 = HEAP32[$4>>2]|0;
        $138 = ($136>>>0)<($137>>>0);
        if ($138) {
         $139 = ((($136)) + 1|0);
         HEAP32[$3>>2] = $139;
         $140 = HEAP8[$136>>0]|0;
         $141 = $140&255;
         $c$4$be = $141;
        } else {
         $142 = (___shgetc($f)|0);
         $c$4$be = $142;
        }
        $$sum14 = (($c$4$be) + 1)|0;
        $143 = (15965 + ($$sum14)|0);
        $144 = HEAP8[$143>>0]|0;
        $145 = $144&255;
        $146 = ($145>>>0)<($$123>>>0);
        $147 = ($134>>>0)<(134217728);
        $148 = $147 & $146;
        if ($148) {
         $135 = $145;$x$146 = $134;
        } else {
         $$lcssa130 = $134;$$lcssa131 = $144;$c$4$be$lcssa = $c$4$be;
         break;
        }
       }
       $152 = $$lcssa131;$154 = 0;$156 = $$lcssa130;$c$4$lcssa = $c$4$be$lcssa;
      } else {
       $152 = $130;$154 = 0;$156 = 0;$c$4$lcssa = $c$124;
      }
      $149 = (_bitshift64Lshr(-1,-1,($128|0))|0);
      $150 = tempRet0;
      $151 = $152&255;
      $153 = ($151>>>0)>=($$123>>>0);
      $155 = ($154>>>0)>($150>>>0);
      $157 = ($156>>>0)>($149>>>0);
      $158 = ($154|0)==($150|0);
      $159 = $158 & $157;
      $160 = $155 | $159;
      $or$cond40 = $153 | $160;
      if ($or$cond40) {
       $$122 = $$123;$292 = $156;$293 = $154;$c$8 = $c$4$lcssa;
       label = 72;
       break;
      } else {
       $161 = $156;$162 = $154;$166 = $152;
      }
      while(1) {
       $163 = (_bitshift64Shl(($161|0),($162|0),($128|0))|0);
       $164 = tempRet0;
       $165 = $166&255;
       $167 = $165 | $163;
       $168 = HEAP32[$3>>2]|0;
       $169 = HEAP32[$4>>2]|0;
       $170 = ($168>>>0)<($169>>>0);
       if ($170) {
        $171 = ((($168)) + 1|0);
        HEAP32[$3>>2] = $171;
        $172 = HEAP8[$168>>0]|0;
        $173 = $172&255;
        $c$5$be = $173;
       } else {
        $174 = (___shgetc($f)|0);
        $c$5$be = $174;
       }
       $$sum15 = (($c$5$be) + 1)|0;
       $175 = (15965 + ($$sum15)|0);
       $176 = HEAP8[$175>>0]|0;
       $177 = $176&255;
       $178 = ($177>>>0)>=($$123>>>0);
       $179 = ($164>>>0)>($150>>>0);
       $180 = ($167>>>0)>($149>>>0);
       $181 = ($164|0)==($150|0);
       $182 = $181 & $180;
       $183 = $179 | $182;
       $or$cond = $178 | $183;
       if ($or$cond) {
        $$122 = $$123;$292 = $167;$293 = $164;$c$8 = $c$5$be;
        label = 72;
        break L63;
       } else {
        $161 = $167;$162 = $164;$166 = $176;
       }
      }
     }
     $$sum1865 = (($c$124) + 1)|0;
     $119 = (15965 + ($$sum1865)|0);
     $120 = HEAP8[$119>>0]|0;
     $121 = $120&255;
     $122 = ($121>>>0)<($$123>>>0);
     if ($122) {
      $186 = $121;$x$266 = 0;
      while(1) {
       $184 = Math_imul($x$266, $$123)|0;
       $185 = (($186) + ($184))|0;
       $187 = HEAP32[$3>>2]|0;
       $188 = HEAP32[$4>>2]|0;
       $189 = ($187>>>0)<($188>>>0);
       if ($189) {
        $190 = ((($187)) + 1|0);
        HEAP32[$3>>2] = $190;
        $191 = HEAP8[$187>>0]|0;
        $192 = $191&255;
        $c$6$be = $192;
       } else {
        $193 = (___shgetc($f)|0);
        $c$6$be = $193;
       }
       $$sum18 = (($c$6$be) + 1)|0;
       $194 = (15965 + ($$sum18)|0);
       $195 = HEAP8[$194>>0]|0;
       $196 = $195&255;
       $197 = ($196>>>0)<($$123>>>0);
       $198 = ($185>>>0)<(119304647);
       $199 = $198 & $197;
       if ($199) {
        $186 = $196;$x$266 = $185;
       } else {
        $$lcssa132 = $185;$$lcssa133 = $195;$c$6$be$lcssa = $c$6$be;
        break;
       }
      }
      $201 = $$lcssa133;$294 = $$lcssa132;$295 = 0;$c$6$lcssa = $c$6$be$lcssa;
     } else {
      $201 = $120;$294 = 0;$295 = 0;$c$6$lcssa = $c$124;
     }
     $200 = $201&255;
     $202 = ($200>>>0)<($$123>>>0);
     if ($202) {
      $203 = (___udivdi3(-1,-1,($$123|0),0)|0);
      $204 = tempRet0;
      $205 = $295;$207 = $294;$215 = $201;$c$753 = $c$6$lcssa;
      while(1) {
       $206 = ($205>>>0)>($204>>>0);
       $208 = ($207>>>0)>($203>>>0);
       $209 = ($205|0)==($204|0);
       $210 = $209 & $208;
       $211 = $206 | $210;
       if ($211) {
        $$122 = $$123;$292 = $207;$293 = $205;$c$8 = $c$753;
        label = 72;
        break L63;
       }
       $212 = (___muldi3(($207|0),($205|0),($$123|0),0)|0);
       $213 = tempRet0;
       $214 = $215&255;
       $216 = $214 ^ -1;
       $217 = ($213>>>0)>(4294967295);
       $218 = ($212>>>0)>($216>>>0);
       $219 = ($213|0)==(-1);
       $220 = $219 & $218;
       $221 = $217 | $220;
       if ($221) {
        $$122 = $$123;$292 = $207;$293 = $205;$c$8 = $c$753;
        label = 72;
        break L63;
       }
       $222 = (_i64Add(($214|0),0,($212|0),($213|0))|0);
       $223 = tempRet0;
       $224 = HEAP32[$3>>2]|0;
       $225 = HEAP32[$4>>2]|0;
       $226 = ($224>>>0)<($225>>>0);
       if ($226) {
        $227 = ((($224)) + 1|0);
        HEAP32[$3>>2] = $227;
        $228 = HEAP8[$224>>0]|0;
        $229 = $228&255;
        $c$7$be = $229;
       } else {
        $230 = (___shgetc($f)|0);
        $c$7$be = $230;
       }
       $$sum19 = (($c$7$be) + 1)|0;
       $231 = (15965 + ($$sum19)|0);
       $232 = HEAP8[$231>>0]|0;
       $233 = $232&255;
       $234 = ($233>>>0)<($$123>>>0);
       if ($234) {
        $205 = $223;$207 = $222;$215 = $232;$c$753 = $c$7$be;
       } else {
        $$122 = $$123;$292 = $222;$293 = $223;$c$8 = $c$7$be;
        label = 72;
        break;
       }
      }
     } else {
      $$122 = $$123;$292 = $294;$293 = $295;$c$8 = $c$6$lcssa;
      label = 72;
     }
    }
   } while(0);
   if ((label|0) == 72) {
    $$sum16 = (($c$8) + 1)|0;
    $235 = (15965 + ($$sum16)|0);
    $236 = HEAP8[$235>>0]|0;
    $237 = $236&255;
    $238 = ($237>>>0)<($$122>>>0);
    if ($238) {
     while(1) {
      $239 = HEAP32[$3>>2]|0;
      $240 = HEAP32[$4>>2]|0;
      $241 = ($239>>>0)<($240>>>0);
      if ($241) {
       $242 = ((($239)) + 1|0);
       HEAP32[$3>>2] = $242;
       $243 = HEAP8[$239>>0]|0;
       $244 = $243&255;
       $c$9$be = $244;
      } else {
       $245 = (___shgetc($f)|0);
       $c$9$be = $245;
      }
      $$sum17 = (($c$9$be) + 1)|0;
      $246 = (15965 + ($$sum17)|0);
      $247 = HEAP8[$246>>0]|0;
      $248 = $247&255;
      $249 = ($248>>>0)<($$122>>>0);
      if (!($249)) {
       break;
      }
     }
     $250 = (___errno_location()|0);
     HEAP32[$250>>2] = 34;
     $251 = $0 & 1;
     $252 = ($251|0)==(0);
     $253 = (0)==(0);
     $254 = $252 & $253;
     $neg$0$ = $254 ? $neg$0 : 0;
     $259 = $1;$261 = $0;$neg$1 = $neg$0$;
    } else {
     $259 = $293;$261 = $292;$neg$1 = $neg$0;
    }
   }
   $255 = HEAP32[$4>>2]|0;
   $256 = ($255|0)==(0|0);
   if (!($256)) {
    $257 = HEAP32[$3>>2]|0;
    $258 = ((($257)) + -1|0);
    HEAP32[$3>>2] = $258;
   }
   $260 = ($259>>>0)<($1>>>0);
   $262 = ($261>>>0)<($0>>>0);
   $263 = ($259|0)==($1|0);
   $264 = $263 & $262;
   $265 = $260 | $264;
   if (!($265)) {
    $266 = $0 & 1;
    $267 = ($266|0)!=(0);
    $268 = (0)!=(0);
    $269 = $267 | $268;
    $270 = ($neg$1|0)!=(0);
    $or$cond12 = $269 | $270;
    if (!($or$cond12)) {
     $271 = (___errno_location()|0);
     HEAP32[$271>>2] = 34;
     $272 = (_i64Add(($0|0),($1|0),-1,-1)|0);
     $273 = tempRet0;
     $286 = $273;$287 = $272;
     break;
    }
    $274 = ($259>>>0)>($1>>>0);
    $275 = ($261>>>0)>($0>>>0);
    $276 = ($259|0)==($1|0);
    $277 = $276 & $275;
    $278 = $274 | $277;
    if ($278) {
     $279 = (___errno_location()|0);
     HEAP32[$279>>2] = 34;
     $286 = $1;$287 = $0;
     break;
    }
   }
   $280 = ($neg$1|0)<(0);
   $281 = $280 << 31 >> 31;
   $282 = $261 ^ $neg$1;
   $283 = $259 ^ $281;
   $284 = (_i64Subtract(($282|0),($283|0),($neg$1|0),($281|0))|0);
   $285 = tempRet0;
   $286 = $285;$287 = $284;
  }
 } while(0);
 tempRet0 = ($286);
 return ($287|0);
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 104|0);
 HEAP32[$0>>2] = $lim;
 $1 = ((($f)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($f)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = ((($f)) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($lim|0)!=(0);
 $10 = ($7|0)>($lim|0);
 $or$cond = $9 & $10;
 if ($or$cond) {
  $11 = (($4) + ($lim)|0);
  $12 = ((($f)) + 100|0);
  HEAP32[$12>>2] = $11;
 } else {
  $13 = ((($f)) + 100|0);
  HEAP32[$13>>2] = $5;
 }
 return;
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert3 = 0, $$pre = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = ((($f)) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if ($7) {
   label = 4;
  } else {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = ((($f)) + 8|0);
   if ($10) {
    $$pre = HEAP32[$$phi$trans$insert>>2]|0;
    $11 = $$pre;
    $26 = $$pre;$41 = $11;
    label = 9;
   } else {
    $12 = HEAP32[$$phi$trans$insert>>2]|0;
    $13 = ((($f)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $12;
    $16 = $14;
    $17 = (($15) - ($16))|0;
    $18 = ((($f)) + 108|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (($9) - ($19))|0;
    $21 = (($20) + -1)|0;
    $22 = ($17|0)>($21|0);
    if ($22) {
     $23 = (($14) + ($21)|0);
     $24 = ((($f)) + 100|0);
     HEAP32[$24>>2] = $23;
     $27 = $12;
    } else {
     $26 = $15;$41 = $12;
     label = 9;
    }
   }
   if ((label|0) == 9) {
    $25 = ((($f)) + 100|0);
    HEAP32[$25>>2] = $26;
    $27 = $41;
   }
   $28 = ($27|0)==(0|0);
   $$phi$trans$insert3 = ((($f)) + 4|0);
   $$pre4 = HEAP32[$$phi$trans$insert3>>2]|0;
   if (!($28)) {
    $29 = $27;
    $30 = $$pre4;
    $31 = ((($f)) + 108|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (($29) + 1)|0;
    $34 = (($33) - ($30))|0;
    $35 = (($34) + ($32))|0;
    HEAP32[$31>>2] = $35;
   }
   $36 = ((($$pre4)) + -1|0);
   $37 = HEAP8[$36>>0]|0;
   $38 = $37&255;
   $39 = ($38|0)==($6|0);
   if ($39) {
    $$0 = $6;
   } else {
    $40 = $6&255;
    HEAP8[$36>>0] = $40;
    $$0 = $6;
   }
  }
 }
 if ((label|0) == 4) {
  $8 = ((($f)) + 100|0);
  HEAP32[$8>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___syscall_ret($r) {
 $r = $r|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($r>>>0)>(4294963200);
 if ($0) {
  $1 = (0 - ($r))|0;
  $2 = (___errno_location()|0);
  HEAP32[$2>>2] = $1;
  $$0 = -1;
 } else {
  $$0 = $r;
 }
 return ($$0|0);
}
function _setlocale($category,$locale) {
 $category = $category|0;
 $locale = $locale|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (16231|0);
}
function _copysign($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = $1 & 2147483647;
 $5 = $3 & -2147483648;
 $6 = $5 | $4;
 HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $6;$7 = +HEAPF64[tempDoublePtr>>3];
 return (+$7);
}
function _copysignl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_copysign($x,$y));
 return (+$0);
}
function _fmod($x,$y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $$lcssa7 = 0, $$x = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0.0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0;
 var $ex$0$lcssa = 0, $ex$026 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$212 = 0, $ex$3$lcssa = 0, $ex$39 = 0, $ey$0$lcssa = 0, $ey$020 = 0, $ey$1$ph = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $5 = tempRet0;
 $6 = $4 & 2047;
 $7 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $8 = tempRet0;
 $9 = $7 & 2047;
 $10 = $1 & -2147483648;
 $11 = (_bitshift64Shl(($2|0),($3|0),1)|0);
 $12 = tempRet0;
 $13 = ($11|0)==(0);
 $14 = ($12|0)==(0);
 $15 = $13 & $14;
 L1: do {
  if ($15) {
   label = 3;
  } else {
   $16 = $3 & 2147483647;
   $17 = ($16>>>0)>(2146435072);
   $18 = ($2>>>0)>(0);
   $19 = ($16|0)==(2146435072);
   $20 = $19 & $18;
   $21 = $17 | $20;
   $22 = ($6|0)==(2047);
   $or$cond = $21 | $22;
   if ($or$cond) {
    label = 3;
   } else {
    $25 = (_bitshift64Shl(($0|0),($1|0),1)|0);
    $26 = tempRet0;
    $27 = ($26>>>0)>($12>>>0);
    $28 = ($25>>>0)>($11>>>0);
    $29 = ($26|0)==($12|0);
    $30 = $29 & $28;
    $31 = $27 | $30;
    if (!($31)) {
     $32 = ($25|0)==($11|0);
     $33 = ($26|0)==($12|0);
     $34 = $32 & $33;
     $35 = $x * 0.0;
     $$x = $34 ? $35 : $x;
     return (+$$x);
    }
    $36 = ($6|0)==(0);
    if ($36) {
     $37 = (_bitshift64Shl(($0|0),($1|0),12)|0);
     $38 = tempRet0;
     $39 = ($38|0)>(-1);
     $40 = ($37>>>0)>(4294967295);
     $41 = ($38|0)==(-1);
     $42 = $41 & $40;
     $43 = $39 | $42;
     if ($43) {
      $45 = $37;$46 = $38;$ex$026 = 0;
      while(1) {
       $44 = (($ex$026) + -1)|0;
       $47 = (_bitshift64Shl(($45|0),($46|0),1)|0);
       $48 = tempRet0;
       $49 = ($48|0)>(-1);
       $50 = ($47>>>0)>(4294967295);
       $51 = ($48|0)==(-1);
       $52 = $51 & $50;
       $53 = $49 | $52;
       if ($53) {
        $45 = $47;$46 = $48;$ex$026 = $44;
       } else {
        $ex$0$lcssa = $44;
        break;
       }
      }
     } else {
      $ex$0$lcssa = 0;
     }
     $54 = (1 - ($ex$0$lcssa))|0;
     $55 = (_bitshift64Shl(($0|0),($1|0),($54|0))|0);
     $56 = tempRet0;
     $83 = $55;$84 = $56;$ex$1 = $ex$0$lcssa;
    } else {
     $57 = $1 & 1048575;
     $58 = $57 | 1048576;
     $83 = $0;$84 = $58;$ex$1 = $6;
    }
    $59 = ($9|0)==(0);
    if ($59) {
     $60 = (_bitshift64Shl(($2|0),($3|0),12)|0);
     $61 = tempRet0;
     $62 = ($61|0)>(-1);
     $63 = ($60>>>0)>(4294967295);
     $64 = ($61|0)==(-1);
     $65 = $64 & $63;
     $66 = $62 | $65;
     if ($66) {
      $68 = $60;$69 = $61;$ey$020 = 0;
      while(1) {
       $67 = (($ey$020) + -1)|0;
       $70 = (_bitshift64Shl(($68|0),($69|0),1)|0);
       $71 = tempRet0;
       $72 = ($71|0)>(-1);
       $73 = ($70>>>0)>(4294967295);
       $74 = ($71|0)==(-1);
       $75 = $74 & $73;
       $76 = $72 | $75;
       if ($76) {
        $68 = $70;$69 = $71;$ey$020 = $67;
       } else {
        $ey$0$lcssa = $67;
        break;
       }
      }
     } else {
      $ey$0$lcssa = 0;
     }
     $77 = (1 - ($ey$0$lcssa))|0;
     $78 = (_bitshift64Shl(($2|0),($3|0),($77|0))|0);
     $79 = tempRet0;
     $85 = $78;$86 = $79;$ey$1$ph = $ey$0$lcssa;
    } else {
     $80 = $3 & 1048575;
     $81 = $80 | 1048576;
     $85 = $2;$86 = $81;$ey$1$ph = $9;
    }
    $82 = ($ex$1|0)>($ey$1$ph|0);
    $87 = (_i64Subtract(($83|0),($84|0),($85|0),($86|0))|0);
    $88 = tempRet0;
    $89 = ($88|0)>(-1);
    $90 = ($87>>>0)>(4294967295);
    $91 = ($88|0)==(-1);
    $92 = $91 & $90;
    $93 = $89 | $92;
    L23: do {
     if ($82) {
      $152 = $93;$153 = $87;$154 = $88;$94 = $83;$96 = $84;$ex$212 = $ex$1;
      while(1) {
       if ($152) {
        $95 = ($94|0)==($85|0);
        $97 = ($96|0)==($86|0);
        $98 = $95 & $97;
        if ($98) {
         break;
        } else {
         $100 = $153;$101 = $154;
        }
       } else {
        $100 = $94;$101 = $96;
       }
       $102 = (_bitshift64Shl(($100|0),($101|0),1)|0);
       $103 = tempRet0;
       $104 = (($ex$212) + -1)|0;
       $105 = ($104|0)>($ey$1$ph|0);
       $106 = (_i64Subtract(($102|0),($103|0),($85|0),($86|0))|0);
       $107 = tempRet0;
       $108 = ($107|0)>(-1);
       $109 = ($106>>>0)>(4294967295);
       $110 = ($107|0)==(-1);
       $111 = $110 & $109;
       $112 = $108 | $111;
       if ($105) {
        $152 = $112;$153 = $106;$154 = $107;$94 = $102;$96 = $103;$ex$212 = $104;
       } else {
        $$lcssa7 = $112;$113 = $102;$115 = $103;$155 = $106;$156 = $107;$ex$2$lcssa = $104;
        break L23;
       }
      }
      $99 = $x * 0.0;
      $$0 = $99;
      break L1;
     } else {
      $$lcssa7 = $93;$113 = $83;$115 = $84;$155 = $87;$156 = $88;$ex$2$lcssa = $ex$1;
     }
    } while(0);
    if ($$lcssa7) {
     $114 = ($113|0)==($85|0);
     $116 = ($115|0)==($86|0);
     $117 = $114 & $116;
     if ($117) {
      $125 = $x * 0.0;
      $$0 = $125;
      break;
     } else {
      $118 = $156;$120 = $155;
     }
    } else {
     $118 = $115;$120 = $113;
    }
    $119 = ($118>>>0)<(1048576);
    $121 = ($120>>>0)<(0);
    $122 = ($118|0)==(1048576);
    $123 = $122 & $121;
    $124 = $119 | $123;
    if ($124) {
     $126 = $120;$127 = $118;$ex$39 = $ex$2$lcssa;
     while(1) {
      $128 = (_bitshift64Shl(($126|0),($127|0),1)|0);
      $129 = tempRet0;
      $130 = (($ex$39) + -1)|0;
      $131 = ($129>>>0)<(1048576);
      $132 = ($128>>>0)<(0);
      $133 = ($129|0)==(1048576);
      $134 = $133 & $132;
      $135 = $131 | $134;
      if ($135) {
       $126 = $128;$127 = $129;$ex$39 = $130;
      } else {
       $137 = $128;$138 = $129;$ex$3$lcssa = $130;
       break;
      }
     }
    } else {
     $137 = $120;$138 = $118;$ex$3$lcssa = $ex$2$lcssa;
    }
    $136 = ($ex$3$lcssa|0)>(0);
    if ($136) {
     $139 = (_i64Add(($137|0),($138|0),0,-1048576)|0);
     $140 = tempRet0;
     $141 = (_bitshift64Shl(($ex$3$lcssa|0),0,52)|0);
     $142 = tempRet0;
     $143 = $139 | $141;
     $144 = $140 | $142;
     $149 = $144;$151 = $143;
    } else {
     $145 = (1 - ($ex$3$lcssa))|0;
     $146 = (_bitshift64Lshr(($137|0),($138|0),($145|0))|0);
     $147 = tempRet0;
     $149 = $147;$151 = $146;
    }
    $148 = $149 | $10;
    HEAP32[tempDoublePtr>>2] = $151;HEAP32[tempDoublePtr+4>>2] = $148;$150 = +HEAPF64[tempDoublePtr>>3];
    $$0 = $150;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $23 = $x * $y;
  $24 = $23 / $23;
  $$0 = $24;
 }
 return (+$$0);
}
function _fmodl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_fmod($x,$y));
 return (+$0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 switch ($4|0) {
 case 0:  {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  break;
 }
 case 2047:  {
  $$0 = $x;
  break;
 }
 default: {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
 }
 }
 return (+$$0);
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 return (+$0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1023);
 if ($0) {
  $1 = $x * 8.9884656743115795E+307;
  $2 = (($n) + -1023)|0;
  $3 = ($2|0)>(1023);
  if ($3) {
   $4 = $1 * 8.9884656743115795E+307;
   $5 = (($n) + -2046)|0;
   $6 = ($5|0)>(1023);
   $$ = $6 ? 1023 : $5;
   $$0 = $$;$y$0 = $4;
  } else {
   $$0 = $2;$y$0 = $1;
  }
 } else {
  $7 = ($n|0)<(-1022);
  if ($7) {
   $8 = $x * 2.2250738585072014E-308;
   $9 = (($n) + 1022)|0;
   $10 = ($9|0)<(-1022);
   if ($10) {
    $11 = $8 * 2.2250738585072014E-308;
    $12 = (($n) + 2044)|0;
    $13 = ($12|0)<(-1022);
    $$1 = $13 ? -1022 : $12;
    $$0 = $$1;$y$0 = $11;
   } else {
    $$0 = $9;$y$0 = $8;
   }
  } else {
   $$0 = $n;$y$0 = $x;
  }
 }
 $14 = (($$0) + 1023)|0;
 $15 = (_bitshift64Shl(($14|0),0,52)|0);
 $16 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
 $18 = $y$0 * $17;
 return (+$18);
}
function _scalbnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 return (+$0);
}
function _mbrtowc($wc,$src,$n,$st) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$024 = 0, $$1 = 0, $$lcssa = 0, $$lcssa35 = 0, $$st = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$05 = 0, $c$1 = 0, $c$2 = 0, $dummy = 0, $dummy$wc = 0, $s$06 = 0, $s$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dummy = sp;
 $0 = ($st|0)==(0|0);
 $$st = $0 ? 6048 : $st;
 $1 = HEAP32[$$st>>2]|0;
 $2 = ($src|0)==(0|0);
 L1: do {
  if ($2) {
   $3 = ($1|0)==(0);
   if ($3) {
    $$0 = 0;
   } else {
    label = 15;
   }
  } else {
   $4 = ($wc|0)==(0|0);
   $dummy$wc = $4 ? $dummy : $wc;
   $5 = ($n|0)==(0);
   if ($5) {
    $$0 = -2;
   } else {
    $6 = ($1|0)==(0);
    if ($6) {
     $7 = HEAP8[$src>>0]|0;
     $8 = $7&255;
     $9 = ($7<<24>>24)>(-1);
     if ($9) {
      HEAP32[$dummy$wc>>2] = $8;
      $10 = ($7<<24>>24)!=(0);
      $11 = $10&1;
      $$0 = $11;
      break;
     }
     $12 = (($8) + -194)|0;
     $13 = ($12>>>0)>(50);
     if ($13) {
      label = 15;
      break;
     }
     $14 = ((($src)) + 1|0);
     $15 = (5796 + ($12<<2)|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($n) + -1)|0;
     $18 = ($17|0)==(0);
     if ($18) {
      $c$2 = $16;
     } else {
      $$024 = $17;$c$05 = $16;$s$06 = $14;
      label = 9;
     }
    } else {
     $$024 = $n;$c$05 = $1;$s$06 = $src;
     label = 9;
    }
    L11: do {
     if ((label|0) == 9) {
      $19 = HEAP8[$s$06>>0]|0;
      $20 = $19&255;
      $21 = $20 >>> 3;
      $22 = (($21) + -16)|0;
      $23 = $c$05 >> 26;
      $24 = (($21) + ($23))|0;
      $25 = $22 | $24;
      $26 = ($25>>>0)>(7);
      if ($26) {
       label = 15;
       break L1;
      } else {
       $$1 = $$024;$30 = $19;$c$1 = $c$05;$s$1 = $s$06;
      }
      while(1) {
       $27 = $c$1 << 6;
       $28 = ((($s$1)) + 1|0);
       $29 = $30&255;
       $31 = (($29) + -128)|0;
       $32 = $31 | $27;
       $33 = (($$1) + -1)|0;
       $34 = ($32|0)<(0);
       if (!($34)) {
        $$lcssa = $32;$$lcssa35 = $33;
        break;
       }
       $36 = ($33|0)==(0);
       if ($36) {
        $c$2 = $32;
        break L11;
       }
       $37 = HEAP8[$28>>0]|0;
       $38 = $37 & -64;
       $39 = ($38<<24>>24)==(-128);
       if ($39) {
        $$1 = $33;$30 = $37;$c$1 = $32;$s$1 = $28;
       } else {
        label = 15;
        break L1;
       }
      }
      HEAP32[$$st>>2] = 0;
      HEAP32[$dummy$wc>>2] = $$lcssa;
      $35 = (($n) - ($$lcssa35))|0;
      $$0 = $35;
      break L1;
     }
    } while(0);
    HEAP32[$$st>>2] = $c$2;
    $$0 = -2;
   }
  }
 } while(0);
 if ((label|0) == 15) {
  HEAP32[$$st>>2] = 0;
  $40 = (___errno_location()|0);
  HEAP32[$40>>2] = 84;
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _mbsinit($st) {
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($st|0)==(0|0);
 if ($0) {
  $4 = 1;
 } else {
  $1 = HEAP32[$st>>2]|0;
  $2 = ($1|0)==(0);
  $4 = $2;
 }
 $3 = $4&1;
 return ($3|0);
}
function _mbsrtowcs($ws,$src,$wn,$st) {
 $ws = $ws|0;
 $src = $src|0;
 $wn = $wn|0;
 $st = $st|0;
 var $$0 = 0, $$02$ph = 0, $$0219 = 0, $$03 = 0, $$1 = 0, $$1$lcssa = 0, $$14$lcssa = 0, $$1415 = 0, $$2 = 0, $$2$lcssa = 0, $$25 = 0, $$25$lcssa = 0, $$3 = 0, $$36 = 0, $$4 = 0, $$434 = 0, $$47$ph = 0, $$4718 = 0, $$48 = 0, $$5 = 0;
 var $$5$lcssa = 0, $$6 = 0, $$6$lcssa = 0, $$7 = 0, $$8 = 0, $$833 = 0, $$in = 0, $$lcssa102 = 0, $$lcssa90 = 0, $$lcssa94 = 0, $$lcssa96 = 0, $$lcssa97 = 0, $$lcssa98 = 0, $$old1 = 0, $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $c$2 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $or$cond = 0, $s$0 = 0, $s$1$lcssa = 0, $s$10 = 0, $s$1035 = 0, $s$109 = 0, $s$116 = 0, $s$2 = 0, $s$2$lcssa = 0, $s$3 = 0, $s$4 = 0, $s$5$lcssa = 0, $s$5$ph = 0;
 var $s$520 = 0, $s$6 = 0, $s$6$lcssa = 0, $s$7 = 0, $s$7$lcssa = 0, $s$8 = 0, $s$9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$src>>2]|0;
 $1 = ($st|0)==(0|0);
 if ($1) {
  label = 5;
 } else {
  $2 = HEAP32[$st>>2]|0;
  $3 = ($2|0)==(0);
  if ($3) {
   label = 5;
  } else {
   $4 = ($ws|0)==(0|0);
   if ($4) {
    $$36 = $wn;$c$2 = $2;$s$3 = $0;
    label = 16;
   } else {
    HEAP32[$st>>2] = 0;
    $$3 = $ws;$$7 = $wn;$c$4 = $2;$s$8 = $0;
    label = 37;
   }
  }
 }
 if ((label|0) == 5) {
  $5 = ($ws|0)==(0|0);
  if ($5) {
   $$03 = $wn;$s$0 = $0;
   label = 7;
  } else {
   $$02$ph = $ws;$$47$ph = $wn;$s$5$ph = $0;
   label = 6;
  }
 }
 L7: while(1) {
  if ((label|0) == 6) {
   label = 0;
   $6 = ($$47$ph|0)==(0);
   if ($6) {
    $s$5$lcssa = $s$5$ph;
    label = 26;
    break;
   } else {
    $$0219 = $$02$ph;$$4718 = $$47$ph;$s$520 = $s$5$ph;
   }
   while(1) {
    $63 = HEAP8[$s$520>>0]|0;
    $64 = $63&255;
    $65 = (($64) + -1)|0;
    $66 = ($65>>>0)<(127);
    do {
     if ($66) {
      $67 = $s$520;
      $68 = $67 & 3;
      $69 = ($68|0)==(0);
      $70 = ($$4718>>>0)>(4);
      $or$cond = $70 & $69;
      if ($or$cond) {
       $$1 = $$0219;$$5 = $$4718;$s$6 = $s$520;
       while(1) {
        $71 = HEAP32[$s$6>>2]|0;
        $72 = (($71) + -16843009)|0;
        $73 = $72 | $71;
        $74 = $73 & -2139062144;
        $75 = ($74|0)==(0);
        if (!($75)) {
         $$1$lcssa = $$1;$$5$lcssa = $$5;$$lcssa94 = $71;$s$6$lcssa = $s$6;
         label = 32;
         break;
        }
        $76 = ((($s$6)) + 1|0);
        $77 = $71 & 255;
        $78 = ((($$1)) + 4|0);
        HEAP32[$$1>>2] = $77;
        $79 = ((($s$6)) + 2|0);
        $80 = HEAP8[$76>>0]|0;
        $81 = $80&255;
        $82 = ((($$1)) + 8|0);
        HEAP32[$78>>2] = $81;
        $83 = ((($s$6)) + 3|0);
        $84 = HEAP8[$79>>0]|0;
        $85 = $84&255;
        $86 = ((($$1)) + 12|0);
        HEAP32[$82>>2] = $85;
        $87 = ((($s$6)) + 4|0);
        $88 = HEAP8[$83>>0]|0;
        $89 = $88&255;
        $90 = ((($$1)) + 16|0);
        HEAP32[$86>>2] = $89;
        $91 = (($$5) + -4)|0;
        $$old1 = ($91>>>0)>(4);
        if ($$old1) {
         $$1 = $90;$$5 = $91;$s$6 = $87;
        } else {
         $$lcssa96 = $87;$$lcssa97 = $90;$$lcssa98 = $91;
         label = 31;
         break;
        }
       }
       if ((label|0) == 31) {
        label = 0;
        $$pre$pre = HEAP8[$$lcssa96>>0]|0;
        $$2 = $$lcssa97;$$6 = $$lcssa98;$94 = $$pre$pre;$s$7 = $$lcssa96;
        break;
       }
       else if ((label|0) == 32) {
        label = 0;
        $92 = $$lcssa94&255;
        $$2 = $$1$lcssa;$$6 = $$5$lcssa;$94 = $92;$s$7 = $s$6$lcssa;
        break;
       }
      } else {
       $$2 = $$0219;$$6 = $$4718;$94 = $63;$s$7 = $s$520;
      }
     } else {
      $$2 = $$0219;$$6 = $$4718;$94 = $63;$s$7 = $s$520;
     }
    } while(0);
    $93 = $94&255;
    $95 = (($93) + -1)|0;
    $96 = ($95>>>0)<(127);
    if (!($96)) {
     $$2$lcssa = $$2;$$6$lcssa = $$6;$$lcssa102 = $93;$s$7$lcssa = $s$7;
     break;
    }
    $97 = ((($s$7)) + 1|0);
    $98 = ((($$2)) + 4|0);
    HEAP32[$$2>>2] = $93;
    $99 = (($$6) + -1)|0;
    $100 = ($99|0)==(0);
    if ($100) {
     $s$5$lcssa = $97;
     label = 26;
     break L7;
    } else {
     $$0219 = $98;$$4718 = $99;$s$520 = $97;
    }
   }
   $101 = (($$lcssa102) + -194)|0;
   $102 = ($101>>>0)>(50);
   if ($102) {
    $$434 = $$2$lcssa;$$833 = $$6$lcssa;$s$1035 = $s$7$lcssa;
    label = 48;
    break;
   }
   $103 = ((($s$7$lcssa)) + 1|0);
   $104 = (5796 + ($101<<2)|0);
   $105 = HEAP32[$104>>2]|0;
   $$3 = $$2$lcssa;$$7 = $$6$lcssa;$c$4 = $105;$s$8 = $103;
   label = 37;
   continue;
  }
  else if ((label|0) == 7) {
   label = 0;
   $7 = HEAP8[$s$0>>0]|0;
   $8 = $7&255;
   $9 = (($8) + -1)|0;
   $10 = ($9>>>0)<(127);
   if ($10) {
    $11 = $s$0;
    $12 = $11 & 3;
    $13 = ($12|0)==(0);
    if ($13) {
     $14 = HEAP32[$s$0>>2]|0;
     $15 = (($14) + -16843009)|0;
     $16 = $15 | $14;
     $17 = $16 & -2139062144;
     $18 = ($17|0)==(0);
     if ($18) {
      $$1415 = $$03;$s$116 = $s$0;
      while(1) {
       $19 = ((($s$116)) + 4|0);
       $20 = (($$1415) + -4)|0;
       $21 = HEAP32[$19>>2]|0;
       $22 = (($21) + -16843009)|0;
       $23 = $22 | $21;
       $24 = $23 & -2139062144;
       $25 = ($24|0)==(0);
       if ($25) {
        $$1415 = $20;$s$116 = $19;
       } else {
        $$14$lcssa = $20;$$in = $21;$s$1$lcssa = $19;
        break;
       }
      }
     } else {
      $$14$lcssa = $$03;$$in = $14;$s$1$lcssa = $s$0;
     }
     $26 = $$in&255;
     $$25 = $$14$lcssa;$28 = $26;$s$2 = $s$1$lcssa;
    } else {
     $$25 = $$03;$28 = $7;$s$2 = $s$0;
    }
   } else {
    $$25 = $$03;$28 = $7;$s$2 = $s$0;
   }
   $27 = $28&255;
   $29 = (($27) + -1)|0;
   $30 = ($29>>>0)<(127);
   if ($30) {
    $31 = ((($s$2)) + 1|0);
    $32 = (($$25) + -1)|0;
    $$03 = $32;$s$0 = $31;
    label = 7;
    continue;
   } else {
    $$25$lcssa = $$25;$$lcssa90 = $27;$s$2$lcssa = $s$2;
   }
   $33 = (($$lcssa90) + -194)|0;
   $34 = ($33>>>0)>(50);
   if ($34) {
    $$434 = $ws;$$833 = $$25$lcssa;$s$1035 = $s$2$lcssa;
    label = 48;
    break;
   }
   $35 = ((($s$2$lcssa)) + 1|0);
   $36 = (5796 + ($33<<2)|0);
   $37 = HEAP32[$36>>2]|0;
   $$36 = $$25$lcssa;$c$2 = $37;$s$3 = $35;
   label = 16;
   continue;
  }
  else if ((label|0) == 16) {
   label = 0;
   $38 = HEAP8[$s$3>>0]|0;
   $39 = $38&255;
   $40 = $39 >>> 3;
   $41 = (($40) + -16)|0;
   $42 = $c$2 >> 26;
   $43 = (($40) + ($42))|0;
   $44 = $41 | $43;
   $45 = ($44>>>0)>(7);
   if ($45) {
    label = 17;
    break;
   }
   $47 = ((($s$3)) + 1|0);
   $48 = $c$2 & 33554432;
   $49 = ($48|0)==(0);
   if ($49) {
    $s$4 = $47;
   } else {
    $50 = HEAP8[$47>>0]|0;
    $51 = $50 & -64;
    $52 = ($51<<24>>24)==(-128);
    if (!($52)) {
     label = 20;
     break;
    }
    $54 = ((($s$3)) + 2|0);
    $55 = $c$2 & 524288;
    $56 = ($55|0)==(0);
    if ($56) {
     $s$4 = $54;
    } else {
     $57 = HEAP8[$54>>0]|0;
     $58 = $57 & -64;
     $59 = ($58<<24>>24)==(-128);
     if (!($59)) {
      label = 23;
      break;
     }
     $61 = ((($s$3)) + 3|0);
     $s$4 = $61;
    }
   }
   $62 = (($$36) + -1)|0;
   $$03 = $62;$s$0 = $s$4;
   label = 7;
   continue;
  }
  else if ((label|0) == 37) {
   label = 0;
   $106 = HEAP8[$s$8>>0]|0;
   $107 = $106&255;
   $108 = $107 >>> 3;
   $109 = (($108) + -16)|0;
   $110 = $c$4 >> 26;
   $111 = (($108) + ($110))|0;
   $112 = $109 | $111;
   $113 = ($112>>>0)>(7);
   if ($113) {
    label = 38;
    break;
   }
   $115 = $c$4 << 6;
   $116 = ((($s$8)) + 1|0);
   $117 = (($107) + -128)|0;
   $118 = $117 | $115;
   $119 = ($118|0)<(0);
   if ($119) {
    $120 = HEAP8[$116>>0]|0;
    $121 = $120&255;
    $122 = $121 & 192;
    $123 = ($122|0)==(128);
    if (!($123)) {
     label = 41;
     break;
    }
    $125 = $118 << 6;
    $126 = ((($s$8)) + 2|0);
    $127 = (($121) + -128)|0;
    $128 = $127 | $125;
    $129 = ($128|0)<(0);
    if ($129) {
     $130 = HEAP8[$126>>0]|0;
     $131 = $130&255;
     $132 = $131 & 192;
     $133 = ($132|0)==(128);
     if (!($133)) {
      label = 44;
      break;
     }
     $135 = $128 << 6;
     $136 = ((($s$8)) + 3|0);
     $137 = (($131) + -128)|0;
     $138 = $137 | $135;
     $c$5 = $138;$s$9 = $136;
    } else {
     $c$5 = $128;$s$9 = $126;
    }
   } else {
    $c$5 = $118;$s$9 = $116;
   }
   $139 = ((($$3)) + 4|0);
   HEAP32[$$3>>2] = $c$5;
   $140 = (($$7) + -1)|0;
   $$02$ph = $139;$$47$ph = $140;$s$5$ph = $s$9;
   label = 6;
   continue;
  }
 }
 if ((label|0) == 17) {
  $46 = ((($s$3)) + -1|0);
  $$4 = $ws;$$8 = $$36;$c$6 = $c$2;$s$10 = $46;
  label = 47;
 }
 else if ((label|0) == 20) {
  $53 = ((($s$3)) + -1|0);
  $$4 = $ws;$$8 = $$36;$c$6 = $c$2;$s$10 = $53;
  label = 47;
 }
 else if ((label|0) == 23) {
  $60 = ((($s$3)) + -1|0);
  $$4 = $ws;$$8 = $$36;$c$6 = $c$2;$s$10 = $60;
  label = 47;
 }
 else if ((label|0) == 26) {
  HEAP32[$src>>2] = $s$5$lcssa;
  $$0 = $wn;
 }
 else if ((label|0) == 38) {
  $114 = ((($s$8)) + -1|0);
  $$4 = $$3;$$8 = $$7;$c$6 = $c$4;$s$10 = $114;
  label = 47;
 }
 else if ((label|0) == 41) {
  $124 = ((($s$8)) + -1|0);
  $$48 = $$3;$s$109 = $124;
  label = 52;
 }
 else if ((label|0) == 44) {
  $134 = ((($s$8)) + -1|0);
  $$48 = $$3;$s$109 = $134;
  label = 52;
 }
 if ((label|0) == 47) {
  $141 = ($c$6|0)==(0);
  if ($141) {
   $$434 = $$4;$$833 = $$8;$s$1035 = $s$10;
   label = 48;
  } else {
   $$48 = $$4;$s$109 = $s$10;
   label = 52;
  }
 }
 if ((label|0) == 48) {
  $142 = HEAP8[$s$1035>>0]|0;
  $143 = ($142<<24>>24)==(0);
  if ($143) {
   $144 = ($$434|0)==(0|0);
   if (!($144)) {
    HEAP32[$$434>>2] = 0;
    HEAP32[$src>>2] = 0;
   }
   $145 = (($wn) - ($$833))|0;
   $$0 = $145;
  } else {
   $$48 = $$434;$s$109 = $s$1035;
   label = 52;
  }
 }
 if ((label|0) == 52) {
  $146 = (___errno_location()|0);
  HEAP32[$146>>2] = 84;
  $147 = ($$48|0)==(0|0);
  if ($147) {
   $$0 = -1;
  } else {
   HEAP32[$src>>2] = $s$109;
   $$0 = -1;
  }
 }
 return ($$0|0);
}
function _mbstowcs($ws,$s,$wn) {
 $ws = $ws|0;
 $s = $s|0;
 $wn = $wn|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP32[$0>>2] = $s;
 $1 = (_mbsrtowcs($ws,$0,$wn,0)|0);
 STACKTOP = sp;return ($1|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 do {
  if ($0) {
   $$0 = 1;
  } else {
   $1 = ($wc>>>0)<(128);
   if ($1) {
    $2 = $wc&255;
    HEAP8[$s>>0] = $2;
    $$0 = 1;
    break;
   }
   $3 = ($wc>>>0)<(2048);
   if ($3) {
    $4 = $wc >>> 6;
    $5 = $4 | 192;
    $6 = $5&255;
    $7 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $6;
    $8 = $wc & 63;
    $9 = $8 | 128;
    $10 = $9&255;
    HEAP8[$7>>0] = $10;
    $$0 = 2;
    break;
   }
   $11 = ($wc>>>0)<(55296);
   $12 = $wc & -8192;
   $13 = ($12|0)==(57344);
   $or$cond = $11 | $13;
   if ($or$cond) {
    $14 = $wc >>> 12;
    $15 = $14 | 224;
    $16 = $15&255;
    $17 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $16;
    $18 = $wc >>> 6;
    $19 = $18 & 63;
    $20 = $19 | 128;
    $21 = $20&255;
    $22 = ((($s)) + 2|0);
    HEAP8[$17>>0] = $21;
    $23 = $wc & 63;
    $24 = $23 | 128;
    $25 = $24&255;
    HEAP8[$22>>0] = $25;
    $$0 = 3;
    break;
   }
   $26 = (($wc) + -65536)|0;
   $27 = ($26>>>0)<(1048576);
   if ($27) {
    $28 = $wc >>> 18;
    $29 = $28 | 240;
    $30 = $29&255;
    $31 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $30;
    $32 = $wc >>> 12;
    $33 = $32 & 63;
    $34 = $33 | 128;
    $35 = $34&255;
    $36 = ((($s)) + 2|0);
    HEAP8[$31>>0] = $35;
    $37 = $wc >>> 6;
    $38 = $37 & 63;
    $39 = $38 | 128;
    $40 = $39&255;
    $41 = ((($s)) + 3|0);
    HEAP8[$36>>0] = $40;
    $42 = $wc & 63;
    $43 = $42 | 128;
    $44 = $43&255;
    HEAP8[$41>>0] = $44;
    $$0 = 4;
    break;
   } else {
    $45 = (___errno_location()|0);
    HEAP32[$45>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _wcsrtombs($s,$ws,$n,$st) {
 $s = $s|0;
 $ws = $ws|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$01$lcssa = 0, $$0129 = 0, $$0129$lcssa = 0, $$0218 = 0, $$1 = 0, $$13 = 0, $$223 = 0, $$223$lcssa = 0, $$24$lcssa = 0, $$2428 = 0, $$2428$lcssa = 0, $$3 = 0, $$35 = 0, $$422 = 0, $$422$lcssa = 0, $$422$lcssa82 = 0, $$5 = 0, $$pn = 0, $$pre = 0;
 var $$pre43 = 0, $$pre44 = 0, $$pre45 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $ws2$019 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp;
 $0 = ($s|0)==(0|0);
 L1: do {
  if ($0) {
   $2 = HEAP32[$ws>>2]|0;
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)==(0);
   if ($4) {
    $$0 = 0;
   } else {
    $$0218 = 0;$5 = $3;$ws2$019 = $2;
    while(1) {
     $6 = ($5>>>0)>(127);
     if ($6) {
      $7 = (_wcrtomb($buf,$5,0)|0);
      $8 = ($7|0)==(-1);
      if ($8) {
       $$0 = -1;
       break L1;
      } else {
       $$pn = $7;
      }
     } else {
      $$pn = 1;
     }
     $$13 = (($$pn) + ($$0218))|0;
     $9 = ((($ws2$019)) + 4|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = ($10|0)==(0);
     if ($11) {
      $$0 = $$13;
      break;
     } else {
      $$0218 = $$13;$5 = $10;$ws2$019 = $9;
     }
    }
   }
  } else {
   $1 = ($n>>>0)>(3);
   L9: do {
    if ($1) {
     $$pre = HEAP32[$ws>>2]|0;
     $$0129 = $s;$$2428 = $n;$14 = $$pre;
     while(1) {
      $13 = HEAP32[$14>>2]|0;
      $15 = (($13) + -1)|0;
      $16 = ($15>>>0)>(126);
      if ($16) {
       $17 = ($13|0)==(0);
       if ($17) {
        $$0129$lcssa = $$0129;$$2428$lcssa = $$2428;
        break;
       }
       $19 = (_wcrtomb($$0129,$13,0)|0);
       $20 = ($19|0)==(-1);
       if ($20) {
        $$0 = -1;
        break L1;
       }
       $21 = (($$0129) + ($19)|0);
       $22 = (($$2428) - ($19))|0;
       $$1 = $21;$$35 = $22;$27 = $14;
      } else {
       $23 = $13&255;
       $24 = ((($$0129)) + 1|0);
       HEAP8[$$0129>>0] = $23;
       $25 = (($$2428) + -1)|0;
       $$pre43 = HEAP32[$ws>>2]|0;
       $$1 = $24;$$35 = $25;$27 = $$pre43;
      }
      $26 = ((($27)) + 4|0);
      HEAP32[$ws>>2] = $26;
      $28 = ($$35>>>0)>(3);
      if ($28) {
       $$0129 = $$1;$$2428 = $$35;$14 = $26;
      } else {
       $$01$lcssa = $$1;$$24$lcssa = $$35;
       break L9;
      }
     }
     HEAP8[$$0129$lcssa>>0] = 0;
     HEAP32[$ws>>2] = 0;
     $18 = (($n) - ($$2428$lcssa))|0;
     $$0 = $18;
     break L1;
    } else {
     $$01$lcssa = $s;$$24$lcssa = $n;
    }
   } while(0);
   $12 = ($$24$lcssa|0)==(0);
   if ($12) {
    $$0 = $n;
   } else {
    $$pre44 = HEAP32[$ws>>2]|0;
    $$223 = $$01$lcssa;$$422 = $$24$lcssa;$30 = $$pre44;
    while(1) {
     $29 = HEAP32[$30>>2]|0;
     $31 = (($29) + -1)|0;
     $32 = ($31>>>0)>(126);
     if ($32) {
      $33 = ($29|0)==(0);
      if ($33) {
       $$223$lcssa = $$223;$$422$lcssa = $$422;
       label = 19;
       break;
      }
      $35 = (_wcrtomb($buf,$29,0)|0);
      $36 = ($35|0)==(-1);
      if ($36) {
       $$0 = -1;
       break L1;
      }
      $37 = ($$422>>>0)<($35>>>0);
      if ($37) {
       $$422$lcssa82 = $$422;
       label = 22;
       break;
      }
      $39 = HEAP32[$30>>2]|0;
      (_wcrtomb($$223,$39,0)|0);
      $40 = (($$223) + ($35)|0);
      $41 = (($$422) - ($35))|0;
      $$3 = $40;$$5 = $41;$46 = $30;
     } else {
      $42 = $29&255;
      $43 = ((($$223)) + 1|0);
      HEAP8[$$223>>0] = $42;
      $44 = (($$422) + -1)|0;
      $$pre45 = HEAP32[$ws>>2]|0;
      $$3 = $43;$$5 = $44;$46 = $$pre45;
     }
     $45 = ((($46)) + 4|0);
     HEAP32[$ws>>2] = $45;
     $47 = ($$5|0)==(0);
     if ($47) {
      $$0 = $n;
      break L1;
     } else {
      $$223 = $$3;$$422 = $$5;$30 = $45;
     }
    }
    if ((label|0) == 19) {
     HEAP8[$$223$lcssa>>0] = 0;
     HEAP32[$ws>>2] = 0;
     $34 = (($n) - ($$422$lcssa))|0;
     $$0 = $34;
     break;
    }
    else if ((label|0) == 22) {
     $38 = (($n) - ($$422$lcssa82))|0;
     $$0 = $38;
     break;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _wcstombs($s,$ws,$n) {
 $s = $s|0;
 $ws = $ws|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP32[$0>>2] = $ws;
 $1 = (_wcsrtombs($s,$0,$n,0)|0);
 STACKTOP = sp;return ($1|0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 return ($$0|0);
}
function _fclose($f) {
 $f = $f|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  (___lockfile($f)|0);
 }
 $3 = HEAP32[$f>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  ___lock(((5780)|0));
  $6 = ((($f)) + 52|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  $9 = $7;
  $$pre = ((($f)) + 56|0);
  if (!($8)) {
   $10 = HEAP32[$$pre>>2]|0;
   $11 = ((($7)) + 56|0);
   HEAP32[$11>>2] = $10;
  }
  $12 = HEAP32[$$pre>>2]|0;
  $13 = ($12|0)==(0|0);
  $14 = $12;
  if (!($13)) {
   $15 = ((($12)) + 52|0);
   HEAP32[$15>>2] = $9;
  }
  $16 = HEAP32[(5776)>>2]|0;
  $17 = ($16|0)==($f|0);
  if ($17) {
   HEAP32[(5776)>>2] = $14;
  }
  ___unlock(((5780)|0));
 }
 $18 = (_fflush($f)|0);
 $19 = ((($f)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (FUNCTION_TABLE_ii[$20 & 1023]($f)|0);
 $22 = $21 | $18;
 $23 = ((($f)) + 92|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0|0);
 if (!($25)) {
  _free($24);
 }
 if (!($5)) {
  _free($f);
 }
 return ($22|0);
}
function _ferror($f) {
 $f = $f|0;
 var $$lobit = 0, $$lobit1 = 0, $$lobit2 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $5 = (___lockfile($f)|0);
  $phitmp = ($5|0)==(0);
  $6 = HEAP32[$f>>2]|0;
  $7 = $6 >>> 5;
  $$lobit = $7 & 1;
  if ($phitmp) {
   $$lobit2 = $$lobit;
  } else {
   ___unlockfile($f);
   $$lobit2 = $$lobit;
  }
 } else {
  $3 = HEAP32[$f>>2]|0;
  $4 = $3 >>> 5;
  $$lobit1 = $4 & 1;
  $$lobit2 = $$lobit1;
 }
 return ($$lobit2|0);
}
function _fflush($f) {
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$012 = 0, $$014 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $r$0$lcssa = 0, $r$03 = 0, $r$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($f|0)==(0|0);
 do {
  if ($0) {
   $7 = HEAP32[6008>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $27 = 0;
   } else {
    $9 = HEAP32[6008>>2]|0;
    $10 = (_fflush($9)|0);
    $27 = $10;
   }
   ___lock(((5780)|0));
   $$012 = HEAP32[(5776)>>2]|0;
   $11 = ($$012|0)==(0|0);
   if ($11) {
    $r$0$lcssa = $27;
   } else {
    $$014 = $$012;$r$03 = $27;
    while(1) {
     $12 = ((($$014)) + 76|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ($13|0)>(-1);
     if ($14) {
      $15 = (___lockfile($$014)|0);
      $23 = $15;
     } else {
      $23 = 0;
     }
     $16 = ((($$014)) + 20|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ((($$014)) + 28|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ($17>>>0)>($19>>>0);
     if ($20) {
      $21 = (___fflush_unlocked($$014)|0);
      $22 = $21 | $r$03;
      $r$1 = $22;
     } else {
      $r$1 = $r$03;
     }
     $24 = ($23|0)==(0);
     if (!($24)) {
      ___unlockfile($$014);
     }
     $25 = ((($$014)) + 56|0);
     $$01 = HEAP32[$25>>2]|0;
     $26 = ($$01|0)==(0|0);
     if ($26) {
      $r$0$lcssa = $r$1;
      break;
     } else {
      $$014 = $$01;$r$03 = $r$1;
     }
    }
   }
   ___unlock(((5780)|0));
   $$0 = $r$0$lcssa;
  } else {
   $1 = ((($f)) + 76|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = ($2|0)>(-1);
   if (!($3)) {
    $4 = (___fflush_unlocked($f)|0);
    $$0 = $4;
    break;
   }
   $5 = (___lockfile($f)|0);
   $phitmp = ($5|0)==(0);
   $6 = (___fflush_unlocked($f)|0);
   if ($phitmp) {
    $$0 = $6;
   } else {
    ___unlockfile($f);
    $$0 = $6;
   }
  }
 } while(0);
 return ($$0|0);
}
function _fgetc($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (___lockfile($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $14 = ((($f)) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($f)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($15>>>0)<($17>>>0);
   if ($18) {
    $19 = ((($15)) + 1|0);
    HEAP32[$14>>2] = $19;
    $20 = HEAP8[$15>>0]|0;
    $21 = $20&255;
    $23 = $21;
   } else {
    $22 = (___uflow($f)|0);
    $23 = $22;
   }
   ___unlockfile($f);
   $$0 = $23;
  }
 }
 do {
  if ((label|0) == 3) {
   $5 = ((($f)) + 4|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ((($f)) + 8|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($6>>>0)<($8>>>0);
   if ($9) {
    $10 = ((($6)) + 1|0);
    HEAP32[$5>>2] = $10;
    $11 = HEAP8[$6>>0]|0;
    $12 = $11&255;
    $$0 = $12;
    break;
   } else {
    $13 = (___uflow($f)|0);
    $$0 = $13;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _fopen($filename,$mode) {
 $filename = $filename|0;
 $mode = $mode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP8[$mode>>0]|0;
 $1 = $0 << 24 >> 24;
 $memchr = (_memchr(16239,$1,4)|0);
 $2 = ($memchr|0)==(0|0);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 22;
  $$0 = 0;
 } else {
  $4 = (___fmodeflags($mode)|0);
  $5 = $4 | 32768;
  HEAP32[$vararg_buffer>>2] = $filename;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $5;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $6 = (___syscall5(5,($vararg_buffer|0))|0);
  $7 = (___syscall_ret($6)|0);
  $8 = ($7|0)<(0);
  if ($8) {
   $$0 = 0;
  } else {
   $9 = (___fdopen($7,$mode)|0);
   $10 = ($9|0)==(0|0);
   if ($10) {
    HEAP32[$vararg_buffer3>>2] = $7;
    (___syscall6(6,($vararg_buffer3|0))|0);
    $$0 = 0;
   } else {
    $$0 = $9;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _fputc($c,$f) {
 $c = $c|0;
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (___lockfile($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $18 = ((($f)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19 << 24 >> 24;
   $21 = ($20|0)==($c|0);
   if ($21) {
    label = 10;
   } else {
    $22 = ((($f)) + 20|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($f)) + 16|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($23>>>0)<($25>>>0);
    if ($26) {
     $27 = $c&255;
     $28 = ((($23)) + 1|0);
     HEAP32[$22>>2] = $28;
     HEAP8[$23>>0] = $27;
     $29 = $c & 255;
     $31 = $29;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $30 = (___overflow($f,$c)|0);
    $31 = $30;
   }
   ___unlockfile($f);
   $$0 = $31;
  }
 }
 do {
  if ((label|0) == 3) {
   $5 = ((($f)) + 75|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = $6 << 24 >> 24;
   $8 = ($7|0)==($c|0);
   if (!($8)) {
    $9 = ((($f)) + 20|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ((($f)) + 16|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($10>>>0)<($12>>>0);
    if ($13) {
     $14 = $c&255;
     $15 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $15;
     HEAP8[$10>>0] = $14;
     $16 = $c & 255;
     $$0 = $16;
     break;
    }
   }
   $17 = (___overflow($f,$c)|0);
   $$0 = $17;
  }
 } while(0);
 return ($$0|0);
}
function _fread($destv,$size,$nmemb,$f) {
 $destv = $destv|0;
 $size = $size|0;
 $nmemb = $nmemb|0;
 $f = $f|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $dest$0$ph = 0, $dest$02 = 0, $l$0$ph = 0, $l$03 = 0, $l$03$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = Math_imul($nmemb, $size)|0;
 $1 = ((($f)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($f)|0);
  $31 = $4;
 } else {
  $31 = 0;
 }
 $5 = ((($f)) + 74|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 << 24 >> 24;
 $8 = (($7) + 255)|0;
 $9 = $8 | $7;
 $10 = $9&255;
 HEAP8[$5>>0] = $10;
 $11 = ((($f)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($f)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) - ($16))|0;
 $18 = ($17|0)>(0);
 if ($18) {
  $19 = ($17>>>0)<($0>>>0);
  $$ = $19 ? $17 : $0;
  _memcpy(($destv|0),($14|0),($$|0))|0;
  $20 = (($14) + ($$)|0);
  HEAP32[$13>>2] = $20;
  $21 = (($destv) + ($$)|0);
  $22 = (($0) - ($$))|0;
  $dest$0$ph = $21;$l$0$ph = $22;
 } else {
  $dest$0$ph = $destv;$l$0$ph = $0;
 }
 $23 = ($l$0$ph|0)==(0);
 L7: do {
  if ($23) {
   label = 13;
  } else {
   $24 = ((($f)) + 32|0);
   $dest$02 = $dest$0$ph;$l$03 = $l$0$ph;
   while(1) {
    $25 = (___toread($f)|0);
    $26 = ($25|0)==(0);
    if (!($26)) {
     $l$03$lcssa = $l$03;
     break;
    }
    $27 = HEAP32[$24>>2]|0;
    $28 = (FUNCTION_TABLE_iiii[$27 & 1023]($f,$dest$02,$l$03)|0);
    $29 = (($28) + 1)|0;
    $30 = ($29>>>0)<(2);
    if ($30) {
     $l$03$lcssa = $l$03;
     break;
    }
    $35 = (($l$03) - ($28))|0;
    $36 = (($dest$02) + ($28)|0);
    $37 = ($l$03|0)==($28|0);
    if ($37) {
     label = 13;
     break L7;
    } else {
     $dest$02 = $36;$l$03 = $35;
    }
   }
   $32 = ($31|0)==(0);
   if (!($32)) {
    ___unlockfile($f);
   }
   $33 = (($0) - ($l$03$lcssa))|0;
   $34 = (($33>>>0) / ($size>>>0))&-1;
   $$0 = $34;
  }
 } while(0);
 if ((label|0) == 13) {
  $38 = ($31|0)==(0);
  if ($38) {
   $$0 = $nmemb;
  } else {
   ___unlockfile($f);
   $$0 = $nmemb;
  }
 }
 return ($$0|0);
}
function ___fseeko_unlocked($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($whence|0)==(1);
 if ($0) {
  $1 = ((($f)) + 8|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ((($f)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = $2;
  $6 = $4;
  $7 = (($off) - ($5))|0;
  $8 = (($7) + ($6))|0;
  $$01 = $8;
 } else {
  $$01 = $off;
 }
 $9 = ((($f)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($f)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($10>>>0)>($12>>>0);
 if ($13) {
  $14 = ((($f)) + 36|0);
  $15 = HEAP32[$14>>2]|0;
  (FUNCTION_TABLE_iiii[$15 & 1023]($f,0,0)|0);
  $16 = HEAP32[$9>>2]|0;
  $17 = ($16|0)==(0|0);
  if ($17) {
   $$0 = -1;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $18 = ((($f)) + 16|0);
  HEAP32[$18>>2] = 0;
  HEAP32[$11>>2] = 0;
  HEAP32[$9>>2] = 0;
  $19 = ((($f)) + 40|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (FUNCTION_TABLE_iiii[$20 & 1023]($f,$$01,$whence)|0);
  $22 = ($21|0)<(0);
  if ($22) {
   $$0 = -1;
  } else {
   $23 = ((($f)) + 8|0);
   HEAP32[$23>>2] = 0;
   $24 = ((($f)) + 4|0);
   HEAP32[$24>>2] = 0;
   $25 = HEAP32[$f>>2]|0;
   $26 = $25 & -17;
   HEAP32[$f>>2] = $26;
   $$0 = 0;
  }
 }
 return ($$0|0);
}
function ___fseeko($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $4 = (___lockfile($f)|0);
  $phitmp = ($4|0)==(0);
  $5 = (___fseeko_unlocked($f,$off,$whence)|0);
  if ($phitmp) {
   $6 = $5;
  } else {
   ___unlockfile($f);
   $6 = $5;
  }
 } else {
  $3 = (___fseeko_unlocked($f,$off,$whence)|0);
  $6 = $3;
 }
 return ($6|0);
}
function _fseek($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___fseeko($f,$off,$whence)|0);
 return ($0|0);
}
function ___ftello_unlocked($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$f>>2]|0;
 $3 = $2 & 128;
 $4 = ($3|0)==(0);
 if ($4) {
  $10 = 1;
 } else {
  $5 = ((($f)) + 20|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($f)) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($6>>>0)>($8>>>0);
  $phitmp = $9 ? 2 : 1;
  $10 = $phitmp;
 }
 $11 = (FUNCTION_TABLE_iiii[$1 & 1023]($f,0,$10)|0);
 $12 = ($11|0)<(0);
 if ($12) {
  $$0 = $11;
 } else {
  $13 = ((($f)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($f)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $14;
  $18 = $16;
  $19 = ((($f)) + 20|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($f)) + 28|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $20;
  $24 = $22;
  $25 = (($11) - ($17))|0;
  $26 = (($25) + ($18))|0;
  $27 = (($26) + ($23))|0;
  $28 = (($27) - ($24))|0;
  $$0 = $28;
 }
 return ($$0|0);
}
function ___ftello($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $4 = (___lockfile($f)|0);
  $phitmp = ($4|0)==(0);
  $5 = (___ftello_unlocked($f)|0);
  if ($phitmp) {
   $6 = $5;
  } else {
   ___unlockfile($f);
   $6 = $5;
  }
 } else {
  $3 = (___ftello_unlocked($f)|0);
  $6 = $3;
 }
 return ($6|0);
}
function _ftell($f) {
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___ftello($f)|0);
 return ($0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa10 = 0;
 var $i$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___towrite($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   $$pre = HEAP32[$0>>2]|0;
   $7 = $$pre;
   label = 4;
  } else {
   $$0 = 0;
  }
 } else {
  $7 = $1;
  label = 4;
 }
 L4: do {
  if ((label|0) == 4) {
   $5 = ((($f)) + 20|0);
   $6 = HEAP32[$5>>2]|0;
   $8 = $7;
   $9 = $6;
   $10 = (($8) - ($9))|0;
   $11 = ($10>>>0)<($l>>>0);
   if ($11) {
    $12 = ((($f)) + 36|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (FUNCTION_TABLE_iiii[$13 & 1023]($f,$s,$l)|0);
    $$0 = $14;
    break;
   }
   $15 = ((($f)) + 75|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = ($16<<24>>24)>(-1);
   L9: do {
    if ($17) {
     $i$0 = $l;
     while(1) {
      $18 = ($i$0|0)==(0);
      if ($18) {
       $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
       break L9;
      }
      $19 = (($i$0) + -1)|0;
      $20 = (($s) + ($19)|0);
      $21 = HEAP8[$20>>0]|0;
      $22 = ($21<<24>>24)==(10);
      if ($22) {
       $i$0$lcssa10 = $i$0;
       break;
      } else {
       $i$0 = $19;
      }
     }
     $23 = ((($f)) + 36|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (FUNCTION_TABLE_iiii[$24 & 1023]($f,$s,$i$0$lcssa10)|0);
     $26 = ($25>>>0)<($i$0$lcssa10>>>0);
     if ($26) {
      $$0 = $i$0$lcssa10;
      break L4;
     }
     $27 = (($s) + ($i$0$lcssa10)|0);
     $28 = (($l) - ($i$0$lcssa10))|0;
     $$pre6 = HEAP32[$5>>2]|0;
     $$01 = $28;$$02 = $27;$29 = $$pre6;$i$1 = $i$0$lcssa10;
    } else {
     $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
    }
   } while(0);
   _memcpy(($29|0),($$02|0),($$01|0))|0;
   $30 = HEAP32[$5>>2]|0;
   $31 = (($30) + ($$01)|0);
   HEAP32[$5>>2] = $31;
   $32 = (($i$1) + ($$01))|0;
   $$0 = $32;
  }
 } while(0);
 return ($$0|0);
}
function _snprintf($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsnprintf($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _sprintf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsprintf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _sscanf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsscanf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0;
 var $ret$1 = 0, $ret$1$ = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = ((($f)) + 76|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)>(-1);
  if ($4) {
   $5 = (___lockfile($f)|0);
   $32 = $5;
  } else {
   $32 = 0;
  }
  $6 = HEAP32[$f>>2]|0;
  $7 = $6 & 32;
  $8 = ((($f)) + 74|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = ($9<<24>>24)<(1);
  if ($10) {
   $11 = $6 & -33;
   HEAP32[$f>>2] = $11;
  }
  $12 = ((($f)) + 48|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0);
  if ($14) {
   $16 = ((($f)) + 44|0);
   $17 = HEAP32[$16>>2]|0;
   HEAP32[$16>>2] = $internal_buf;
   $18 = ((($f)) + 28|0);
   HEAP32[$18>>2] = $internal_buf;
   $19 = ((($f)) + 20|0);
   HEAP32[$19>>2] = $internal_buf;
   HEAP32[$12>>2] = 80;
   $20 = ((($internal_buf)) + 80|0);
   $21 = ((($f)) + 16|0);
   HEAP32[$21>>2] = $20;
   $22 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $23 = ($17|0)==(0|0);
   if ($23) {
    $ret$1 = $22;
   } else {
    $24 = ((($f)) + 36|0);
    $25 = HEAP32[$24>>2]|0;
    (FUNCTION_TABLE_iiii[$25 & 1023]($f,0,0)|0);
    $26 = HEAP32[$19>>2]|0;
    $27 = ($26|0)==(0|0);
    $$ = $27 ? -1 : $22;
    HEAP32[$16>>2] = $17;
    HEAP32[$12>>2] = 0;
    HEAP32[$21>>2] = 0;
    HEAP32[$18>>2] = 0;
    HEAP32[$19>>2] = 0;
    $ret$1 = $$;
   }
  } else {
   $15 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $ret$1 = $15;
  }
  $28 = HEAP32[$f>>2]|0;
  $29 = $28 & 32;
  $30 = ($29|0)==(0);
  $ret$1$ = $30 ? $ret$1 : -1;
  $31 = $28 | $7;
  HEAP32[$f>>2] = $31;
  $33 = ($32|0)==(0);
  if (!($33)) {
   ___unlockfile($f);
  }
  $$0 = $ret$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _vfscanf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$10 = 0, $$11 = 0, $$12 = 0, $$9 = 0, $$lcssa = 0, $$lcssa38 = 0, $$lcssa384 = 0, $$not = 0, $$old4 = 0, $$pre = 0, $$pre$phi182Z2D = 0, $$pre168 = 0, $$pre170 = 0, $$pre172 = 0, $$pre174 = 0, $$pre176 = 0, $$pre178 = 0, $$pre180 = 0, $$pre181 = 0;
 var $$size$0 = 0, $$width$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0.0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0.0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $alloc$0 = 0, $alloc$0400 = 0, $alloc$1 = 0;
 var $alloc$2 = 0, $ap2$i = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $base$0 = 0, $c$0100 = 0, $dest$0 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $factor = 0;
 var $factor16 = 0, $i$0$i = 0, $i$0$ph = 0, $i$0$ph$phi = 0, $i$0$ph20 = 0, $i$0$ph20$lcssa = 0, $i$1 = 0, $i$2 = 0, $i$2$ph = 0, $i$2$ph$phi = 0, $i$3 = 0, $i$4 = 0, $invert$0 = 0, $isdigit = 0, $isdigit7 = 0, $isdigit795 = 0, $isdigittmp = 0, $isdigittmp6 = 0, $isdigittmp694 = 0, $k$0$ph = 0;
 var $k$1$ph = 0, $matches$0$ = 0, $matches$0104 = 0, $matches$0104$lcssa = 0, $matches$0104376 = 0, $matches$1 = 0, $matches$2 = 0, $matches$3 = 0, $not$ = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond8 = 0, $p$0109 = 0, $p$1 = 0, $p$1$lcssa = 0, $p$10 = 0, $p$11 = 0, $p$2 = 0, $p$3$lcssa = 0;
 var $p$396 = 0, $p$4 = 0, $p$5 = 0, $p$6 = 0, $p$7 = 0, $p$7$ph = 0, $p$8 = 0, $p$9 = 0, $pos$0108 = 0, $pos$1 = 0, $pos$2 = 0, $s$0107 = 0, $s$0107$lcssa = 0, $s$1 = 0, $s$2$ph = 0, $s$3 = 0, $s$4 = 0, $s$5 = 0, $s$6 = 0, $s$7 = 0;
 var $s$8 = 0, $scanset = 0, $size$0 = 0, $st = 0, $vacopy_currentptr = 0, $wc = 0, $wcs$0103 = 0, $wcs$0103$lcssa = 0, $wcs$1 = 0, $wcs$2 = 0, $wcs$3$ph = 0, $wcs$3$ph$lcssa = 0, $wcs$4 = 0, $wcs$5 = 0, $wcs$6 = 0, $wcs$7 = 0, $wcs$8 = 0, $wcs$9 = 0, $width$0$lcssa = 0, $width$097 = 0;
 var $width$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2$i = sp + 16|0;
 $st = sp + 8|0;
 $scanset = sp + 33|0;
 $wc = sp;
 $0 = sp + 32|0;
 $1 = ((($f)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($f)|0);
  $333 = $4;
 } else {
  $333 = 0;
 }
 $5 = HEAP8[$fmt>>0]|0;
 $6 = ($5<<24>>24)==(0);
 L4: do {
  if ($6) {
   $matches$3 = 0;
  } else {
   $7 = ((($f)) + 4|0);
   $8 = ((($f)) + 100|0);
   $9 = ((($f)) + 108|0);
   $10 = ((($f)) + 8|0);
   $11 = ((($scanset)) + 10|0);
   $12 = ((($scanset)) + 33|0);
   $13 = ((($st)) + 4|0);
   $14 = ((($scanset)) + 46|0);
   $15 = ((($scanset)) + 94|0);
   $17 = $5;$matches$0104 = 0;$p$0109 = $fmt;$pos$0108 = 0;$s$0107 = 0;$wcs$0103 = 0;
   L6: while(1) {
    $16 = $17&255;
    $18 = (_isspace($16)|0);
    $19 = ($18|0)==(0);
    L8: do {
     if ($19) {
      $46 = HEAP8[$p$0109>>0]|0;
      $47 = ($46<<24>>24)==(37);
      L10: do {
       if ($47) {
        $48 = ((($p$0109)) + 1|0);
        $49 = HEAP8[$48>>0]|0;
        L12: do {
         switch ($49<<24>>24) {
         case 37:  {
          break L10;
          break;
         }
         case 42:  {
          $70 = ((($p$0109)) + 2|0);
          $dest$0 = 0;$p$2 = $70;
          break;
         }
         default: {
          $71 = $49&255;
          $isdigittmp = (($71) + -48)|0;
          $isdigit = ($isdigittmp>>>0)<(10);
          if ($isdigit) {
           $72 = ((($p$0109)) + 2|0);
           $73 = HEAP8[$72>>0]|0;
           $74 = ($73<<24>>24)==(36);
           if ($74) {
            $vacopy_currentptr = HEAP32[$ap>>2]|0;
            HEAP32[$ap2$i>>2] = $vacopy_currentptr;
            $i$0$i = $isdigittmp;
            while(1) {
             $75 = ($i$0$i>>>0)>(1);
             $arglist_current = HEAP32[$ap2$i>>2]|0;
             $76 = $arglist_current;
             $77 = ((0) + 4|0);
             $expanded4 = $77;
             $expanded = (($expanded4) - 1)|0;
             $78 = (($76) + ($expanded))|0;
             $79 = ((0) + 4|0);
             $expanded8 = $79;
             $expanded7 = (($expanded8) - 1)|0;
             $expanded6 = $expanded7 ^ -1;
             $80 = $78 & $expanded6;
             $81 = $80;
             $82 = HEAP32[$81>>2]|0;
             $arglist_next = ((($81)) + 4|0);
             HEAP32[$ap2$i>>2] = $arglist_next;
             $83 = (($i$0$i) + -1)|0;
             if ($75) {
              $i$0$i = $83;
             } else {
              $$lcssa = $82;
              break;
             }
            }
            $84 = ((($p$0109)) + 3|0);
            $dest$0 = $$lcssa;$p$2 = $84;
            break L12;
           }
          }
          $arglist_current2 = HEAP32[$ap>>2]|0;
          $85 = $arglist_current2;
          $86 = ((0) + 4|0);
          $expanded11 = $86;
          $expanded10 = (($expanded11) - 1)|0;
          $87 = (($85) + ($expanded10))|0;
          $88 = ((0) + 4|0);
          $expanded15 = $88;
          $expanded14 = (($expanded15) - 1)|0;
          $expanded13 = $expanded14 ^ -1;
          $89 = $87 & $expanded13;
          $90 = $89;
          $91 = HEAP32[$90>>2]|0;
          $arglist_next3 = ((($90)) + 4|0);
          HEAP32[$ap>>2] = $arglist_next3;
          $dest$0 = $91;$p$2 = $48;
         }
         }
        } while(0);
        $92 = HEAP8[$p$2>>0]|0;
        $93 = $92&255;
        $isdigittmp694 = (($93) + -48)|0;
        $isdigit795 = ($isdigittmp694>>>0)<(10);
        if ($isdigit795) {
         $97 = $93;$p$396 = $p$2;$width$097 = 0;
         while(1) {
          $94 = ($width$097*10)|0;
          $95 = (($94) + -48)|0;
          $96 = (($95) + ($97))|0;
          $98 = ((($p$396)) + 1|0);
          $99 = HEAP8[$98>>0]|0;
          $100 = $99&255;
          $isdigittmp6 = (($100) + -48)|0;
          $isdigit7 = ($isdigittmp6>>>0)<(10);
          if ($isdigit7) {
           $97 = $100;$p$396 = $98;$width$097 = $96;
          } else {
           $$lcssa38 = $99;$p$3$lcssa = $98;$width$0$lcssa = $96;
           break;
          }
         }
        } else {
         $$lcssa38 = $92;$p$3$lcssa = $p$2;$width$0$lcssa = 0;
        }
        $101 = ($$lcssa38<<24>>24)==(109);
        if ($101) {
         $102 = ($dest$0|0)!=(0|0);
         $103 = $102&1;
         $104 = ((($p$3$lcssa)) + 1|0);
         $$pre168 = HEAP8[$104>>0]|0;
         $107 = $$pre168;$alloc$0 = $103;$p$4 = $104;$s$1 = 0;$wcs$1 = 0;
        } else {
         $107 = $$lcssa38;$alloc$0 = 0;$p$4 = $p$3$lcssa;$s$1 = $s$0107;$wcs$1 = $wcs$0103;
        }
        $105 = ((($p$4)) + 1|0);
        $106 = $107&255;
        switch ($106|0) {
        case 104:  {
         $108 = HEAP8[$105>>0]|0;
         $109 = ($108<<24>>24)==(104);
         $110 = ((($p$4)) + 2|0);
         $$9 = $109 ? $110 : $105;
         $$10 = $109 ? -2 : -1;
         $p$5 = $$9;$size$0 = $$10;
         break;
        }
        case 108:  {
         $111 = HEAP8[$105>>0]|0;
         $112 = ($111<<24>>24)==(108);
         $113 = ((($p$4)) + 2|0);
         $$11 = $112 ? $113 : $105;
         $$12 = $112 ? 3 : 1;
         $p$5 = $$11;$size$0 = $$12;
         break;
        }
        case 106:  {
         $p$5 = $105;$size$0 = 3;
         break;
        }
        case 116: case 122:  {
         $p$5 = $105;$size$0 = 1;
         break;
        }
        case 76:  {
         $p$5 = $105;$size$0 = 2;
         break;
        }
        case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
         $p$5 = $p$4;$size$0 = 0;
         break;
        }
        default: {
         $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = $s$1;$wcs$7 = $wcs$1;
         label = 152;
         break L6;
        }
        }
        $114 = HEAP8[$p$5>>0]|0;
        $115 = $114&255;
        $116 = $115 & 47;
        $117 = ($116|0)==(3);
        $118 = $115 | 32;
        $$ = $117 ? $118 : $115;
        $$size$0 = $117 ? 1 : $size$0;
        switch ($$|0) {
        case 99:  {
         $119 = ($width$0$lcssa|0)<(1);
         $$width$0 = $119 ? 1 : $width$0$lcssa;
         $pos$1 = $pos$0108;$width$1 = $$width$0;
         break;
        }
        case 91:  {
         $pos$1 = $pos$0108;$width$1 = $width$0$lcssa;
         break;
        }
        case 110:  {
         $120 = ($pos$0108|0)<(0);
         $121 = $120 << 31 >> 31;
         $122 = ($dest$0|0)==(0|0);
         if ($122) {
          $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
          break L8;
         }
         switch ($$size$0|0) {
         case -2:  {
          $123 = $pos$0108&255;
          HEAP8[$dest$0>>0] = $123;
          $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
          break L8;
          break;
         }
         case -1:  {
          $124 = $pos$0108&65535;
          HEAP16[$dest$0>>1] = $124;
          $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
          break L8;
          break;
         }
         case 0:  {
          HEAP32[$dest$0>>2] = $pos$0108;
          $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
          break L8;
          break;
         }
         case 1:  {
          HEAP32[$dest$0>>2] = $pos$0108;
          $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
          break L8;
          break;
         }
         case 3:  {
          $125 = $dest$0;
          $126 = $125;
          HEAP32[$126>>2] = $pos$0108;
          $127 = (($125) + 4)|0;
          $128 = $127;
          HEAP32[$128>>2] = $121;
          $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
          break L8;
          break;
         }
         default: {
          $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
          break L8;
         }
         }
         break;
        }
        default: {
         ___shlim($f,0);
         while(1) {
          $129 = HEAP32[$7>>2]|0;
          $130 = HEAP32[$8>>2]|0;
          $131 = ($129>>>0)<($130>>>0);
          if ($131) {
           $132 = ((($129)) + 1|0);
           HEAP32[$7>>2] = $132;
           $133 = HEAP8[$129>>0]|0;
           $134 = $133&255;
           $136 = $134;
          } else {
           $135 = (___shgetc($f)|0);
           $136 = $135;
          }
          $137 = (_isspace($136)|0);
          $138 = ($137|0)==(0);
          if ($138) {
           break;
          }
         }
         $139 = HEAP32[$8>>2]|0;
         $140 = ($139|0)==(0|0);
         $$pre170 = HEAP32[$7>>2]|0;
         if ($140) {
          $144 = $$pre170;
         } else {
          $141 = ((($$pre170)) + -1|0);
          HEAP32[$7>>2] = $141;
          $144 = $141;
         }
         $142 = HEAP32[$9>>2]|0;
         $143 = HEAP32[$10>>2]|0;
         $145 = $144;
         $146 = $143;
         $147 = (($142) + ($pos$0108))|0;
         $148 = (($147) + ($145))|0;
         $149 = (($148) - ($146))|0;
         $pos$1 = $149;$width$1 = $width$0$lcssa;
        }
        }
        ___shlim($f,$width$1);
        $150 = HEAP32[$7>>2]|0;
        $151 = HEAP32[$8>>2]|0;
        $152 = ($150>>>0)<($151>>>0);
        if ($152) {
         $153 = ((($150)) + 1|0);
         HEAP32[$7>>2] = $153;
         $156 = $151;
        } else {
         $154 = (___shgetc($f)|0);
         $155 = ($154|0)<(0);
         if ($155) {
          $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = $s$1;$wcs$7 = $wcs$1;
          label = 152;
          break L6;
         }
         $$pre172 = HEAP32[$8>>2]|0;
         $156 = $$pre172;
        }
        $157 = ($156|0)==(0|0);
        if (!($157)) {
         $158 = HEAP32[$7>>2]|0;
         $159 = ((($158)) + -1|0);
         HEAP32[$7>>2] = $159;
        }
        L67: do {
         switch ($$|0) {
         case 91: case 99: case 115:  {
          $160 = ($$|0)==(99);
          $161 = $$ & 239;
          $162 = ($161|0)==(99);
          L69: do {
           if ($162) {
            $163 = ($$|0)==(115);
            _memset(($scanset|0),-1,257)|0;
            HEAP8[$scanset>>0] = 0;
            if ($163) {
             HEAP8[$12>>0] = 0;
             ;HEAP8[$11>>0]=0|0;HEAP8[$11+1>>0]=0|0;HEAP8[$11+2>>0]=0|0;HEAP8[$11+3>>0]=0|0;HEAP8[$11+4>>0]=0|0;
             $p$9 = $p$5;
            } else {
             $p$9 = $p$5;
            }
           } else {
            $164 = ((($p$5)) + 1|0);
            $165 = HEAP8[$164>>0]|0;
            $166 = ($165<<24>>24)==(94);
            $167 = ((($p$5)) + 2|0);
            $invert$0 = $166&1;
            $168 = $166 ? $164 : $p$5;
            $p$6 = $166 ? $167 : $164;
            $169 = $166&1;
            _memset(($scanset|0),($169|0),257)|0;
            HEAP8[$scanset>>0] = 0;
            $170 = HEAP8[$p$6>>0]|0;
            switch ($170<<24>>24) {
            case 45:  {
             $171 = ((($168)) + 2|0);
             $172 = $invert$0 ^ 1;
             $173 = $172&255;
             HEAP8[$14>>0] = $173;
             $$pre$phi182Z2D = $173;$p$7$ph = $171;
             break;
            }
            case 93:  {
             $174 = ((($168)) + 2|0);
             $175 = $invert$0 ^ 1;
             $176 = $175&255;
             HEAP8[$15>>0] = $176;
             $$pre$phi182Z2D = $176;$p$7$ph = $174;
             break;
            }
            default: {
             $$pre180 = $invert$0 ^ 1;
             $$pre181 = $$pre180&255;
             $$pre$phi182Z2D = $$pre181;$p$7$ph = $p$6;
            }
            }
            $p$7 = $p$7$ph;
            while(1) {
             $177 = HEAP8[$p$7>>0]|0;
             L80: do {
              switch ($177<<24>>24) {
              case 0:  {
               $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = $s$1;$wcs$7 = $wcs$1;
               label = 152;
               break L6;
               break;
              }
              case 93:  {
               $p$9 = $p$7;
               break L69;
               break;
              }
              case 45:  {
               $178 = ((($p$7)) + 1|0);
               $179 = HEAP8[$178>>0]|0;
               switch ($179<<24>>24) {
               case 93: case 0:  {
                $190 = 45;$p$8 = $p$7;
                break L80;
                break;
               }
               default: {
               }
               }
               $180 = ((($p$7)) + -1|0);
               $181 = HEAP8[$180>>0]|0;
               $182 = ($181&255)<($179&255);
               if ($182) {
                $183 = $181&255;
                $c$0100 = $183;
                while(1) {
                 $184 = (($c$0100) + 1)|0;
                 $185 = (($scanset) + ($184)|0);
                 HEAP8[$185>>0] = $$pre$phi182Z2D;
                 $186 = HEAP8[$178>>0]|0;
                 $187 = $186&255;
                 $188 = ($184|0)<($187|0);
                 if ($188) {
                  $c$0100 = $184;
                 } else {
                  $190 = $186;$p$8 = $178;
                  break;
                 }
                }
               } else {
                $190 = $179;$p$8 = $178;
               }
               break;
              }
              default: {
               $190 = $177;$p$8 = $p$7;
              }
              }
             } while(0);
             $189 = $190&255;
             $191 = (($189) + 1)|0;
             $192 = (($scanset) + ($191)|0);
             HEAP8[$192>>0] = $$pre$phi182Z2D;
             $193 = ((($p$8)) + 1|0);
             $p$7 = $193;
            }
           }
          } while(0);
          $194 = (($width$1) + 1)|0;
          $195 = $160 ? $194 : 31;
          $196 = ($$size$0|0)==(1);
          $197 = ($alloc$0|0)!=(0);
          L88: do {
           if ($196) {
            if ($197) {
             $198 = $195 << 2;
             $199 = (_malloc($198)|0);
             $200 = ($199|0)==(0|0);
             if ($200) {
              $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = 0;$wcs$7 = $199;
              label = 152;
              break L6;
             } else {
              $wcs$2 = $199;
             }
            } else {
             $wcs$2 = $dest$0;
            }
            HEAP32[$st>>2] = 0;
            HEAP32[$13>>2] = 0;
            $i$0$ph = 0;$k$0$ph = $195;$wcs$3$ph = $wcs$2;
            L94: while(1) {
             $201 = ($wcs$3$ph|0)==(0|0);
             $i$0$ph20 = $i$0$ph;
             while(1) {
              L98: while(1) {
               $202 = HEAP32[$7>>2]|0;
               $203 = HEAP32[$8>>2]|0;
               $204 = ($202>>>0)<($203>>>0);
               if ($204) {
                $205 = ((($202)) + 1|0);
                HEAP32[$7>>2] = $205;
                $206 = HEAP8[$202>>0]|0;
                $207 = $206&255;
                $210 = $207;
               } else {
                $208 = (___shgetc($f)|0);
                $210 = $208;
               }
               $209 = (($210) + 1)|0;
               $211 = (($scanset) + ($209)|0);
               $212 = HEAP8[$211>>0]|0;
               $213 = ($212<<24>>24)==(0);
               if ($213) {
                $i$0$ph20$lcssa = $i$0$ph20;$wcs$3$ph$lcssa = $wcs$3$ph;
                break L94;
               }
               $214 = $210&255;
               HEAP8[$0>>0] = $214;
               $215 = (_mbrtowc($wc,$0,1,$st)|0);
               switch ($215|0) {
               case -1:  {
                $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = 0;$wcs$7 = $wcs$3$ph;
                label = 152;
                break L6;
                break;
               }
               case -2:  {
                break;
               }
               default: {
                break L98;
               }
               }
              }
              if ($201) {
               $i$1 = $i$0$ph20;
              } else {
               $216 = HEAP32[$wc>>2]|0;
               $217 = (($i$0$ph20) + 1)|0;
               $218 = (($wcs$3$ph) + ($i$0$ph20<<2)|0);
               HEAP32[$218>>2] = $216;
               $i$1 = $217;
              }
              $219 = ($i$1|0)==($k$0$ph|0);
              $or$cond = $197 & $219;
              if ($or$cond) {
               break;
              } else {
               $i$0$ph20 = $i$1;
              }
             }
             $factor = $k$0$ph << 1;
             $220 = $factor | 1;
             $221 = $220 << 2;
             $222 = (_realloc($wcs$3$ph,$221)|0);
             $223 = ($222|0)==(0|0);
             if ($223) {
              $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = 0;$wcs$7 = $wcs$3$ph;
              label = 152;
              break L6;
             }
             $i$0$ph$phi = $k$0$ph;$k$0$ph = $220;$wcs$3$ph = $222;$i$0$ph = $i$0$ph$phi;
            }
            $224 = (_mbsinit($st)|0);
            $225 = ($224|0)==(0);
            if ($225) {
             $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = 0;$wcs$7 = $wcs$3$ph$lcssa;
             label = 152;
             break L6;
            } else {
             $i$4 = $i$0$ph20$lcssa;$s$3 = 0;$wcs$4 = $wcs$3$ph$lcssa;
            }
           } else {
            if ($197) {
             $226 = (_malloc($195)|0);
             $227 = ($226|0)==(0|0);
             if ($227) {
              $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = 0;$wcs$7 = 0;
              label = 152;
              break L6;
             } else {
              $i$2$ph = 0;$k$1$ph = $195;$s$2$ph = $226;
             }
             while(1) {
              $i$2 = $i$2$ph;
              while(1) {
               $228 = HEAP32[$7>>2]|0;
               $229 = HEAP32[$8>>2]|0;
               $230 = ($228>>>0)<($229>>>0);
               if ($230) {
                $231 = ((($228)) + 1|0);
                HEAP32[$7>>2] = $231;
                $232 = HEAP8[$228>>0]|0;
                $233 = $232&255;
                $236 = $233;
               } else {
                $234 = (___shgetc($f)|0);
                $236 = $234;
               }
               $235 = (($236) + 1)|0;
               $237 = (($scanset) + ($235)|0);
               $238 = HEAP8[$237>>0]|0;
               $239 = ($238<<24>>24)==(0);
               if ($239) {
                $i$4 = $i$2;$s$3 = $s$2$ph;$wcs$4 = 0;
                break L88;
               }
               $240 = $236&255;
               $241 = (($i$2) + 1)|0;
               $242 = (($s$2$ph) + ($i$2)|0);
               HEAP8[$242>>0] = $240;
               $243 = ($241|0)==($k$1$ph|0);
               if ($243) {
                break;
               } else {
                $i$2 = $241;
               }
              }
              $factor16 = $k$1$ph << 1;
              $244 = $factor16 | 1;
              $245 = (_realloc($s$2$ph,$244)|0);
              $246 = ($245|0)==(0|0);
              if ($246) {
               $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = $s$2$ph;$wcs$7 = 0;
               label = 152;
               break L6;
              } else {
               $i$2$ph$phi = $k$1$ph;$k$1$ph = $244;$s$2$ph = $245;$i$2$ph = $i$2$ph$phi;
              }
             }
            }
            $247 = ($dest$0|0)==(0|0);
            if ($247) {
             $265 = $156;
             while(1) {
              $263 = HEAP32[$7>>2]|0;
              $264 = ($263>>>0)<($265>>>0);
              if ($264) {
               $266 = ((($263)) + 1|0);
               HEAP32[$7>>2] = $266;
               $267 = HEAP8[$263>>0]|0;
               $268 = $267&255;
               $271 = $268;
              } else {
               $269 = (___shgetc($f)|0);
               $271 = $269;
              }
              $270 = (($271) + 1)|0;
              $272 = (($scanset) + ($270)|0);
              $273 = HEAP8[$272>>0]|0;
              $274 = ($273<<24>>24)==(0);
              if ($274) {
               $i$4 = 0;$s$3 = 0;$wcs$4 = 0;
               break L88;
              }
              $$pre176 = HEAP32[$8>>2]|0;
              $265 = $$pre176;
             }
            } else {
             $250 = $156;$i$3 = 0;
             while(1) {
              $248 = HEAP32[$7>>2]|0;
              $249 = ($248>>>0)<($250>>>0);
              if ($249) {
               $251 = ((($248)) + 1|0);
               HEAP32[$7>>2] = $251;
               $252 = HEAP8[$248>>0]|0;
               $253 = $252&255;
               $256 = $253;
              } else {
               $254 = (___shgetc($f)|0);
               $256 = $254;
              }
              $255 = (($256) + 1)|0;
              $257 = (($scanset) + ($255)|0);
              $258 = HEAP8[$257>>0]|0;
              $259 = ($258<<24>>24)==(0);
              if ($259) {
               $i$4 = $i$3;$s$3 = $dest$0;$wcs$4 = 0;
               break L88;
              }
              $260 = $256&255;
              $261 = (($i$3) + 1)|0;
              $262 = (($dest$0) + ($i$3)|0);
              HEAP8[$262>>0] = $260;
              $$pre174 = HEAP32[$8>>2]|0;
              $250 = $$pre174;$i$3 = $261;
             }
            }
           }
          } while(0);
          $275 = HEAP32[$8>>2]|0;
          $276 = ($275|0)==(0|0);
          $$pre178 = HEAP32[$7>>2]|0;
          if ($276) {
           $280 = $$pre178;
          } else {
           $277 = ((($$pre178)) + -1|0);
           HEAP32[$7>>2] = $277;
           $280 = $277;
          }
          $278 = HEAP32[$9>>2]|0;
          $279 = HEAP32[$10>>2]|0;
          $281 = $280;
          $282 = $279;
          $283 = (($281) - ($282))|0;
          $284 = (($283) + ($278))|0;
          $285 = ($284|0)==(0);
          if ($285) {
           $alloc$2 = $alloc$0;$matches$2 = $matches$0104;$s$8 = $s$3;$wcs$9 = $wcs$4;
           break L6;
          }
          $$not = $160 ^ 1;
          $286 = ($284|0)==($width$1|0);
          $or$cond8 = $286 | $$not;
          if (!($or$cond8)) {
           $alloc$2 = $alloc$0;$matches$2 = $matches$0104;$s$8 = $s$3;$wcs$9 = $wcs$4;
           break L6;
          }
          do {
           if ($197) {
            if ($196) {
             HEAP32[$dest$0>>2] = $wcs$4;
             break;
            } else {
             HEAP32[$dest$0>>2] = $s$3;
             break;
            }
           }
          } while(0);
          if ($160) {
           $p$10 = $p$9;$s$4 = $s$3;$wcs$5 = $wcs$4;
          } else {
           $287 = ($wcs$4|0)==(0|0);
           if (!($287)) {
            $288 = (($wcs$4) + ($i$4<<2)|0);
            HEAP32[$288>>2] = 0;
           }
           $289 = ($s$3|0)==(0|0);
           if ($289) {
            $p$10 = $p$9;$s$4 = 0;$wcs$5 = $wcs$4;
            break L67;
           }
           $290 = (($s$3) + ($i$4)|0);
           HEAP8[$290>>0] = 0;
           $p$10 = $p$9;$s$4 = $s$3;$wcs$5 = $wcs$4;
          }
          break;
         }
         case 120: case 88: case 112:  {
          $base$0 = 16;
          label = 134;
          break;
         }
         case 111:  {
          $base$0 = 8;
          label = 134;
          break;
         }
         case 117: case 100:  {
          $base$0 = 10;
          label = 134;
          break;
         }
         case 105:  {
          $base$0 = 0;
          label = 134;
          break;
         }
         case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
          $310 = (+___floatscan($f,$$size$0,0));
          $311 = HEAP32[$9>>2]|0;
          $312 = HEAP32[$7>>2]|0;
          $313 = HEAP32[$10>>2]|0;
          $314 = $312;
          $315 = $313;
          $316 = (($315) - ($314))|0;
          $317 = ($311|0)==($316|0);
          if ($317) {
           $alloc$2 = $alloc$0;$matches$2 = $matches$0104;$s$8 = $s$1;$wcs$9 = $wcs$1;
           break L6;
          }
          $318 = ($dest$0|0)==(0|0);
          if ($318) {
           $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          } else {
           switch ($$size$0|0) {
           case 0:  {
            $319 = $310;
            HEAPF32[$dest$0>>2] = $319;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L67;
            break;
           }
           case 1:  {
            HEAPF64[$dest$0>>3] = $310;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L67;
            break;
           }
           case 2:  {
            HEAPF64[$dest$0>>3] = $310;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L67;
            break;
           }
           default: {
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L67;
           }
           }
          }
          break;
         }
         default: {
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
         }
         }
        } while(0);
        L168: do {
         if ((label|0) == 134) {
          label = 0;
          $291 = (___intscan($f,$base$0,0,-1,-1)|0);
          $292 = tempRet0;
          $293 = HEAP32[$9>>2]|0;
          $294 = HEAP32[$7>>2]|0;
          $295 = HEAP32[$10>>2]|0;
          $296 = $294;
          $297 = $295;
          $298 = (($297) - ($296))|0;
          $299 = ($293|0)==($298|0);
          if ($299) {
           $alloc$2 = $alloc$0;$matches$2 = $matches$0104;$s$8 = $s$1;$wcs$9 = $wcs$1;
           break L6;
          }
          $300 = ($$|0)==(112);
          $301 = ($dest$0|0)!=(0|0);
          $or$cond3 = $301 & $300;
          if ($or$cond3) {
           $302 = $291;
           HEAP32[$dest$0>>2] = $302;
           $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
           break;
          }
          $303 = ($dest$0|0)==(0|0);
          if ($303) {
           $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          } else {
           switch ($$size$0|0) {
           case -2:  {
            $304 = $291&255;
            HEAP8[$dest$0>>0] = $304;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L168;
            break;
           }
           case -1:  {
            $305 = $291&65535;
            HEAP16[$dest$0>>1] = $305;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L168;
            break;
           }
           case 0:  {
            HEAP32[$dest$0>>2] = $291;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L168;
            break;
           }
           case 1:  {
            HEAP32[$dest$0>>2] = $291;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L168;
            break;
           }
           case 3:  {
            $306 = $dest$0;
            $307 = $306;
            HEAP32[$307>>2] = $291;
            $308 = (($306) + 4)|0;
            $309 = $308;
            HEAP32[$309>>2] = $292;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L168;
            break;
           }
           default: {
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L168;
           }
           }
          }
         }
        } while(0);
        $320 = HEAP32[$9>>2]|0;
        $321 = HEAP32[$7>>2]|0;
        $322 = HEAP32[$10>>2]|0;
        $323 = $321;
        $324 = $322;
        $325 = (($320) + ($pos$1))|0;
        $326 = (($325) + ($323))|0;
        $327 = (($326) - ($324))|0;
        $not$ = ($dest$0|0)!=(0|0);
        $328 = $not$&1;
        $matches$0$ = (($328) + ($matches$0104))|0;
        $matches$1 = $matches$0$;$p$11 = $p$10;$pos$2 = $327;$s$5 = $s$4;$wcs$6 = $wcs$5;
        break L8;
       }
      } while(0);
      $50 = $47&1;
      $51 = (($p$0109) + ($50)|0);
      ___shlim($f,0);
      $52 = HEAP32[$7>>2]|0;
      $53 = HEAP32[$8>>2]|0;
      $54 = ($52>>>0)<($53>>>0);
      if ($54) {
       $55 = ((($52)) + 1|0);
       HEAP32[$7>>2] = $55;
       $56 = HEAP8[$52>>0]|0;
       $57 = $56&255;
       $61 = $57;
      } else {
       $58 = (___shgetc($f)|0);
       $61 = $58;
      }
      $59 = HEAP8[$51>>0]|0;
      $60 = $59&255;
      $62 = ($61|0)==($60|0);
      if (!($62)) {
       $$lcssa384 = $61;$matches$0104$lcssa = $matches$0104;$s$0107$lcssa = $s$0107;$wcs$0103$lcssa = $wcs$0103;
       label = 21;
       break L6;
      }
      $69 = (($pos$0108) + 1)|0;
      $matches$1 = $matches$0104;$p$11 = $51;$pos$2 = $69;$s$5 = $s$0107;$wcs$6 = $wcs$0103;
     } else {
      $p$1 = $p$0109;
      while(1) {
       $20 = ((($p$1)) + 1|0);
       $21 = HEAP8[$20>>0]|0;
       $22 = $21&255;
       $23 = (_isspace($22)|0);
       $24 = ($23|0)==(0);
       if ($24) {
        $p$1$lcssa = $p$1;
        break;
       } else {
        $p$1 = $20;
       }
      }
      ___shlim($f,0);
      while(1) {
       $25 = HEAP32[$7>>2]|0;
       $26 = HEAP32[$8>>2]|0;
       $27 = ($25>>>0)<($26>>>0);
       if ($27) {
        $28 = ((($25)) + 1|0);
        HEAP32[$7>>2] = $28;
        $29 = HEAP8[$25>>0]|0;
        $30 = $29&255;
        $32 = $30;
       } else {
        $31 = (___shgetc($f)|0);
        $32 = $31;
       }
       $33 = (_isspace($32)|0);
       $34 = ($33|0)==(0);
       if ($34) {
        break;
       }
      }
      $35 = HEAP32[$8>>2]|0;
      $36 = ($35|0)==(0|0);
      $$pre = HEAP32[$7>>2]|0;
      if ($36) {
       $40 = $$pre;
      } else {
       $37 = ((($$pre)) + -1|0);
       HEAP32[$7>>2] = $37;
       $40 = $37;
      }
      $38 = HEAP32[$9>>2]|0;
      $39 = HEAP32[$10>>2]|0;
      $41 = $40;
      $42 = $39;
      $43 = (($38) + ($pos$0108))|0;
      $44 = (($43) + ($41))|0;
      $45 = (($44) - ($42))|0;
      $matches$1 = $matches$0104;$p$11 = $p$1$lcssa;$pos$2 = $45;$s$5 = $s$0107;$wcs$6 = $wcs$0103;
     }
    } while(0);
    $329 = ((($p$11)) + 1|0);
    $330 = HEAP8[$329>>0]|0;
    $331 = ($330<<24>>24)==(0);
    if ($331) {
     $matches$3 = $matches$1;
     break L4;
    } else {
     $17 = $330;$matches$0104 = $matches$1;$p$0109 = $329;$pos$0108 = $pos$2;$s$0107 = $s$5;$wcs$0103 = $wcs$6;
    }
   }
   if ((label|0) == 21) {
    $63 = HEAP32[$8>>2]|0;
    $64 = ($63|0)==(0|0);
    if (!($64)) {
     $65 = HEAP32[$7>>2]|0;
     $66 = ((($65)) + -1|0);
     HEAP32[$7>>2] = $66;
    }
    $67 = ($$lcssa384|0)>(-1);
    $68 = ($matches$0104$lcssa|0)!=(0);
    $or$cond5 = $68 | $67;
    if ($or$cond5) {
     $matches$3 = $matches$0104$lcssa;
     break;
    } else {
     $alloc$1 = 0;$s$7 = $s$0107$lcssa;$wcs$8 = $wcs$0103$lcssa;
     label = 153;
    }
   }
   else if ((label|0) == 152) {
    $$old4 = ($matches$0104376|0)==(0);
    if ($$old4) {
     $alloc$1 = $alloc$0400;$s$7 = $s$6;$wcs$8 = $wcs$7;
     label = 153;
    } else {
     $alloc$2 = $alloc$0400;$matches$2 = $matches$0104376;$s$8 = $s$6;$wcs$9 = $wcs$7;
    }
   }
   if ((label|0) == 153) {
    $alloc$2 = $alloc$1;$matches$2 = -1;$s$8 = $s$7;$wcs$9 = $wcs$8;
   }
   $332 = ($alloc$2|0)==(0);
   if ($332) {
    $matches$3 = $matches$2;
   } else {
    _free($s$8);
    _free($wcs$9);
    $matches$3 = $matches$2;
   }
  }
 } while(0);
 $334 = ($333|0)==(0);
 if (!($334)) {
  ___unlockfile($f);
 }
 STACKTOP = sp;return ($matches$3|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 112|0;
 $f = sp;
 dest=$f; src=6052; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
   label = 4;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$01 = $s;$$02 = $n;
  label = 4;
 }
 if ((label|0) == 4) {
  $4 = $$01;
  $5 = (-2 - ($4))|0;
  $6 = ($$02>>>0)>($5>>>0);
  $$$02 = $6 ? $5 : $$02;
  $7 = ((($f)) + 48|0);
  HEAP32[$7>>2] = $$$02;
  $8 = ((($f)) + 20|0);
  HEAP32[$8>>2] = $$01;
  $9 = ((($f)) + 44|0);
  HEAP32[$9>>2] = $$01;
  $10 = (($$01) + ($$$02)|0);
  $11 = ((($f)) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = ((($f)) + 28|0);
  HEAP32[$12>>2] = $10;
  $13 = (_vfprintf($f,$fmt,$ap)|0);
  $14 = ($$$02|0)==(0);
  if ($14) {
   $$0 = $13;
  } else {
   $15 = HEAP32[$8>>2]|0;
   $16 = HEAP32[$11>>2]|0;
   $17 = ($15|0)==($16|0);
   $18 = $17 << 31 >> 31;
   $19 = (($15) + ($18)|0);
   HEAP8[$19>>0] = 0;
   $$0 = $13;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _vsprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_vsnprintf($s,2147483647,$fmt,$ap)|0);
 return ($0|0);
}
function _vsscanf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $f = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f = sp;
 dest=$f; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = ((($f)) + 32|0);
 HEAP32[$0>>2] = 625;
 $1 = ((($f)) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = ((($f)) + 76|0);
 HEAP32[$2>>2] = -1;
 $3 = ((($f)) + 84|0);
 HEAP32[$3>>2] = $s;
 $4 = (_vfscanf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($4|0);
}
function ___fdopen($fd,$mode) {
 $fd = $fd|0;
 $mode = $mode|0;
 var $$0 = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $tio = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $tio = sp + 52|0;
 $0 = HEAP8[$mode>>0]|0;
 $1 = $0 << 24 >> 24;
 $memchr = (_memchr(16239,$1,4)|0);
 $2 = ($memchr|0)==(0|0);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 22;
  $$0 = 0;
 } else {
  $4 = (_malloc(1144)|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   $$0 = 0;
  } else {
   dest=$4; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $6 = (_strchr($mode,43)|0);
   $7 = ($6|0)==(0|0);
   if ($7) {
    $8 = ($0<<24>>24)==(114);
    $9 = $8 ? 8 : 4;
    HEAP32[$4>>2] = $9;
   }
   $10 = (_strchr($mode,101)|0);
   $11 = ($10|0)==(0|0);
   if ($11) {
    $12 = $0;
   } else {
    HEAP32[$vararg_buffer>>2] = $fd;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
    $$pre = HEAP8[$mode>>0]|0;
    $12 = $$pre;
   }
   $13 = ($12<<24>>24)==(97);
   if ($13) {
    HEAP32[$vararg_buffer3>>2] = $fd;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $14 = (___syscall221(221,($vararg_buffer3|0))|0);
    $15 = $14 & 1024;
    $16 = ($15|0)==(0);
    if ($16) {
     $17 = $14 | 1024;
     HEAP32[$vararg_buffer7>>2] = $fd;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $17;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $18 = HEAP32[$4>>2]|0;
    $19 = $18 | 128;
    HEAP32[$4>>2] = $19;
    $26 = $19;
   } else {
    $$pre1 = HEAP32[$4>>2]|0;
    $26 = $$pre1;
   }
   $20 = ((($4)) + 60|0);
   HEAP32[$20>>2] = $fd;
   $21 = ((($4)) + 120|0);
   $22 = ((($4)) + 44|0);
   HEAP32[$22>>2] = $21;
   $23 = ((($4)) + 48|0);
   HEAP32[$23>>2] = 1024;
   $24 = ((($4)) + 75|0);
   HEAP8[$24>>0] = -1;
   $25 = $26 & 8;
   $27 = ($25|0)==(0);
   if ($27) {
    HEAP32[$vararg_buffer12>>2] = $fd;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21505;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $tio;
    $28 = (___syscall54(54,($vararg_buffer12|0))|0);
    $29 = ($28|0)==(0);
    if ($29) {
     HEAP8[$24>>0] = 10;
    }
   }
   $30 = ((($4)) + 32|0);
   HEAP32[$30>>2] = 626;
   $31 = ((($4)) + 36|0);
   HEAP32[$31>>2] = 350;
   $32 = ((($4)) + 40|0);
   HEAP32[$32>>2] = 351;
   $33 = ((($4)) + 12|0);
   HEAP32[$33>>2] = 349;
   $34 = HEAP32[(5756)>>2]|0;
   $35 = ($34|0)==(0);
   if ($35) {
    $36 = ((($4)) + 76|0);
    HEAP32[$36>>2] = -1;
   }
   ___lock(((5780)|0));
   $37 = HEAP32[(5776)>>2]|0;
   $38 = ((($4)) + 56|0);
   HEAP32[$38>>2] = $37;
   $39 = ($37|0)==(0);
   if (!($39)) {
    $40 = $37;
    $41 = ((($40)) + 52|0);
    HEAP32[$41>>2] = $4;
   }
   HEAP32[(5776)>>2] = $4;
   ___unlock(((5780)|0));
   $$0 = $4;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fmodeflags($mode) {
 $mode = $mode|0;
 var $$ = 0, $$flags$4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags$0 = 0, $flags$0$ = 0, $flags$2 = 0;
 var $flags$2$ = 0, $flags$4 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strchr($mode,43)|0);
 $1 = ($0|0)==(0|0);
 $2 = HEAP8[$mode>>0]|0;
 $not$ = ($2<<24>>24)!=(114);
 $$ = $not$&1;
 $flags$0 = $1 ? $$ : 2;
 $3 = (_strchr($mode,120)|0);
 $4 = ($3|0)==(0|0);
 $5 = $flags$0 | 128;
 $flags$0$ = $4 ? $flags$0 : $5;
 $6 = (_strchr($mode,101)|0);
 $7 = ($6|0)==(0|0);
 $8 = $flags$0$ | 524288;
 $flags$2 = $7 ? $flags$0$ : $8;
 $9 = ($2<<24>>24)==(114);
 $10 = $flags$2 | 64;
 $flags$2$ = $9 ? $flags$2 : $10;
 $11 = ($2<<24>>24)==(119);
 $12 = $flags$2$ | 512;
 $flags$4 = $11 ? $12 : $flags$2$;
 $13 = ($2<<24>>24)==(97);
 $14 = $flags$4 | 1024;
 $$flags$4 = $13 ? $14 : $flags$4;
 return ($$flags$4|0);
}
function ___lockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___unlockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___overflow($f,$_c) {
 $f = $f|0;
 $_c = $_c|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = $_c&255;
 HEAP8[$c>>0] = $0;
 $1 = ((($f)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = (___towrite($f)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$pre = HEAP32[$1>>2]|0;
   $9 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $9 = $2;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $6 = ((($f)) + 20|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7>>>0)<($9>>>0);
   if ($8) {
    $10 = $_c & 255;
    $11 = ((($f)) + 75|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = $12 << 24 >> 24;
    $14 = ($10|0)==($13|0);
    if (!($14)) {
     $15 = ((($7)) + 1|0);
     HEAP32[$6>>2] = $15;
     HEAP8[$7>>0] = $0;
     $$0 = $10;
     break;
    }
   }
   $16 = ((($f)) + 36|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (FUNCTION_TABLE_iiii[$17 & 1023]($f,$c,1)|0);
   $19 = ($18|0)==(1);
   if ($19) {
    $20 = HEAP8[$c>>0]|0;
    $21 = $20&255;
    $$0 = $21;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___stdio_close($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall6(6,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function ___stdio_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $cnt$0 = 0, $iov = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iov = sp + 32|0;
 HEAP32[$iov>>2] = $buf;
 $0 = ((($iov)) + 4|0);
 $1 = ((($f)) + 48|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0);
 $4 = $3&1;
 $5 = (($len) - ($4))|0;
 HEAP32[$0>>2] = $5;
 $6 = ((($iov)) + 8|0);
 $7 = ((($f)) + 44|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = ((($iov)) + 12|0);
 HEAP32[$9>>2] = $2;
 $10 = HEAP32[5752>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $16 = ((($f)) + 60|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $17;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $iov;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = 2;
  $18 = (___syscall145(145,($vararg_buffer3|0))|0);
  $19 = (___syscall_ret($18)|0);
  $cnt$0 = $19;
 } else {
  _pthread_cleanup_push((627|0),($f|0));
  $12 = ((($f)) + 60|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $iov;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 2;
  $14 = (___syscall145(145,($vararg_buffer|0))|0);
  $15 = (___syscall_ret($14)|0);
  _pthread_cleanup_pop(0);
  $cnt$0 = $15;
 }
 $20 = ($cnt$0|0)<(1);
 if ($20) {
  $21 = $cnt$0 & 48;
  $22 = $21 ^ 16;
  $23 = HEAP32[$f>>2]|0;
  $24 = $23 | $22;
  HEAP32[$f>>2] = $24;
  $25 = ((($f)) + 8|0);
  HEAP32[$25>>2] = 0;
  $26 = ((($f)) + 4|0);
  HEAP32[$26>>2] = 0;
  $$0 = $cnt$0;
 } else {
  $27 = HEAP32[$0>>2]|0;
  $28 = ($cnt$0>>>0)>($27>>>0);
  if ($28) {
   $29 = (($cnt$0) - ($27))|0;
   $30 = HEAP32[$7>>2]|0;
   $31 = ((($f)) + 4|0);
   HEAP32[$31>>2] = $30;
   $32 = $30;
   $33 = (($32) + ($29)|0);
   $34 = ((($f)) + 8|0);
   HEAP32[$34>>2] = $33;
   $35 = HEAP32[$1>>2]|0;
   $36 = ($35|0)==(0);
   if ($36) {
    $$0 = $len;
   } else {
    $37 = ((($32)) + 1|0);
    HEAP32[$31>>2] = $37;
    $38 = HEAP8[$32>>0]|0;
    $39 = (($len) + -1)|0;
    $40 = (($buf) + ($39)|0);
    HEAP8[$40>>0] = $38;
    $$0 = $len;
   }
  } else {
   $$0 = $cnt$0;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___stdio_seek($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ret = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ret = sp + 20|0;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $off;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $ret;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $whence;
 $2 = (___syscall140(140,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 $4 = ($3|0)<(0);
 if ($4) {
  HEAP32[$ret>>2] = -1;
  $5 = -1;
 } else {
  $$pre = HEAP32[$ret>>2]|0;
  $5 = $$pre;
 }
 STACKTOP = sp;return ($5|0);
}
function ___stdio_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$0 = 0, $cnt$1 = 0, $iov$0 = 0, $iov$0$lcssa11 = 0, $iov$1 = 0, $iovcnt$0 = 0;
 var $iovcnt$0$lcssa12 = 0, $iovcnt$1 = 0, $iovs = 0, $rem$0 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iovs = sp + 32|0;
 $0 = ((($f)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$iovs>>2] = $1;
 $2 = ((($iovs)) + 4|0);
 $3 = ((($f)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4;
 $6 = (($5) - ($1))|0;
 HEAP32[$2>>2] = $6;
 $7 = ((($iovs)) + 8|0);
 HEAP32[$7>>2] = $buf;
 $8 = ((($iovs)) + 12|0);
 HEAP32[$8>>2] = $len;
 $9 = (($6) + ($len))|0;
 $10 = ((($f)) + 60|0);
 $11 = ((($f)) + 44|0);
 $iov$0 = $iovs;$iovcnt$0 = 2;$rem$0 = $9;
 while(1) {
  $12 = HEAP32[5752>>2]|0;
  $13 = ($12|0)==(0|0);
  if ($13) {
   $17 = HEAP32[$10>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $17;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $iov$0;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $iovcnt$0;
   $18 = (___syscall146(146,($vararg_buffer3|0))|0);
   $19 = (___syscall_ret($18)|0);
   $cnt$0 = $19;
  } else {
   _pthread_cleanup_push((628|0),($f|0));
   $14 = HEAP32[$10>>2]|0;
   HEAP32[$vararg_buffer>>2] = $14;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $iov$0;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $iovcnt$0;
   $15 = (___syscall146(146,($vararg_buffer|0))|0);
   $16 = (___syscall_ret($15)|0);
   _pthread_cleanup_pop(0);
   $cnt$0 = $16;
  }
  $20 = ($rem$0|0)==($cnt$0|0);
  if ($20) {
   label = 6;
   break;
  }
  $27 = ($cnt$0|0)<(0);
  if ($27) {
   $iov$0$lcssa11 = $iov$0;$iovcnt$0$lcssa12 = $iovcnt$0;
   label = 8;
   break;
  }
  $35 = (($rem$0) - ($cnt$0))|0;
  $36 = ((($iov$0)) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($cnt$0>>>0)>($37>>>0);
  if ($38) {
   $39 = HEAP32[$11>>2]|0;
   HEAP32[$0>>2] = $39;
   HEAP32[$3>>2] = $39;
   $40 = (($cnt$0) - ($37))|0;
   $41 = ((($iov$0)) + 8|0);
   $42 = (($iovcnt$0) + -1)|0;
   $$phi$trans$insert = ((($iov$0)) + 12|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $50 = $$pre;$cnt$1 = $40;$iov$1 = $41;$iovcnt$1 = $42;
  } else {
   $43 = ($iovcnt$0|0)==(2);
   if ($43) {
    $44 = HEAP32[$0>>2]|0;
    $45 = (($44) + ($cnt$0)|0);
    HEAP32[$0>>2] = $45;
    $50 = $37;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = 2;
   } else {
    $50 = $37;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = $iovcnt$0;
   }
  }
  $46 = HEAP32[$iov$1>>2]|0;
  $47 = (($46) + ($cnt$1)|0);
  HEAP32[$iov$1>>2] = $47;
  $48 = ((($iov$1)) + 4|0);
  $49 = (($50) - ($cnt$1))|0;
  HEAP32[$48>>2] = $49;
  $iov$0 = $iov$1;$iovcnt$0 = $iovcnt$1;$rem$0 = $35;
 }
 if ((label|0) == 6) {
  $21 = HEAP32[$11>>2]|0;
  $22 = ((($f)) + 48|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($21) + ($23)|0);
  $25 = ((($f)) + 16|0);
  HEAP32[$25>>2] = $24;
  $26 = $21;
  HEAP32[$0>>2] = $26;
  HEAP32[$3>>2] = $26;
  $$0 = $len;
 }
 else if ((label|0) == 8) {
  $28 = ((($f)) + 16|0);
  HEAP32[$28>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$3>>2] = 0;
  $29 = HEAP32[$f>>2]|0;
  $30 = $29 | 32;
  HEAP32[$f>>2] = $30;
  $31 = ($iovcnt$0$lcssa12|0)==(2);
  if ($31) {
   $$0 = 0;
  } else {
   $32 = ((($iov$0$lcssa11)) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($len) - ($33))|0;
   $$0 = $34;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___stdout_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tio = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $tio = sp + 12|0;
 $0 = ((($f)) + 36|0);
 HEAP32[$0>>2] = 350;
 $1 = HEAP32[$f>>2]|0;
 $2 = $1 & 64;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($f)) + 60|0);
  $5 = HEAP32[$4>>2]|0;
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21505;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $tio;
  $6 = (___syscall54(54,($vararg_buffer|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   $8 = ((($f)) + 75|0);
   HEAP8[$8>>0] = -1;
  }
 }
 $9 = (___stdio_write($f,$buf,$len)|0);
 STACKTOP = sp;return ($9|0);
}
function ___string_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k$0 = 0, $k$0$len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($len) + 256)|0;
 $3 = (_memchr($1,0,$2)|0);
 $4 = ($3|0)==(0|0);
 $5 = $3;
 $6 = $1;
 $7 = (($5) - ($6))|0;
 $k$0 = $4 ? $2 : $7;
 $8 = ($k$0>>>0)<($len>>>0);
 $k$0$len = $8 ? $k$0 : $len;
 _memcpy(($buf|0),($1|0),($k$0$len|0))|0;
 $9 = (($1) + ($k$0$len)|0);
 $10 = ((($f)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = (($1) + ($k$0)|0);
 $12 = ((($f)) + 8|0);
 HEAP32[$12>>2] = $11;
 HEAP32[$0>>2] = $11;
 return ($k$0$len|0);
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = ((($f)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($f)) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = ((($f)) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 1023]($f,0,0)|0);
 }
 $13 = ((($f)) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($f)) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = ((($f)) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = ((($f)) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
 } else {
  $18 = $15 & 4;
  $19 = ($18|0)==(0);
  if ($19) {
   $$0 = -1;
  } else {
   $20 = $15 | 32;
   HEAP32[$f>>2] = $20;
   $$0 = -1;
  }
 }
 return ($$0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = ((($f)) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($f)) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($f)) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($f)) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = ((($f)) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = $13;
  $17 = ((($f)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + ($18)|0);
  $20 = ((($f)) + 16|0);
  HEAP32[$20>>2] = $19;
  $$0 = 0;
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = ((($f)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___toread($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $5 = ((($f)) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 1023]($f,$c,1)|0);
  $8 = ($7|0)==(1);
  if ($8) {
   $9 = HEAP8[$c>>0]|0;
   $10 = $9&255;
   $$0 = $10;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _atof($s) {
 $s = $s|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_strtod($s,0));
 return (+$0);
}
function _atoi($s) {
 $s = $s|0;
 var $$0 = 0, $$0$lcssa = 0, $$1$ph = 0, $$13 = 0, $$lcssa9 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit2 = 0, $isdigittmp = 0, $isdigittmp1 = 0, $isdigittmp5 = 0, $n$0$lcssa = 0, $n$04 = 0, $neg$0 = 0, $neg$1$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP8[$$0>>0]|0;
  $1 = $0 << 24 >> 24;
  $2 = (_isspace($1)|0);
  $3 = ($2|0)==(0);
  $4 = ((($$0)) + 1|0);
  if ($3) {
   $$0$lcssa = $$0;$$lcssa9 = $4;
   break;
  } else {
   $$0 = $4;
  }
 }
 $5 = HEAP8[$$0$lcssa>>0]|0;
 $6 = $5 << 24 >> 24;
 switch ($6|0) {
 case 45:  {
  $neg$0 = 1;
  label = 5;
  break;
 }
 case 43:  {
  $neg$0 = 0;
  label = 5;
  break;
 }
 default: {
  $$1$ph = $$0$lcssa;$8 = $5;$neg$1$ph = 0;
 }
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$$lcssa9>>0]|0;
  $$1$ph = $$lcssa9;$8 = $$pre;$neg$1$ph = $neg$0;
 }
 $7 = $8 << 24 >> 24;
 $isdigittmp1 = (($7) + -48)|0;
 $isdigit2 = ($isdigittmp1>>>0)<(10);
 if ($isdigit2) {
  $$13 = $$1$ph;$isdigittmp5 = $isdigittmp1;$n$04 = 0;
  while(1) {
   $9 = ($n$04*10)|0;
   $10 = ((($$13)) + 1|0);
   $11 = (($9) - ($isdigittmp5))|0;
   $12 = HEAP8[$10>>0]|0;
   $13 = $12 << 24 >> 24;
   $isdigittmp = (($13) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if ($isdigit) {
    $$13 = $10;$isdigittmp5 = $isdigittmp;$n$04 = $11;
   } else {
    $n$0$lcssa = $11;
    break;
   }
  }
 } else {
  $n$0$lcssa = 0;
 }
 $14 = ($neg$1$ph|0)!=(0);
 $15 = (0 - ($n$0$lcssa))|0;
 $16 = $14 ? $n$0$lcssa : $15;
 return ($16|0);
}
function _strtod($s,$p) {
 $s = $s|0;
 $p = $p|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_strtox($s,$p,1));
 return (+$0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa44 = 0, $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$110$lcssa = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond18 = 0, $s$0$lcssa = 0, $s$0$lcssa43 = 0, $s$020 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$011 = 0, $w$011$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond18 = $4 & $3;
 L1: do {
  if ($or$cond18) {
   $5 = $c&255;
   $$019 = $n;$s$020 = $src;
   while(1) {
    $6 = HEAP8[$s$020>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa44 = $$019;$s$0$lcssa43 = $s$020;
     label = 6;
     break L1;
    }
    $8 = ((($s$020)) + 1|0);
    $9 = (($$019) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $13 & $12;
    if ($or$cond) {
     $$019 = $9;$s$020 = $8;
    } else {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$0$lcssa44 = $$0$lcssa;$s$0$lcssa43 = $s$0$lcssa;
   label = 6;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa43>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa44;$s$2 = $s$0$lcssa43;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa44>>>0)>(3);
    L11: do {
     if ($18) {
      $$110 = $$0$lcssa44;$w$011 = $s$0$lcssa43;
      while(1) {
       $19 = HEAP32[$w$011>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$110$lcssa = $$110;$w$011$lcssa = $w$011;
        break;
       }
       $26 = ((($w$011)) + 4|0);
       $27 = (($$110) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$110 = $27;$w$011 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        label = 11;
        break L11;
       }
      }
      $$24 = $$110$lcssa;$s$15 = $w$011$lcssa;
     } else {
      $$1$lcssa = $$0$lcssa44;$w$0$lcssa = $s$0$lcssa43;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $29 = ($$1$lcssa|0)==(0);
     if ($29) {
      $$3 = 0;$s$2 = $w$0$lcssa;
      break;
     } else {
      $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
     }
    }
    while(1) {
     $30 = HEAP8[$s$15>>0]|0;
     $31 = ($30<<24>>24)==($15<<24>>24);
     if ($31) {
      $$3 = $$24;$s$2 = $s$15;
      break L8;
     }
     $32 = ((($s$15)) + 1|0);
     $33 = (($$24) + -1)|0;
     $34 = ($33|0)==(0);
     if ($34) {
      $$3 = 0;$s$2 = $32;
      break;
     } else {
      $$24 = $33;$s$15 = $32;
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 return ($36|0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$03 = 0, $$lcssa = 0, $$lcssa19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 L1: do {
  if ($0) {
   $11 = 0;
  } else {
   $$03 = $n;$l$04 = $vl;$r$05 = $vr;
   while(1) {
    $1 = HEAP8[$l$04>>0]|0;
    $2 = HEAP8[$r$05>>0]|0;
    $3 = ($1<<24>>24)==($2<<24>>24);
    if (!($3)) {
     $$lcssa = $1;$$lcssa19 = $2;
     break;
    }
    $4 = (($$03) + -1)|0;
    $5 = ((($l$04)) + 1|0);
    $6 = ((($r$05)) + 1|0);
    $7 = ($4|0)==(0);
    if ($7) {
     $11 = 0;
     break L1;
    } else {
     $$03 = $4;$l$04 = $5;$r$05 = $6;
    }
   }
   $8 = $$lcssa&255;
   $9 = $$lcssa19&255;
   $10 = (($8) - ($9))|0;
   $11 = $10;
  }
 } while(0);
 return ($11|0);
}
function _strchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___strchrnul($s,$c)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $c&255;
 $3 = ($1<<24>>24)==($2<<24>>24);
 $4 = $3 ? $0 : 0;
 return ($4|0);
}
function ___strchrnul($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$02$lcssa = 0, $$0211 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond5 = 0, $w$0$lcssa = 0, $w$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = ($0|0)==(0);
 L1: do {
  if ($1) {
   $6 = (_strlen($s)|0);
   $7 = (($s) + ($6)|0);
   $$0 = $7;
  } else {
   $2 = $s;
   $3 = $2 & 3;
   $4 = ($3|0)==(0);
   if ($4) {
    $$02$lcssa = $s;
   } else {
    $5 = $c&255;
    $$0211 = $s;
    while(1) {
     $8 = HEAP8[$$0211>>0]|0;
     $9 = ($8<<24>>24)==(0);
     $10 = ($8<<24>>24)==($5<<24>>24);
     $or$cond = $9 | $10;
     if ($or$cond) {
      $$0 = $$0211;
      break L1;
     }
     $11 = ((($$0211)) + 1|0);
     $12 = $11;
     $13 = $12 & 3;
     $14 = ($13|0)==(0);
     if ($14) {
      $$02$lcssa = $11;
      break;
     } else {
      $$0211 = $11;
     }
    }
   }
   $15 = Math_imul($0, 16843009)|0;
   $16 = HEAP32[$$02$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   L10: do {
    if ($21) {
     $23 = $16;$w$08 = $$02$lcssa;
     while(1) {
      $22 = $23 ^ $15;
      $24 = (($22) + -16843009)|0;
      $25 = $22 & -2139062144;
      $26 = $25 ^ -2139062144;
      $27 = $26 & $24;
      $28 = ($27|0)==(0);
      if (!($28)) {
       $w$0$lcssa = $w$08;
       break L10;
      }
      $29 = ((($w$08)) + 4|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($30) + -16843009)|0;
      $32 = $30 & -2139062144;
      $33 = $32 ^ -2139062144;
      $34 = $33 & $31;
      $35 = ($34|0)==(0);
      if ($35) {
       $23 = $30;$w$08 = $29;
      } else {
       $w$0$lcssa = $29;
       break;
      }
     }
    } else {
     $w$0$lcssa = $$02$lcssa;
    }
   } while(0);
   $36 = $c&255;
   $$1 = $w$0$lcssa;
   while(1) {
    $37 = HEAP8[$$1>>0]|0;
    $38 = ($37<<24>>24)==(0);
    $39 = ($37<<24>>24)==($36<<24>>24);
    $or$cond5 = $38 | $39;
    $40 = ((($$1)) + 1|0);
    if ($or$cond5) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $40;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function ___strdup($s) {
 $s = $s|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($s)|0);
 $1 = (($0) + 1)|0;
 $2 = (_malloc($1)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
 } else {
  _memcpy(($2|0),($s|0),($1|0))|0;
  $$0 = $2;
 }
 return ($$0|0);
}
function _strlen($s) {
 $s = $s|0;
 var $$0 = 0, $$01$lcssa = 0, $$014 = 0, $$1$lcssa = 0, $$lcssa20 = 0, $$pn = 0, $$pn15 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $w$0 = 0, $w$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $0 & 3;
 $2 = ($1|0)==(0);
 L1: do {
  if ($2) {
   $$01$lcssa = $s;
   label = 4;
  } else {
   $$014 = $s;$21 = $0;
   while(1) {
    $3 = HEAP8[$$014>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $$pn = $21;
     break L1;
    }
    $5 = ((($$014)) + 1|0);
    $6 = $5;
    $7 = $6 & 3;
    $8 = ($7|0)==(0);
    if ($8) {
     $$01$lcssa = $5;
     label = 4;
     break;
    } else {
     $$014 = $5;$21 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $w$0 = $$01$lcssa;
  while(1) {
   $9 = HEAP32[$w$0>>2]|0;
   $10 = (($9) + -16843009)|0;
   $11 = $9 & -2139062144;
   $12 = $11 ^ -2139062144;
   $13 = $12 & $10;
   $14 = ($13|0)==(0);
   $15 = ((($w$0)) + 4|0);
   if ($14) {
    $w$0 = $15;
   } else {
    $$lcssa20 = $9;$w$0$lcssa = $w$0;
    break;
   }
  }
  $16 = $$lcssa20&255;
  $17 = ($16<<24>>24)==(0);
  if ($17) {
   $$1$lcssa = $w$0$lcssa;
  } else {
   $$pn15 = $w$0$lcssa;
   while(1) {
    $18 = ((($$pn15)) + 1|0);
    $$pre = HEAP8[$18>>0]|0;
    $19 = ($$pre<<24>>24)==(0);
    if ($19) {
     $$1$lcssa = $18;
     break;
    } else {
     $$pn15 = $18;
    }
   }
  }
  $20 = $$1$lcssa;
  $$pn = $20;
 }
 $$0 = (($$pn) - ($0))|0;
 return ($$0|0);
}
function _strncmp($_l,$_r,$n) {
 $_l = $_l|0;
 $_r = $_r|0;
 $n = $n|0;
 var $$03 = 0, $$08 = 0, $$08$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $l$06 = 0, $or$cond = 0, $or$cond4 = 0, $r$0$lcssa = 0, $r$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $$03 = 0;
 } else {
  $1 = HEAP8[$_l>>0]|0;
  $2 = ($1<<24>>24)==(0);
  L3: do {
   if ($2) {
    $13 = 0;$r$0$lcssa = $_r;
   } else {
    $$08$in = $n;$6 = $1;$l$06 = $_l;$r$07 = $_r;
    while(1) {
     $$08 = (($$08$in) + -1)|0;
     $3 = HEAP8[$r$07>>0]|0;
     $4 = ($3<<24>>24)!=(0);
     $5 = ($$08|0)!=(0);
     $or$cond = $5 & $4;
     $7 = ($6<<24>>24)==($3<<24>>24);
     $or$cond4 = $7 & $or$cond;
     if (!($or$cond4)) {
      $13 = $6;$r$0$lcssa = $r$07;
      break L3;
     }
     $8 = ((($l$06)) + 1|0);
     $9 = ((($r$07)) + 1|0);
     $10 = HEAP8[$8>>0]|0;
     $11 = ($10<<24>>24)==(0);
     if ($11) {
      $13 = 0;$r$0$lcssa = $9;
      break;
     } else {
      $$08$in = $$08;$6 = $10;$l$06 = $8;$r$07 = $9;
     }
    }
   }
  } while(0);
  $12 = $13&255;
  $14 = HEAP8[$r$0$lcssa>>0]|0;
  $15 = $14&255;
  $16 = (($12) - ($15))|0;
  $$03 = $16;
 }
 return ($$03|0);
}
function _wcslen($s) {
 $s = $s|0;
 var $$0 = 0, $$0$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP32[$$0>>2]|0;
  $1 = ($0|0)==(0);
  $2 = ((($$0)) + 4|0);
  if ($1) {
   $$0$lcssa = $$0;
   break;
  } else {
   $$0 = $2;
  }
 }
 $3 = $$0$lcssa;
 $4 = $s;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 return ($6|0);
}
function _wmemcpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$014 = 0, $$023 = 0, $$05 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if (!($0)) {
  $$014 = $n;$$023 = $s;$$05 = $d;
  while(1) {
   $1 = (($$014) + -1)|0;
   $2 = ((($$023)) + 4|0);
   $3 = HEAP32[$$023>>2]|0;
   $4 = ((($$05)) + 4|0);
   HEAP32[$$05>>2] = $3;
   $5 = ($1|0)==(0);
   if ($5) {
    break;
   } else {
    $$014 = $1;$$023 = $2;$$05 = $4;
   }
  }
 }
 return ($d|0);
}
function _wmemset($d,$c,$n) {
 $d = $d|0;
 $c = $c|0;
 $n = $n|0;
 var $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if (!($0)) {
  $$012 = $n;$$03 = $d;
  while(1) {
   $1 = (($$012) + -1)|0;
   $2 = ((($$03)) + 4|0);
   HEAP32[$$03>>2] = $c;
   $3 = ($1|0)==(0);
   if ($3) {
    break;
   } else {
    $$012 = $1;$$03 = $2;
   }
  }
 }
 return ($d|0);
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $$lcssa22 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $c$0 = 0, $c$1$be = 0, $c$1$be$lcssa = 0, $c$112 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$27 = 0, $c$3$be = 0, $neg$0 = 0, $or$cond3 = 0, $x$013 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $5 = ((($1)) + 1|0);
  HEAP32[$0>>2] = $5;
  $6 = HEAP8[$1>>0]|0;
  $7 = $6&255;
  $9 = $7;
 } else {
  $8 = (___shgetc($f)|0);
  $9 = $8;
 }
 $10 = ($9|0)==(45);
 switch ($9|0) {
 case 43: case 45:  {
  $11 = $10&1;
  $12 = HEAP32[$0>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($12>>>0)<($13>>>0);
  if ($14) {
   $15 = ((($12)) + 1|0);
   HEAP32[$0>>2] = $15;
   $16 = HEAP8[$12>>0]|0;
   $17 = $16&255;
   $20 = $17;
  } else {
   $18 = (___shgetc($f)|0);
   $20 = $18;
  }
  $19 = (($20) + -48)|0;
  $21 = ($19>>>0)>(9);
  $22 = ($pok|0)!=(0);
  $or$cond3 = $22 & $21;
  if ($or$cond3) {
   $23 = HEAP32[$2>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $c$0 = $20;$neg$0 = $11;
   } else {
    $25 = HEAP32[$0>>2]|0;
    $26 = ((($25)) + -1|0);
    HEAP32[$0>>2] = $26;
    $c$0 = $20;$neg$0 = $11;
   }
  } else {
   $c$0 = $20;$neg$0 = $11;
  }
  break;
 }
 default: {
  $c$0 = $9;$neg$0 = 0;
 }
 }
 $27 = (($c$0) + -48)|0;
 $28 = ($27>>>0)>(9);
 if ($28) {
  $29 = HEAP32[$2>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $98 = -2147483648;$99 = 0;
  } else {
   $31 = HEAP32[$0>>2]|0;
   $32 = ((($31)) + -1|0);
   HEAP32[$0>>2] = $32;
   $98 = -2147483648;$99 = 0;
  }
 } else {
  $c$112 = $c$0;$x$013 = 0;
  while(1) {
   $33 = ($x$013*10)|0;
   $34 = (($c$112) + -48)|0;
   $35 = (($34) + ($33))|0;
   $36 = HEAP32[$0>>2]|0;
   $37 = HEAP32[$2>>2]|0;
   $38 = ($36>>>0)<($37>>>0);
   if ($38) {
    $39 = ((($36)) + 1|0);
    HEAP32[$0>>2] = $39;
    $40 = HEAP8[$36>>0]|0;
    $41 = $40&255;
    $c$1$be = $41;
   } else {
    $42 = (___shgetc($f)|0);
    $c$1$be = $42;
   }
   $43 = (($c$1$be) + -48)|0;
   $44 = ($43>>>0)<(10);
   $45 = ($35|0)<(214748364);
   $46 = $44 & $45;
   if ($46) {
    $c$112 = $c$1$be;$x$013 = $35;
   } else {
    $$lcssa22 = $35;$c$1$be$lcssa = $c$1$be;
    break;
   }
  }
  $47 = ($$lcssa22|0)<(0);
  $48 = $47 << 31 >> 31;
  $49 = (($c$1$be$lcssa) + -48)|0;
  $50 = ($49>>>0)<(10);
  if ($50) {
   $53 = $$lcssa22;$54 = $48;$c$27 = $c$1$be$lcssa;
   while(1) {
    $55 = (___muldi3(($53|0),($54|0),10,0)|0);
    $56 = tempRet0;
    $57 = ($c$27|0)<(0);
    $58 = $57 << 31 >> 31;
    $59 = (_i64Add(($c$27|0),($58|0),-48,-1)|0);
    $60 = tempRet0;
    $61 = (_i64Add(($59|0),($60|0),($55|0),($56|0))|0);
    $62 = tempRet0;
    $63 = HEAP32[$0>>2]|0;
    $64 = HEAP32[$2>>2]|0;
    $65 = ($63>>>0)<($64>>>0);
    if ($65) {
     $66 = ((($63)) + 1|0);
     HEAP32[$0>>2] = $66;
     $67 = HEAP8[$63>>0]|0;
     $68 = $67&255;
     $c$2$be = $68;
    } else {
     $69 = (___shgetc($f)|0);
     $c$2$be = $69;
    }
    $70 = (($c$2$be) + -48)|0;
    $71 = ($70>>>0)<(10);
    $72 = ($62|0)<(21474836);
    $73 = ($61>>>0)<(2061584302);
    $74 = ($62|0)==(21474836);
    $75 = $74 & $73;
    $76 = $72 | $75;
    $77 = $71 & $76;
    if ($77) {
     $53 = $61;$54 = $62;$c$27 = $c$2$be;
    } else {
     $92 = $61;$93 = $62;$c$2$lcssa = $c$2$be;
     break;
    }
   }
  } else {
   $92 = $$lcssa22;$93 = $48;$c$2$lcssa = $c$1$be$lcssa;
  }
  $51 = (($c$2$lcssa) + -48)|0;
  $52 = ($51>>>0)<(10);
  if ($52) {
   while(1) {
    $78 = HEAP32[$0>>2]|0;
    $79 = HEAP32[$2>>2]|0;
    $80 = ($78>>>0)<($79>>>0);
    if ($80) {
     $81 = ((($78)) + 1|0);
     HEAP32[$0>>2] = $81;
     $82 = HEAP8[$78>>0]|0;
     $83 = $82&255;
     $c$3$be = $83;
    } else {
     $84 = (___shgetc($f)|0);
     $c$3$be = $84;
    }
    $85 = (($c$3$be) + -48)|0;
    $86 = ($85>>>0)<(10);
    if (!($86)) {
     break;
    }
   }
  }
  $87 = HEAP32[$2>>2]|0;
  $88 = ($87|0)==(0|0);
  if (!($88)) {
   $89 = HEAP32[$0>>2]|0;
   $90 = ((($89)) + -1|0);
   HEAP32[$0>>2] = $90;
  }
  $91 = ($neg$0|0)!=(0);
  $94 = (_i64Subtract(0,0,($92|0),($93|0))|0);
  $95 = tempRet0;
  $96 = $91 ? $94 : $92;
  $97 = $91 ? $95 : $93;
  $98 = $97;$99 = $96;
 }
 tempRet0 = ($98);
 return ($99|0);
}
function ___fflush_unlocked($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)>($3>>>0);
 if ($4) {
  $5 = ((($f)) + 36|0);
  $6 = HEAP32[$5>>2]|0;
  (FUNCTION_TABLE_iiii[$6 & 1023]($f,0,0)|0);
  $7 = HEAP32[$0>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $9 = ((($f)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($f)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($10>>>0)<($12>>>0);
  if ($13) {
   $14 = ((($f)) + 40|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $10;
   $17 = $12;
   $18 = (($16) - ($17))|0;
   (FUNCTION_TABLE_iiii[$15 & 1023]($f,$18,1)|0);
  }
  $19 = ((($f)) + 16|0);
  HEAP32[$19>>2] = 0;
  HEAP32[$2>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$11>>2] = 0;
  HEAP32[$9>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$012$i = 0, $$013$i = 0, $$03$i33 = 0, $$07$i = 0.0, $$1$i = 0.0, $$114$i = 0, $$2$i = 0.0, $$20$i = 0.0, $$21$i = 0, $$210$$22$i = 0, $$210$$24$i = 0, $$210$i = 0, $$23$i = 0, $$3$i = 0.0, $$31$i = 0;
 var $$311$i = 0, $$4$i = 0.0, $$412$lcssa$i = 0, $$41276$i = 0, $$5$lcssa$i = 0, $$51 = 0, $$587$i = 0, $$a$3$i = 0, $$a$3185$i = 0, $$a$3186$i = 0, $$fl$4 = 0, $$l10n$0 = 0, $$lcssa = 0, $$lcssa159$i = 0, $$lcssa318 = 0, $$lcssa323 = 0, $$lcssa324 = 0, $$lcssa325 = 0, $$lcssa326 = 0, $$lcssa327 = 0;
 var $$lcssa329 = 0, $$lcssa339 = 0, $$lcssa342 = 0.0, $$lcssa344 = 0, $$neg52$i = 0, $$neg53$i = 0, $$p$$i = 0, $$p$0 = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr47$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi184$iZ2D = 0, $$pre179$i = 0, $$pre182$i = 0, $$pre183$i = 0, $$pre193 = 0;
 var $$sum$i = 0, $$sum15$i = 0, $$sum16$i = 0, $$z$3$i = 0, $$z$4$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0.0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0.0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0.0, $392 = 0.0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0.0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0.0, $416 = 0.0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0.0, $443 = 0.0, $444 = 0.0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0.0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0.0, $486 = 0.0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0.0, $597 = 0.0, $598 = 0;
 var $599 = 0.0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1147$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3134$i = 0, $a$5$lcssa$i = 0, $a$5109$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $arg = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0;
 var $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0140$i = 0, $carry3$0128$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0$i = 0, $d$0139$i = 0, $d$0141$i = 0, $d$1127$i = 0, $d$2$lcssa$i = 0, $d$2108$i = 0, $d$3$i = 0, $d$482$i = 0, $d$575$i = 0, $d$686$i = 0, $e$0123$i = 0;
 var $e$1$i = 0, $e$2104$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$193$i = 0, $estr$2$i = 0, $exitcond$i = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0;
 var $expanded8 = 0, $fl$0109 = 0, $fl$062 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $fmt39$lcssa = 0, $fmt39101 = 0, $fmt40 = 0, $fmt41 = 0, $fmt42 = 0, $fmt44 = 0, $fmt44$lcssa321 = 0, $fmt45 = 0, $i$0$lcssa = 0, $i$0$lcssa200 = 0, $i$0114 = 0, $i$0122$i = 0;
 var $i$03$i = 0, $i$03$i25 = 0, $i$1$lcssa$i = 0, $i$1116$i = 0, $i$1125 = 0, $i$2100 = 0, $i$2100$lcssa = 0, $i$2103$i = 0, $i$398 = 0, $i$399$i = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i27 = 0, $isdigit10 = 0, $isdigit12 = 0, $isdigit2$i = 0, $isdigit2$i23 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0;
 var $isdigittmp$i26 = 0, $isdigittmp1$i = 0, $isdigittmp1$i22 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i24 = 0, $isdigittmp9 = 0, $j$0$i = 0, $j$0115$i = 0, $j$0117$i = 0, $j$1100$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1113 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$lcssa = 0, $l10n$0$phi = 0;
 var $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notlhs$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond20 = 0, $or$cond240 = 0, $or$cond29$i = 0, $or$cond3$not$i = 0, $or$cond6$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$3 = 0;
 var $p$4198 = 0, $p$5 = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$169$i = 0, $round$068$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$1$i = 0, $s$1$i$lcssa = 0, $s1$0$i = 0;
 var $s7$079$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$070$i = 0, $s9$0$i = 0, $s9$183$i = 0, $s9$2$i = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa322 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge8108 = 0, $storemerge860 = 0, $sum = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0;
 var $w$1 = 0, $w$2 = 0, $w$30$i = 0, $wc = 0, $ws$0115 = 0, $ws$1126 = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$0102 = 0, $z$1 = 0, $z$1$lcssa$i = 0, $z$1146$i = 0, $z$2 = 0, $z$2$i = 0, $z$2$i$lcssa = 0, $z$3$lcssa$i = 0, $z$3133$i = 0, $z$4$i = 0, $z$6$$i = 0, $z$6$i = 0;
 var $z$6$i$lcssa = 0, $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 24|0;
 $e2$i = sp + 16|0;
 $buf$i = sp + 588|0;
 $ebuf0$i = sp + 576|0;
 $arg = sp;
 $buf = sp + 536|0;
 $wc = sp + 8|0;
 $mb = sp + 528|0;
 $0 = ($f|0)!=(0|0);
 $1 = ((($buf)) + 40|0);
 $2 = $1;
 $3 = ((($buf)) + 39|0);
 $4 = ((($wc)) + 4|0);
 $5 = ((($ebuf0$i)) + 12|0);
 $6 = ((($ebuf0$i)) + 11|0);
 $7 = $buf$i;
 $8 = $5;
 $9 = (($8) - ($7))|0;
 $10 = (-2 - ($7))|0;
 $11 = (($8) + 2)|0;
 $12 = ((($big$i)) + 288|0);
 $13 = ((($buf$i)) + 9|0);
 $14 = $13;
 $15 = ((($buf$i)) + 8|0);
 $cnt$0 = 0;$fmt41 = $fmt;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $16 = ($cnt$0|0)>(-1);
  do {
   if ($16) {
    $17 = (2147483647 - ($cnt$0))|0;
    $18 = ($l$0|0)>($17|0);
    if ($18) {
     $19 = (___errno_location()|0);
     HEAP32[$19>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $20 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $20;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $21 = HEAP8[$fmt41>>0]|0;
  $22 = ($21<<24>>24)==(0);
  if ($22) {
   $cnt$1$lcssa = $cnt$1;$l10n$0$lcssa = $l10n$0;
   label = 245;
   break;
  } else {
   $23 = $21;$fmt40 = $fmt41;
  }
  L9: while(1) {
   switch ($23<<24>>24) {
   case 37:  {
    $fmt39101 = $fmt40;$z$0102 = $fmt40;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $fmt39$lcssa = $fmt40;$z$0$lcssa = $fmt40;
    break L9;
    break;
   }
   default: {
   }
   }
   $24 = ((($fmt40)) + 1|0);
   $$pre = HEAP8[$24>>0]|0;
   $23 = $$pre;$fmt40 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $25 = ((($fmt39101)) + 1|0);
     $26 = HEAP8[$25>>0]|0;
     $27 = ($26<<24>>24)==(37);
     if (!($27)) {
      $fmt39$lcssa = $fmt39101;$z$0$lcssa = $z$0102;
      break L12;
     }
     $28 = ((($z$0102)) + 1|0);
     $29 = ((($fmt39101)) + 2|0);
     $30 = HEAP8[$29>>0]|0;
     $31 = ($30<<24>>24)==(37);
     if ($31) {
      $fmt39101 = $29;$z$0102 = $28;
      label = 9;
     } else {
      $fmt39$lcssa = $29;$z$0$lcssa = $28;
      break;
     }
    }
   }
  } while(0);
  $32 = $z$0$lcssa;
  $33 = $fmt41;
  $34 = (($32) - ($33))|0;
  if ($0) {
   $35 = HEAP32[$f>>2]|0;
   $36 = $35 & 32;
   $37 = ($36|0)==(0);
   if ($37) {
    (___fwritex($fmt41,$34,$f)|0);
   }
  }
  $38 = ($z$0$lcssa|0)==($fmt41|0);
  if (!($38)) {
   $l10n$0$phi = $l10n$0;$cnt$0 = $cnt$1;$fmt41 = $fmt39$lcssa;$l$0 = $34;$l10n$0 = $l10n$0$phi;
   continue;
  }
  $39 = ((($fmt39$lcssa)) + 1|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40 << 24 >> 24;
  $isdigittmp = (($41) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $42 = ((($fmt39$lcssa)) + 2|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = ($43<<24>>24)==(36);
   $45 = ((($fmt39$lcssa)) + 3|0);
   $$51 = $44 ? $45 : $39;
   $$l10n$0 = $44 ? 1 : $l10n$0;
   $isdigittmp$ = $44 ? $isdigittmp : -1;
   $$pre193 = HEAP8[$$51>>0]|0;
   $47 = $$pre193;$argpos$0 = $isdigittmp$;$l10n$1 = $$l10n$0;$storemerge = $$51;
  } else {
   $47 = $40;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $39;
  }
  $46 = $47 << 24 >> 24;
  $48 = $46 & -32;
  $49 = ($48|0)==(32);
  L25: do {
   if ($49) {
    $51 = $46;$56 = $47;$fl$0109 = 0;$storemerge8108 = $storemerge;
    while(1) {
     $50 = (($51) + -32)|0;
     $52 = 1 << $50;
     $53 = $52 & 75913;
     $54 = ($53|0)==(0);
     if ($54) {
      $65 = $56;$fl$062 = $fl$0109;$storemerge860 = $storemerge8108;
      break L25;
     }
     $55 = $56 << 24 >> 24;
     $57 = (($55) + -32)|0;
     $58 = 1 << $57;
     $59 = $58 | $fl$0109;
     $60 = ((($storemerge8108)) + 1|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61 << 24 >> 24;
     $63 = $62 & -32;
     $64 = ($63|0)==(32);
     if ($64) {
      $51 = $62;$56 = $61;$fl$0109 = $59;$storemerge8108 = $60;
     } else {
      $65 = $61;$fl$062 = $59;$storemerge860 = $60;
      break;
     }
    }
   } else {
    $65 = $47;$fl$062 = 0;$storemerge860 = $storemerge;
   }
  } while(0);
  $66 = ($65<<24>>24)==(42);
  do {
   if ($66) {
    $67 = ((($storemerge860)) + 1|0);
    $68 = HEAP8[$67>>0]|0;
    $69 = $68 << 24 >> 24;
    $isdigittmp11 = (($69) + -48)|0;
    $isdigit12 = ($isdigittmp11>>>0)<(10);
    if ($isdigit12) {
     $70 = ((($storemerge860)) + 2|0);
     $71 = HEAP8[$70>>0]|0;
     $72 = ($71<<24>>24)==(36);
     if ($72) {
      $73 = (($nl_type) + ($isdigittmp11<<2)|0);
      HEAP32[$73>>2] = 10;
      $74 = HEAP8[$67>>0]|0;
      $75 = $74 << 24 >> 24;
      $76 = (($75) + -48)|0;
      $77 = (($nl_arg) + ($76<<3)|0);
      $78 = $77;
      $79 = $78;
      $80 = HEAP32[$79>>2]|0;
      $81 = (($78) + 4)|0;
      $82 = $81;
      $83 = HEAP32[$82>>2]|0;
      $84 = ((($storemerge860)) + 3|0);
      $l10n$2 = 1;$storemerge13 = $84;$w$0 = $80;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $85 = ($l10n$1|0)==(0);
     if (!($85)) {
      $$0 = -1;
      break L1;
     }
     if (!($0)) {
      $fl$1 = $fl$062;$fmt42 = $67;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $86 = $arglist_current;
     $87 = ((0) + 4|0);
     $expanded4 = $87;
     $expanded = (($expanded4) - 1)|0;
     $88 = (($86) + ($expanded))|0;
     $89 = ((0) + 4|0);
     $expanded8 = $89;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $90 = $88 & $expanded6;
     $91 = $90;
     $92 = HEAP32[$91>>2]|0;
     $arglist_next = ((($91)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge13 = $67;$w$0 = $92;
    }
    $93 = ($w$0|0)<(0);
    if ($93) {
     $94 = $fl$062 | 8192;
     $95 = (0 - ($w$0))|0;
     $fl$1 = $94;$fmt42 = $storemerge13;$l10n$3 = $l10n$2;$w$1 = $95;
    } else {
     $fl$1 = $fl$062;$fmt42 = $storemerge13;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $96 = $65 << 24 >> 24;
    $isdigittmp1$i = (($96) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $100 = $storemerge860;$i$03$i = 0;$isdigittmp4$i = $isdigittmp1$i;
     while(1) {
      $97 = ($i$03$i*10)|0;
      $98 = (($97) + ($isdigittmp4$i))|0;
      $99 = ((($100)) + 1|0);
      $101 = HEAP8[$99>>0]|0;
      $102 = $101 << 24 >> 24;
      $isdigittmp$i = (($102) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $100 = $99;$i$03$i = $98;$isdigittmp4$i = $isdigittmp$i;
      } else {
       $$lcssa = $98;$$lcssa318 = $99;
       break;
      }
     }
     $103 = ($$lcssa|0)<(0);
     if ($103) {
      $$0 = -1;
      break L1;
     } else {
      $fl$1 = $fl$062;$fmt42 = $$lcssa318;$l10n$3 = $l10n$1;$w$1 = $$lcssa;
     }
    } else {
     $fl$1 = $fl$062;$fmt42 = $storemerge860;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $104 = HEAP8[$fmt42>>0]|0;
  $105 = ($104<<24>>24)==(46);
  L46: do {
   if ($105) {
    $106 = ((($fmt42)) + 1|0);
    $107 = HEAP8[$106>>0]|0;
    $108 = ($107<<24>>24)==(42);
    if (!($108)) {
     $135 = $107 << 24 >> 24;
     $isdigittmp1$i22 = (($135) + -48)|0;
     $isdigit2$i23 = ($isdigittmp1$i22>>>0)<(10);
     if ($isdigit2$i23) {
      $139 = $106;$i$03$i25 = 0;$isdigittmp4$i24 = $isdigittmp1$i22;
     } else {
      $fmt45 = $106;$p$0 = 0;
      break;
     }
     while(1) {
      $136 = ($i$03$i25*10)|0;
      $137 = (($136) + ($isdigittmp4$i24))|0;
      $138 = ((($139)) + 1|0);
      $140 = HEAP8[$138>>0]|0;
      $141 = $140 << 24 >> 24;
      $isdigittmp$i26 = (($141) + -48)|0;
      $isdigit$i27 = ($isdigittmp$i26>>>0)<(10);
      if ($isdigit$i27) {
       $139 = $138;$i$03$i25 = $137;$isdigittmp4$i24 = $isdigittmp$i26;
      } else {
       $fmt45 = $138;$p$0 = $137;
       break L46;
      }
     }
    }
    $109 = ((($fmt42)) + 2|0);
    $110 = HEAP8[$109>>0]|0;
    $111 = $110 << 24 >> 24;
    $isdigittmp9 = (($111) + -48)|0;
    $isdigit10 = ($isdigittmp9>>>0)<(10);
    if ($isdigit10) {
     $112 = ((($fmt42)) + 3|0);
     $113 = HEAP8[$112>>0]|0;
     $114 = ($113<<24>>24)==(36);
     if ($114) {
      $115 = (($nl_type) + ($isdigittmp9<<2)|0);
      HEAP32[$115>>2] = 10;
      $116 = HEAP8[$109>>0]|0;
      $117 = $116 << 24 >> 24;
      $118 = (($117) + -48)|0;
      $119 = (($nl_arg) + ($118<<3)|0);
      $120 = $119;
      $121 = $120;
      $122 = HEAP32[$121>>2]|0;
      $123 = (($120) + 4)|0;
      $124 = $123;
      $125 = HEAP32[$124>>2]|0;
      $126 = ((($fmt42)) + 4|0);
      $fmt45 = $126;$p$0 = $122;
      break;
     }
    }
    $127 = ($l10n$3|0)==(0);
    if (!($127)) {
     $$0 = -1;
     break L1;
    }
    if ($0) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $128 = $arglist_current2;
     $129 = ((0) + 4|0);
     $expanded11 = $129;
     $expanded10 = (($expanded11) - 1)|0;
     $130 = (($128) + ($expanded10))|0;
     $131 = ((0) + 4|0);
     $expanded15 = $131;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $132 = $130 & $expanded13;
     $133 = $132;
     $134 = HEAP32[$133>>2]|0;
     $arglist_next3 = ((($133)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $fmt45 = $109;$p$0 = $134;
    } else {
     $fmt45 = $109;$p$0 = 0;
    }
   } else {
    $fmt45 = $fmt42;$p$0 = -1;
   }
  } while(0);
  $fmt44 = $fmt45;$st$0 = 0;
  while(1) {
   $142 = HEAP8[$fmt44>>0]|0;
   $143 = $142 << 24 >> 24;
   $144 = (($143) + -65)|0;
   $145 = ($144>>>0)>(57);
   if ($145) {
    $$0 = -1;
    break L1;
   }
   $146 = ((($fmt44)) + 1|0);
   $147 = ((17283 + (($st$0*58)|0)|0) + ($144)|0);
   $148 = HEAP8[$147>>0]|0;
   $149 = $148&255;
   $150 = (($149) + -1)|0;
   $151 = ($150>>>0)<(8);
   if ($151) {
    $fmt44 = $146;$st$0 = $149;
   } else {
    $$lcssa323 = $146;$$lcssa324 = $148;$$lcssa325 = $149;$fmt44$lcssa321 = $fmt44;$st$0$lcssa322 = $st$0;
    break;
   }
  }
  $152 = ($$lcssa324<<24>>24)==(0);
  if ($152) {
   $$0 = -1;
   break;
  }
  $153 = ($$lcssa324<<24>>24)==(19);
  $154 = ($argpos$0|0)>(-1);
  do {
   if ($153) {
    if ($154) {
     $$0 = -1;
     break L1;
    } else {
     label = 52;
    }
   } else {
    if ($154) {
     $155 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$155>>2] = $$lcssa325;
     $156 = (($nl_arg) + ($argpos$0<<3)|0);
     $157 = $156;
     $158 = $157;
     $159 = HEAP32[$158>>2]|0;
     $160 = (($157) + 4)|0;
     $161 = $160;
     $162 = HEAP32[$161>>2]|0;
     $163 = $arg;
     $164 = $163;
     HEAP32[$164>>2] = $159;
     $165 = (($163) + 4)|0;
     $166 = $165;
     HEAP32[$166>>2] = $162;
     label = 52;
     break;
    }
    if (!($0)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($arg,$$lcssa325,$ap);
   }
  } while(0);
  if ((label|0) == 52) {
   label = 0;
   if (!($0)) {
    $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
    continue;
   }
  }
  $167 = HEAP8[$fmt44$lcssa321>>0]|0;
  $168 = $167 << 24 >> 24;
  $169 = ($st$0$lcssa322|0)!=(0);
  $170 = $168 & 15;
  $171 = ($170|0)==(3);
  $or$cond15 = $169 & $171;
  $172 = $168 & -33;
  $t$0 = $or$cond15 ? $172 : $168;
  $173 = $fl$1 & 8192;
  $174 = ($173|0)==(0);
  $175 = $fl$1 & -65537;
  $fl$1$ = $174 ? $fl$1 : $175;
  L75: do {
   switch ($t$0|0) {
   case 110:  {
    switch ($st$0$lcssa322|0) {
    case 0:  {
     $182 = HEAP32[$arg>>2]|0;
     HEAP32[$182>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 1:  {
     $183 = HEAP32[$arg>>2]|0;
     HEAP32[$183>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 2:  {
     $184 = ($cnt$1|0)<(0);
     $185 = $184 << 31 >> 31;
     $186 = HEAP32[$arg>>2]|0;
     $187 = $186;
     $188 = $187;
     HEAP32[$188>>2] = $cnt$1;
     $189 = (($187) + 4)|0;
     $190 = $189;
     HEAP32[$190>>2] = $185;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 3:  {
     $191 = $cnt$1&65535;
     $192 = HEAP32[$arg>>2]|0;
     HEAP16[$192>>1] = $191;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 4:  {
     $193 = $cnt$1&255;
     $194 = HEAP32[$arg>>2]|0;
     HEAP8[$194>>0] = $193;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 6:  {
     $195 = HEAP32[$arg>>2]|0;
     HEAP32[$195>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $196 = ($cnt$1|0)<(0);
     $197 = $196 << 31 >> 31;
     $198 = HEAP32[$arg>>2]|0;
     $199 = $198;
     $200 = $199;
     HEAP32[$200>>2] = $cnt$1;
     $201 = (($199) + 4)|0;
     $202 = $201;
     HEAP32[$202>>2] = $197;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $203 = ($p$0>>>0)>(8);
    $204 = $203 ? $p$0 : 8;
    $205 = $fl$1$ | 8;
    $fl$3 = $205;$p$1 = $204;$t$1 = 120;
    label = 64;
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 64;
    break;
   }
   case 111:  {
    $243 = $arg;
    $244 = $243;
    $245 = HEAP32[$244>>2]|0;
    $246 = (($243) + 4)|0;
    $247 = $246;
    $248 = HEAP32[$247>>2]|0;
    $249 = ($245|0)==(0);
    $250 = ($248|0)==(0);
    $251 = $249 & $250;
    if ($251) {
     $$0$lcssa$i = $1;
    } else {
     $$03$i33 = $1;$253 = $245;$257 = $248;
     while(1) {
      $252 = $253 & 7;
      $254 = $252 | 48;
      $255 = $254&255;
      $256 = ((($$03$i33)) + -1|0);
      HEAP8[$256>>0] = $255;
      $258 = (_bitshift64Lshr(($253|0),($257|0),3)|0);
      $259 = tempRet0;
      $260 = ($258|0)==(0);
      $261 = ($259|0)==(0);
      $262 = $260 & $261;
      if ($262) {
       $$0$lcssa$i = $256;
       break;
      } else {
       $$03$i33 = $256;$253 = $258;$257 = $259;
      }
     }
    }
    $263 = $fl$1$ & 8;
    $264 = ($263|0)==(0);
    if ($264) {
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = 0;$prefix$1 = 17763;
     label = 77;
    } else {
     $265 = $$0$lcssa$i;
     $266 = (($2) - ($265))|0;
     $267 = (($266) + 1)|0;
     $268 = ($p$0|0)<($267|0);
     $$p$0 = $268 ? $267 : $p$0;
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $$p$0;$pl$1 = 0;$prefix$1 = 17763;
     label = 77;
    }
    break;
   }
   case 105: case 100:  {
    $269 = $arg;
    $270 = $269;
    $271 = HEAP32[$270>>2]|0;
    $272 = (($269) + 4)|0;
    $273 = $272;
    $274 = HEAP32[$273>>2]|0;
    $275 = ($274|0)<(0);
    if ($275) {
     $276 = (_i64Subtract(0,0,($271|0),($274|0))|0);
     $277 = tempRet0;
     $278 = $arg;
     $279 = $278;
     HEAP32[$279>>2] = $276;
     $280 = (($278) + 4)|0;
     $281 = $280;
     HEAP32[$281>>2] = $277;
     $286 = $276;$287 = $277;$pl$0 = 1;$prefix$0 = 17763;
     label = 76;
     break L75;
    }
    $282 = $fl$1$ & 2048;
    $283 = ($282|0)==(0);
    if ($283) {
     $284 = $fl$1$ & 1;
     $285 = ($284|0)==(0);
     $$ = $285 ? 17763 : (17765);
     $286 = $271;$287 = $274;$pl$0 = $284;$prefix$0 = $$;
     label = 76;
    } else {
     $286 = $271;$287 = $274;$pl$0 = 1;$prefix$0 = (17764);
     label = 76;
    }
    break;
   }
   case 117:  {
    $176 = $arg;
    $177 = $176;
    $178 = HEAP32[$177>>2]|0;
    $179 = (($176) + 4)|0;
    $180 = $179;
    $181 = HEAP32[$180>>2]|0;
    $286 = $178;$287 = $181;$pl$0 = 0;$prefix$0 = 17763;
    label = 76;
    break;
   }
   case 99:  {
    $307 = $arg;
    $308 = $307;
    $309 = HEAP32[$308>>2]|0;
    $310 = (($307) + 4)|0;
    $311 = $310;
    $312 = HEAP32[$311>>2]|0;
    $313 = $309&255;
    HEAP8[$3>>0] = $313;
    $a$2 = $3;$fl$6 = $175;$p$5 = 1;$pl$2 = 0;$prefix$2 = 17763;$z$2 = $1;
    break;
   }
   case 109:  {
    $314 = (___errno_location()|0);
    $315 = HEAP32[$314>>2]|0;
    $316 = (_strerror($315)|0);
    $a$1 = $316;
    label = 82;
    break;
   }
   case 115:  {
    $317 = HEAP32[$arg>>2]|0;
    $318 = ($317|0)!=(0|0);
    $319 = $318 ? $317 : 17773;
    $a$1 = $319;
    label = 82;
    break;
   }
   case 67:  {
    $326 = $arg;
    $327 = $326;
    $328 = HEAP32[$327>>2]|0;
    $329 = (($326) + 4)|0;
    $330 = $329;
    $331 = HEAP32[$330>>2]|0;
    HEAP32[$wc>>2] = $328;
    HEAP32[$4>>2] = 0;
    HEAP32[$arg>>2] = $wc;
    $p$4198 = -1;
    label = 86;
    break;
   }
   case 83:  {
    $332 = ($p$0|0)==(0);
    if ($332) {
     _pad($f,32,$w$1,0,$fl$1$);
     $i$0$lcssa200 = 0;
     label = 98;
    } else {
     $p$4198 = $p$0;
     label = 86;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $359 = +HEAPF64[$arg>>3];
    HEAP32[$e2$i>>2] = 0;
    HEAPF64[tempDoublePtr>>3] = $359;$360 = HEAP32[tempDoublePtr>>2]|0;
    $361 = HEAP32[tempDoublePtr+4>>2]|0;
    $362 = ($361|0)<(0);
    if ($362) {
     $363 = -$359;
     $$07$i = $363;$pl$0$i = 1;$prefix$0$i = 17780;
    } else {
     $364 = $fl$1$ & 2048;
     $365 = ($364|0)==(0);
     if ($365) {
      $366 = $fl$1$ & 1;
      $367 = ($366|0)==(0);
      $$$i = $367 ? (17781) : (17786);
      $$07$i = $359;$pl$0$i = $366;$prefix$0$i = $$$i;
     } else {
      $$07$i = $359;$pl$0$i = 1;$prefix$0$i = (17783);
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$07$i;$368 = HEAP32[tempDoublePtr>>2]|0;
    $369 = HEAP32[tempDoublePtr+4>>2]|0;
    $370 = $369 & 2146435072;
    $371 = ($370>>>0)<(2146435072);
    $372 = (0)<(0);
    $373 = ($370|0)==(2146435072);
    $374 = $373 & $372;
    $375 = $371 | $374;
    do {
     if ($375) {
      $391 = (+_frexpl($$07$i,$e2$i));
      $392 = $391 * 2.0;
      $393 = $392 != 0.0;
      if ($393) {
       $394 = HEAP32[$e2$i>>2]|0;
       $395 = (($394) + -1)|0;
       HEAP32[$e2$i>>2] = $395;
      }
      $396 = $t$0 | 32;
      $397 = ($396|0)==(97);
      if ($397) {
       $398 = $t$0 & 32;
       $399 = ($398|0)==(0);
       $400 = ((($prefix$0$i)) + 9|0);
       $prefix$0$$i = $399 ? $prefix$0$i : $400;
       $401 = $pl$0$i | 2;
       $402 = ($p$0>>>0)>(11);
       $403 = (12 - ($p$0))|0;
       $404 = ($403|0)==(0);
       $405 = $402 | $404;
       do {
        if ($405) {
         $$1$i = $392;
        } else {
         $re$169$i = $403;$round$068$i = 8.0;
         while(1) {
          $406 = (($re$169$i) + -1)|0;
          $407 = $round$068$i * 16.0;
          $408 = ($406|0)==(0);
          if ($408) {
           $$lcssa342 = $407;
           break;
          } else {
           $re$169$i = $406;$round$068$i = $407;
          }
         }
         $409 = HEAP8[$prefix$0$$i>>0]|0;
         $410 = ($409<<24>>24)==(45);
         if ($410) {
          $411 = -$392;
          $412 = $411 - $$lcssa342;
          $413 = $$lcssa342 + $412;
          $414 = -$413;
          $$1$i = $414;
          break;
         } else {
          $415 = $392 + $$lcssa342;
          $416 = $415 - $$lcssa342;
          $$1$i = $416;
          break;
         }
        }
       } while(0);
       $417 = HEAP32[$e2$i>>2]|0;
       $418 = ($417|0)<(0);
       $419 = (0 - ($417))|0;
       $420 = $418 ? $419 : $417;
       $421 = ($420|0)<(0);
       $422 = $421 << 31 >> 31;
       $423 = (_fmt_u($420,$422,$5)|0);
       $424 = ($423|0)==($5|0);
       if ($424) {
        HEAP8[$6>>0] = 48;
        $estr$0$i = $6;
       } else {
        $estr$0$i = $423;
       }
       $425 = $417 >> 31;
       $426 = $425 & 2;
       $427 = (($426) + 43)|0;
       $428 = $427&255;
       $429 = ((($estr$0$i)) + -1|0);
       HEAP8[$429>>0] = $428;
       $430 = (($t$0) + 15)|0;
       $431 = $430&255;
       $432 = ((($estr$0$i)) + -2|0);
       HEAP8[$432>>0] = $431;
       $notrhs$i = ($p$0|0)<(1);
       $433 = $fl$1$ & 8;
       $434 = ($433|0)==(0);
       $$2$i = $$1$i;$s$0$i = $buf$i;
       while(1) {
        $435 = (~~(($$2$i)));
        $436 = (17747 + ($435)|0);
        $437 = HEAP8[$436>>0]|0;
        $438 = $437&255;
        $439 = $438 | $398;
        $440 = $439&255;
        $441 = ((($s$0$i)) + 1|0);
        HEAP8[$s$0$i>>0] = $440;
        $442 = (+($435|0));
        $443 = $$2$i - $442;
        $444 = $443 * 16.0;
        $445 = $441;
        $446 = (($445) - ($7))|0;
        $447 = ($446|0)==(1);
        do {
         if ($447) {
          $notlhs$i = $444 == 0.0;
          $or$cond3$not$i = $notrhs$i & $notlhs$i;
          $or$cond$i = $434 & $or$cond3$not$i;
          if ($or$cond$i) {
           $s$1$i = $441;
           break;
          }
          $448 = ((($s$0$i)) + 2|0);
          HEAP8[$441>>0] = 46;
          $s$1$i = $448;
         } else {
          $s$1$i = $441;
         }
        } while(0);
        $449 = $444 != 0.0;
        if ($449) {
         $$2$i = $444;$s$0$i = $s$1$i;
        } else {
         $s$1$i$lcssa = $s$1$i;
         break;
        }
       }
       $450 = ($p$0|0)!=(0);
       $$pre182$i = $s$1$i$lcssa;
       $451 = (($10) + ($$pre182$i))|0;
       $452 = ($451|0)<($p$0|0);
       $or$cond240 = $450 & $452;
       $453 = $432;
       $454 = (($11) + ($p$0))|0;
       $455 = (($454) - ($453))|0;
       $456 = $432;
       $457 = (($9) - ($456))|0;
       $458 = (($457) + ($$pre182$i))|0;
       $l$0$i = $or$cond240 ? $455 : $458;
       $459 = (($l$0$i) + ($401))|0;
       _pad($f,32,$w$1,$459,$fl$1$);
       $460 = HEAP32[$f>>2]|0;
       $461 = $460 & 32;
       $462 = ($461|0)==(0);
       if ($462) {
        (___fwritex($prefix$0$$i,$401,$f)|0);
       }
       $463 = $fl$1$ ^ 65536;
       _pad($f,48,$w$1,$459,$463);
       $464 = (($$pre182$i) - ($7))|0;
       $465 = HEAP32[$f>>2]|0;
       $466 = $465 & 32;
       $467 = ($466|0)==(0);
       if ($467) {
        (___fwritex($buf$i,$464,$f)|0);
       }
       $468 = $432;
       $469 = (($8) - ($468))|0;
       $sum = (($464) + ($469))|0;
       $470 = (($l$0$i) - ($sum))|0;
       _pad($f,48,$470,0,0);
       $471 = HEAP32[$f>>2]|0;
       $472 = $471 & 32;
       $473 = ($472|0)==(0);
       if ($473) {
        (___fwritex($432,$469,$f)|0);
       }
       $474 = $fl$1$ ^ 8192;
       _pad($f,32,$w$1,$459,$474);
       $475 = ($459|0)<($w$1|0);
       $w$$i = $475 ? $w$1 : $459;
       $$0$i = $w$$i;
       break;
      }
      $476 = ($p$0|0)<(0);
      $$p$i = $476 ? 6 : $p$0;
      if ($393) {
       $477 = $392 * 268435456.0;
       $478 = HEAP32[$e2$i>>2]|0;
       $479 = (($478) + -28)|0;
       HEAP32[$e2$i>>2] = $479;
       $$3$i = $477;$480 = $479;
      } else {
       $$pre179$i = HEAP32[$e2$i>>2]|0;
       $$3$i = $392;$480 = $$pre179$i;
      }
      $481 = ($480|0)<(0);
      $$31$i = $481 ? $big$i : $12;
      $482 = $$31$i;
      $$4$i = $$3$i;$z$0$i = $$31$i;
      while(1) {
       $483 = (~~(($$4$i))>>>0);
       HEAP32[$z$0$i>>2] = $483;
       $484 = ((($z$0$i)) + 4|0);
       $485 = (+($483>>>0));
       $486 = $$4$i - $485;
       $487 = $486 * 1.0E+9;
       $488 = $487 != 0.0;
       if ($488) {
        $$4$i = $487;$z$0$i = $484;
       } else {
        $$lcssa326 = $484;
        break;
       }
      }
      $$pr$i = HEAP32[$e2$i>>2]|0;
      $489 = ($$pr$i|0)>(0);
      if ($489) {
       $490 = $$pr$i;$a$1147$i = $$31$i;$z$1146$i = $$lcssa326;
       while(1) {
        $491 = ($490|0)>(29);
        $492 = $491 ? 29 : $490;
        $d$0139$i = ((($z$1146$i)) + -4|0);
        $493 = ($d$0139$i>>>0)<($a$1147$i>>>0);
        do {
         if ($493) {
          $a$2$ph$i = $a$1147$i;
         } else {
          $carry$0140$i = 0;$d$0141$i = $d$0139$i;
          while(1) {
           $494 = HEAP32[$d$0141$i>>2]|0;
           $495 = (_bitshift64Shl(($494|0),0,($492|0))|0);
           $496 = tempRet0;
           $497 = (_i64Add(($495|0),($496|0),($carry$0140$i|0),0)|0);
           $498 = tempRet0;
           $499 = (___uremdi3(($497|0),($498|0),1000000000,0)|0);
           $500 = tempRet0;
           HEAP32[$d$0141$i>>2] = $499;
           $501 = (___udivdi3(($497|0),($498|0),1000000000,0)|0);
           $502 = tempRet0;
           $d$0$i = ((($d$0141$i)) + -4|0);
           $503 = ($d$0$i>>>0)<($a$1147$i>>>0);
           if ($503) {
            $$lcssa327 = $501;
            break;
           } else {
            $carry$0140$i = $501;$d$0141$i = $d$0$i;
           }
          }
          $504 = ($$lcssa327|0)==(0);
          if ($504) {
           $a$2$ph$i = $a$1147$i;
           break;
          }
          $505 = ((($a$1147$i)) + -4|0);
          HEAP32[$505>>2] = $$lcssa327;
          $a$2$ph$i = $505;
         }
        } while(0);
        $z$2$i = $z$1146$i;
        while(1) {
         $506 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
         if (!($506)) {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
         $507 = ((($z$2$i)) + -4|0);
         $508 = HEAP32[$507>>2]|0;
         $509 = ($508|0)==(0);
         if ($509) {
          $z$2$i = $507;
         } else {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
        }
        $510 = HEAP32[$e2$i>>2]|0;
        $511 = (($510) - ($492))|0;
        HEAP32[$e2$i>>2] = $511;
        $512 = ($511|0)>(0);
        if ($512) {
         $490 = $511;$a$1147$i = $a$2$ph$i;$z$1146$i = $z$2$i$lcssa;
        } else {
         $$pr47$i = $511;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i$lcssa;
         break;
        }
       }
      } else {
       $$pr47$i = $$pr$i;$a$1$lcssa$i = $$31$i;$z$1$lcssa$i = $$lcssa326;
      }
      $513 = ($$pr47$i|0)<(0);
      if ($513) {
       $514 = (($$p$i) + 25)|0;
       $515 = (($514|0) / 9)&-1;
       $516 = (($515) + 1)|0;
       $517 = ($396|0)==(102);
       $519 = $$pr47$i;$a$3134$i = $a$1$lcssa$i;$z$3133$i = $z$1$lcssa$i;
       while(1) {
        $518 = (0 - ($519))|0;
        $520 = ($518|0)>(9);
        $521 = $520 ? 9 : $518;
        $522 = ($a$3134$i>>>0)<($z$3133$i>>>0);
        do {
         if ($522) {
          $526 = 1 << $521;
          $527 = (($526) + -1)|0;
          $528 = 1000000000 >>> $521;
          $carry3$0128$i = 0;$d$1127$i = $a$3134$i;
          while(1) {
           $529 = HEAP32[$d$1127$i>>2]|0;
           $530 = $529 & $527;
           $531 = $529 >>> $521;
           $532 = (($531) + ($carry3$0128$i))|0;
           HEAP32[$d$1127$i>>2] = $532;
           $533 = Math_imul($530, $528)|0;
           $534 = ((($d$1127$i)) + 4|0);
           $535 = ($534>>>0)<($z$3133$i>>>0);
           if ($535) {
            $carry3$0128$i = $533;$d$1127$i = $534;
           } else {
            $$lcssa329 = $533;
            break;
           }
          }
          $536 = HEAP32[$a$3134$i>>2]|0;
          $537 = ($536|0)==(0);
          $538 = ((($a$3134$i)) + 4|0);
          $$a$3$i = $537 ? $538 : $a$3134$i;
          $539 = ($$lcssa329|0)==(0);
          if ($539) {
           $$a$3186$i = $$a$3$i;$z$4$i = $z$3133$i;
           break;
          }
          $540 = ((($z$3133$i)) + 4|0);
          HEAP32[$z$3133$i>>2] = $$lcssa329;
          $$a$3186$i = $$a$3$i;$z$4$i = $540;
         } else {
          $523 = HEAP32[$a$3134$i>>2]|0;
          $524 = ($523|0)==(0);
          $525 = ((($a$3134$i)) + 4|0);
          $$a$3185$i = $524 ? $525 : $a$3134$i;
          $$a$3186$i = $$a$3185$i;$z$4$i = $z$3133$i;
         }
        } while(0);
        $541 = $517 ? $$31$i : $$a$3186$i;
        $542 = $z$4$i;
        $543 = $541;
        $544 = (($542) - ($543))|0;
        $545 = $544 >> 2;
        $546 = ($545|0)>($516|0);
        $547 = (($541) + ($516<<2)|0);
        $$z$4$i = $546 ? $547 : $z$4$i;
        $548 = HEAP32[$e2$i>>2]|0;
        $549 = (($548) + ($521))|0;
        HEAP32[$e2$i>>2] = $549;
        $550 = ($549|0)<(0);
        if ($550) {
         $519 = $549;$a$3134$i = $$a$3186$i;$z$3133$i = $$z$4$i;
        } else {
         $a$3$lcssa$i = $$a$3186$i;$z$3$lcssa$i = $$z$4$i;
         break;
        }
       }
      } else {
       $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
      }
      $551 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
      do {
       if ($551) {
        $552 = $a$3$lcssa$i;
        $553 = (($482) - ($552))|0;
        $554 = $553 >> 2;
        $555 = ($554*9)|0;
        $556 = HEAP32[$a$3$lcssa$i>>2]|0;
        $557 = ($556>>>0)<(10);
        if ($557) {
         $e$1$i = $555;
         break;
        } else {
         $e$0123$i = $555;$i$0122$i = 10;
        }
        while(1) {
         $558 = ($i$0122$i*10)|0;
         $559 = (($e$0123$i) + 1)|0;
         $560 = ($556>>>0)<($558>>>0);
         if ($560) {
          $e$1$i = $559;
          break;
         } else {
          $e$0123$i = $559;$i$0122$i = $558;
         }
        }
       } else {
        $e$1$i = 0;
       }
      } while(0);
      $561 = ($396|0)!=(102);
      $562 = $561 ? $e$1$i : 0;
      $563 = (($$p$i) - ($562))|0;
      $564 = ($396|0)==(103);
      $565 = ($$p$i|0)!=(0);
      $566 = $565 & $564;
      $$neg52$i = $566 << 31 >> 31;
      $567 = (($563) + ($$neg52$i))|0;
      $568 = $z$3$lcssa$i;
      $569 = (($568) - ($482))|0;
      $570 = $569 >> 2;
      $571 = ($570*9)|0;
      $572 = (($571) + -9)|0;
      $573 = ($567|0)<($572|0);
      if ($573) {
       $574 = (($567) + 9216)|0;
       $575 = (($574|0) / 9)&-1;
       $$sum$i = (($575) + -1023)|0;
       $576 = (($$31$i) + ($$sum$i<<2)|0);
       $577 = (($574|0) % 9)&-1;
       $j$0115$i = (($577) + 1)|0;
       $578 = ($j$0115$i|0)<(9);
       if ($578) {
        $i$1116$i = 10;$j$0117$i = $j$0115$i;
        while(1) {
         $579 = ($i$1116$i*10)|0;
         $j$0$i = (($j$0117$i) + 1)|0;
         $exitcond$i = ($j$0$i|0)==(9);
         if ($exitcond$i) {
          $i$1$lcssa$i = $579;
          break;
         } else {
          $i$1116$i = $579;$j$0117$i = $j$0$i;
         }
        }
       } else {
        $i$1$lcssa$i = 10;
       }
       $580 = HEAP32[$576>>2]|0;
       $581 = (($580>>>0) % ($i$1$lcssa$i>>>0))&-1;
       $582 = ($581|0)==(0);
       if ($582) {
        $$sum15$i = (($575) + -1022)|0;
        $583 = (($$31$i) + ($$sum15$i<<2)|0);
        $584 = ($583|0)==($z$3$lcssa$i|0);
        if ($584) {
         $a$7$i = $a$3$lcssa$i;$d$3$i = $576;$e$3$i = $e$1$i;
        } else {
         label = 163;
        }
       } else {
        label = 163;
       }
       do {
        if ((label|0) == 163) {
         label = 0;
         $585 = (($580>>>0) / ($i$1$lcssa$i>>>0))&-1;
         $586 = $585 & 1;
         $587 = ($586|0)==(0);
         $$20$i = $587 ? 9007199254740992.0 : 9007199254740994.0;
         $588 = (($i$1$lcssa$i|0) / 2)&-1;
         $589 = ($581>>>0)<($588>>>0);
         do {
          if ($589) {
           $small$0$i = 0.5;
          } else {
           $590 = ($581|0)==($588|0);
           if ($590) {
            $$sum16$i = (($575) + -1022)|0;
            $591 = (($$31$i) + ($$sum16$i<<2)|0);
            $592 = ($591|0)==($z$3$lcssa$i|0);
            if ($592) {
             $small$0$i = 1.0;
             break;
            }
           }
           $small$0$i = 1.5;
          }
         } while(0);
         $593 = ($pl$0$i|0)==(0);
         do {
          if ($593) {
           $round6$1$i = $$20$i;$small$1$i = $small$0$i;
          } else {
           $594 = HEAP8[$prefix$0$i>>0]|0;
           $595 = ($594<<24>>24)==(45);
           if (!($595)) {
            $round6$1$i = $$20$i;$small$1$i = $small$0$i;
            break;
           }
           $596 = -$$20$i;
           $597 = -$small$0$i;
           $round6$1$i = $596;$small$1$i = $597;
          }
         } while(0);
         $598 = (($580) - ($581))|0;
         HEAP32[$576>>2] = $598;
         $599 = $round6$1$i + $small$1$i;
         $600 = $599 != $round6$1$i;
         if (!($600)) {
          $a$7$i = $a$3$lcssa$i;$d$3$i = $576;$e$3$i = $e$1$i;
          break;
         }
         $601 = (($598) + ($i$1$lcssa$i))|0;
         HEAP32[$576>>2] = $601;
         $602 = ($601>>>0)>(999999999);
         if ($602) {
          $a$5109$i = $a$3$lcssa$i;$d$2108$i = $576;
          while(1) {
           $603 = ((($d$2108$i)) + -4|0);
           HEAP32[$d$2108$i>>2] = 0;
           $604 = ($603>>>0)<($a$5109$i>>>0);
           if ($604) {
            $605 = ((($a$5109$i)) + -4|0);
            HEAP32[$605>>2] = 0;
            $a$6$i = $605;
           } else {
            $a$6$i = $a$5109$i;
           }
           $606 = HEAP32[$603>>2]|0;
           $607 = (($606) + 1)|0;
           HEAP32[$603>>2] = $607;
           $608 = ($607>>>0)>(999999999);
           if ($608) {
            $a$5109$i = $a$6$i;$d$2108$i = $603;
           } else {
            $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $603;
            break;
           }
          }
         } else {
          $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $576;
         }
         $609 = $a$5$lcssa$i;
         $610 = (($482) - ($609))|0;
         $611 = $610 >> 2;
         $612 = ($611*9)|0;
         $613 = HEAP32[$a$5$lcssa$i>>2]|0;
         $614 = ($613>>>0)<(10);
         if ($614) {
          $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $612;
          break;
         } else {
          $e$2104$i = $612;$i$2103$i = 10;
         }
         while(1) {
          $615 = ($i$2103$i*10)|0;
          $616 = (($e$2104$i) + 1)|0;
          $617 = ($613>>>0)<($615>>>0);
          if ($617) {
           $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $616;
           break;
          } else {
           $e$2104$i = $616;$i$2103$i = $615;
          }
         }
        }
       } while(0);
       $618 = ((($d$3$i)) + 4|0);
       $619 = ($z$3$lcssa$i>>>0)>($618>>>0);
       $$z$3$i = $619 ? $618 : $z$3$lcssa$i;
       $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $$z$3$i;
      } else {
       $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
      }
      $620 = (0 - ($e$4$ph$i))|0;
      $z$6$i = $z$6$ph$i;
      while(1) {
       $621 = ($z$6$i>>>0)>($a$8$ph$i>>>0);
       if (!($621)) {
        $$lcssa159$i = 0;$z$6$i$lcssa = $z$6$i;
        break;
       }
       $622 = ((($z$6$i)) + -4|0);
       $623 = HEAP32[$622>>2]|0;
       $624 = ($623|0)==(0);
       if ($624) {
        $z$6$i = $622;
       } else {
        $$lcssa159$i = 1;$z$6$i$lcssa = $z$6$i;
        break;
       }
      }
      do {
       if ($564) {
        $625 = $565&1;
        $626 = $625 ^ 1;
        $$p$$i = (($626) + ($$p$i))|0;
        $627 = ($$p$$i|0)>($e$4$ph$i|0);
        $628 = ($e$4$ph$i|0)>(-5);
        $or$cond6$i = $627 & $628;
        if ($or$cond6$i) {
         $629 = (($t$0) + -1)|0;
         $$neg53$i = (($$p$$i) + -1)|0;
         $630 = (($$neg53$i) - ($e$4$ph$i))|0;
         $$013$i = $629;$$210$i = $630;
        } else {
         $631 = (($t$0) + -2)|0;
         $632 = (($$p$$i) + -1)|0;
         $$013$i = $631;$$210$i = $632;
        }
        $633 = $fl$1$ & 8;
        $634 = ($633|0)==(0);
        if (!($634)) {
         $$114$i = $$013$i;$$311$i = $$210$i;$$pre$phi184$iZ2D = $633;
         break;
        }
        do {
         if ($$lcssa159$i) {
          $635 = ((($z$6$i$lcssa)) + -4|0);
          $636 = HEAP32[$635>>2]|0;
          $637 = ($636|0)==(0);
          if ($637) {
           $j$2$i = 9;
           break;
          }
          $638 = (($636>>>0) % 10)&-1;
          $639 = ($638|0)==(0);
          if ($639) {
           $i$399$i = 10;$j$1100$i = 0;
          } else {
           $j$2$i = 0;
           break;
          }
          while(1) {
           $640 = ($i$399$i*10)|0;
           $641 = (($j$1100$i) + 1)|0;
           $642 = (($636>>>0) % ($640>>>0))&-1;
           $643 = ($642|0)==(0);
           if ($643) {
            $i$399$i = $640;$j$1100$i = $641;
           } else {
            $j$2$i = $641;
            break;
           }
          }
         } else {
          $j$2$i = 9;
         }
        } while(0);
        $644 = $$013$i | 32;
        $645 = ($644|0)==(102);
        $646 = $z$6$i$lcssa;
        $647 = (($646) - ($482))|0;
        $648 = $647 >> 2;
        $649 = ($648*9)|0;
        $650 = (($649) + -9)|0;
        if ($645) {
         $651 = (($650) - ($j$2$i))|0;
         $652 = ($651|0)<(0);
         $$21$i = $652 ? 0 : $651;
         $653 = ($$210$i|0)<($$21$i|0);
         $$210$$22$i = $653 ? $$210$i : $$21$i;
         $$114$i = $$013$i;$$311$i = $$210$$22$i;$$pre$phi184$iZ2D = 0;
         break;
        } else {
         $654 = (($650) + ($e$4$ph$i))|0;
         $655 = (($654) - ($j$2$i))|0;
         $656 = ($655|0)<(0);
         $$23$i = $656 ? 0 : $655;
         $657 = ($$210$i|0)<($$23$i|0);
         $$210$$24$i = $657 ? $$210$i : $$23$i;
         $$114$i = $$013$i;$$311$i = $$210$$24$i;$$pre$phi184$iZ2D = 0;
         break;
        }
       } else {
        $$pre183$i = $fl$1$ & 8;
        $$114$i = $t$0;$$311$i = $$p$i;$$pre$phi184$iZ2D = $$pre183$i;
       }
      } while(0);
      $658 = $$311$i | $$pre$phi184$iZ2D;
      $659 = ($658|0)!=(0);
      $660 = $659&1;
      $661 = $$114$i | 32;
      $662 = ($661|0)==(102);
      if ($662) {
       $663 = ($e$4$ph$i|0)>(0);
       $664 = $663 ? $e$4$ph$i : 0;
       $$pn$i = $664;$estr$2$i = 0;
      } else {
       $665 = ($e$4$ph$i|0)<(0);
       $666 = $665 ? $620 : $e$4$ph$i;
       $667 = ($666|0)<(0);
       $668 = $667 << 31 >> 31;
       $669 = (_fmt_u($666,$668,$5)|0);
       $670 = $669;
       $671 = (($8) - ($670))|0;
       $672 = ($671|0)<(2);
       if ($672) {
        $estr$193$i = $669;
        while(1) {
         $673 = ((($estr$193$i)) + -1|0);
         HEAP8[$673>>0] = 48;
         $674 = $673;
         $675 = (($8) - ($674))|0;
         $676 = ($675|0)<(2);
         if ($676) {
          $estr$193$i = $673;
         } else {
          $estr$1$lcssa$i = $673;
          break;
         }
        }
       } else {
        $estr$1$lcssa$i = $669;
       }
       $677 = $e$4$ph$i >> 31;
       $678 = $677 & 2;
       $679 = (($678) + 43)|0;
       $680 = $679&255;
       $681 = ((($estr$1$lcssa$i)) + -1|0);
       HEAP8[$681>>0] = $680;
       $682 = $$114$i&255;
       $683 = ((($estr$1$lcssa$i)) + -2|0);
       HEAP8[$683>>0] = $682;
       $684 = $683;
       $685 = (($8) - ($684))|0;
       $$pn$i = $685;$estr$2$i = $683;
      }
      $686 = (($pl$0$i) + 1)|0;
      $687 = (($686) + ($$311$i))|0;
      $l$1$i = (($687) + ($660))|0;
      $688 = (($l$1$i) + ($$pn$i))|0;
      _pad($f,32,$w$1,$688,$fl$1$);
      $689 = HEAP32[$f>>2]|0;
      $690 = $689 & 32;
      $691 = ($690|0)==(0);
      if ($691) {
       (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
      }
      $692 = $fl$1$ ^ 65536;
      _pad($f,48,$w$1,$688,$692);
      do {
       if ($662) {
        $693 = ($a$8$ph$i>>>0)>($$31$i>>>0);
        $r$0$a$8$i = $693 ? $$31$i : $a$8$ph$i;
        $d$482$i = $r$0$a$8$i;
        while(1) {
         $694 = HEAP32[$d$482$i>>2]|0;
         $695 = (_fmt_u($694,0,$13)|0);
         $696 = ($d$482$i|0)==($r$0$a$8$i|0);
         do {
          if ($696) {
           $700 = ($695|0)==($13|0);
           if (!($700)) {
            $s7$1$i = $695;
            break;
           }
           HEAP8[$15>>0] = 48;
           $s7$1$i = $15;
          } else {
           $697 = ($695>>>0)>($buf$i>>>0);
           if ($697) {
            $s7$079$i = $695;
           } else {
            $s7$1$i = $695;
            break;
           }
           while(1) {
            $698 = ((($s7$079$i)) + -1|0);
            HEAP8[$698>>0] = 48;
            $699 = ($698>>>0)>($buf$i>>>0);
            if ($699) {
             $s7$079$i = $698;
            } else {
             $s7$1$i = $698;
             break;
            }
           }
          }
         } while(0);
         $701 = HEAP32[$f>>2]|0;
         $702 = $701 & 32;
         $703 = ($702|0)==(0);
         if ($703) {
          $704 = $s7$1$i;
          $705 = (($14) - ($704))|0;
          (___fwritex($s7$1$i,$705,$f)|0);
         }
         $706 = ((($d$482$i)) + 4|0);
         $707 = ($706>>>0)>($$31$i>>>0);
         if ($707) {
          $$lcssa339 = $706;
          break;
         } else {
          $d$482$i = $706;
         }
        }
        $708 = ($658|0)==(0);
        do {
         if (!($708)) {
          $709 = HEAP32[$f>>2]|0;
          $710 = $709 & 32;
          $711 = ($710|0)==(0);
          if (!($711)) {
           break;
          }
          (___fwritex(17815,1,$f)|0);
         }
        } while(0);
        $712 = ($$lcssa339>>>0)<($z$6$i$lcssa>>>0);
        $713 = ($$311$i|0)>(0);
        $714 = $713 & $712;
        if ($714) {
         $$41276$i = $$311$i;$d$575$i = $$lcssa339;
         while(1) {
          $715 = HEAP32[$d$575$i>>2]|0;
          $716 = (_fmt_u($715,0,$13)|0);
          $717 = ($716>>>0)>($buf$i>>>0);
          if ($717) {
           $s8$070$i = $716;
           while(1) {
            $718 = ((($s8$070$i)) + -1|0);
            HEAP8[$718>>0] = 48;
            $719 = ($718>>>0)>($buf$i>>>0);
            if ($719) {
             $s8$070$i = $718;
            } else {
             $s8$0$lcssa$i = $718;
             break;
            }
           }
          } else {
           $s8$0$lcssa$i = $716;
          }
          $720 = HEAP32[$f>>2]|0;
          $721 = $720 & 32;
          $722 = ($721|0)==(0);
          if ($722) {
           $723 = ($$41276$i|0)>(9);
           $724 = $723 ? 9 : $$41276$i;
           (___fwritex($s8$0$lcssa$i,$724,$f)|0);
          }
          $725 = ((($d$575$i)) + 4|0);
          $726 = (($$41276$i) + -9)|0;
          $727 = ($725>>>0)<($z$6$i$lcssa>>>0);
          $728 = ($$41276$i|0)>(9);
          $729 = $728 & $727;
          if ($729) {
           $$41276$i = $726;$d$575$i = $725;
          } else {
           $$412$lcssa$i = $726;
           break;
          }
         }
        } else {
         $$412$lcssa$i = $$311$i;
        }
        $730 = (($$412$lcssa$i) + 9)|0;
        _pad($f,48,$730,9,0);
       } else {
        $731 = ((($a$8$ph$i)) + 4|0);
        $z$6$$i = $$lcssa159$i ? $z$6$i$lcssa : $731;
        $732 = ($$311$i|0)>(-1);
        if ($732) {
         $733 = ($$pre$phi184$iZ2D|0)==(0);
         $$587$i = $$311$i;$d$686$i = $a$8$ph$i;
         while(1) {
          $734 = HEAP32[$d$686$i>>2]|0;
          $735 = (_fmt_u($734,0,$13)|0);
          $736 = ($735|0)==($13|0);
          if ($736) {
           HEAP8[$15>>0] = 48;
           $s9$0$i = $15;
          } else {
           $s9$0$i = $735;
          }
          $737 = ($d$686$i|0)==($a$8$ph$i|0);
          do {
           if ($737) {
            $741 = ((($s9$0$i)) + 1|0);
            $742 = HEAP32[$f>>2]|0;
            $743 = $742 & 32;
            $744 = ($743|0)==(0);
            if ($744) {
             (___fwritex($s9$0$i,1,$f)|0);
            }
            $745 = ($$587$i|0)<(1);
            $or$cond29$i = $733 & $745;
            if ($or$cond29$i) {
             $s9$2$i = $741;
             break;
            }
            $746 = HEAP32[$f>>2]|0;
            $747 = $746 & 32;
            $748 = ($747|0)==(0);
            if (!($748)) {
             $s9$2$i = $741;
             break;
            }
            (___fwritex(17815,1,$f)|0);
            $s9$2$i = $741;
           } else {
            $738 = ($s9$0$i>>>0)>($buf$i>>>0);
            if ($738) {
             $s9$183$i = $s9$0$i;
            } else {
             $s9$2$i = $s9$0$i;
             break;
            }
            while(1) {
             $739 = ((($s9$183$i)) + -1|0);
             HEAP8[$739>>0] = 48;
             $740 = ($739>>>0)>($buf$i>>>0);
             if ($740) {
              $s9$183$i = $739;
             } else {
              $s9$2$i = $739;
              break;
             }
            }
           }
          } while(0);
          $749 = $s9$2$i;
          $750 = (($14) - ($749))|0;
          $751 = HEAP32[$f>>2]|0;
          $752 = $751 & 32;
          $753 = ($752|0)==(0);
          if ($753) {
           $754 = ($$587$i|0)>($750|0);
           $755 = $754 ? $750 : $$587$i;
           (___fwritex($s9$2$i,$755,$f)|0);
          }
          $756 = (($$587$i) - ($750))|0;
          $757 = ((($d$686$i)) + 4|0);
          $758 = ($757>>>0)<($z$6$$i>>>0);
          $759 = ($756|0)>(-1);
          $760 = $758 & $759;
          if ($760) {
           $$587$i = $756;$d$686$i = $757;
          } else {
           $$5$lcssa$i = $756;
           break;
          }
         }
        } else {
         $$5$lcssa$i = $$311$i;
        }
        $761 = (($$5$lcssa$i) + 18)|0;
        _pad($f,48,$761,18,0);
        $762 = HEAP32[$f>>2]|0;
        $763 = $762 & 32;
        $764 = ($763|0)==(0);
        if (!($764)) {
         break;
        }
        $765 = $estr$2$i;
        $766 = (($8) - ($765))|0;
        (___fwritex($estr$2$i,$766,$f)|0);
       }
      } while(0);
      $767 = $fl$1$ ^ 8192;
      _pad($f,32,$w$1,$688,$767);
      $768 = ($688|0)<($w$1|0);
      $w$30$i = $768 ? $w$1 : $688;
      $$0$i = $w$30$i;
     } else {
      $376 = $t$0 & 32;
      $377 = ($376|0)!=(0);
      $378 = $377 ? 17799 : 17803;
      $379 = ($$07$i != $$07$i) | (0.0 != 0.0);
      $380 = $377 ? 17807 : 17811;
      $pl$1$i = $379 ? 0 : $pl$0$i;
      $s1$0$i = $379 ? $380 : $378;
      $381 = (($pl$1$i) + 3)|0;
      _pad($f,32,$w$1,$381,$175);
      $382 = HEAP32[$f>>2]|0;
      $383 = $382 & 32;
      $384 = ($383|0)==(0);
      if ($384) {
       (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
       $$pre$i = HEAP32[$f>>2]|0;
       $386 = $$pre$i;
      } else {
       $386 = $382;
      }
      $385 = $386 & 32;
      $387 = ($385|0)==(0);
      if ($387) {
       (___fwritex($s1$0$i,3,$f)|0);
      }
      $388 = $fl$1$ ^ 8192;
      _pad($f,32,$w$1,$381,$388);
      $389 = ($381|0)<($w$1|0);
      $390 = $389 ? $w$1 : $381;
      $$0$i = $390;
     }
    } while(0);
    $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $$0$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   default: {
    $a$2 = $fmt41;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 17763;$z$2 = $1;
   }
   }
  } while(0);
  L313: do {
   if ((label|0) == 64) {
    label = 0;
    $206 = $arg;
    $207 = $206;
    $208 = HEAP32[$207>>2]|0;
    $209 = (($206) + 4)|0;
    $210 = $209;
    $211 = HEAP32[$210>>2]|0;
    $212 = $t$1 & 32;
    $213 = ($208|0)==(0);
    $214 = ($211|0)==(0);
    $215 = $213 & $214;
    if ($215) {
     $a$0 = $1;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 17763;
     label = 77;
    } else {
     $$012$i = $1;$217 = $208;$224 = $211;
     while(1) {
      $216 = $217 & 15;
      $218 = (17747 + ($216)|0);
      $219 = HEAP8[$218>>0]|0;
      $220 = $219&255;
      $221 = $220 | $212;
      $222 = $221&255;
      $223 = ((($$012$i)) + -1|0);
      HEAP8[$223>>0] = $222;
      $225 = (_bitshift64Lshr(($217|0),($224|0),4)|0);
      $226 = tempRet0;
      $227 = ($225|0)==(0);
      $228 = ($226|0)==(0);
      $229 = $227 & $228;
      if ($229) {
       $$lcssa344 = $223;
       break;
      } else {
       $$012$i = $223;$217 = $225;$224 = $226;
      }
     }
     $230 = $arg;
     $231 = $230;
     $232 = HEAP32[$231>>2]|0;
     $233 = (($230) + 4)|0;
     $234 = $233;
     $235 = HEAP32[$234>>2]|0;
     $236 = ($232|0)==(0);
     $237 = ($235|0)==(0);
     $238 = $236 & $237;
     $239 = $fl$3 & 8;
     $240 = ($239|0)==(0);
     $or$cond17 = $240 | $238;
     if ($or$cond17) {
      $a$0 = $$lcssa344;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 17763;
      label = 77;
     } else {
      $241 = $t$1 >> 4;
      $242 = (17763 + ($241)|0);
      $a$0 = $$lcssa344;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $242;
      label = 77;
     }
    }
   }
   else if ((label|0) == 76) {
    label = 0;
    $288 = (_fmt_u($286,$287,$1)|0);
    $a$0 = $288;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
    label = 77;
   }
   else if ((label|0) == 82) {
    label = 0;
    $320 = (_memchr($a$1,0,$p$0)|0);
    $321 = ($320|0)==(0|0);
    $322 = $320;
    $323 = $a$1;
    $324 = (($322) - ($323))|0;
    $325 = (($a$1) + ($p$0)|0);
    $z$1 = $321 ? $325 : $320;
    $p$3 = $321 ? $p$0 : $324;
    $a$2 = $a$1;$fl$6 = $175;$p$5 = $p$3;$pl$2 = 0;$prefix$2 = 17763;$z$2 = $z$1;
   }
   else if ((label|0) == 86) {
    label = 0;
    $333 = HEAP32[$arg>>2]|0;
    $i$0114 = 0;$l$1113 = 0;$ws$0115 = $333;
    while(1) {
     $334 = HEAP32[$ws$0115>>2]|0;
     $335 = ($334|0)==(0);
     if ($335) {
      $i$0$lcssa = $i$0114;$l$2 = $l$1113;
      break;
     }
     $336 = (_wctomb($mb,$334)|0);
     $337 = ($336|0)<(0);
     $338 = (($p$4198) - ($i$0114))|0;
     $339 = ($336>>>0)>($338>>>0);
     $or$cond20 = $337 | $339;
     if ($or$cond20) {
      $i$0$lcssa = $i$0114;$l$2 = $336;
      break;
     }
     $340 = ((($ws$0115)) + 4|0);
     $341 = (($336) + ($i$0114))|0;
     $342 = ($p$4198>>>0)>($341>>>0);
     if ($342) {
      $i$0114 = $341;$l$1113 = $336;$ws$0115 = $340;
     } else {
      $i$0$lcssa = $341;$l$2 = $336;
      break;
     }
    }
    $343 = ($l$2|0)<(0);
    if ($343) {
     $$0 = -1;
     break L1;
    }
    _pad($f,32,$w$1,$i$0$lcssa,$fl$1$);
    $344 = ($i$0$lcssa|0)==(0);
    if ($344) {
     $i$0$lcssa200 = 0;
     label = 98;
    } else {
     $345 = HEAP32[$arg>>2]|0;
     $i$1125 = 0;$ws$1126 = $345;
     while(1) {
      $346 = HEAP32[$ws$1126>>2]|0;
      $347 = ($346|0)==(0);
      if ($347) {
       $i$0$lcssa200 = $i$0$lcssa;
       label = 98;
       break L313;
      }
      $348 = ((($ws$1126)) + 4|0);
      $349 = (_wctomb($mb,$346)|0);
      $350 = (($349) + ($i$1125))|0;
      $351 = ($350|0)>($i$0$lcssa|0);
      if ($351) {
       $i$0$lcssa200 = $i$0$lcssa;
       label = 98;
       break L313;
      }
      $352 = HEAP32[$f>>2]|0;
      $353 = $352 & 32;
      $354 = ($353|0)==(0);
      if ($354) {
       (___fwritex($mb,$349,$f)|0);
      }
      $355 = ($350>>>0)<($i$0$lcssa>>>0);
      if ($355) {
       $i$1125 = $350;$ws$1126 = $348;
      } else {
       $i$0$lcssa200 = $i$0$lcssa;
       label = 98;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 98) {
   label = 0;
   $356 = $fl$1$ ^ 8192;
   _pad($f,32,$w$1,$i$0$lcssa200,$356);
   $357 = ($w$1|0)>($i$0$lcssa200|0);
   $358 = $357 ? $w$1 : $i$0$lcssa200;
   $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $358;$l10n$0 = $l10n$3;
   continue;
  }
  if ((label|0) == 77) {
   label = 0;
   $289 = ($p$2|0)>(-1);
   $290 = $fl$4 & -65537;
   $$fl$4 = $289 ? $290 : $fl$4;
   $291 = $arg;
   $292 = $291;
   $293 = HEAP32[$292>>2]|0;
   $294 = (($291) + 4)|0;
   $295 = $294;
   $296 = HEAP32[$295>>2]|0;
   $297 = ($293|0)!=(0);
   $298 = ($296|0)!=(0);
   $299 = $297 | $298;
   $300 = ($p$2|0)!=(0);
   $or$cond = $300 | $299;
   if ($or$cond) {
    $301 = $a$0;
    $302 = (($2) - ($301))|0;
    $303 = $299&1;
    $304 = $303 ^ 1;
    $305 = (($304) + ($302))|0;
    $306 = ($p$2|0)>($305|0);
    $p$2$ = $306 ? $p$2 : $305;
    $a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   } else {
    $a$2 = $1;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   }
  }
  $769 = $z$2;
  $770 = $a$2;
  $771 = (($769) - ($770))|0;
  $772 = ($p$5|0)<($771|0);
  $$p$5 = $772 ? $771 : $p$5;
  $773 = (($pl$2) + ($$p$5))|0;
  $774 = ($w$1|0)<($773|0);
  $w$2 = $774 ? $773 : $w$1;
  _pad($f,32,$w$2,$773,$fl$6);
  $775 = HEAP32[$f>>2]|0;
  $776 = $775 & 32;
  $777 = ($776|0)==(0);
  if ($777) {
   (___fwritex($prefix$2,$pl$2,$f)|0);
  }
  $778 = $fl$6 ^ 65536;
  _pad($f,48,$w$2,$773,$778);
  _pad($f,48,$$p$5,$771,0);
  $779 = HEAP32[$f>>2]|0;
  $780 = $779 & 32;
  $781 = ($780|0)==(0);
  if ($781) {
   (___fwritex($a$2,$771,$f)|0);
  }
  $782 = $fl$6 ^ 8192;
  _pad($f,32,$w$2,$773,$782);
  $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 L348: do {
  if ((label|0) == 245) {
   $783 = ($f|0)==(0|0);
   if ($783) {
    $784 = ($l10n$0$lcssa|0)==(0);
    if ($784) {
     $$0 = 0;
    } else {
     $i$2100 = 1;
     while(1) {
      $785 = (($nl_type) + ($i$2100<<2)|0);
      $786 = HEAP32[$785>>2]|0;
      $787 = ($786|0)==(0);
      if ($787) {
       $i$2100$lcssa = $i$2100;
       break;
      }
      $789 = (($nl_arg) + ($i$2100<<3)|0);
      _pop_arg($789,$786,$ap);
      $790 = (($i$2100) + 1)|0;
      $791 = ($790|0)<(10);
      if ($791) {
       $i$2100 = $790;
      } else {
       $$0 = 1;
       break L348;
      }
     }
     $788 = ($i$2100$lcssa|0)<(10);
     if ($788) {
      $i$398 = $i$2100$lcssa;
      while(1) {
       $794 = (($nl_type) + ($i$398<<2)|0);
       $795 = HEAP32[$794>>2]|0;
       $796 = ($795|0)==(0);
       $792 = (($i$398) + 1)|0;
       if (!($796)) {
        $$0 = -1;
        break L348;
       }
       $793 = ($792|0)<(10);
       if ($793) {
        $i$398 = $792;
       } else {
        $$0 = 1;
        break;
       }
      }
     } else {
      $$0 = 1;
     }
    }
   } else {
    $$0 = $cnt$1$lcssa;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _do_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___string_read($f,$buf,$len)|0);
 return ($0|0);
}
function _cleanup521($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ___unlockfile($p);
 }
 return;
}
function _cleanup526($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ___unlockfile($p);
 }
 return;
}
function _strtox($s,$p,$prec) {
 $s = $s|0;
 $p = $p|0;
 $prec = $prec|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f = sp;
 dest=$f; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = ((($f)) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = ((($f)) + 8|0);
 HEAP32[$1>>2] = (-1);
 $2 = ((($f)) + 44|0);
 HEAP32[$2>>2] = $s;
 $3 = ((($f)) + 76|0);
 HEAP32[$3>>2] = -1;
 ___shlim($f,0);
 $4 = (+___floatscan($f,$prec,1));
 $5 = ((($f)) + 108|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = $7;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $12 = (($11) + ($6))|0;
 $13 = ($p|0)==(0|0);
 if (!($13)) {
  $14 = ($12|0)!=(0);
  $15 = (($s) + ($12)|0);
  $16 = $14 ? $15 : $s;
  HEAP32[$p>>2] = $16;
 }
 STACKTOP = sp;return (+$4);
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>($l>>>0);
 $l$ = $7 ? $l : $6;
 _memcpy(($3|0),($s|0),($l$|0))|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($l$)|0);
 HEAP32[$2>>2] = $9;
 return ($l|0);
}
function _pop_arg($arg,$type,$ap) {
 $arg = $arg|0;
 $type = $type|0;
 $ap = $ap|0;
 var $$mask = 0, $$mask1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type>>>0)>(20);
 L1: do {
  if (!($0)) {
   do {
    switch ($type|0) {
    case 9:  {
     $arglist_current = HEAP32[$ap>>2]|0;
     $1 = $arglist_current;
     $2 = ((0) + 4|0);
     $expanded28 = $2;
     $expanded = (($expanded28) - 1)|0;
     $3 = (($1) + ($expanded))|0;
     $4 = ((0) + 4|0);
     $expanded32 = $4;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $5 = $3 & $expanded30;
     $6 = $5;
     $7 = HEAP32[$6>>2]|0;
     $arglist_next = ((($6)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     HEAP32[$arg>>2] = $7;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $8 = $arglist_current2;
     $9 = ((0) + 4|0);
     $expanded35 = $9;
     $expanded34 = (($expanded35) - 1)|0;
     $10 = (($8) + ($expanded34))|0;
     $11 = ((0) + 4|0);
     $expanded39 = $11;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $12 = $10 & $expanded37;
     $13 = $12;
     $14 = HEAP32[$13>>2]|0;
     $arglist_next3 = ((($13)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $15 = ($14|0)<(0);
     $16 = $15 << 31 >> 31;
     $17 = $arg;
     $18 = $17;
     HEAP32[$18>>2] = $14;
     $19 = (($17) + 4)|0;
     $20 = $19;
     HEAP32[$20>>2] = $16;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$ap>>2]|0;
     $21 = $arglist_current5;
     $22 = ((0) + 4|0);
     $expanded42 = $22;
     $expanded41 = (($expanded42) - 1)|0;
     $23 = (($21) + ($expanded41))|0;
     $24 = ((0) + 4|0);
     $expanded46 = $24;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $25 = $23 & $expanded44;
     $26 = $25;
     $27 = HEAP32[$26>>2]|0;
     $arglist_next6 = ((($26)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next6;
     $28 = $arg;
     $29 = $28;
     HEAP32[$29>>2] = $27;
     $30 = (($28) + 4)|0;
     $31 = $30;
     HEAP32[$31>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$ap>>2]|0;
     $32 = $arglist_current8;
     $33 = ((0) + 8|0);
     $expanded49 = $33;
     $expanded48 = (($expanded49) - 1)|0;
     $34 = (($32) + ($expanded48))|0;
     $35 = ((0) + 8|0);
     $expanded53 = $35;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $36 = $34 & $expanded51;
     $37 = $36;
     $38 = $37;
     $39 = $38;
     $40 = HEAP32[$39>>2]|0;
     $41 = (($38) + 4)|0;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $arglist_next9 = ((($37)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next9;
     $44 = $arg;
     $45 = $44;
     HEAP32[$45>>2] = $40;
     $46 = (($44) + 4)|0;
     $47 = $46;
     HEAP32[$47>>2] = $43;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$ap>>2]|0;
     $48 = $arglist_current11;
     $49 = ((0) + 4|0);
     $expanded56 = $49;
     $expanded55 = (($expanded56) - 1)|0;
     $50 = (($48) + ($expanded55))|0;
     $51 = ((0) + 4|0);
     $expanded60 = $51;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $52 = $50 & $expanded58;
     $53 = $52;
     $54 = HEAP32[$53>>2]|0;
     $arglist_next12 = ((($53)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next12;
     $55 = $54&65535;
     $56 = $55 << 16 >> 16;
     $57 = ($56|0)<(0);
     $58 = $57 << 31 >> 31;
     $59 = $arg;
     $60 = $59;
     HEAP32[$60>>2] = $56;
     $61 = (($59) + 4)|0;
     $62 = $61;
     HEAP32[$62>>2] = $58;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$ap>>2]|0;
     $63 = $arglist_current14;
     $64 = ((0) + 4|0);
     $expanded63 = $64;
     $expanded62 = (($expanded63) - 1)|0;
     $65 = (($63) + ($expanded62))|0;
     $66 = ((0) + 4|0);
     $expanded67 = $66;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $67 = $65 & $expanded65;
     $68 = $67;
     $69 = HEAP32[$68>>2]|0;
     $arglist_next15 = ((($68)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next15;
     $$mask1 = $69 & 65535;
     $70 = $arg;
     $71 = $70;
     HEAP32[$71>>2] = $$mask1;
     $72 = (($70) + 4)|0;
     $73 = $72;
     HEAP32[$73>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$ap>>2]|0;
     $74 = $arglist_current17;
     $75 = ((0) + 4|0);
     $expanded70 = $75;
     $expanded69 = (($expanded70) - 1)|0;
     $76 = (($74) + ($expanded69))|0;
     $77 = ((0) + 4|0);
     $expanded74 = $77;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $78 = $76 & $expanded72;
     $79 = $78;
     $80 = HEAP32[$79>>2]|0;
     $arglist_next18 = ((($79)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next18;
     $81 = $80&255;
     $82 = $81 << 24 >> 24;
     $83 = ($82|0)<(0);
     $84 = $83 << 31 >> 31;
     $85 = $arg;
     $86 = $85;
     HEAP32[$86>>2] = $82;
     $87 = (($85) + 4)|0;
     $88 = $87;
     HEAP32[$88>>2] = $84;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$ap>>2]|0;
     $89 = $arglist_current20;
     $90 = ((0) + 4|0);
     $expanded77 = $90;
     $expanded76 = (($expanded77) - 1)|0;
     $91 = (($89) + ($expanded76))|0;
     $92 = ((0) + 4|0);
     $expanded81 = $92;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $93 = $91 & $expanded79;
     $94 = $93;
     $95 = HEAP32[$94>>2]|0;
     $arglist_next21 = ((($94)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next21;
     $$mask = $95 & 255;
     $96 = $arg;
     $97 = $96;
     HEAP32[$97>>2] = $$mask;
     $98 = (($96) + 4)|0;
     $99 = $98;
     HEAP32[$99>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$ap>>2]|0;
     $100 = $arglist_current23;
     $101 = ((0) + 8|0);
     $expanded84 = $101;
     $expanded83 = (($expanded84) - 1)|0;
     $102 = (($100) + ($expanded83))|0;
     $103 = ((0) + 8|0);
     $expanded88 = $103;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $104 = $102 & $expanded86;
     $105 = $104;
     $106 = +HEAPF64[$105>>3];
     $arglist_next24 = ((($105)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next24;
     HEAPF64[$arg>>3] = $106;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$ap>>2]|0;
     $107 = $arglist_current26;
     $108 = ((0) + 8|0);
     $expanded91 = $108;
     $expanded90 = (($expanded91) - 1)|0;
     $109 = (($107) + ($expanded90))|0;
     $110 = ((0) + 8|0);
     $expanded95 = $110;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $111 = $109 & $expanded93;
     $112 = $111;
     $113 = +HEAPF64[$112>>3];
     $arglist_next27 = ((($112)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next27;
     HEAPF64[$arg>>3] = $113;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_u($0,$1,$s) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 var $$0$lcssa = 0, $$01$lcssa$off0 = 0, $$05 = 0, $$1$lcssa = 0, $$12 = 0, $$lcssa20 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $y$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(0);
 $3 = ($0>>>0)>(4294967295);
 $4 = ($1|0)==(0);
 $5 = $4 & $3;
 $6 = $2 | $5;
 if ($6) {
  $$05 = $s;$7 = $0;$8 = $1;
  while(1) {
   $9 = (___uremdi3(($7|0),($8|0),10,0)|0);
   $10 = tempRet0;
   $11 = $9 | 48;
   $12 = $11&255;
   $13 = ((($$05)) + -1|0);
   HEAP8[$13>>0] = $12;
   $14 = (___udivdi3(($7|0),($8|0),10,0)|0);
   $15 = tempRet0;
   $16 = ($8>>>0)>(9);
   $17 = ($7>>>0)>(4294967295);
   $18 = ($8|0)==(9);
   $19 = $18 & $17;
   $20 = $16 | $19;
   if ($20) {
    $$05 = $13;$7 = $14;$8 = $15;
   } else {
    $$lcssa20 = $13;$28 = $14;$29 = $15;
    break;
   }
  }
  $$0$lcssa = $$lcssa20;$$01$lcssa$off0 = $28;
 } else {
  $$0$lcssa = $s;$$01$lcssa$off0 = $0;
 }
 $21 = ($$01$lcssa$off0|0)==(0);
 if ($21) {
  $$1$lcssa = $$0$lcssa;
 } else {
  $$12 = $$0$lcssa;$y$03 = $$01$lcssa$off0;
  while(1) {
   $22 = (($y$03>>>0) % 10)&-1;
   $23 = $22 | 48;
   $24 = $23&255;
   $25 = ((($$12)) + -1|0);
   HEAP8[$25>>0] = $24;
   $26 = (($y$03>>>0) / 10)&-1;
   $27 = ($y$03>>>0)<(10);
   if ($27) {
    $$1$lcssa = $25;
    break;
   } else {
    $$12 = $25;$y$03 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _pad($f,$c,$w,$l,$fl) {
 $f = $f|0;
 $c = $c|0;
 $w = $w|0;
 $l = $l|0;
 $fl = $fl|0;
 var $$0$lcssa6 = 0, $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $pad = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pad = sp;
 $0 = $fl & 73728;
 $1 = ($0|0)==(0);
 $2 = ($w|0)>($l|0);
 $or$cond = $2 & $1;
 do {
  if ($or$cond) {
   $3 = (($w) - ($l))|0;
   $4 = ($3>>>0)>(256);
   $5 = $4 ? 256 : $3;
   _memset(($pad|0),($c|0),($5|0))|0;
   $6 = ($3>>>0)>(255);
   $7 = HEAP32[$f>>2]|0;
   $8 = $7 & 32;
   $9 = ($8|0)==(0);
   if ($6) {
    $10 = (($w) - ($l))|0;
    $$02 = $3;$17 = $7;$18 = $9;
    while(1) {
     if ($18) {
      (___fwritex($pad,256,$f)|0);
      $$pre = HEAP32[$f>>2]|0;
      $14 = $$pre;
     } else {
      $14 = $17;
     }
     $11 = (($$02) + -256)|0;
     $12 = ($11>>>0)>(255);
     $13 = $14 & 32;
     $15 = ($13|0)==(0);
     if ($12) {
      $$02 = $11;$17 = $14;$18 = $15;
     } else {
      break;
     }
    }
    $16 = $10 & 255;
    if ($15) {
     $$0$lcssa6 = $16;
    } else {
     break;
    }
   } else {
    if ($9) {
     $$0$lcssa6 = $3;
    } else {
     break;
    }
   }
   (___fwritex($pad,$$0$lcssa6,$f)|0);
  }
 } while(0);
 STACKTOP = sp;return;
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$3$i = 0, $$lcssa = 0, $$lcssa211 = 0, $$lcssa215 = 0, $$lcssa216 = 0, $$lcssa217 = 0, $$lcssa219 = 0, $$lcssa222 = 0, $$lcssa224 = 0, $$lcssa226 = 0, $$lcssa228 = 0, $$lcssa230 = 0, $$lcssa232 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i22$i = 0, $$pre$i25 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i23$iZ2D = 0;
 var $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre105 = 0, $$pre106 = 0, $$pre14$i$i = 0, $$pre43$i = 0, $$pre56$i$i = 0, $$pre57$i$i = 0, $$pre8$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i13$i = 0, $$sum$i14$i = 0, $$sum$i17$i = 0, $$sum$i19$i = 0;
 var $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i15$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0;
 var $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum121$i = 0, $$sum122$i = 0, $$sum123$i = 0, $$sum124$i = 0, $$sum125$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0;
 var $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i16$i = 0, $$sum2$i18$i = 0, $$sum2$i21$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i27 = 0;
 var $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0;
 var $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0;
 var $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0;
 var $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0;
 var $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0;
 var $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
 var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
 var $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0;
 var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
 var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0;
 var $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0;
 var $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0;
 var $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0;
 var $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0;
 var $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0;
 var $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0;
 var $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0;
 var $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0;
 var $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0;
 var $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0;
 var $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0;
 var $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0;
 var $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0;
 var $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0;
 var $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0;
 var $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0;
 var $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0;
 var $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0;
 var $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0;
 var $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$029$i = 0, $K2$07$i$i = 0, $K8$051$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i$i$lcssa = 0, $R$0$i$lcssa = 0, $R$0$i18 = 0, $R$0$i18$lcssa = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i$i$lcssa = 0, $RP$0$i$lcssa = 0;
 var $RP$0$i17 = 0, $RP$0$i17$lcssa = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i25$i = 0, $T$028$i = 0, $T$028$i$lcssa = 0, $T$050$i$i = 0, $T$050$i$i$lcssa = 0, $T$06$i$i = 0, $T$06$i$i$lcssa = 0, $br$0$ph$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0;
 var $not$$i = 0, $not$$i$i = 0, $not$$i26$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i30 = 0, $or$cond1$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond3$i = 0, $or$cond5$i = 0, $or$cond57$i = 0, $or$cond6$i = 0, $or$cond8$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i15 = 0, $rsize$1$i = 0;
 var $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$084$i = 0, $sp$084$i$lcssa = 0, $sp$183$i = 0, $sp$183$i$lcssa = 0, $ssize$0$$i = 0, $ssize$0$i = 0, $ssize$1$ph$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0;
 var $t$2$v$3$i = 0, $t$230$i = 0, $tbase$255$i = 0, $tsize$0$ph$i = 0, $tsize$0323944$i = 0, $tsize$1$i = 0, $tsize$254$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$3$ph$i = 0, $v$332$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   $2 = (($bytes) + 11)|0;
   $3 = $2 & -8;
   $4 = $1 ? 16 : $3;
   $5 = $4 >>> 3;
   $6 = HEAP32[6388>>2]|0;
   $7 = $6 >>> $5;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($5))|0;
    $13 = $12 << 1;
    $14 = (6428 + ($13<<2)|0);
    $$sum10 = (($13) + 2)|0;
    $15 = (6428 + ($$sum10<<2)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[6388>>2] = $22;
     } else {
      $23 = HEAP32[(6404)>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = ((($18)) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = ((($16)) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    return ($mem$0|0);
   }
   $34 = HEAP32[(6396)>>2]|0;
   $35 = ($4>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $5;
     $38 = 2 << $5;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = (6428 + ($65<<2)|0);
     $$sum4 = (($65) + 2)|0;
     $67 = (6428 + ($$sum4<<2)|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ((($68)) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[6388>>2] = $74;
       $88 = $34;
      } else {
       $75 = HEAP32[(6404)>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = ((($70)) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        $$pre = HEAP32[(6396)>>2]|0;
        $88 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($4))|0;
     $82 = $4 | 3;
     $83 = ((($68)) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($4)|0);
     $85 = $81 | 1;
     $$sum56 = $4 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[(6408)>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = (6428 + ($92<<2)|0);
      $94 = HEAP32[6388>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[6388>>2] = $98;
       $$pre105 = (($92) + 2)|0;
       $$pre106 = (6428 + ($$pre105<<2)|0);
       $$pre$phiZ2D = $$pre106;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = (6428 + ($$sum9<<2)|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[(6404)>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = ((($F4$0)) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = ((($90)) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = ((($90)) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[(6396)>>2] = $81;
     HEAP32[(6408)>>2] = $84;
     $mem$0 = $69;
     return ($mem$0|0);
    }
    $106 = HEAP32[(6392)>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $4;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = (6692 + ($130<<2)|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ((($132)) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($4))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = ((($t$0$i)) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = ((($t$0$i)) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = ((($144)) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($4))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[(6404)>>2]|0;
     $150 = ($v$0$i$lcssa>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i$lcssa) + ($4)|0);
     $152 = ($v$0$i$lcssa>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = ((($v$0$i$lcssa)) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ((($v$0$i$lcssa)) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i$lcssa|0);
     do {
      if ($157) {
       $167 = ((($v$0$i$lcssa)) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = ((($v$0$i$lcssa)) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = ((($R$0$i)) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = ((($R$0$i)) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         $R$0$i$lcssa = $R$0$i;$RP$0$i$lcssa = $RP$0$i;
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i$lcssa>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i$lcssa>>2] = 0;
        $R$1$i = $R$0$i$lcssa;
        break;
       }
      } else {
       $158 = ((($v$0$i$lcssa)) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = ((($159)) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i$lcssa|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = ((($156)) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i$lcssa|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = ((($v$0$i$lcssa)) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = (6692 + ($182<<2)|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i$lcssa|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[(6392)>>2]|0;
         $189 = $188 & $187;
         HEAP32[(6392)>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[(6404)>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = ((($154)) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i$lcssa|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = ((($154)) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[(6404)>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = ((($R$1$i)) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = ((($v$0$i$lcssa)) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = ($201>>>0)<($197>>>0);
         if ($203) {
          _abort();
          // unreachable;
         } else {
          $204 = ((($R$1$i)) + 16|0);
          HEAP32[$204>>2] = $201;
          $205 = ((($201)) + 24|0);
          HEAP32[$205>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $206 = ((($v$0$i$lcssa)) + 20|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = ($207|0)==(0|0);
       if (!($208)) {
        $209 = HEAP32[(6404)>>2]|0;
        $210 = ($207>>>0)<($209>>>0);
        if ($210) {
         _abort();
         // unreachable;
        } else {
         $211 = ((($R$1$i)) + 20|0);
         HEAP32[$211>>2] = $207;
         $212 = ((($207)) + 24|0);
         HEAP32[$212>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $213 = ($rsize$0$i$lcssa>>>0)<(16);
     if ($213) {
      $214 = (($rsize$0$i$lcssa) + ($4))|0;
      $215 = $214 | 3;
      $216 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$216>>2] = $215;
      $$sum4$i = (($214) + 4)|0;
      $217 = (($v$0$i$lcssa) + ($$sum4$i)|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = $218 | 1;
      HEAP32[$217>>2] = $219;
     } else {
      $220 = $4 | 3;
      $221 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$221>>2] = $220;
      $222 = $rsize$0$i$lcssa | 1;
      $$sum$i35 = $4 | 4;
      $223 = (($v$0$i$lcssa) + ($$sum$i35)|0);
      HEAP32[$223>>2] = $222;
      $$sum1$i = (($rsize$0$i$lcssa) + ($4))|0;
      $224 = (($v$0$i$lcssa) + ($$sum1$i)|0);
      HEAP32[$224>>2] = $rsize$0$i$lcssa;
      $225 = HEAP32[(6396)>>2]|0;
      $226 = ($225|0)==(0);
      if (!($226)) {
       $227 = HEAP32[(6408)>>2]|0;
       $228 = $225 >>> 3;
       $229 = $228 << 1;
       $230 = (6428 + ($229<<2)|0);
       $231 = HEAP32[6388>>2]|0;
       $232 = 1 << $228;
       $233 = $231 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $231 | $232;
        HEAP32[6388>>2] = $235;
        $$pre$i = (($229) + 2)|0;
        $$pre8$i = (6428 + ($$pre$i<<2)|0);
        $$pre$phi$iZ2D = $$pre8$i;$F1$0$i = $230;
       } else {
        $$sum3$i = (($229) + 2)|0;
        $236 = (6428 + ($$sum3$i<<2)|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[(6404)>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $236;$F1$0$i = $237;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $227;
       $240 = ((($F1$0$i)) + 12|0);
       HEAP32[$240>>2] = $227;
       $241 = ((($227)) + 8|0);
       HEAP32[$241>>2] = $F1$0$i;
       $242 = ((($227)) + 12|0);
       HEAP32[$242>>2] = $230;
      }
      HEAP32[(6396)>>2] = $rsize$0$i$lcssa;
      HEAP32[(6408)>>2] = $151;
     }
     $243 = ((($v$0$i$lcssa)) + 8|0);
     $mem$0 = $243;
     return ($mem$0|0);
    }
   } else {
    $nb$0 = $4;
   }
  } else {
   $244 = ($bytes>>>0)>(4294967231);
   if ($244) {
    $nb$0 = -1;
   } else {
    $245 = (($bytes) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[(6392)>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $nb$0 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = (6692 + ($idx$0$i<<2)|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L123: do {
      if ($277) {
       $rsize$2$i = $249;$t$1$i = 0;$v$2$i = 0;
       label = 86;
      } else {
       $278 = ($idx$0$i|0)==(31);
       $279 = $idx$0$i >>> 1;
       $280 = (25 - ($279))|0;
       $281 = $278 ? 0 : $280;
       $282 = $246 << $281;
       $rsize$0$i15 = $249;$rst$0$i = 0;$sizebits$0$i = $282;$t$0$i14 = $276;$v$0$i16 = 0;
       while(1) {
        $283 = ((($t$0$i14)) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($rsize$0$i15>>>0);
        if ($287) {
         $288 = ($285|0)==($246|0);
         if ($288) {
          $rsize$331$i = $286;$t$230$i = $t$0$i14;$v$332$i = $t$0$i14;
          label = 90;
          break L123;
         } else {
          $rsize$1$i = $286;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $289 = ((($t$0$i14)) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $sizebits$0$i >>> 31;
        $292 = (((($t$0$i14)) + 16|0) + ($291<<2)|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond19$i = $294 | $295;
        $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $sizebits$0$i << 1;
        if ($296) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         label = 86;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $297;$t$0$i14 = $293;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $298 = ($t$1$i|0)==(0|0);
      $299 = ($v$2$i|0)==(0|0);
      $or$cond$i = $298 & $299;
      if ($or$cond$i) {
       $300 = 2 << $idx$0$i;
       $301 = (0 - ($300))|0;
       $302 = $300 | $301;
       $303 = $247 & $302;
       $304 = ($303|0)==(0);
       if ($304) {
        $nb$0 = $246;
        break;
       }
       $305 = (0 - ($303))|0;
       $306 = $303 & $305;
       $307 = (($306) + -1)|0;
       $308 = $307 >>> 12;
       $309 = $308 & 16;
       $310 = $307 >>> $309;
       $311 = $310 >>> 5;
       $312 = $311 & 8;
       $313 = $312 | $309;
       $314 = $310 >>> $312;
       $315 = $314 >>> 2;
       $316 = $315 & 4;
       $317 = $313 | $316;
       $318 = $314 >>> $316;
       $319 = $318 >>> 1;
       $320 = $319 & 2;
       $321 = $317 | $320;
       $322 = $318 >>> $320;
       $323 = $322 >>> 1;
       $324 = $323 & 1;
       $325 = $321 | $324;
       $326 = $322 >>> $324;
       $327 = (($325) + ($326))|0;
       $328 = (6692 + ($327<<2)|0);
       $329 = HEAP32[$328>>2]|0;
       $t$2$ph$i = $329;$v$3$ph$i = 0;
      } else {
       $t$2$ph$i = $t$1$i;$v$3$ph$i = $v$2$i;
      }
      $330 = ($t$2$ph$i|0)==(0|0);
      if ($330) {
       $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$3$ph$i;
      } else {
       $rsize$331$i = $rsize$2$i;$t$230$i = $t$2$ph$i;$v$332$i = $v$3$ph$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $331 = ((($t$230$i)) + 4|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $332 & -8;
       $334 = (($333) - ($246))|0;
       $335 = ($334>>>0)<($rsize$331$i>>>0);
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = ((($t$230$i)) + 16|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ($337|0)==(0|0);
       if (!($338)) {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $337;$v$332$i = $t$2$v$3$i;
        label = 90;
        continue;
       }
       $339 = ((($t$230$i)) + 20|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if ($341) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $340;$v$332$i = $t$2$v$3$i;
        label = 90;
       }
      }
     }
     $342 = ($v$3$lcssa$i|0)==(0|0);
     if ($342) {
      $nb$0 = $246;
     } else {
      $343 = HEAP32[(6396)>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($rsize$3$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[(6404)>>2]|0;
       $347 = ($v$3$lcssa$i>>>0)<($346>>>0);
       if ($347) {
        _abort();
        // unreachable;
       }
       $348 = (($v$3$lcssa$i) + ($246)|0);
       $349 = ($v$3$lcssa$i>>>0)<($348>>>0);
       if (!($349)) {
        _abort();
        // unreachable;
       }
       $350 = ((($v$3$lcssa$i)) + 24|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = ((($v$3$lcssa$i)) + 12|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ($353|0)==($v$3$lcssa$i|0);
       do {
        if ($354) {
         $364 = ((($v$3$lcssa$i)) + 20|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==(0|0);
         if ($366) {
          $367 = ((($v$3$lcssa$i)) + 16|0);
          $368 = HEAP32[$367>>2]|0;
          $369 = ($368|0)==(0|0);
          if ($369) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $368;$RP$0$i17 = $367;
          }
         } else {
          $R$0$i18 = $365;$RP$0$i17 = $364;
         }
         while(1) {
          $370 = ((($R$0$i18)) + 20|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if (!($372)) {
           $R$0$i18 = $371;$RP$0$i17 = $370;
           continue;
          }
          $373 = ((($R$0$i18)) + 16|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if ($375) {
           $R$0$i18$lcssa = $R$0$i18;$RP$0$i17$lcssa = $RP$0$i17;
           break;
          } else {
           $R$0$i18 = $374;$RP$0$i17 = $373;
          }
         }
         $376 = ($RP$0$i17$lcssa>>>0)<($346>>>0);
         if ($376) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17$lcssa>>2] = 0;
          $R$1$i20 = $R$0$i18$lcssa;
          break;
         }
        } else {
         $355 = ((($v$3$lcssa$i)) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = ($356>>>0)<($346>>>0);
         if ($357) {
          _abort();
          // unreachable;
         }
         $358 = ((($356)) + 12|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==($v$3$lcssa$i|0);
         if (!($360)) {
          _abort();
          // unreachable;
         }
         $361 = ((($353)) + 8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$3$lcssa$i|0);
         if ($363) {
          HEAP32[$358>>2] = $353;
          HEAP32[$361>>2] = $356;
          $R$1$i20 = $353;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $377 = ($351|0)==(0|0);
       do {
        if (!($377)) {
         $378 = ((($v$3$lcssa$i)) + 28|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = (6692 + ($379<<2)|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($v$3$lcssa$i|0)==($381|0);
         if ($382) {
          HEAP32[$380>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $383 = 1 << $379;
           $384 = $383 ^ -1;
           $385 = HEAP32[(6392)>>2]|0;
           $386 = $385 & $384;
           HEAP32[(6392)>>2] = $386;
           break;
          }
         } else {
          $387 = HEAP32[(6404)>>2]|0;
          $388 = ($351>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = ((($351)) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($v$3$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $R$1$i20;
          } else {
           $392 = ((($351)) + 20|0);
           HEAP32[$392>>2] = $R$1$i20;
          }
          $393 = ($R$1$i20|0)==(0|0);
          if ($393) {
           break;
          }
         }
         $394 = HEAP32[(6404)>>2]|0;
         $395 = ($R$1$i20>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = ((($R$1$i20)) + 24|0);
         HEAP32[$396>>2] = $351;
         $397 = ((($v$3$lcssa$i)) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = ((($R$1$i20)) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = ((($398)) + 24|0);
            HEAP32[$402>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $403 = ((($v$3$lcssa$i)) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if (!($405)) {
          $406 = HEAP32[(6404)>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = ((($R$1$i20)) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = ((($404)) + 24|0);
           HEAP32[$409>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $410 = ($rsize$3$lcssa$i>>>0)<(16);
       L199: do {
        if ($410) {
         $411 = (($rsize$3$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = ((($v$3$lcssa$i)) + 4|0);
         HEAP32[$413>>2] = $412;
         $$sum18$i = (($411) + 4)|0;
         $414 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = $415 | 1;
         HEAP32[$414>>2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = ((($v$3$lcssa$i)) + 4|0);
         HEAP32[$418>>2] = $417;
         $419 = $rsize$3$lcssa$i | 1;
         $$sum$i2334 = $246 | 4;
         $420 = (($v$3$lcssa$i) + ($$sum$i2334)|0);
         HEAP32[$420>>2] = $419;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($246))|0;
         $421 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$421>>2] = $rsize$3$lcssa$i;
         $422 = $rsize$3$lcssa$i >>> 3;
         $423 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($423) {
          $424 = $422 << 1;
          $425 = (6428 + ($424<<2)|0);
          $426 = HEAP32[6388>>2]|0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428|0)==(0);
          if ($429) {
           $430 = $426 | $427;
           HEAP32[6388>>2] = $430;
           $$pre$i25 = (($424) + 2)|0;
           $$pre43$i = (6428 + ($$pre$i25<<2)|0);
           $$pre$phi$i26Z2D = $$pre43$i;$F5$0$i = $425;
          } else {
           $$sum17$i = (($424) + 2)|0;
           $431 = (6428 + ($$sum17$i<<2)|0);
           $432 = HEAP32[$431>>2]|0;
           $433 = HEAP32[(6404)>>2]|0;
           $434 = ($432>>>0)<($433>>>0);
           if ($434) {
            _abort();
            // unreachable;
           } else {
            $$pre$phi$i26Z2D = $431;$F5$0$i = $432;
           }
          }
          HEAP32[$$pre$phi$i26Z2D>>2] = $348;
          $435 = ((($F5$0$i)) + 12|0);
          HEAP32[$435>>2] = $348;
          $$sum15$i = (($246) + 8)|0;
          $436 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$436>>2] = $F5$0$i;
          $$sum16$i = (($246) + 12)|0;
          $437 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$437>>2] = $425;
          break;
         }
         $438 = $rsize$3$lcssa$i >>> 8;
         $439 = ($438|0)==(0);
         if ($439) {
          $I7$0$i = 0;
         } else {
          $440 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($440) {
           $I7$0$i = 31;
          } else {
           $441 = (($438) + 1048320)|0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = (($444) + 520192)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = (($449) + 245760)|0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = (14 - ($453))|0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = (($454) + ($456))|0;
           $458 = $457 << 1;
           $459 = (($457) + 7)|0;
           $460 = $rsize$3$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $I7$0$i = $462;
          }
         }
         $463 = (6692 + ($I7$0$i<<2)|0);
         $$sum2$i = (($246) + 28)|0;
         $464 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$464>>2] = $I7$0$i;
         $$sum3$i27 = (($246) + 16)|0;
         $465 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($246) + 20)|0;
         $466 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$466>>2] = 0;
         HEAP32[$465>>2] = 0;
         $467 = HEAP32[(6392)>>2]|0;
         $468 = 1 << $I7$0$i;
         $469 = $467 & $468;
         $470 = ($469|0)==(0);
         if ($470) {
          $471 = $467 | $468;
          HEAP32[(6392)>>2] = $471;
          HEAP32[$463>>2] = $348;
          $$sum5$i = (($246) + 24)|0;
          $472 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$472>>2] = $463;
          $$sum6$i = (($246) + 12)|0;
          $473 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$473>>2] = $348;
          $$sum7$i = (($246) + 8)|0;
          $474 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$474>>2] = $348;
          break;
         }
         $475 = HEAP32[$463>>2]|0;
         $476 = ((($475)) + 4|0);
         $477 = HEAP32[$476>>2]|0;
         $478 = $477 & -8;
         $479 = ($478|0)==($rsize$3$lcssa$i|0);
         L217: do {
          if ($479) {
           $T$0$lcssa$i = $475;
          } else {
           $480 = ($I7$0$i|0)==(31);
           $481 = $I7$0$i >>> 1;
           $482 = (25 - ($481))|0;
           $483 = $480 ? 0 : $482;
           $484 = $rsize$3$lcssa$i << $483;
           $K12$029$i = $484;$T$028$i = $475;
           while(1) {
            $491 = $K12$029$i >>> 31;
            $492 = (((($T$028$i)) + 16|0) + ($491<<2)|0);
            $487 = HEAP32[$492>>2]|0;
            $493 = ($487|0)==(0|0);
            if ($493) {
             $$lcssa232 = $492;$T$028$i$lcssa = $T$028$i;
             break;
            }
            $485 = $K12$029$i << 1;
            $486 = ((($487)) + 4|0);
            $488 = HEAP32[$486>>2]|0;
            $489 = $488 & -8;
            $490 = ($489|0)==($rsize$3$lcssa$i|0);
            if ($490) {
             $T$0$lcssa$i = $487;
             break L217;
            } else {
             $K12$029$i = $485;$T$028$i = $487;
            }
           }
           $494 = HEAP32[(6404)>>2]|0;
           $495 = ($$lcssa232>>>0)<($494>>>0);
           if ($495) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$$lcssa232>>2] = $348;
            $$sum11$i = (($246) + 24)|0;
            $496 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$496>>2] = $T$028$i$lcssa;
            $$sum12$i = (($246) + 12)|0;
            $497 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$497>>2] = $348;
            $$sum13$i = (($246) + 8)|0;
            $498 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$498>>2] = $348;
            break L199;
           }
          }
         } while(0);
         $499 = ((($T$0$lcssa$i)) + 8|0);
         $500 = HEAP32[$499>>2]|0;
         $501 = HEAP32[(6404)>>2]|0;
         $502 = ($500>>>0)>=($501>>>0);
         $not$$i = ($T$0$lcssa$i>>>0)>=($501>>>0);
         $503 = $502 & $not$$i;
         if ($503) {
          $504 = ((($500)) + 12|0);
          HEAP32[$504>>2] = $348;
          HEAP32[$499>>2] = $348;
          $$sum8$i = (($246) + 8)|0;
          $505 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$505>>2] = $500;
          $$sum9$i = (($246) + 12)|0;
          $506 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$506>>2] = $T$0$lcssa$i;
          $$sum10$i = (($246) + 24)|0;
          $507 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$507>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $508 = ((($v$3$lcssa$i)) + 8|0);
       $mem$0 = $508;
       return ($mem$0|0);
      } else {
       $nb$0 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[(6396)>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[(6408)>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[(6408)>>2] = $514;
   HEAP32[(6396)>>2] = $511;
   $515 = $511 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $516 = (($512) + ($$sum2)|0);
   HEAP32[$516>>2] = $515;
   $517 = (($512) + ($509)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = ((($512)) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[(6396)>>2] = 0;
   HEAP32[(6408)>>2] = 0;
   $520 = $509 | 3;
   $521 = ((($512)) + 4|0);
   HEAP32[$521>>2] = $520;
   $$sum1 = (($509) + 4)|0;
   $522 = (($512) + ($$sum1)|0);
   $523 = HEAP32[$522>>2]|0;
   $524 = $523 | 1;
   HEAP32[$522>>2] = $524;
  }
  $525 = ((($512)) + 8|0);
  $mem$0 = $525;
  return ($mem$0|0);
 }
 $526 = HEAP32[(6400)>>2]|0;
 $527 = ($526>>>0)>($nb$0>>>0);
 if ($527) {
  $528 = (($526) - ($nb$0))|0;
  HEAP32[(6400)>>2] = $528;
  $529 = HEAP32[(6412)>>2]|0;
  $530 = (($529) + ($nb$0)|0);
  HEAP32[(6412)>>2] = $530;
  $531 = $528 | 1;
  $$sum = (($nb$0) + 4)|0;
  $532 = (($529) + ($$sum)|0);
  HEAP32[$532>>2] = $531;
  $533 = $nb$0 | 3;
  $534 = ((($529)) + 4|0);
  HEAP32[$534>>2] = $533;
  $535 = ((($529)) + 8|0);
  $mem$0 = $535;
  return ($mem$0|0);
 }
 $536 = HEAP32[6860>>2]|0;
 $537 = ($536|0)==(0);
 do {
  if ($537) {
   $538 = (_sysconf(30)|0);
   $539 = (($538) + -1)|0;
   $540 = $539 & $538;
   $541 = ($540|0)==(0);
   if ($541) {
    HEAP32[(6868)>>2] = $538;
    HEAP32[(6864)>>2] = $538;
    HEAP32[(6872)>>2] = -1;
    HEAP32[(6876)>>2] = -1;
    HEAP32[(6880)>>2] = 0;
    HEAP32[(6832)>>2] = 0;
    $542 = (_time((0|0))|0);
    $543 = $542 & -16;
    $544 = $543 ^ 1431655768;
    HEAP32[6860>>2] = $544;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $545 = (($nb$0) + 48)|0;
 $546 = HEAP32[(6868)>>2]|0;
 $547 = (($nb$0) + 47)|0;
 $548 = (($546) + ($547))|0;
 $549 = (0 - ($546))|0;
 $550 = $548 & $549;
 $551 = ($550>>>0)>($nb$0>>>0);
 if (!($551)) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $552 = HEAP32[(6828)>>2]|0;
 $553 = ($552|0)==(0);
 if (!($553)) {
  $554 = HEAP32[(6820)>>2]|0;
  $555 = (($554) + ($550))|0;
  $556 = ($555>>>0)<=($554>>>0);
  $557 = ($555>>>0)>($552>>>0);
  $or$cond1$i = $556 | $557;
  if ($or$cond1$i) {
   $mem$0 = 0;
   return ($mem$0|0);
  }
 }
 $558 = HEAP32[(6832)>>2]|0;
 $559 = $558 & 4;
 $560 = ($559|0)==(0);
 L258: do {
  if ($560) {
   $561 = HEAP32[(6412)>>2]|0;
   $562 = ($561|0)==(0|0);
   L260: do {
    if ($562) {
     label = 174;
    } else {
     $sp$0$i$i = (6836);
     while(1) {
      $563 = HEAP32[$sp$0$i$i>>2]|0;
      $564 = ($563>>>0)>($561>>>0);
      if (!($564)) {
       $565 = ((($sp$0$i$i)) + 4|0);
       $566 = HEAP32[$565>>2]|0;
       $567 = (($563) + ($566)|0);
       $568 = ($567>>>0)>($561>>>0);
       if ($568) {
        $$lcssa228 = $sp$0$i$i;$$lcssa230 = $565;
        break;
       }
      }
      $569 = ((($sp$0$i$i)) + 8|0);
      $570 = HEAP32[$569>>2]|0;
      $571 = ($570|0)==(0|0);
      if ($571) {
       label = 174;
       break L260;
      } else {
       $sp$0$i$i = $570;
      }
     }
     $594 = HEAP32[(6400)>>2]|0;
     $595 = (($548) - ($594))|0;
     $596 = $595 & $549;
     $597 = ($596>>>0)<(2147483647);
     if ($597) {
      $598 = (_sbrk(($596|0))|0);
      $599 = HEAP32[$$lcssa228>>2]|0;
      $600 = HEAP32[$$lcssa230>>2]|0;
      $601 = (($599) + ($600)|0);
      $602 = ($598|0)==($601|0);
      $$3$i = $602 ? $596 : 0;
      if ($602) {
       $603 = ($598|0)==((-1)|0);
       if ($603) {
        $tsize$0323944$i = $$3$i;
       } else {
        $tbase$255$i = $598;$tsize$254$i = $$3$i;
        label = 194;
        break L258;
       }
      } else {
       $br$0$ph$i = $598;$ssize$1$ph$i = $596;$tsize$0$ph$i = $$3$i;
       label = 184;
      }
     } else {
      $tsize$0323944$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 174) {
     $572 = (_sbrk(0)|0);
     $573 = ($572|0)==((-1)|0);
     if ($573) {
      $tsize$0323944$i = 0;
     } else {
      $574 = $572;
      $575 = HEAP32[(6864)>>2]|0;
      $576 = (($575) + -1)|0;
      $577 = $576 & $574;
      $578 = ($577|0)==(0);
      if ($578) {
       $ssize$0$i = $550;
      } else {
       $579 = (($576) + ($574))|0;
       $580 = (0 - ($575))|0;
       $581 = $579 & $580;
       $582 = (($550) - ($574))|0;
       $583 = (($582) + ($581))|0;
       $ssize$0$i = $583;
      }
      $584 = HEAP32[(6820)>>2]|0;
      $585 = (($584) + ($ssize$0$i))|0;
      $586 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $587 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i30 = $586 & $587;
      if ($or$cond$i30) {
       $588 = HEAP32[(6828)>>2]|0;
       $589 = ($588|0)==(0);
       if (!($589)) {
        $590 = ($585>>>0)<=($584>>>0);
        $591 = ($585>>>0)>($588>>>0);
        $or$cond2$i = $590 | $591;
        if ($or$cond2$i) {
         $tsize$0323944$i = 0;
         break;
        }
       }
       $592 = (_sbrk(($ssize$0$i|0))|0);
       $593 = ($592|0)==($572|0);
       $ssize$0$$i = $593 ? $ssize$0$i : 0;
       if ($593) {
        $tbase$255$i = $572;$tsize$254$i = $ssize$0$$i;
        label = 194;
        break L258;
       } else {
        $br$0$ph$i = $592;$ssize$1$ph$i = $ssize$0$i;$tsize$0$ph$i = $ssize$0$$i;
        label = 184;
       }
      } else {
       $tsize$0323944$i = 0;
      }
     }
    }
   } while(0);
   L280: do {
    if ((label|0) == 184) {
     $604 = (0 - ($ssize$1$ph$i))|0;
     $605 = ($br$0$ph$i|0)!=((-1)|0);
     $606 = ($ssize$1$ph$i>>>0)<(2147483647);
     $or$cond5$i = $606 & $605;
     $607 = ($545>>>0)>($ssize$1$ph$i>>>0);
     $or$cond6$i = $607 & $or$cond5$i;
     do {
      if ($or$cond6$i) {
       $608 = HEAP32[(6868)>>2]|0;
       $609 = (($547) - ($ssize$1$ph$i))|0;
       $610 = (($609) + ($608))|0;
       $611 = (0 - ($608))|0;
       $612 = $610 & $611;
       $613 = ($612>>>0)<(2147483647);
       if ($613) {
        $614 = (_sbrk(($612|0))|0);
        $615 = ($614|0)==((-1)|0);
        if ($615) {
         (_sbrk(($604|0))|0);
         $tsize$0323944$i = $tsize$0$ph$i;
         break L280;
        } else {
         $616 = (($612) + ($ssize$1$ph$i))|0;
         $ssize$2$i = $616;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$ph$i;
       }
      } else {
       $ssize$2$i = $ssize$1$ph$i;
      }
     } while(0);
     $617 = ($br$0$ph$i|0)==((-1)|0);
     if ($617) {
      $tsize$0323944$i = $tsize$0$ph$i;
     } else {
      $tbase$255$i = $br$0$ph$i;$tsize$254$i = $ssize$2$i;
      label = 194;
      break L258;
     }
    }
   } while(0);
   $618 = HEAP32[(6832)>>2]|0;
   $619 = $618 | 4;
   HEAP32[(6832)>>2] = $619;
   $tsize$1$i = $tsize$0323944$i;
   label = 191;
  } else {
   $tsize$1$i = 0;
   label = 191;
  }
 } while(0);
 if ((label|0) == 191) {
  $620 = ($550>>>0)<(2147483647);
  if ($620) {
   $621 = (_sbrk(($550|0))|0);
   $622 = (_sbrk(0)|0);
   $623 = ($621|0)!=((-1)|0);
   $624 = ($622|0)!=((-1)|0);
   $or$cond3$i = $623 & $624;
   $625 = ($621>>>0)<($622>>>0);
   $or$cond8$i = $625 & $or$cond3$i;
   if ($or$cond8$i) {
    $626 = $622;
    $627 = $621;
    $628 = (($626) - ($627))|0;
    $629 = (($nb$0) + 40)|0;
    $630 = ($628>>>0)>($629>>>0);
    $$tsize$1$i = $630 ? $628 : $tsize$1$i;
    if ($630) {
     $tbase$255$i = $621;$tsize$254$i = $$tsize$1$i;
     label = 194;
    }
   }
  }
 }
 if ((label|0) == 194) {
  $631 = HEAP32[(6820)>>2]|0;
  $632 = (($631) + ($tsize$254$i))|0;
  HEAP32[(6820)>>2] = $632;
  $633 = HEAP32[(6824)>>2]|0;
  $634 = ($632>>>0)>($633>>>0);
  if ($634) {
   HEAP32[(6824)>>2] = $632;
  }
  $635 = HEAP32[(6412)>>2]|0;
  $636 = ($635|0)==(0|0);
  L299: do {
   if ($636) {
    $637 = HEAP32[(6404)>>2]|0;
    $638 = ($637|0)==(0|0);
    $639 = ($tbase$255$i>>>0)<($637>>>0);
    $or$cond9$i = $638 | $639;
    if ($or$cond9$i) {
     HEAP32[(6404)>>2] = $tbase$255$i;
    }
    HEAP32[(6836)>>2] = $tbase$255$i;
    HEAP32[(6840)>>2] = $tsize$254$i;
    HEAP32[(6848)>>2] = 0;
    $640 = HEAP32[6860>>2]|0;
    HEAP32[(6424)>>2] = $640;
    HEAP32[(6420)>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $641 = $i$02$i$i << 1;
     $642 = (6428 + ($641<<2)|0);
     $$sum$i$i = (($641) + 3)|0;
     $643 = (6428 + ($$sum$i$i<<2)|0);
     HEAP32[$643>>2] = $642;
     $$sum1$i$i = (($641) + 2)|0;
     $644 = (6428 + ($$sum1$i$i<<2)|0);
     HEAP32[$644>>2] = $642;
     $645 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($645|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $645;
     }
    }
    $646 = (($tsize$254$i) + -40)|0;
    $647 = ((($tbase$255$i)) + 8|0);
    $648 = $647;
    $649 = $648 & 7;
    $650 = ($649|0)==(0);
    $651 = (0 - ($648))|0;
    $652 = $651 & 7;
    $653 = $650 ? 0 : $652;
    $654 = (($tbase$255$i) + ($653)|0);
    $655 = (($646) - ($653))|0;
    HEAP32[(6412)>>2] = $654;
    HEAP32[(6400)>>2] = $655;
    $656 = $655 | 1;
    $$sum$i13$i = (($653) + 4)|0;
    $657 = (($tbase$255$i) + ($$sum$i13$i)|0);
    HEAP32[$657>>2] = $656;
    $$sum2$i$i = (($tsize$254$i) + -36)|0;
    $658 = (($tbase$255$i) + ($$sum2$i$i)|0);
    HEAP32[$658>>2] = 40;
    $659 = HEAP32[(6876)>>2]|0;
    HEAP32[(6416)>>2] = $659;
   } else {
    $sp$084$i = (6836);
    while(1) {
     $660 = HEAP32[$sp$084$i>>2]|0;
     $661 = ((($sp$084$i)) + 4|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = (($660) + ($662)|0);
     $664 = ($tbase$255$i|0)==($663|0);
     if ($664) {
      $$lcssa222 = $660;$$lcssa224 = $661;$$lcssa226 = $662;$sp$084$i$lcssa = $sp$084$i;
      label = 204;
      break;
     }
     $665 = ((($sp$084$i)) + 8|0);
     $666 = HEAP32[$665>>2]|0;
     $667 = ($666|0)==(0|0);
     if ($667) {
      break;
     } else {
      $sp$084$i = $666;
     }
    }
    if ((label|0) == 204) {
     $668 = ((($sp$084$i$lcssa)) + 12|0);
     $669 = HEAP32[$668>>2]|0;
     $670 = $669 & 8;
     $671 = ($670|0)==(0);
     if ($671) {
      $672 = ($635>>>0)>=($$lcssa222>>>0);
      $673 = ($635>>>0)<($tbase$255$i>>>0);
      $or$cond57$i = $673 & $672;
      if ($or$cond57$i) {
       $674 = (($$lcssa226) + ($tsize$254$i))|0;
       HEAP32[$$lcssa224>>2] = $674;
       $675 = HEAP32[(6400)>>2]|0;
       $676 = (($675) + ($tsize$254$i))|0;
       $677 = ((($635)) + 8|0);
       $678 = $677;
       $679 = $678 & 7;
       $680 = ($679|0)==(0);
       $681 = (0 - ($678))|0;
       $682 = $681 & 7;
       $683 = $680 ? 0 : $682;
       $684 = (($635) + ($683)|0);
       $685 = (($676) - ($683))|0;
       HEAP32[(6412)>>2] = $684;
       HEAP32[(6400)>>2] = $685;
       $686 = $685 | 1;
       $$sum$i17$i = (($683) + 4)|0;
       $687 = (($635) + ($$sum$i17$i)|0);
       HEAP32[$687>>2] = $686;
       $$sum2$i18$i = (($676) + 4)|0;
       $688 = (($635) + ($$sum2$i18$i)|0);
       HEAP32[$688>>2] = 40;
       $689 = HEAP32[(6876)>>2]|0;
       HEAP32[(6416)>>2] = $689;
       break;
      }
     }
    }
    $690 = HEAP32[(6404)>>2]|0;
    $691 = ($tbase$255$i>>>0)<($690>>>0);
    if ($691) {
     HEAP32[(6404)>>2] = $tbase$255$i;
     $755 = $tbase$255$i;
    } else {
     $755 = $690;
    }
    $692 = (($tbase$255$i) + ($tsize$254$i)|0);
    $sp$183$i = (6836);
    while(1) {
     $693 = HEAP32[$sp$183$i>>2]|0;
     $694 = ($693|0)==($692|0);
     if ($694) {
      $$lcssa219 = $sp$183$i;$sp$183$i$lcssa = $sp$183$i;
      label = 212;
      break;
     }
     $695 = ((($sp$183$i)) + 8|0);
     $696 = HEAP32[$695>>2]|0;
     $697 = ($696|0)==(0|0);
     if ($697) {
      $sp$0$i$i$i = (6836);
      break;
     } else {
      $sp$183$i = $696;
     }
    }
    if ((label|0) == 212) {
     $698 = ((($sp$183$i$lcssa)) + 12|0);
     $699 = HEAP32[$698>>2]|0;
     $700 = $699 & 8;
     $701 = ($700|0)==(0);
     if ($701) {
      HEAP32[$$lcssa219>>2] = $tbase$255$i;
      $702 = ((($sp$183$i$lcssa)) + 4|0);
      $703 = HEAP32[$702>>2]|0;
      $704 = (($703) + ($tsize$254$i))|0;
      HEAP32[$702>>2] = $704;
      $705 = ((($tbase$255$i)) + 8|0);
      $706 = $705;
      $707 = $706 & 7;
      $708 = ($707|0)==(0);
      $709 = (0 - ($706))|0;
      $710 = $709 & 7;
      $711 = $708 ? 0 : $710;
      $712 = (($tbase$255$i) + ($711)|0);
      $$sum112$i = (($tsize$254$i) + 8)|0;
      $713 = (($tbase$255$i) + ($$sum112$i)|0);
      $714 = $713;
      $715 = $714 & 7;
      $716 = ($715|0)==(0);
      $717 = (0 - ($714))|0;
      $718 = $717 & 7;
      $719 = $716 ? 0 : $718;
      $$sum113$i = (($719) + ($tsize$254$i))|0;
      $720 = (($tbase$255$i) + ($$sum113$i)|0);
      $721 = $720;
      $722 = $712;
      $723 = (($721) - ($722))|0;
      $$sum$i19$i = (($711) + ($nb$0))|0;
      $724 = (($tbase$255$i) + ($$sum$i19$i)|0);
      $725 = (($723) - ($nb$0))|0;
      $726 = $nb$0 | 3;
      $$sum1$i20$i = (($711) + 4)|0;
      $727 = (($tbase$255$i) + ($$sum1$i20$i)|0);
      HEAP32[$727>>2] = $726;
      $728 = ($720|0)==($635|0);
      L324: do {
       if ($728) {
        $729 = HEAP32[(6400)>>2]|0;
        $730 = (($729) + ($725))|0;
        HEAP32[(6400)>>2] = $730;
        HEAP32[(6412)>>2] = $724;
        $731 = $730 | 1;
        $$sum42$i$i = (($$sum$i19$i) + 4)|0;
        $732 = (($tbase$255$i) + ($$sum42$i$i)|0);
        HEAP32[$732>>2] = $731;
       } else {
        $733 = HEAP32[(6408)>>2]|0;
        $734 = ($720|0)==($733|0);
        if ($734) {
         $735 = HEAP32[(6396)>>2]|0;
         $736 = (($735) + ($725))|0;
         HEAP32[(6396)>>2] = $736;
         HEAP32[(6408)>>2] = $724;
         $737 = $736 | 1;
         $$sum40$i$i = (($$sum$i19$i) + 4)|0;
         $738 = (($tbase$255$i) + ($$sum40$i$i)|0);
         HEAP32[$738>>2] = $737;
         $$sum41$i$i = (($736) + ($$sum$i19$i))|0;
         $739 = (($tbase$255$i) + ($$sum41$i$i)|0);
         HEAP32[$739>>2] = $736;
         break;
        }
        $$sum2$i21$i = (($tsize$254$i) + 4)|0;
        $$sum114$i = (($$sum2$i21$i) + ($719))|0;
        $740 = (($tbase$255$i) + ($$sum114$i)|0);
        $741 = HEAP32[$740>>2]|0;
        $742 = $741 & 3;
        $743 = ($742|0)==(1);
        if ($743) {
         $744 = $741 & -8;
         $745 = $741 >>> 3;
         $746 = ($741>>>0)<(256);
         L332: do {
          if ($746) {
           $$sum3738$i$i = $719 | 8;
           $$sum124$i = (($$sum3738$i$i) + ($tsize$254$i))|0;
           $747 = (($tbase$255$i) + ($$sum124$i)|0);
           $748 = HEAP32[$747>>2]|0;
           $$sum39$i$i = (($tsize$254$i) + 12)|0;
           $$sum125$i = (($$sum39$i$i) + ($719))|0;
           $749 = (($tbase$255$i) + ($$sum125$i)|0);
           $750 = HEAP32[$749>>2]|0;
           $751 = $745 << 1;
           $752 = (6428 + ($751<<2)|0);
           $753 = ($748|0)==($752|0);
           do {
            if (!($753)) {
             $754 = ($748>>>0)<($755>>>0);
             if ($754) {
              _abort();
              // unreachable;
             }
             $756 = ((($748)) + 12|0);
             $757 = HEAP32[$756>>2]|0;
             $758 = ($757|0)==($720|0);
             if ($758) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $759 = ($750|0)==($748|0);
           if ($759) {
            $760 = 1 << $745;
            $761 = $760 ^ -1;
            $762 = HEAP32[6388>>2]|0;
            $763 = $762 & $761;
            HEAP32[6388>>2] = $763;
            break;
           }
           $764 = ($750|0)==($752|0);
           do {
            if ($764) {
             $$pre57$i$i = ((($750)) + 8|0);
             $$pre$phi58$i$iZ2D = $$pre57$i$i;
            } else {
             $765 = ($750>>>0)<($755>>>0);
             if ($765) {
              _abort();
              // unreachable;
             }
             $766 = ((($750)) + 8|0);
             $767 = HEAP32[$766>>2]|0;
             $768 = ($767|0)==($720|0);
             if ($768) {
              $$pre$phi58$i$iZ2D = $766;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $769 = ((($748)) + 12|0);
           HEAP32[$769>>2] = $750;
           HEAP32[$$pre$phi58$i$iZ2D>>2] = $748;
          } else {
           $$sum34$i$i = $719 | 24;
           $$sum115$i = (($$sum34$i$i) + ($tsize$254$i))|0;
           $770 = (($tbase$255$i) + ($$sum115$i)|0);
           $771 = HEAP32[$770>>2]|0;
           $$sum5$i$i = (($tsize$254$i) + 12)|0;
           $$sum116$i = (($$sum5$i$i) + ($719))|0;
           $772 = (($tbase$255$i) + ($$sum116$i)|0);
           $773 = HEAP32[$772>>2]|0;
           $774 = ($773|0)==($720|0);
           do {
            if ($774) {
             $$sum67$i$i = $719 | 16;
             $$sum122$i = (($$sum2$i21$i) + ($$sum67$i$i))|0;
             $784 = (($tbase$255$i) + ($$sum122$i)|0);
             $785 = HEAP32[$784>>2]|0;
             $786 = ($785|0)==(0|0);
             if ($786) {
              $$sum123$i = (($$sum67$i$i) + ($tsize$254$i))|0;
              $787 = (($tbase$255$i) + ($$sum123$i)|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if ($789) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $788;$RP$0$i$i = $787;
              }
             } else {
              $R$0$i$i = $785;$RP$0$i$i = $784;
             }
             while(1) {
              $790 = ((($R$0$i$i)) + 20|0);
              $791 = HEAP32[$790>>2]|0;
              $792 = ($791|0)==(0|0);
              if (!($792)) {
               $R$0$i$i = $791;$RP$0$i$i = $790;
               continue;
              }
              $793 = ((($R$0$i$i)) + 16|0);
              $794 = HEAP32[$793>>2]|0;
              $795 = ($794|0)==(0|0);
              if ($795) {
               $R$0$i$i$lcssa = $R$0$i$i;$RP$0$i$i$lcssa = $RP$0$i$i;
               break;
              } else {
               $R$0$i$i = $794;$RP$0$i$i = $793;
              }
             }
             $796 = ($RP$0$i$i$lcssa>>>0)<($755>>>0);
             if ($796) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i$lcssa>>2] = 0;
              $R$1$i$i = $R$0$i$i$lcssa;
              break;
             }
            } else {
             $$sum3536$i$i = $719 | 8;
             $$sum117$i = (($$sum3536$i$i) + ($tsize$254$i))|0;
             $775 = (($tbase$255$i) + ($$sum117$i)|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776>>>0)<($755>>>0);
             if ($777) {
              _abort();
              // unreachable;
             }
             $778 = ((($776)) + 12|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = ($779|0)==($720|0);
             if (!($780)) {
              _abort();
              // unreachable;
             }
             $781 = ((($773)) + 8|0);
             $782 = HEAP32[$781>>2]|0;
             $783 = ($782|0)==($720|0);
             if ($783) {
              HEAP32[$778>>2] = $773;
              HEAP32[$781>>2] = $776;
              $R$1$i$i = $773;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $797 = ($771|0)==(0|0);
           if ($797) {
            break;
           }
           $$sum30$i$i = (($tsize$254$i) + 28)|0;
           $$sum118$i = (($$sum30$i$i) + ($719))|0;
           $798 = (($tbase$255$i) + ($$sum118$i)|0);
           $799 = HEAP32[$798>>2]|0;
           $800 = (6692 + ($799<<2)|0);
           $801 = HEAP32[$800>>2]|0;
           $802 = ($720|0)==($801|0);
           do {
            if ($802) {
             HEAP32[$800>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $803 = 1 << $799;
             $804 = $803 ^ -1;
             $805 = HEAP32[(6392)>>2]|0;
             $806 = $805 & $804;
             HEAP32[(6392)>>2] = $806;
             break L332;
            } else {
             $807 = HEAP32[(6404)>>2]|0;
             $808 = ($771>>>0)<($807>>>0);
             if ($808) {
              _abort();
              // unreachable;
             }
             $809 = ((($771)) + 16|0);
             $810 = HEAP32[$809>>2]|0;
             $811 = ($810|0)==($720|0);
             if ($811) {
              HEAP32[$809>>2] = $R$1$i$i;
             } else {
              $812 = ((($771)) + 20|0);
              HEAP32[$812>>2] = $R$1$i$i;
             }
             $813 = ($R$1$i$i|0)==(0|0);
             if ($813) {
              break L332;
             }
            }
           } while(0);
           $814 = HEAP32[(6404)>>2]|0;
           $815 = ($R$1$i$i>>>0)<($814>>>0);
           if ($815) {
            _abort();
            // unreachable;
           }
           $816 = ((($R$1$i$i)) + 24|0);
           HEAP32[$816>>2] = $771;
           $$sum3132$i$i = $719 | 16;
           $$sum119$i = (($$sum3132$i$i) + ($tsize$254$i))|0;
           $817 = (($tbase$255$i) + ($$sum119$i)|0);
           $818 = HEAP32[$817>>2]|0;
           $819 = ($818|0)==(0|0);
           do {
            if (!($819)) {
             $820 = ($818>>>0)<($814>>>0);
             if ($820) {
              _abort();
              // unreachable;
             } else {
              $821 = ((($R$1$i$i)) + 16|0);
              HEAP32[$821>>2] = $818;
              $822 = ((($818)) + 24|0);
              HEAP32[$822>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum120$i = (($$sum2$i21$i) + ($$sum3132$i$i))|0;
           $823 = (($tbase$255$i) + ($$sum120$i)|0);
           $824 = HEAP32[$823>>2]|0;
           $825 = ($824|0)==(0|0);
           if ($825) {
            break;
           }
           $826 = HEAP32[(6404)>>2]|0;
           $827 = ($824>>>0)<($826>>>0);
           if ($827) {
            _abort();
            // unreachable;
           } else {
            $828 = ((($R$1$i$i)) + 20|0);
            HEAP32[$828>>2] = $824;
            $829 = ((($824)) + 24|0);
            HEAP32[$829>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $744 | $719;
         $$sum121$i = (($$sum9$i$i) + ($tsize$254$i))|0;
         $830 = (($tbase$255$i) + ($$sum121$i)|0);
         $831 = (($744) + ($725))|0;
         $oldfirst$0$i$i = $830;$qsize$0$i$i = $831;
        } else {
         $oldfirst$0$i$i = $720;$qsize$0$i$i = $725;
        }
        $832 = ((($oldfirst$0$i$i)) + 4|0);
        $833 = HEAP32[$832>>2]|0;
        $834 = $833 & -2;
        HEAP32[$832>>2] = $834;
        $835 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i19$i) + 4)|0;
        $836 = (($tbase$255$i) + ($$sum10$i$i)|0);
        HEAP32[$836>>2] = $835;
        $$sum11$i$i = (($qsize$0$i$i) + ($$sum$i19$i))|0;
        $837 = (($tbase$255$i) + ($$sum11$i$i)|0);
        HEAP32[$837>>2] = $qsize$0$i$i;
        $838 = $qsize$0$i$i >>> 3;
        $839 = ($qsize$0$i$i>>>0)<(256);
        if ($839) {
         $840 = $838 << 1;
         $841 = (6428 + ($840<<2)|0);
         $842 = HEAP32[6388>>2]|0;
         $843 = 1 << $838;
         $844 = $842 & $843;
         $845 = ($844|0)==(0);
         do {
          if ($845) {
           $846 = $842 | $843;
           HEAP32[6388>>2] = $846;
           $$pre$i22$i = (($840) + 2)|0;
           $$pre56$i$i = (6428 + ($$pre$i22$i<<2)|0);
           $$pre$phi$i23$iZ2D = $$pre56$i$i;$F4$0$i$i = $841;
          } else {
           $$sum29$i$i = (($840) + 2)|0;
           $847 = (6428 + ($$sum29$i$i<<2)|0);
           $848 = HEAP32[$847>>2]|0;
           $849 = HEAP32[(6404)>>2]|0;
           $850 = ($848>>>0)<($849>>>0);
           if (!($850)) {
            $$pre$phi$i23$iZ2D = $847;$F4$0$i$i = $848;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i23$iZ2D>>2] = $724;
         $851 = ((($F4$0$i$i)) + 12|0);
         HEAP32[$851>>2] = $724;
         $$sum27$i$i = (($$sum$i19$i) + 8)|0;
         $852 = (($tbase$255$i) + ($$sum27$i$i)|0);
         HEAP32[$852>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i19$i) + 12)|0;
         $853 = (($tbase$255$i) + ($$sum28$i$i)|0);
         HEAP32[$853>>2] = $841;
         break;
        }
        $854 = $qsize$0$i$i >>> 8;
        $855 = ($854|0)==(0);
        do {
         if ($855) {
          $I7$0$i$i = 0;
         } else {
          $856 = ($qsize$0$i$i>>>0)>(16777215);
          if ($856) {
           $I7$0$i$i = 31;
           break;
          }
          $857 = (($854) + 1048320)|0;
          $858 = $857 >>> 16;
          $859 = $858 & 8;
          $860 = $854 << $859;
          $861 = (($860) + 520192)|0;
          $862 = $861 >>> 16;
          $863 = $862 & 4;
          $864 = $863 | $859;
          $865 = $860 << $863;
          $866 = (($865) + 245760)|0;
          $867 = $866 >>> 16;
          $868 = $867 & 2;
          $869 = $864 | $868;
          $870 = (14 - ($869))|0;
          $871 = $865 << $868;
          $872 = $871 >>> 15;
          $873 = (($870) + ($872))|0;
          $874 = $873 << 1;
          $875 = (($873) + 7)|0;
          $876 = $qsize$0$i$i >>> $875;
          $877 = $876 & 1;
          $878 = $877 | $874;
          $I7$0$i$i = $878;
         }
        } while(0);
        $879 = (6692 + ($I7$0$i$i<<2)|0);
        $$sum12$i$i = (($$sum$i19$i) + 28)|0;
        $880 = (($tbase$255$i) + ($$sum12$i$i)|0);
        HEAP32[$880>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i19$i) + 16)|0;
        $881 = (($tbase$255$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i19$i) + 20)|0;
        $882 = (($tbase$255$i) + ($$sum14$i$i)|0);
        HEAP32[$882>>2] = 0;
        HEAP32[$881>>2] = 0;
        $883 = HEAP32[(6392)>>2]|0;
        $884 = 1 << $I7$0$i$i;
        $885 = $883 & $884;
        $886 = ($885|0)==(0);
        if ($886) {
         $887 = $883 | $884;
         HEAP32[(6392)>>2] = $887;
         HEAP32[$879>>2] = $724;
         $$sum15$i$i = (($$sum$i19$i) + 24)|0;
         $888 = (($tbase$255$i) + ($$sum15$i$i)|0);
         HEAP32[$888>>2] = $879;
         $$sum16$i$i = (($$sum$i19$i) + 12)|0;
         $889 = (($tbase$255$i) + ($$sum16$i$i)|0);
         HEAP32[$889>>2] = $724;
         $$sum17$i$i = (($$sum$i19$i) + 8)|0;
         $890 = (($tbase$255$i) + ($$sum17$i$i)|0);
         HEAP32[$890>>2] = $724;
         break;
        }
        $891 = HEAP32[$879>>2]|0;
        $892 = ((($891)) + 4|0);
        $893 = HEAP32[$892>>2]|0;
        $894 = $893 & -8;
        $895 = ($894|0)==($qsize$0$i$i|0);
        L418: do {
         if ($895) {
          $T$0$lcssa$i25$i = $891;
         } else {
          $896 = ($I7$0$i$i|0)==(31);
          $897 = $I7$0$i$i >>> 1;
          $898 = (25 - ($897))|0;
          $899 = $896 ? 0 : $898;
          $900 = $qsize$0$i$i << $899;
          $K8$051$i$i = $900;$T$050$i$i = $891;
          while(1) {
           $907 = $K8$051$i$i >>> 31;
           $908 = (((($T$050$i$i)) + 16|0) + ($907<<2)|0);
           $903 = HEAP32[$908>>2]|0;
           $909 = ($903|0)==(0|0);
           if ($909) {
            $$lcssa = $908;$T$050$i$i$lcssa = $T$050$i$i;
            break;
           }
           $901 = $K8$051$i$i << 1;
           $902 = ((($903)) + 4|0);
           $904 = HEAP32[$902>>2]|0;
           $905 = $904 & -8;
           $906 = ($905|0)==($qsize$0$i$i|0);
           if ($906) {
            $T$0$lcssa$i25$i = $903;
            break L418;
           } else {
            $K8$051$i$i = $901;$T$050$i$i = $903;
           }
          }
          $910 = HEAP32[(6404)>>2]|0;
          $911 = ($$lcssa>>>0)<($910>>>0);
          if ($911) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$$lcssa>>2] = $724;
           $$sum23$i$i = (($$sum$i19$i) + 24)|0;
           $912 = (($tbase$255$i) + ($$sum23$i$i)|0);
           HEAP32[$912>>2] = $T$050$i$i$lcssa;
           $$sum24$i$i = (($$sum$i19$i) + 12)|0;
           $913 = (($tbase$255$i) + ($$sum24$i$i)|0);
           HEAP32[$913>>2] = $724;
           $$sum25$i$i = (($$sum$i19$i) + 8)|0;
           $914 = (($tbase$255$i) + ($$sum25$i$i)|0);
           HEAP32[$914>>2] = $724;
           break L324;
          }
         }
        } while(0);
        $915 = ((($T$0$lcssa$i25$i)) + 8|0);
        $916 = HEAP32[$915>>2]|0;
        $917 = HEAP32[(6404)>>2]|0;
        $918 = ($916>>>0)>=($917>>>0);
        $not$$i26$i = ($T$0$lcssa$i25$i>>>0)>=($917>>>0);
        $919 = $918 & $not$$i26$i;
        if ($919) {
         $920 = ((($916)) + 12|0);
         HEAP32[$920>>2] = $724;
         HEAP32[$915>>2] = $724;
         $$sum20$i$i = (($$sum$i19$i) + 8)|0;
         $921 = (($tbase$255$i) + ($$sum20$i$i)|0);
         HEAP32[$921>>2] = $916;
         $$sum21$i$i = (($$sum$i19$i) + 12)|0;
         $922 = (($tbase$255$i) + ($$sum21$i$i)|0);
         HEAP32[$922>>2] = $T$0$lcssa$i25$i;
         $$sum22$i$i = (($$sum$i19$i) + 24)|0;
         $923 = (($tbase$255$i) + ($$sum22$i$i)|0);
         HEAP32[$923>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $$sum1819$i$i = $711 | 8;
      $924 = (($tbase$255$i) + ($$sum1819$i$i)|0);
      $mem$0 = $924;
      return ($mem$0|0);
     } else {
      $sp$0$i$i$i = (6836);
     }
    }
    while(1) {
     $925 = HEAP32[$sp$0$i$i$i>>2]|0;
     $926 = ($925>>>0)>($635>>>0);
     if (!($926)) {
      $927 = ((($sp$0$i$i$i)) + 4|0);
      $928 = HEAP32[$927>>2]|0;
      $929 = (($925) + ($928)|0);
      $930 = ($929>>>0)>($635>>>0);
      if ($930) {
       $$lcssa215 = $925;$$lcssa216 = $928;$$lcssa217 = $929;
       break;
      }
     }
     $931 = ((($sp$0$i$i$i)) + 8|0);
     $932 = HEAP32[$931>>2]|0;
     $sp$0$i$i$i = $932;
    }
    $$sum$i14$i = (($$lcssa216) + -47)|0;
    $$sum1$i15$i = (($$lcssa216) + -39)|0;
    $933 = (($$lcssa215) + ($$sum1$i15$i)|0);
    $934 = $933;
    $935 = $934 & 7;
    $936 = ($935|0)==(0);
    $937 = (0 - ($934))|0;
    $938 = $937 & 7;
    $939 = $936 ? 0 : $938;
    $$sum2$i16$i = (($$sum$i14$i) + ($939))|0;
    $940 = (($$lcssa215) + ($$sum2$i16$i)|0);
    $941 = ((($635)) + 16|0);
    $942 = ($940>>>0)<($941>>>0);
    $943 = $942 ? $635 : $940;
    $944 = ((($943)) + 8|0);
    $945 = (($tsize$254$i) + -40)|0;
    $946 = ((($tbase$255$i)) + 8|0);
    $947 = $946;
    $948 = $947 & 7;
    $949 = ($948|0)==(0);
    $950 = (0 - ($947))|0;
    $951 = $950 & 7;
    $952 = $949 ? 0 : $951;
    $953 = (($tbase$255$i) + ($952)|0);
    $954 = (($945) - ($952))|0;
    HEAP32[(6412)>>2] = $953;
    HEAP32[(6400)>>2] = $954;
    $955 = $954 | 1;
    $$sum$i$i$i = (($952) + 4)|0;
    $956 = (($tbase$255$i) + ($$sum$i$i$i)|0);
    HEAP32[$956>>2] = $955;
    $$sum2$i$i$i = (($tsize$254$i) + -36)|0;
    $957 = (($tbase$255$i) + ($$sum2$i$i$i)|0);
    HEAP32[$957>>2] = 40;
    $958 = HEAP32[(6876)>>2]|0;
    HEAP32[(6416)>>2] = $958;
    $959 = ((($943)) + 4|0);
    HEAP32[$959>>2] = 27;
    ;HEAP32[$944>>2]=HEAP32[(6836)>>2]|0;HEAP32[$944+4>>2]=HEAP32[(6836)+4>>2]|0;HEAP32[$944+8>>2]=HEAP32[(6836)+8>>2]|0;HEAP32[$944+12>>2]=HEAP32[(6836)+12>>2]|0;
    HEAP32[(6836)>>2] = $tbase$255$i;
    HEAP32[(6840)>>2] = $tsize$254$i;
    HEAP32[(6848)>>2] = 0;
    HEAP32[(6844)>>2] = $944;
    $960 = ((($943)) + 28|0);
    HEAP32[$960>>2] = 7;
    $961 = ((($943)) + 32|0);
    $962 = ($961>>>0)<($$lcssa217>>>0);
    if ($962) {
     $964 = $960;
     while(1) {
      $963 = ((($964)) + 4|0);
      HEAP32[$963>>2] = 7;
      $965 = ((($964)) + 8|0);
      $966 = ($965>>>0)<($$lcssa217>>>0);
      if ($966) {
       $964 = $963;
      } else {
       break;
      }
     }
    }
    $967 = ($943|0)==($635|0);
    if (!($967)) {
     $968 = $943;
     $969 = $635;
     $970 = (($968) - ($969))|0;
     $971 = HEAP32[$959>>2]|0;
     $972 = $971 & -2;
     HEAP32[$959>>2] = $972;
     $973 = $970 | 1;
     $974 = ((($635)) + 4|0);
     HEAP32[$974>>2] = $973;
     HEAP32[$943>>2] = $970;
     $975 = $970 >>> 3;
     $976 = ($970>>>0)<(256);
     if ($976) {
      $977 = $975 << 1;
      $978 = (6428 + ($977<<2)|0);
      $979 = HEAP32[6388>>2]|0;
      $980 = 1 << $975;
      $981 = $979 & $980;
      $982 = ($981|0)==(0);
      if ($982) {
       $983 = $979 | $980;
       HEAP32[6388>>2] = $983;
       $$pre$i$i = (($977) + 2)|0;
       $$pre14$i$i = (6428 + ($$pre$i$i<<2)|0);
       $$pre$phi$i$iZ2D = $$pre14$i$i;$F$0$i$i = $978;
      } else {
       $$sum4$i$i = (($977) + 2)|0;
       $984 = (6428 + ($$sum4$i$i<<2)|0);
       $985 = HEAP32[$984>>2]|0;
       $986 = HEAP32[(6404)>>2]|0;
       $987 = ($985>>>0)<($986>>>0);
       if ($987) {
        _abort();
        // unreachable;
       } else {
        $$pre$phi$i$iZ2D = $984;$F$0$i$i = $985;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $635;
      $988 = ((($F$0$i$i)) + 12|0);
      HEAP32[$988>>2] = $635;
      $989 = ((($635)) + 8|0);
      HEAP32[$989>>2] = $F$0$i$i;
      $990 = ((($635)) + 12|0);
      HEAP32[$990>>2] = $978;
      break;
     }
     $991 = $970 >>> 8;
     $992 = ($991|0)==(0);
     if ($992) {
      $I1$0$i$i = 0;
     } else {
      $993 = ($970>>>0)>(16777215);
      if ($993) {
       $I1$0$i$i = 31;
      } else {
       $994 = (($991) + 1048320)|0;
       $995 = $994 >>> 16;
       $996 = $995 & 8;
       $997 = $991 << $996;
       $998 = (($997) + 520192)|0;
       $999 = $998 >>> 16;
       $1000 = $999 & 4;
       $1001 = $1000 | $996;
       $1002 = $997 << $1000;
       $1003 = (($1002) + 245760)|0;
       $1004 = $1003 >>> 16;
       $1005 = $1004 & 2;
       $1006 = $1001 | $1005;
       $1007 = (14 - ($1006))|0;
       $1008 = $1002 << $1005;
       $1009 = $1008 >>> 15;
       $1010 = (($1007) + ($1009))|0;
       $1011 = $1010 << 1;
       $1012 = (($1010) + 7)|0;
       $1013 = $970 >>> $1012;
       $1014 = $1013 & 1;
       $1015 = $1014 | $1011;
       $I1$0$i$i = $1015;
      }
     }
     $1016 = (6692 + ($I1$0$i$i<<2)|0);
     $1017 = ((($635)) + 28|0);
     HEAP32[$1017>>2] = $I1$0$i$i;
     $1018 = ((($635)) + 20|0);
     HEAP32[$1018>>2] = 0;
     HEAP32[$941>>2] = 0;
     $1019 = HEAP32[(6392)>>2]|0;
     $1020 = 1 << $I1$0$i$i;
     $1021 = $1019 & $1020;
     $1022 = ($1021|0)==(0);
     if ($1022) {
      $1023 = $1019 | $1020;
      HEAP32[(6392)>>2] = $1023;
      HEAP32[$1016>>2] = $635;
      $1024 = ((($635)) + 24|0);
      HEAP32[$1024>>2] = $1016;
      $1025 = ((($635)) + 12|0);
      HEAP32[$1025>>2] = $635;
      $1026 = ((($635)) + 8|0);
      HEAP32[$1026>>2] = $635;
      break;
     }
     $1027 = HEAP32[$1016>>2]|0;
     $1028 = ((($1027)) + 4|0);
     $1029 = HEAP32[$1028>>2]|0;
     $1030 = $1029 & -8;
     $1031 = ($1030|0)==($970|0);
     L459: do {
      if ($1031) {
       $T$0$lcssa$i$i = $1027;
      } else {
       $1032 = ($I1$0$i$i|0)==(31);
       $1033 = $I1$0$i$i >>> 1;
       $1034 = (25 - ($1033))|0;
       $1035 = $1032 ? 0 : $1034;
       $1036 = $970 << $1035;
       $K2$07$i$i = $1036;$T$06$i$i = $1027;
       while(1) {
        $1043 = $K2$07$i$i >>> 31;
        $1044 = (((($T$06$i$i)) + 16|0) + ($1043<<2)|0);
        $1039 = HEAP32[$1044>>2]|0;
        $1045 = ($1039|0)==(0|0);
        if ($1045) {
         $$lcssa211 = $1044;$T$06$i$i$lcssa = $T$06$i$i;
         break;
        }
        $1037 = $K2$07$i$i << 1;
        $1038 = ((($1039)) + 4|0);
        $1040 = HEAP32[$1038>>2]|0;
        $1041 = $1040 & -8;
        $1042 = ($1041|0)==($970|0);
        if ($1042) {
         $T$0$lcssa$i$i = $1039;
         break L459;
        } else {
         $K2$07$i$i = $1037;$T$06$i$i = $1039;
        }
       }
       $1046 = HEAP32[(6404)>>2]|0;
       $1047 = ($$lcssa211>>>0)<($1046>>>0);
       if ($1047) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$lcssa211>>2] = $635;
        $1048 = ((($635)) + 24|0);
        HEAP32[$1048>>2] = $T$06$i$i$lcssa;
        $1049 = ((($635)) + 12|0);
        HEAP32[$1049>>2] = $635;
        $1050 = ((($635)) + 8|0);
        HEAP32[$1050>>2] = $635;
        break L299;
       }
      }
     } while(0);
     $1051 = ((($T$0$lcssa$i$i)) + 8|0);
     $1052 = HEAP32[$1051>>2]|0;
     $1053 = HEAP32[(6404)>>2]|0;
     $1054 = ($1052>>>0)>=($1053>>>0);
     $not$$i$i = ($T$0$lcssa$i$i>>>0)>=($1053>>>0);
     $1055 = $1054 & $not$$i$i;
     if ($1055) {
      $1056 = ((($1052)) + 12|0);
      HEAP32[$1056>>2] = $635;
      HEAP32[$1051>>2] = $635;
      $1057 = ((($635)) + 8|0);
      HEAP32[$1057>>2] = $1052;
      $1058 = ((($635)) + 12|0);
      HEAP32[$1058>>2] = $T$0$lcssa$i$i;
      $1059 = ((($635)) + 24|0);
      HEAP32[$1059>>2] = 0;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   }
  } while(0);
  $1060 = HEAP32[(6400)>>2]|0;
  $1061 = ($1060>>>0)>($nb$0>>>0);
  if ($1061) {
   $1062 = (($1060) - ($nb$0))|0;
   HEAP32[(6400)>>2] = $1062;
   $1063 = HEAP32[(6412)>>2]|0;
   $1064 = (($1063) + ($nb$0)|0);
   HEAP32[(6412)>>2] = $1064;
   $1065 = $1062 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1066 = (($1063) + ($$sum$i32)|0);
   HEAP32[$1066>>2] = $1065;
   $1067 = $nb$0 | 3;
   $1068 = ((($1063)) + 4|0);
   HEAP32[$1068>>2] = $1067;
   $1069 = ((($1063)) + 8|0);
   $mem$0 = $1069;
   return ($mem$0|0);
  }
 }
 $1070 = (___errno_location()|0);
 HEAP32[$1070>>2] = 12;
 $mem$0 = 0;
 return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$lcssa = 0, $$pre = 0, $$pre$phi59Z2D = 0, $$pre$phi61Z2D = 0, $$pre$phiZ2D = 0, $$pre57 = 0, $$pre58 = 0, $$pre60 = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum1718 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0;
 var $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $K19$052 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0;
 var $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$051 = 0, $T$051$lcssa = 0, $cond = 0, $cond47 = 0, $not$ = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($mem)) + -8|0);
 $2 = HEAP32[(6404)>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = ((($mem)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[(6408)>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $103 = (($mem) + ($$sum3)|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $104 & 3;
    $106 = ($105|0)==(3);
    if (!($106)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[(6396)>>2] = $15;
    $107 = $104 & -2;
    HEAP32[$103>>2] = $107;
    $108 = $15 | 1;
    $$sum20 = (($$sum2) + 4)|0;
    $109 = (($mem) + ($$sum20)|0);
    HEAP32[$109>>2] = $108;
    HEAP32[$9>>2] = $15;
    return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum30 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum30)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum31 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum31)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = (6428 + ($25<<2)|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = ((($22)) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[6388>>2]|0;
     $36 = $35 & $34;
     HEAP32[6388>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre60 = ((($24)) + 8|0);
     $$pre$phi61Z2D = $$pre60;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = ((($24)) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi61Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = ((($22)) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi61Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum22 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum22)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum23 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum23)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum25 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum25)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum24 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum24)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = ((($R$0)) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = ((($R$0)) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0$lcssa>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum29 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum29)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = ((($49)) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = ((($46)) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum26 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum26)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (6692 + ($72<<2)|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[(6392)>>2]|0;
      $79 = $78 & $77;
      HEAP32[(6392)>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[(6404)>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = ((($44)) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = ((($44)) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[(6404)>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = ((($R$1)) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum27 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum27)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = ($91>>>0)<($87>>>0);
      if ($93) {
       _abort();
       // unreachable;
      } else {
       $94 = ((($R$1)) + 16|0);
       HEAP32[$94>>2] = $91;
       $95 = ((($91)) + 24|0);
       HEAP32[$95>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum2) + 20)|0;
    $96 = (($mem) + ($$sum28)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0|0);
    if ($98) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $99 = HEAP32[(6404)>>2]|0;
     $100 = ($97>>>0)<($99>>>0);
     if ($100) {
      _abort();
      // unreachable;
     } else {
      $101 = ((($R$1)) + 20|0);
      HEAP32[$101>>2] = $97;
      $102 = ((($97)) + 24|0);
      HEAP32[$102>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $110 = ($p$0>>>0)<($9>>>0);
 if (!($110)) {
  _abort();
  // unreachable;
 }
 $$sum19 = (($8) + -4)|0;
 $111 = (($mem) + ($$sum19)|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 1;
 $114 = ($113|0)==(0);
 if ($114) {
  _abort();
  // unreachable;
 }
 $115 = $112 & 2;
 $116 = ($115|0)==(0);
 if ($116) {
  $117 = HEAP32[(6412)>>2]|0;
  $118 = ($9|0)==($117|0);
  if ($118) {
   $119 = HEAP32[(6400)>>2]|0;
   $120 = (($119) + ($psize$0))|0;
   HEAP32[(6400)>>2] = $120;
   HEAP32[(6412)>>2] = $p$0;
   $121 = $120 | 1;
   $122 = ((($p$0)) + 4|0);
   HEAP32[$122>>2] = $121;
   $123 = HEAP32[(6408)>>2]|0;
   $124 = ($p$0|0)==($123|0);
   if (!($124)) {
    return;
   }
   HEAP32[(6408)>>2] = 0;
   HEAP32[(6396)>>2] = 0;
   return;
  }
  $125 = HEAP32[(6408)>>2]|0;
  $126 = ($9|0)==($125|0);
  if ($126) {
   $127 = HEAP32[(6396)>>2]|0;
   $128 = (($127) + ($psize$0))|0;
   HEAP32[(6396)>>2] = $128;
   HEAP32[(6408)>>2] = $p$0;
   $129 = $128 | 1;
   $130 = ((($p$0)) + 4|0);
   HEAP32[$130>>2] = $129;
   $131 = (($p$0) + ($128)|0);
   HEAP32[$131>>2] = $128;
   return;
  }
  $132 = $112 & -8;
  $133 = (($132) + ($psize$0))|0;
  $134 = $112 >>> 3;
  $135 = ($112>>>0)<(256);
  do {
   if ($135) {
    $136 = (($mem) + ($8)|0);
    $137 = HEAP32[$136>>2]|0;
    $$sum1718 = $8 | 4;
    $138 = (($mem) + ($$sum1718)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $134 << 1;
    $141 = (6428 + ($140<<2)|0);
    $142 = ($137|0)==($141|0);
    if (!($142)) {
     $143 = HEAP32[(6404)>>2]|0;
     $144 = ($137>>>0)<($143>>>0);
     if ($144) {
      _abort();
      // unreachable;
     }
     $145 = ((($137)) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==($9|0);
     if (!($147)) {
      _abort();
      // unreachable;
     }
    }
    $148 = ($139|0)==($137|0);
    if ($148) {
     $149 = 1 << $134;
     $150 = $149 ^ -1;
     $151 = HEAP32[6388>>2]|0;
     $152 = $151 & $150;
     HEAP32[6388>>2] = $152;
     break;
    }
    $153 = ($139|0)==($141|0);
    if ($153) {
     $$pre58 = ((($139)) + 8|0);
     $$pre$phi59Z2D = $$pre58;
    } else {
     $154 = HEAP32[(6404)>>2]|0;
     $155 = ($139>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     }
     $156 = ((($139)) + 8|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($9|0);
     if ($158) {
      $$pre$phi59Z2D = $156;
     } else {
      _abort();
      // unreachable;
     }
    }
    $159 = ((($137)) + 12|0);
    HEAP32[$159>>2] = $139;
    HEAP32[$$pre$phi59Z2D>>2] = $137;
   } else {
    $$sum5 = (($8) + 16)|0;
    $160 = (($mem) + ($$sum5)|0);
    $161 = HEAP32[$160>>2]|0;
    $$sum67 = $8 | 4;
    $162 = (($mem) + ($$sum67)|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)==($9|0);
    do {
     if ($164) {
      $$sum9 = (($8) + 12)|0;
      $175 = (($mem) + ($$sum9)|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==(0|0);
      if ($177) {
       $$sum8 = (($8) + 8)|0;
       $178 = (($mem) + ($$sum8)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      } else {
       $R7$0 = $176;$RP9$0 = $175;
      }
      while(1) {
       $181 = ((($R7$0)) + 20|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ($182|0)==(0|0);
       if (!($183)) {
        $R7$0 = $182;$RP9$0 = $181;
        continue;
       }
       $184 = ((($R7$0)) + 16|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if ($186) {
        $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $185;$RP9$0 = $184;
       }
      }
      $187 = HEAP32[(6404)>>2]|0;
      $188 = ($RP9$0$lcssa>>>0)<($187>>>0);
      if ($188) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $165 = (($mem) + ($8)|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = HEAP32[(6404)>>2]|0;
      $168 = ($166>>>0)<($167>>>0);
      if ($168) {
       _abort();
       // unreachable;
      }
      $169 = ((($166)) + 12|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==($9|0);
      if (!($171)) {
       _abort();
       // unreachable;
      }
      $172 = ((($163)) + 8|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($9|0);
      if ($174) {
       HEAP32[$169>>2] = $163;
       HEAP32[$172>>2] = $166;
       $R7$1 = $163;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $189 = ($161|0)==(0|0);
    if (!($189)) {
     $$sum12 = (($8) + 20)|0;
     $190 = (($mem) + ($$sum12)|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = (6692 + ($191<<2)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($9|0)==($193|0);
     if ($194) {
      HEAP32[$192>>2] = $R7$1;
      $cond47 = ($R7$1|0)==(0|0);
      if ($cond47) {
       $195 = 1 << $191;
       $196 = $195 ^ -1;
       $197 = HEAP32[(6392)>>2]|0;
       $198 = $197 & $196;
       HEAP32[(6392)>>2] = $198;
       break;
      }
     } else {
      $199 = HEAP32[(6404)>>2]|0;
      $200 = ($161>>>0)<($199>>>0);
      if ($200) {
       _abort();
       // unreachable;
      }
      $201 = ((($161)) + 16|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = ($202|0)==($9|0);
      if ($203) {
       HEAP32[$201>>2] = $R7$1;
      } else {
       $204 = ((($161)) + 20|0);
       HEAP32[$204>>2] = $R7$1;
      }
      $205 = ($R7$1|0)==(0|0);
      if ($205) {
       break;
      }
     }
     $206 = HEAP32[(6404)>>2]|0;
     $207 = ($R7$1>>>0)<($206>>>0);
     if ($207) {
      _abort();
      // unreachable;
     }
     $208 = ((($R7$1)) + 24|0);
     HEAP32[$208>>2] = $161;
     $$sum13 = (($8) + 8)|0;
     $209 = (($mem) + ($$sum13)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     do {
      if (!($211)) {
       $212 = ($210>>>0)<($206>>>0);
       if ($212) {
        _abort();
        // unreachable;
       } else {
        $213 = ((($R7$1)) + 16|0);
        HEAP32[$213>>2] = $210;
        $214 = ((($210)) + 24|0);
        HEAP32[$214>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum14 = (($8) + 12)|0;
     $215 = (($mem) + ($$sum14)|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = ($216|0)==(0|0);
     if (!($217)) {
      $218 = HEAP32[(6404)>>2]|0;
      $219 = ($216>>>0)<($218>>>0);
      if ($219) {
       _abort();
       // unreachable;
      } else {
       $220 = ((($R7$1)) + 20|0);
       HEAP32[$220>>2] = $216;
       $221 = ((($216)) + 24|0);
       HEAP32[$221>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $222 = $133 | 1;
  $223 = ((($p$0)) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($p$0) + ($133)|0);
  HEAP32[$224>>2] = $133;
  $225 = HEAP32[(6408)>>2]|0;
  $226 = ($p$0|0)==($225|0);
  if ($226) {
   HEAP32[(6396)>>2] = $133;
   return;
  } else {
   $psize$1 = $133;
  }
 } else {
  $227 = $112 & -2;
  HEAP32[$111>>2] = $227;
  $228 = $psize$0 | 1;
  $229 = ((($p$0)) + 4|0);
  HEAP32[$229>>2] = $228;
  $230 = (($p$0) + ($psize$0)|0);
  HEAP32[$230>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 $232 = ($psize$1>>>0)<(256);
 if ($232) {
  $233 = $231 << 1;
  $234 = (6428 + ($233<<2)|0);
  $235 = HEAP32[6388>>2]|0;
  $236 = 1 << $231;
  $237 = $235 & $236;
  $238 = ($237|0)==(0);
  if ($238) {
   $239 = $235 | $236;
   HEAP32[6388>>2] = $239;
   $$pre = (($233) + 2)|0;
   $$pre57 = (6428 + ($$pre<<2)|0);
   $$pre$phiZ2D = $$pre57;$F16$0 = $234;
  } else {
   $$sum11 = (($233) + 2)|0;
   $240 = (6428 + ($$sum11<<2)|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = HEAP32[(6404)>>2]|0;
   $243 = ($241>>>0)<($242>>>0);
   if ($243) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $240;$F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $244 = ((($F16$0)) + 12|0);
  HEAP32[$244>>2] = $p$0;
  $245 = ((($p$0)) + 8|0);
  HEAP32[$245>>2] = $F16$0;
  $246 = ((($p$0)) + 12|0);
  HEAP32[$246>>2] = $234;
  return;
 }
 $247 = $psize$1 >>> 8;
 $248 = ($247|0)==(0);
 if ($248) {
  $I18$0 = 0;
 } else {
  $249 = ($psize$1>>>0)>(16777215);
  if ($249) {
   $I18$0 = 31;
  } else {
   $250 = (($247) + 1048320)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 8;
   $253 = $247 << $252;
   $254 = (($253) + 520192)|0;
   $255 = $254 >>> 16;
   $256 = $255 & 4;
   $257 = $256 | $252;
   $258 = $253 << $256;
   $259 = (($258) + 245760)|0;
   $260 = $259 >>> 16;
   $261 = $260 & 2;
   $262 = $257 | $261;
   $263 = (14 - ($262))|0;
   $264 = $258 << $261;
   $265 = $264 >>> 15;
   $266 = (($263) + ($265))|0;
   $267 = $266 << 1;
   $268 = (($266) + 7)|0;
   $269 = $psize$1 >>> $268;
   $270 = $269 & 1;
   $271 = $270 | $267;
   $I18$0 = $271;
  }
 }
 $272 = (6692 + ($I18$0<<2)|0);
 $273 = ((($p$0)) + 28|0);
 HEAP32[$273>>2] = $I18$0;
 $274 = ((($p$0)) + 16|0);
 $275 = ((($p$0)) + 20|0);
 HEAP32[$275>>2] = 0;
 HEAP32[$274>>2] = 0;
 $276 = HEAP32[(6392)>>2]|0;
 $277 = 1 << $I18$0;
 $278 = $276 & $277;
 $279 = ($278|0)==(0);
 L199: do {
  if ($279) {
   $280 = $276 | $277;
   HEAP32[(6392)>>2] = $280;
   HEAP32[$272>>2] = $p$0;
   $281 = ((($p$0)) + 24|0);
   HEAP32[$281>>2] = $272;
   $282 = ((($p$0)) + 12|0);
   HEAP32[$282>>2] = $p$0;
   $283 = ((($p$0)) + 8|0);
   HEAP32[$283>>2] = $p$0;
  } else {
   $284 = HEAP32[$272>>2]|0;
   $285 = ((($284)) + 4|0);
   $286 = HEAP32[$285>>2]|0;
   $287 = $286 & -8;
   $288 = ($287|0)==($psize$1|0);
   L202: do {
    if ($288) {
     $T$0$lcssa = $284;
    } else {
     $289 = ($I18$0|0)==(31);
     $290 = $I18$0 >>> 1;
     $291 = (25 - ($290))|0;
     $292 = $289 ? 0 : $291;
     $293 = $psize$1 << $292;
     $K19$052 = $293;$T$051 = $284;
     while(1) {
      $300 = $K19$052 >>> 31;
      $301 = (((($T$051)) + 16|0) + ($300<<2)|0);
      $296 = HEAP32[$301>>2]|0;
      $302 = ($296|0)==(0|0);
      if ($302) {
       $$lcssa = $301;$T$051$lcssa = $T$051;
       break;
      }
      $294 = $K19$052 << 1;
      $295 = ((($296)) + 4|0);
      $297 = HEAP32[$295>>2]|0;
      $298 = $297 & -8;
      $299 = ($298|0)==($psize$1|0);
      if ($299) {
       $T$0$lcssa = $296;
       break L202;
      } else {
       $K19$052 = $294;$T$051 = $296;
      }
     }
     $303 = HEAP32[(6404)>>2]|0;
     $304 = ($$lcssa>>>0)<($303>>>0);
     if ($304) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$lcssa>>2] = $p$0;
      $305 = ((($p$0)) + 24|0);
      HEAP32[$305>>2] = $T$051$lcssa;
      $306 = ((($p$0)) + 12|0);
      HEAP32[$306>>2] = $p$0;
      $307 = ((($p$0)) + 8|0);
      HEAP32[$307>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $308 = ((($T$0$lcssa)) + 8|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = HEAP32[(6404)>>2]|0;
   $311 = ($309>>>0)>=($310>>>0);
   $not$ = ($T$0$lcssa>>>0)>=($310>>>0);
   $312 = $311 & $not$;
   if ($312) {
    $313 = ((($309)) + 12|0);
    HEAP32[$313>>2] = $p$0;
    HEAP32[$308>>2] = $p$0;
    $314 = ((($p$0)) + 8|0);
    HEAP32[$314>>2] = $309;
    $315 = ((($p$0)) + 12|0);
    HEAP32[$315>>2] = $T$0$lcssa;
    $316 = ((($p$0)) + 24|0);
    HEAP32[$316>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $317 = HEAP32[(6420)>>2]|0;
 $318 = (($317) + -1)|0;
 HEAP32[(6420)>>2] = $318;
 $319 = ($318|0)==(0);
 if ($319) {
  $sp$0$in$i = (6844);
 } else {
  return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $320 = ($sp$0$i|0)==(0|0);
  $321 = ((($sp$0$i)) + 8|0);
  if ($320) {
   break;
  } else {
   $sp$0$in$i = $321;
  }
 }
 HEAP32[(6420)>>2] = -1;
 return;
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 if ($0) {
  $1 = (_malloc($bytes)|0);
  $mem$0 = $1;
  return ($mem$0|0);
 }
 $2 = ($bytes>>>0)>(4294967231);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 12;
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $4 = ($bytes>>>0)<(11);
 $5 = (($bytes) + 11)|0;
 $6 = $5 & -8;
 $7 = $4 ? 16 : $6;
 $8 = ((($oldmem)) + -8|0);
 $9 = (_try_realloc_chunk($8,$7)|0);
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = ((($9)) + 8|0);
  $mem$0 = $11;
  return ($mem$0|0);
 }
 $12 = (_malloc($bytes)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $14 = ((($oldmem)) + -4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & -8;
 $17 = $15 & 3;
 $18 = ($17|0)==(0);
 $19 = $18 ? 8 : 4;
 $20 = (($16) - ($19))|0;
 $21 = ($20>>>0)<($bytes>>>0);
 $22 = $21 ? $20 : $bytes;
 _memcpy(($12|0),($oldmem|0),($22|0))|0;
 _free($oldmem);
 $mem$0 = $12;
 return ($mem$0|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $cond = 0, $newp$0 = 0, $notlhs = 0;
 var $notrhs = 0, $or$cond$not = 0, $or$cond30 = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[(6404)>>2]|0;
 $5 = $1 & 3;
 $notlhs = ($p>>>0)>=($4>>>0);
 $notrhs = ($5|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $6 = ($p>>>0)<($3>>>0);
 $or$cond30 = $or$cond$not & $6;
 if (!($or$cond30)) {
  _abort();
  // unreachable;
 }
 $$sum2728 = $2 | 4;
 $7 = (($p) + ($$sum2728)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  _abort();
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = ($nb>>>0)<(256);
  if ($12) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $13 = (($nb) + 4)|0;
  $14 = ($2>>>0)<($13>>>0);
  if (!($14)) {
   $15 = (($2) - ($nb))|0;
   $16 = HEAP32[(6868)>>2]|0;
   $17 = $16 << 1;
   $18 = ($15>>>0)>($17>>>0);
   if (!($18)) {
    $newp$0 = $p;
    return ($newp$0|0);
   }
  }
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $19 = ($2>>>0)<($nb>>>0);
 if (!($19)) {
  $20 = (($2) - ($nb))|0;
  $21 = ($20>>>0)>(15);
  if (!($21)) {
   $newp$0 = $p;
   return ($newp$0|0);
  }
  $22 = (($p) + ($nb)|0);
  $23 = $1 & 1;
  $24 = $23 | $nb;
  $25 = $24 | 2;
  HEAP32[$0>>2] = $25;
  $$sum23 = (($nb) + 4)|0;
  $26 = (($p) + ($$sum23)|0);
  $27 = $20 | 3;
  HEAP32[$26>>2] = $27;
  $28 = HEAP32[$7>>2]|0;
  $29 = $28 | 1;
  HEAP32[$7>>2] = $29;
  _dispose_chunk($22,$20);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $30 = HEAP32[(6412)>>2]|0;
 $31 = ($3|0)==($30|0);
 if ($31) {
  $32 = HEAP32[(6400)>>2]|0;
  $33 = (($32) + ($2))|0;
  $34 = ($33>>>0)>($nb>>>0);
  if (!($34)) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $35 = (($33) - ($nb))|0;
  $36 = (($p) + ($nb)|0);
  $37 = $1 & 1;
  $38 = $37 | $nb;
  $39 = $38 | 2;
  HEAP32[$0>>2] = $39;
  $$sum22 = (($nb) + 4)|0;
  $40 = (($p) + ($$sum22)|0);
  $41 = $35 | 1;
  HEAP32[$40>>2] = $41;
  HEAP32[(6412)>>2] = $36;
  HEAP32[(6400)>>2] = $35;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $42 = HEAP32[(6408)>>2]|0;
 $43 = ($3|0)==($42|0);
 if ($43) {
  $44 = HEAP32[(6396)>>2]|0;
  $45 = (($44) + ($2))|0;
  $46 = ($45>>>0)<($nb>>>0);
  if ($46) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $47 = (($45) - ($nb))|0;
  $48 = ($47>>>0)>(15);
  if ($48) {
   $49 = (($p) + ($nb)|0);
   $50 = (($p) + ($45)|0);
   $51 = $1 & 1;
   $52 = $51 | $nb;
   $53 = $52 | 2;
   HEAP32[$0>>2] = $53;
   $$sum19 = (($nb) + 4)|0;
   $54 = (($p) + ($$sum19)|0);
   $55 = $47 | 1;
   HEAP32[$54>>2] = $55;
   HEAP32[$50>>2] = $47;
   $$sum20 = (($45) + 4)|0;
   $56 = (($p) + ($$sum20)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57 & -2;
   HEAP32[$56>>2] = $58;
   $storemerge = $49;$storemerge21 = $47;
  } else {
   $59 = $1 & 1;
   $60 = $59 | $45;
   $61 = $60 | 2;
   HEAP32[$0>>2] = $61;
   $$sum17 = (($45) + 4)|0;
   $62 = (($p) + ($$sum17)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $63 | 1;
   HEAP32[$62>>2] = $64;
   $storemerge = 0;$storemerge21 = 0;
  }
  HEAP32[(6396)>>2] = $storemerge21;
  HEAP32[(6408)>>2] = $storemerge;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $65 = $8 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $67 = $8 & -8;
 $68 = (($67) + ($2))|0;
 $69 = ($68>>>0)<($nb>>>0);
 if ($69) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $70 = (($68) - ($nb))|0;
 $71 = $8 >>> 3;
 $72 = ($8>>>0)<(256);
 do {
  if ($72) {
   $$sum15 = (($2) + 8)|0;
   $73 = (($p) + ($$sum15)|0);
   $74 = HEAP32[$73>>2]|0;
   $$sum16 = (($2) + 12)|0;
   $75 = (($p) + ($$sum16)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $71 << 1;
   $78 = (6428 + ($77<<2)|0);
   $79 = ($74|0)==($78|0);
   if (!($79)) {
    $80 = ($74>>>0)<($4>>>0);
    if ($80) {
     _abort();
     // unreachable;
    }
    $81 = ((($74)) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($82|0)==($3|0);
    if (!($83)) {
     _abort();
     // unreachable;
    }
   }
   $84 = ($76|0)==($74|0);
   if ($84) {
    $85 = 1 << $71;
    $86 = $85 ^ -1;
    $87 = HEAP32[6388>>2]|0;
    $88 = $87 & $86;
    HEAP32[6388>>2] = $88;
    break;
   }
   $89 = ($76|0)==($78|0);
   if ($89) {
    $$pre = ((($76)) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $90 = ($76>>>0)<($4>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = ((($76)) + 8|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==($3|0);
    if ($93) {
     $$pre$phiZ2D = $91;
    } else {
     _abort();
     // unreachable;
    }
   }
   $94 = ((($74)) + 12|0);
   HEAP32[$94>>2] = $76;
   HEAP32[$$pre$phiZ2D>>2] = $74;
  } else {
   $$sum = (($2) + 24)|0;
   $95 = (($p) + ($$sum)|0);
   $96 = HEAP32[$95>>2]|0;
   $$sum2 = (($2) + 12)|0;
   $97 = (($p) + ($$sum2)|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = ($98|0)==($3|0);
   do {
    if ($99) {
     $$sum4 = (($2) + 20)|0;
     $109 = (($p) + ($$sum4)|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==(0|0);
     if ($111) {
      $$sum3 = (($2) + 16)|0;
      $112 = (($p) + ($$sum3)|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = ($113|0)==(0|0);
      if ($114) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $113;$RP$0 = $112;
      }
     } else {
      $R$0 = $110;$RP$0 = $109;
     }
     while(1) {
      $115 = ((($R$0)) + 20|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = ($116|0)==(0|0);
      if (!($117)) {
       $R$0 = $116;$RP$0 = $115;
       continue;
      }
      $118 = ((($R$0)) + 16|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = ($119|0)==(0|0);
      if ($120) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $119;$RP$0 = $118;
      }
     }
     $121 = ($RP$0$lcssa>>>0)<($4>>>0);
     if ($121) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum14 = (($2) + 8)|0;
     $100 = (($p) + ($$sum14)|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = ($101>>>0)<($4>>>0);
     if ($102) {
      _abort();
      // unreachable;
     }
     $103 = ((($101)) + 12|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104|0)==($3|0);
     if (!($105)) {
      _abort();
      // unreachable;
     }
     $106 = ((($98)) + 8|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($107|0)==($3|0);
     if ($108) {
      HEAP32[$103>>2] = $98;
      HEAP32[$106>>2] = $101;
      $R$1 = $98;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $122 = ($96|0)==(0|0);
   if (!($122)) {
    $$sum11 = (($2) + 28)|0;
    $123 = (($p) + ($$sum11)|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = (6692 + ($124<<2)|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($3|0)==($126|0);
    if ($127) {
     HEAP32[$125>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $128 = 1 << $124;
      $129 = $128 ^ -1;
      $130 = HEAP32[(6392)>>2]|0;
      $131 = $130 & $129;
      HEAP32[(6392)>>2] = $131;
      break;
     }
    } else {
     $132 = HEAP32[(6404)>>2]|0;
     $133 = ($96>>>0)<($132>>>0);
     if ($133) {
      _abort();
      // unreachable;
     }
     $134 = ((($96)) + 16|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = ($135|0)==($3|0);
     if ($136) {
      HEAP32[$134>>2] = $R$1;
     } else {
      $137 = ((($96)) + 20|0);
      HEAP32[$137>>2] = $R$1;
     }
     $138 = ($R$1|0)==(0|0);
     if ($138) {
      break;
     }
    }
    $139 = HEAP32[(6404)>>2]|0;
    $140 = ($R$1>>>0)<($139>>>0);
    if ($140) {
     _abort();
     // unreachable;
    }
    $141 = ((($R$1)) + 24|0);
    HEAP32[$141>>2] = $96;
    $$sum12 = (($2) + 16)|0;
    $142 = (($p) + ($$sum12)|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ($143|0)==(0|0);
    do {
     if (!($144)) {
      $145 = ($143>>>0)<($139>>>0);
      if ($145) {
       _abort();
       // unreachable;
      } else {
       $146 = ((($R$1)) + 16|0);
       HEAP32[$146>>2] = $143;
       $147 = ((($143)) + 24|0);
       HEAP32[$147>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum13 = (($2) + 20)|0;
    $148 = (($p) + ($$sum13)|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = ($149|0)==(0|0);
    if (!($150)) {
     $151 = HEAP32[(6404)>>2]|0;
     $152 = ($149>>>0)<($151>>>0);
     if ($152) {
      _abort();
      // unreachable;
     } else {
      $153 = ((($R$1)) + 20|0);
      HEAP32[$153>>2] = $149;
      $154 = ((($149)) + 24|0);
      HEAP32[$154>>2] = $R$1;
      break;
     }
    }
   }
  }
 } while(0);
 $155 = ($70>>>0)<(16);
 if ($155) {
  $156 = $1 & 1;
  $157 = $68 | $156;
  $158 = $157 | 2;
  HEAP32[$0>>2] = $158;
  $$sum910 = $68 | 4;
  $159 = (($p) + ($$sum910)|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = $160 | 1;
  HEAP32[$159>>2] = $161;
  $newp$0 = $p;
  return ($newp$0|0);
 } else {
  $162 = (($p) + ($nb)|0);
  $163 = $1 & 1;
  $164 = $163 | $nb;
  $165 = $164 | 2;
  HEAP32[$0>>2] = $165;
  $$sum5 = (($nb) + 4)|0;
  $166 = (($p) + ($$sum5)|0);
  $167 = $70 | 3;
  HEAP32[$166>>2] = $167;
  $$sum78 = $68 | 4;
  $168 = (($p) + ($$sum78)|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = $169 | 1;
  HEAP32[$168>>2] = $170;
  _dispose_chunk($162,$70);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 return (0)|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$lcssa = 0, $$pre = 0, $$pre$phi50Z2D = 0, $$pre$phi52Z2D = 0, $$pre$phiZ2D = 0, $$pre48 = 0, $$pre49 = 0, $$pre51 = 0, $$sum = 0, $$sum1 = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum16 = 0, $$sum17 = 0;
 var $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $K20$043 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$042 = 0, $T$042$lcssa = 0, $cond = 0;
 var $cond39 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = ((($p)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[(6404)>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[(6408)>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $99 = (($p) + ($$sum)|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 & 3;
    $102 = ($101|0)==(3);
    if (!($102)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[(6396)>>2] = $10;
    $103 = $100 & -2;
    HEAP32[$99>>2] = $103;
    $104 = $10 | 1;
    $$sum14 = (4 - ($5))|0;
    $105 = (($p) + ($$sum14)|0);
    HEAP32[$105>>2] = $104;
    HEAP32[$0>>2] = $10;
    return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum24 = (8 - ($5))|0;
    $17 = (($p) + ($$sum24)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum25 = (12 - ($5))|0;
    $19 = (($p) + ($$sum25)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = (6428 + ($21<<2)|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = ((($18)) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[6388>>2]|0;
     $32 = $31 & $30;
     HEAP32[6388>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre51 = ((($20)) + 8|0);
     $$pre$phi52Z2D = $$pre51;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = ((($20)) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi52Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = ((($18)) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi52Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum16 = (24 - ($5))|0;
   $39 = (($p) + ($$sum16)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum17 = (12 - ($5))|0;
   $41 = (($p) + ($$sum17)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum18 = (16 - ($5))|0;
     $$sum19 = (($$sum18) + 4)|0;
     $53 = (($p) + ($$sum19)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum18)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $57;$RP$0 = $56;
      }
     } else {
      $R$0 = $54;$RP$0 = $53;
     }
     while(1) {
      $59 = ((($R$0)) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$0 = $60;$RP$0 = $59;
       continue;
      }
      $62 = ((($R$0)) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $63;$RP$0 = $62;
      }
     }
     $65 = ($RP$0$lcssa>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum23 = (8 - ($5))|0;
     $44 = (($p) + ($$sum23)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = ((($45)) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = ((($42)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum20 = (28 - ($5))|0;
    $67 = (($p) + ($$sum20)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (6692 + ($68<<2)|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[(6392)>>2]|0;
      $75 = $74 & $73;
      HEAP32[(6392)>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[(6404)>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = ((($40)) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = ((($40)) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[(6404)>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = ((($R$1)) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum21 = (16 - ($5))|0;
    $86 = (($p) + ($$sum21)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = ($87>>>0)<($83>>>0);
      if ($89) {
       _abort();
       // unreachable;
      } else {
       $90 = ((($R$1)) + 16|0);
       HEAP32[$90>>2] = $87;
       $91 = ((($87)) + 24|0);
       HEAP32[$91>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum22 = (($$sum21) + 4)|0;
    $92 = (($p) + ($$sum22)|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    if ($94) {
     $$0 = $9;$$02 = $10;
    } else {
     $95 = HEAP32[(6404)>>2]|0;
     $96 = ($93>>>0)<($95>>>0);
     if ($96) {
      _abort();
      // unreachable;
     } else {
      $97 = ((($R$1)) + 20|0);
      HEAP32[$97>>2] = $93;
      $98 = ((($93)) + 24|0);
      HEAP32[$98>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $106 = HEAP32[(6404)>>2]|0;
 $107 = ($0>>>0)<($106>>>0);
 if ($107) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $108 = (($p) + ($$sum1)|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = $109 & 2;
 $111 = ($110|0)==(0);
 if ($111) {
  $112 = HEAP32[(6412)>>2]|0;
  $113 = ($0|0)==($112|0);
  if ($113) {
   $114 = HEAP32[(6400)>>2]|0;
   $115 = (($114) + ($$02))|0;
   HEAP32[(6400)>>2] = $115;
   HEAP32[(6412)>>2] = $$0;
   $116 = $115 | 1;
   $117 = ((($$0)) + 4|0);
   HEAP32[$117>>2] = $116;
   $118 = HEAP32[(6408)>>2]|0;
   $119 = ($$0|0)==($118|0);
   if (!($119)) {
    return;
   }
   HEAP32[(6408)>>2] = 0;
   HEAP32[(6396)>>2] = 0;
   return;
  }
  $120 = HEAP32[(6408)>>2]|0;
  $121 = ($0|0)==($120|0);
  if ($121) {
   $122 = HEAP32[(6396)>>2]|0;
   $123 = (($122) + ($$02))|0;
   HEAP32[(6396)>>2] = $123;
   HEAP32[(6408)>>2] = $$0;
   $124 = $123 | 1;
   $125 = ((($$0)) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = (($$0) + ($123)|0);
   HEAP32[$126>>2] = $123;
   return;
  }
  $127 = $109 & -8;
  $128 = (($127) + ($$02))|0;
  $129 = $109 >>> 3;
  $130 = ($109>>>0)<(256);
  do {
   if ($130) {
    $$sum12 = (($psize) + 8)|0;
    $131 = (($p) + ($$sum12)|0);
    $132 = HEAP32[$131>>2]|0;
    $$sum13 = (($psize) + 12)|0;
    $133 = (($p) + ($$sum13)|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = $129 << 1;
    $136 = (6428 + ($135<<2)|0);
    $137 = ($132|0)==($136|0);
    if (!($137)) {
     $138 = ($132>>>0)<($106>>>0);
     if ($138) {
      _abort();
      // unreachable;
     }
     $139 = ((($132)) + 12|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)==($0|0);
     if (!($141)) {
      _abort();
      // unreachable;
     }
    }
    $142 = ($134|0)==($132|0);
    if ($142) {
     $143 = 1 << $129;
     $144 = $143 ^ -1;
     $145 = HEAP32[6388>>2]|0;
     $146 = $145 & $144;
     HEAP32[6388>>2] = $146;
     break;
    }
    $147 = ($134|0)==($136|0);
    if ($147) {
     $$pre49 = ((($134)) + 8|0);
     $$pre$phi50Z2D = $$pre49;
    } else {
     $148 = ($134>>>0)<($106>>>0);
     if ($148) {
      _abort();
      // unreachable;
     }
     $149 = ((($134)) + 8|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($0|0);
     if ($151) {
      $$pre$phi50Z2D = $149;
     } else {
      _abort();
      // unreachable;
     }
    }
    $152 = ((($132)) + 12|0);
    HEAP32[$152>>2] = $134;
    HEAP32[$$pre$phi50Z2D>>2] = $132;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $153 = (($p) + ($$sum2)|0);
    $154 = HEAP32[$153>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $155 = (($p) + ($$sum3)|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ($156|0)==($0|0);
    do {
     if ($157) {
      $$sum5 = (($psize) + 20)|0;
      $167 = (($p) + ($$sum5)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)==(0|0);
      if ($169) {
       $$sum4 = (($psize) + 16)|0;
       $170 = (($p) + ($$sum4)|0);
       $171 = HEAP32[$170>>2]|0;
       $172 = ($171|0)==(0|0);
       if ($172) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $171;$RP9$0 = $170;
       }
      } else {
       $R7$0 = $168;$RP9$0 = $167;
      }
      while(1) {
       $173 = ((($R7$0)) + 20|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = ($174|0)==(0|0);
       if (!($175)) {
        $R7$0 = $174;$RP9$0 = $173;
        continue;
       }
       $176 = ((($R7$0)) + 16|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = ($177|0)==(0|0);
       if ($178) {
        $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $177;$RP9$0 = $176;
       }
      }
      $179 = ($RP9$0$lcssa>>>0)<($106>>>0);
      if ($179) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $$sum11 = (($psize) + 8)|0;
      $158 = (($p) + ($$sum11)|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = ($159>>>0)<($106>>>0);
      if ($160) {
       _abort();
       // unreachable;
      }
      $161 = ((($159)) + 12|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($162|0)==($0|0);
      if (!($163)) {
       _abort();
       // unreachable;
      }
      $164 = ((($156)) + 8|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==($0|0);
      if ($166) {
       HEAP32[$161>>2] = $156;
       HEAP32[$164>>2] = $159;
       $R7$1 = $156;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $180 = ($154|0)==(0|0);
    if (!($180)) {
     $$sum8 = (($psize) + 28)|0;
     $181 = (($p) + ($$sum8)|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = (6692 + ($182<<2)|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ($0|0)==($184|0);
     if ($185) {
      HEAP32[$183>>2] = $R7$1;
      $cond39 = ($R7$1|0)==(0|0);
      if ($cond39) {
       $186 = 1 << $182;
       $187 = $186 ^ -1;
       $188 = HEAP32[(6392)>>2]|0;
       $189 = $188 & $187;
       HEAP32[(6392)>>2] = $189;
       break;
      }
     } else {
      $190 = HEAP32[(6404)>>2]|0;
      $191 = ($154>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      }
      $192 = ((($154)) + 16|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = ($193|0)==($0|0);
      if ($194) {
       HEAP32[$192>>2] = $R7$1;
      } else {
       $195 = ((($154)) + 20|0);
       HEAP32[$195>>2] = $R7$1;
      }
      $196 = ($R7$1|0)==(0|0);
      if ($196) {
       break;
      }
     }
     $197 = HEAP32[(6404)>>2]|0;
     $198 = ($R7$1>>>0)<($197>>>0);
     if ($198) {
      _abort();
      // unreachable;
     }
     $199 = ((($R7$1)) + 24|0);
     HEAP32[$199>>2] = $154;
     $$sum9 = (($psize) + 16)|0;
     $200 = (($p) + ($$sum9)|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = ($201|0)==(0|0);
     do {
      if (!($202)) {
       $203 = ($201>>>0)<($197>>>0);
       if ($203) {
        _abort();
        // unreachable;
       } else {
        $204 = ((($R7$1)) + 16|0);
        HEAP32[$204>>2] = $201;
        $205 = ((($201)) + 24|0);
        HEAP32[$205>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum10 = (($psize) + 20)|0;
     $206 = (($p) + ($$sum10)|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ($207|0)==(0|0);
     if (!($208)) {
      $209 = HEAP32[(6404)>>2]|0;
      $210 = ($207>>>0)<($209>>>0);
      if ($210) {
       _abort();
       // unreachable;
      } else {
       $211 = ((($R7$1)) + 20|0);
       HEAP32[$211>>2] = $207;
       $212 = ((($207)) + 24|0);
       HEAP32[$212>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $213 = $128 | 1;
  $214 = ((($$0)) + 4|0);
  HEAP32[$214>>2] = $213;
  $215 = (($$0) + ($128)|0);
  HEAP32[$215>>2] = $128;
  $216 = HEAP32[(6408)>>2]|0;
  $217 = ($$0|0)==($216|0);
  if ($217) {
   HEAP32[(6396)>>2] = $128;
   return;
  } else {
   $$1 = $128;
  }
 } else {
  $218 = $109 & -2;
  HEAP32[$108>>2] = $218;
  $219 = $$02 | 1;
  $220 = ((($$0)) + 4|0);
  HEAP32[$220>>2] = $219;
  $221 = (($$0) + ($$02)|0);
  HEAP32[$221>>2] = $$02;
  $$1 = $$02;
 }
 $222 = $$1 >>> 3;
 $223 = ($$1>>>0)<(256);
 if ($223) {
  $224 = $222 << 1;
  $225 = (6428 + ($224<<2)|0);
  $226 = HEAP32[6388>>2]|0;
  $227 = 1 << $222;
  $228 = $226 & $227;
  $229 = ($228|0)==(0);
  if ($229) {
   $230 = $226 | $227;
   HEAP32[6388>>2] = $230;
   $$pre = (($224) + 2)|0;
   $$pre48 = (6428 + ($$pre<<2)|0);
   $$pre$phiZ2D = $$pre48;$F16$0 = $225;
  } else {
   $$sum7 = (($224) + 2)|0;
   $231 = (6428 + ($$sum7<<2)|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = HEAP32[(6404)>>2]|0;
   $234 = ($232>>>0)<($233>>>0);
   if ($234) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $231;$F16$0 = $232;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $235 = ((($F16$0)) + 12|0);
  HEAP32[$235>>2] = $$0;
  $236 = ((($$0)) + 8|0);
  HEAP32[$236>>2] = $F16$0;
  $237 = ((($$0)) + 12|0);
  HEAP32[$237>>2] = $225;
  return;
 }
 $238 = $$1 >>> 8;
 $239 = ($238|0)==(0);
 if ($239) {
  $I19$0 = 0;
 } else {
  $240 = ($$1>>>0)>(16777215);
  if ($240) {
   $I19$0 = 31;
  } else {
   $241 = (($238) + 1048320)|0;
   $242 = $241 >>> 16;
   $243 = $242 & 8;
   $244 = $238 << $243;
   $245 = (($244) + 520192)|0;
   $246 = $245 >>> 16;
   $247 = $246 & 4;
   $248 = $247 | $243;
   $249 = $244 << $247;
   $250 = (($249) + 245760)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 2;
   $253 = $248 | $252;
   $254 = (14 - ($253))|0;
   $255 = $249 << $252;
   $256 = $255 >>> 15;
   $257 = (($254) + ($256))|0;
   $258 = $257 << 1;
   $259 = (($257) + 7)|0;
   $260 = $$1 >>> $259;
   $261 = $260 & 1;
   $262 = $261 | $258;
   $I19$0 = $262;
  }
 }
 $263 = (6692 + ($I19$0<<2)|0);
 $264 = ((($$0)) + 28|0);
 HEAP32[$264>>2] = $I19$0;
 $265 = ((($$0)) + 16|0);
 $266 = ((($$0)) + 20|0);
 HEAP32[$266>>2] = 0;
 HEAP32[$265>>2] = 0;
 $267 = HEAP32[(6392)>>2]|0;
 $268 = 1 << $I19$0;
 $269 = $267 & $268;
 $270 = ($269|0)==(0);
 if ($270) {
  $271 = $267 | $268;
  HEAP32[(6392)>>2] = $271;
  HEAP32[$263>>2] = $$0;
  $272 = ((($$0)) + 24|0);
  HEAP32[$272>>2] = $263;
  $273 = ((($$0)) + 12|0);
  HEAP32[$273>>2] = $$0;
  $274 = ((($$0)) + 8|0);
  HEAP32[$274>>2] = $$0;
  return;
 }
 $275 = HEAP32[$263>>2]|0;
 $276 = ((($275)) + 4|0);
 $277 = HEAP32[$276>>2]|0;
 $278 = $277 & -8;
 $279 = ($278|0)==($$1|0);
 L191: do {
  if ($279) {
   $T$0$lcssa = $275;
  } else {
   $280 = ($I19$0|0)==(31);
   $281 = $I19$0 >>> 1;
   $282 = (25 - ($281))|0;
   $283 = $280 ? 0 : $282;
   $284 = $$1 << $283;
   $K20$043 = $284;$T$042 = $275;
   while(1) {
    $291 = $K20$043 >>> 31;
    $292 = (((($T$042)) + 16|0) + ($291<<2)|0);
    $287 = HEAP32[$292>>2]|0;
    $293 = ($287|0)==(0|0);
    if ($293) {
     $$lcssa = $292;$T$042$lcssa = $T$042;
     break;
    }
    $285 = $K20$043 << 1;
    $286 = ((($287)) + 4|0);
    $288 = HEAP32[$286>>2]|0;
    $289 = $288 & -8;
    $290 = ($289|0)==($$1|0);
    if ($290) {
     $T$0$lcssa = $287;
     break L191;
    } else {
     $K20$043 = $285;$T$042 = $287;
    }
   }
   $294 = HEAP32[(6404)>>2]|0;
   $295 = ($$lcssa>>>0)<($294>>>0);
   if ($295) {
    _abort();
    // unreachable;
   }
   HEAP32[$$lcssa>>2] = $$0;
   $296 = ((($$0)) + 24|0);
   HEAP32[$296>>2] = $T$042$lcssa;
   $297 = ((($$0)) + 12|0);
   HEAP32[$297>>2] = $$0;
   $298 = ((($$0)) + 8|0);
   HEAP32[$298>>2] = $$0;
   return;
  }
 } while(0);
 $299 = ((($T$0$lcssa)) + 8|0);
 $300 = HEAP32[$299>>2]|0;
 $301 = HEAP32[(6404)>>2]|0;
 $302 = ($300>>>0)>=($301>>>0);
 $not$ = ($T$0$lcssa>>>0)>=($301>>>0);
 $303 = $302 & $not$;
 if (!($303)) {
  _abort();
  // unreachable;
 }
 $304 = ((($300)) + 12|0);
 HEAP32[$304>>2] = $$0;
 HEAP32[$299>>2] = $$0;
 $305 = ((($$0)) + 8|0);
 HEAP32[$305>>2] = $300;
 $306 = ((($$0)) + 12|0);
 HEAP32[$306>>2] = $T$0$lcssa;
 $307 = ((($$0)) + 24|0);
 HEAP32[$307>>2] = 0;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($this,$__str) {
 $this = $this|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__str>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  ;HEAP32[$this>>2]=HEAP32[$__str>>2]|0;HEAP32[$this+4>>2]=HEAP32[$__str+4>>2]|0;HEAP32[$this+8>>2]=HEAP32[$__str+8>>2]|0;
 } else {
  $3 = ((($__str)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($__str)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$4,$6);
 }
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__sz>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__sz>>>0)<(11);
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = ((($this)) + 1|0);
  $__p$0 = $4;
 } else {
  $5 = (($__sz) + 16)|0;
  $6 = $5 & -16;
  $7 = (__Znwj($6)|0);
  $8 = ((($this)) + 8|0);
  HEAP32[$8>>2] = $7;
  $9 = $6 | 1;
  HEAP32[$this>>2] = $9;
  $10 = ((($this)) + 4|0);
  HEAP32[$10>>2] = $__sz;
  $__p$0 = $7;
 }
 _memcpy(($__p$0|0),($__s|0),($__sz|0))|0;
 $11 = (($__p$0) + ($__sz)|0);
 HEAP8[$11>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_($this,$__str,$__pos,$__n,$__a) {
 $this = $this|0;
 $__str = $__str|0;
 $__pos = $__pos|0;
 $__n = $__n|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__str>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 $3 = ((($__str)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $0&255;
 $6 = $5 >>> 1;
 $7 = $2 ? $6 : $4;
 $8 = ($7>>>0)<($__pos>>>0);
 if ($8) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv($this);
  // unreachable;
 } else {
  $9 = ((($__str)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($__str)) + 1|0);
  $12 = $2 ? $11 : $10;
  $13 = (($12) + ($__pos)|0);
  $14 = (($7) - ($__pos))|0;
  $15 = ($14>>>0)<($__n>>>0);
  $16 = $15 ? $14 : $__n;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$13,$16);
  return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  __ZdlPv($4);
 }
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($this,$__str) {
 $this = $this|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==($__str|0);
 if (!($0)) {
  $1 = HEAP8[$__str>>0]|0;
  $2 = $1 & 1;
  $3 = ($2<<24>>24)==(0);
  $4 = ((($__str)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($__str)) + 1|0);
  $7 = $3 ? $6 : $5;
  $8 = ((($__str)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $1&255;
  $11 = $10 >>> 1;
  $12 = $3 ? $11 : $9;
  (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this,$7,$12)|0);
 }
 return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($__s)|0);
 $1 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this,$__s,$0)|0);
 return ($1|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $6 = 10;$9 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $6 = $phitmp$i;$9 = $5;
 }
 $7 = ($6>>>0)<($__n>>>0);
 $8 = $9 & 1;
 $10 = ($8<<24>>24)==(0);
 do {
  if ($7) {
   if ($10) {
    $24 = $9&255;
    $25 = $24 >>> 1;
    $27 = $25;
   } else {
    $22 = ((($this)) + 4|0);
    $23 = HEAP32[$22>>2]|0;
    $27 = $23;
   }
   $26 = (($__n) - ($6))|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$6,$26,$27,0,$27,$__n,$__s);
  } else {
   if ($10) {
    $13 = ((($this)) + 1|0);
    $14 = $13;
   } else {
    $11 = ((($this)) + 8|0);
    $12 = HEAP32[$11>>2]|0;
    $14 = $12;
   }
   _memmove(($14|0),($__s|0),($__n|0))|0;
   $15 = (($14) + ($__n)|0);
   HEAP8[$15>>0] = 0;
   $16 = HEAP8[$this>>0]|0;
   $17 = $16 & 1;
   $18 = ($17<<24>>24)==(0);
   if ($18) {
    $20 = $__n << 1;
    $21 = $20&255;
    HEAP8[$this>>0] = $21;
    break;
   } else {
    $19 = ((($this)) + 4|0);
    HEAP32[$19>>2] = $__n;
    break;
   }
  }
 } while(0);
 return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($this,$__res_arg) {
 $this = $this|0;
 $__res_arg = $__res_arg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_data$0 = 0, $__new_data$1 = 0, $__now_long$0$off0 = 0, $__p$0 = 0, $__was_long$0$off0 = 0, $phitmp$i = 0;
 var $phitmp$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__res_arg>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $22 = 10;$8 = $1;
 } else {
  $4 = HEAP32[$this>>2]|0;
  $5 = $4 & -2;
  $phitmp$i = (($5) + -1)|0;
  $6 = $4&255;
  $22 = $phitmp$i;$8 = $6;
 }
 $7 = $8 & 1;
 $9 = ($7<<24>>24)==(0);
 if ($9) {
  $12 = $8&255;
  $13 = $12 >>> 1;
  $14 = $13;
 } else {
  $10 = ((($this)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $14 = $11;
 }
 $15 = ($14>>>0)>($__res_arg>>>0);
 $16 = $15 ? $14 : $__res_arg;
 $17 = ($16>>>0)<(11);
 if ($17) {
  $20 = 10;
 } else {
  $18 = (($16) + 16)|0;
  $19 = $18 & -16;
  $phitmp$i2 = (($19) + -1)|0;
  $20 = $phitmp$i2;
 }
 $21 = ($20|0)==($22|0);
 L14: do {
  if (!($21)) {
   $23 = ($20|0)==(10);
   do {
    if ($23) {
     $24 = ((($this)) + 1|0);
     $25 = ((($this)) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $__new_data$1 = $24;$__now_long$0$off0 = 0;$__p$0 = $26;$__was_long$0$off0 = 1;
    } else {
     $27 = ($20>>>0)>($22>>>0);
     $28 = (($20) + 1)|0;
     if ($27) {
      $29 = (__Znwj($28)|0);
      $__new_data$0 = $29;
     } else {
      __THREW__ = 0;
      $30 = (invoke_ii(484,($28|0))|0);
      $31 = __THREW__; __THREW__ = 0;
      $32 = $31&1;
      if ($32) {
       $33 = ___cxa_find_matching_catch(0|0)|0;
       $34 = tempRet0;
       (___cxa_begin_catch(($33|0))|0);
       ___cxa_end_catch();
       break L14;
      } else {
       $__new_data$0 = $30;
      }
     }
     $35 = $8 & 1;
     $36 = ($35<<24>>24)==(0);
     if ($36) {
      $39 = ((($this)) + 1|0);
      $__new_data$1 = $__new_data$0;$__now_long$0$off0 = 1;$__p$0 = $39;$__was_long$0$off0 = 0;
      break;
     } else {
      $37 = ((($this)) + 8|0);
      $38 = HEAP32[$37>>2]|0;
      $__new_data$1 = $__new_data$0;$__now_long$0$off0 = 1;$__p$0 = $38;$__was_long$0$off0 = 1;
      break;
     }
    }
   } while(0);
   $40 = $8 & 1;
   $41 = ($40<<24>>24)==(0);
   if ($41) {
    $44 = $8&255;
    $45 = $44 >>> 1;
    $47 = $45;
   } else {
    $42 = ((($this)) + 4|0);
    $43 = HEAP32[$42>>2]|0;
    $47 = $43;
   }
   $46 = (($47) + 1)|0;
   _memcpy(($__new_data$1|0),($__p$0|0),($46|0))|0;
   if ($__was_long$0$off0) {
    __ZdlPv($__p$0);
   }
   if ($__now_long$0$off0) {
    $48 = (($20) + 1)|0;
    $49 = $48 | 1;
    HEAP32[$this>>2] = $49;
    $50 = ((($this)) + 4|0);
    HEAP32[$50>>2] = $14;
    $51 = ((($this)) + 8|0);
    HEAP32[$51>>2] = $__new_data$1;
    break;
   } else {
    $52 = $14 << 1;
    $53 = $52&255;
    HEAP8[$this>>0] = $53;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($__s)|0);
 $1 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this,$__s,$0)|0);
 return ($1|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $14 = 10;$7 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $14 = $phitmp$i;$7 = $5;
 }
 $6 = $7 & 1;
 $8 = ($6<<24>>24)==(0);
 if ($8) {
  $11 = $7&255;
  $12 = $11 >>> 1;
  $15 = $12;
 } else {
  $9 = ((($this)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $15 = $10;
 }
 $13 = (($14) - ($15))|0;
 $16 = ($13>>>0)<($__n>>>0);
 if ($16) {
  $33 = (($__n) - ($14))|0;
  $34 = (($33) + ($15))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$14,$34,$15,$15,0,$__n,$__s);
 } else {
  $17 = ($__n|0)==(0);
  if (!($17)) {
   $18 = $7 & 1;
   $19 = ($18<<24>>24)==(0);
   if ($19) {
    $22 = ((($this)) + 1|0);
    $24 = $22;
   } else {
    $20 = ((($this)) + 8|0);
    $21 = HEAP32[$20>>2]|0;
    $24 = $21;
   }
   $23 = (($24) + ($15)|0);
   _memcpy(($23|0),($__s|0),($__n|0))|0;
   $25 = (($15) + ($__n))|0;
   $26 = HEAP8[$this>>0]|0;
   $27 = $26 & 1;
   $28 = ($27<<24>>24)==(0);
   if ($28) {
    $30 = $25 << 1;
    $31 = $30&255;
    HEAP8[$this>>0] = $31;
   } else {
    $29 = ((($this)) + 4|0);
    HEAP32[$29>>2] = $25;
   }
   $32 = (($24) + ($25)|0);
   HEAP8[$32>>0] = 0;
  }
 }
 return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (-18 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = ((($this)) + 1|0);
  $20 = $7;
 } else {
  $5 = ((($this)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $20 = $6;
 }
 $8 = ($__old_cap>>>0)<(2147483623);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(11);
  $14 = (($12) + 16)|0;
  $15 = $14 & -16;
  $16 = $13 ? 11 : $15;
  $17 = $16;
 } else {
  $17 = -17;
 }
 $18 = (__Znwj($17)|0);
 $19 = ($__n_copy|0)==(0);
 if (!($19)) {
  _memcpy(($18|0),($20|0),($__n_copy|0))|0;
 }
 $21 = ($__n_add|0)==(0);
 if (!($21)) {
  $22 = (($18) + ($__n_copy)|0);
  _memcpy(($22|0),($__p_new_stuff|0),($__n_add|0))|0;
 }
 $23 = (($__old_sz) - ($__n_del))|0;
 $24 = ($23|0)==($__n_copy|0);
 if (!($24)) {
  $25 = (($23) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $26 = (($18) + ($$sum)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $27 = (($20) + ($$sum1)|0);
  _memcpy(($26|0),($27|0),($25|0))|0;
 }
 $28 = ($__old_cap|0)==(10);
 if (!($28)) {
  __ZdlPv($20);
 }
 $29 = ((($this)) + 8|0);
 HEAP32[$29>>2] = $18;
 $30 = $17 | 1;
 HEAP32[$this>>2] = $30;
 $31 = (($23) + ($__n_add))|0;
 $32 = ((($this)) + 4|0);
 HEAP32[$32>>2] = $31;
 $33 = (($18) + ($31)|0);
 HEAP8[$33>>0] = 0;
 return;
}
function __ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjPKcj($this,$__pos1,$__n1,$__s,$__n2) {
 $this = $this|0;
 $__pos1 = $__pos1|0;
 $__n1 = $__n1|0;
 $__s = $__s|0;
 $__n2 = $__n2|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__r$0 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $7 = $6;
 } else {
  $3 = ((($this)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $7 = $4;
 }
 $8 = ($7>>>0)<($__pos1>>>0);
 $9 = ($__n2|0)==(-1);
 $or$cond = $9 | $8;
 if ($or$cond) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv($this);
  // unreachable;
 }
 $10 = (($7) - ($__pos1))|0;
 $11 = ($10>>>0)<($__n1>>>0);
 $12 = $11 ? $10 : $__n1;
 if ($2) {
  $15 = ((($this)) + 1|0);
  $17 = $15;
 } else {
  $13 = ((($this)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $17 = $14;
 }
 $16 = (($17) + ($__pos1)|0);
 $18 = ($12>>>0)>($__n2>>>0);
 $19 = $18 ? $__n2 : $12;
 $20 = (_memcmp($16,$__s,$19)|0);
 $21 = ($20|0)==(0);
 if ($21) {
  $22 = ($12>>>0)<($__n2>>>0);
  if ($22) {
   $__r$0 = -1;
  } else {
   $$ = $18&1;
   return ($$|0);
  }
 } else {
  $__r$0 = $20;
 }
 return ($__r$0|0);
}
function __ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($__s)|0);
 __THREW__ = 0;
 $1 = (invoke_iiiiii(629,($this|0),0,-1,($__s|0),($0|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  return ($1|0);
 }
 return (0)|0;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__sz>>>0)>(1073741807);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__sz>>>0)<(2);
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = ((($this)) + 4|0);
  $__p$0 = $4;
 } else {
  $5 = (($__sz) + 4)|0;
  $6 = $5 & -4;
  $7 = $6 << 2;
  $8 = (__Znwj($7)|0);
  $9 = ((($this)) + 8|0);
  HEAP32[$9>>2] = $8;
  $10 = $6 | 1;
  HEAP32[$this>>2] = $10;
  $11 = ((($this)) + 4|0);
  HEAP32[$11>>2] = $__sz;
  $__p$0 = $8;
 }
 (_wmemcpy($__p$0,$__s,$__sz)|0);
 $12 = (($__p$0) + ($__sz<<2)|0);
 HEAP32[$12>>2] = 0;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  __ZdlPv($4);
 }
 return;
}
function runPostSets() {
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return $10$0 | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return $1$0 | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



  
function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_iiiddi(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3; a4=+a4; a5=a5|0;
  return FUNCTION_TABLE_iiiddi[index&1023](a1|0,a2|0,+a3,+a4,a5|0)|0;
}


function dynCall_iiidi(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3; a4=a4|0;
  return FUNCTION_TABLE_iiidi[index&1023](a1|0,a2|0,+a3,a4|0)|0;
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&1023](a1|0);
}


function dynCall_iiidd(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3; a4=+a4;
  return FUNCTION_TABLE_iiidd[index&1023](a1|0,a2|0,+a3,+a4)|0;
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&1023](a1|0,a2|0);
}


function dynCall_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return FUNCTION_TABLE_iiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}


function dynCall_iiiddd(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3; a4=+a4; a5=+a5;
  return FUNCTION_TABLE_iiiddd[index&1023](a1|0,a2|0,+a3,+a4,+a5)|0;
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&1023](a1|0)|0;
}


function dynCall_iidddd(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3; a4=+a4; a5=+a5;
  return FUNCTION_TABLE_iidddd[index&511](a1|0,+a2,+a3,+a4,+a5)|0;
}


function dynCall_iidd(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3;
  return FUNCTION_TABLE_iidd[index&511](a1|0,+a2,+a3)|0;
}


function dynCall_iidddi(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3; a4=+a4; a5=a5|0;
  return FUNCTION_TABLE_iidddi[index&511](a1|0,+a2,+a3,+a4,a5|0)|0;
}


function dynCall_iidi(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=a3|0;
  return FUNCTION_TABLE_iidi[index&511](a1|0,+a2,a3|0)|0;
}


function dynCall_iiiddddi(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3; a4=+a4; a5=+a5; a6=+a6; a7=a7|0;
  return FUNCTION_TABLE_iiiddddi[index&1023](a1|0,a2|0,+a3,+a4,+a5,+a6,a7|0)|0;
}


function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return FUNCTION_TABLE_iiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&1023](a1|0,a2|0,a3|0)|0;
}


function dynCall_iiidddi(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3; a4=+a4; a5=+a5; a6=a6|0;
  return FUNCTION_TABLE_iiidddi[index&1023](a1|0,a2|0,+a3,+a4,+a5,a6|0)|0;
}


function dynCall_iiidddd(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3; a4=+a4; a5=+a5; a6=+a6;
  return FUNCTION_TABLE_iiidddd[index&1023](a1|0,a2|0,+a3,+a4,+a5,+a6)|0;
}


function dynCall_diii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return +FUNCTION_TABLE_diii[index&1023](a1|0,a2|0,a3|0);
}


function dynCall_iiid(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3;
  return FUNCTION_TABLE_iiid[index&1023](a1|0,a2|0,+a3)|0;
}


function dynCall_di(index,a1) {
  index = index|0;
  a1=a1|0;
  return +FUNCTION_TABLE_di[index&1023](a1|0);
}


function dynCall_iid(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=+a2;
  return FUNCTION_TABLE_iid[index&511](a1|0,+a2)|0;
}


function dynCall_iiddd(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3; a4=+a4;
  return FUNCTION_TABLE_iiddd[index&511](a1|0,+a2,+a3,+a4)|0;
}


function dynCall_iiddddi(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3; a4=+a4; a5=+a5; a6=a6|0;
  return FUNCTION_TABLE_iiddddi[index&511](a1|0,+a2,+a3,+a4,+a5,a6|0)|0;
}


function dynCall_iiddi(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3; a4=a4|0;
  return FUNCTION_TABLE_iiddi[index&511](a1|0,+a2,+a3,a4|0)|0;
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&1023](a1|0,a2|0)|0;
}


function dynCall_dii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return +FUNCTION_TABLE_dii[index&1023](a1|0,a2|0);
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}


function dynCall_d(index) {
  index = index|0;
  
  return +FUNCTION_TABLE_d[index&511]();
}


function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&1023]()|0;
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&1023](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&1023](a1|0,a2|0,a3|0);
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&1023]();
}


function dynCall_viid(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3;
  FUNCTION_TABLE_viid[index&511](a1|0,a2|0,+a3);
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&1023](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(0);
}
function b1(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = +p3;p4 = p4|0; nullFunc_iiiddi(1);return 0;
}
function b2(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = p3|0; nullFunc_iiidi(2);return 0;
}
function b3(p0) {
 p0 = p0|0; nullFunc_vi(3);
}
function __embind_finalize_value_array__wrapper(p0) {
 p0 = p0|0; __embind_finalize_value_array(p0|0);
}
function b4(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = +p3; nullFunc_iiidd(4);return 0;
}
function b5(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(5);
}
function b6(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iiiiiii(6);return 0;
}
function b7(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = +p3;p4 = +p4; nullFunc_iiiddd(7);return 0;
}
function b8(p0) {
 p0 = p0|0; nullFunc_ii(8);return 0;
}
function b9(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = +p4; nullFunc_iidddd(9);return 0;
}
function b10(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_iidd(10);return 0;
}
function b11(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = p4|0; nullFunc_iidddi(11);return 0;
}
function b12(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = p2|0; nullFunc_iidi(12);return 0;
}
function b13(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = +p3;p4 = +p4;p5 = +p5;p6 = p6|0; nullFunc_iiiddddi(13);return 0;
}
function b14(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(14);return 0;
}
function b15(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(15);return 0;
}
function b16(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = +p3;p4 = +p4;p5 = p5|0; nullFunc_iiidddi(16);return 0;
}
function b17(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = +p3;p4 = +p4;p5 = +p5; nullFunc_iiidddd(17);return 0;
}
function b18(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_diii(18);return +0;
}
function b19(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = +p2; nullFunc_iiid(19);return 0;
}
function b20(p0) {
 p0 = p0|0; nullFunc_di(20);return +0;
}
function b21(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_iid(21);return 0;
}
function b22(p0,p1,p2,p3) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3; nullFunc_iiddd(22);return 0;
}
function b23(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = +p4;p5 = p5|0; nullFunc_iiddddi(23);return 0;
}
function b24(p0,p1,p2,p3) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = p3|0; nullFunc_iiddi(24);return 0;
}
function b25(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(25);return 0;
}
function b26(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_dii(26);return +0;
}
function b27(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(27);
}
function __embind_register_value_array__wrapper(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; __embind_register_value_array(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0);
}
function b28() {
 ; nullFunc_d(28);return +0;
}
function b29() {
 ; nullFunc_i(29);return 0;
}
function b30(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(30);return 0;
}
function b31(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(31);
}
function b32() {
 ; nullFunc_v(32);
}
function ___cxa_pure_virtual__wrapper() {
 ; ___cxa_pure_virtual();
}
function ___cxa_end_catch__wrapper() {
 ; ___cxa_end_catch();
}
function b33(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = +p2; nullFunc_viid(33);
}
function b34(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(34);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_viiiii = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZN4NGIS4Data23CUdxKernelVector4dValue13getTypedValueERdS2_S2_S2_,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b0,b0,b0,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b0,b0,b0,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0];
var FUNCTION_TABLE_iiiddi = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZN10emscripten8internal7InvokerIbJiddiEE6invokeEPFbiddiEiddi,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_iiidi = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN10emscripten8internal7InvokerIbJidiEE6invokeEPFbidiEidi,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_vi = [b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN8tinyxml27XMLNodeD2Ev,__ZN8tinyxml27XMLNodeD0Ev,b3,b3,b3,b3,b3,b3,__ZN8tinyxml210XMLCommentD2Ev,__ZN8tinyxml210XMLCommentD0Ev,b3,b3,b3,b3,b3
,b3,__ZN8tinyxml214XMLDeclarationD2Ev,__ZN8tinyxml214XMLDeclarationD0Ev,b3,b3,b3,b3,b3,b3,__ZN8tinyxml210XMLUnknownD2Ev,__ZN8tinyxml210XMLUnknownD0Ev,b3,b3,b3,b3,b3,b3,__ZN8tinyxml210XMLElementD2Ev,__ZN8tinyxml210XMLElementD0Ev,b3,b3,b3,b3,b3,b3,__ZN8tinyxml211XMLDocumentD2Ev,__ZN8tinyxml211XMLDocumentD0Ev,__ZN8tinyxml210XMLPrinterD2Ev,__ZN8tinyxml210XMLPrinterD0Ev,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN8tinyxml27XMLTextD2Ev,__ZN8tinyxml27XMLTextD0Ev,b3,__ZN8tinyxml212XMLAttributeD2Ev,__ZN8tinyxml212XMLAttributeD0Ev,__ZN8tinyxml210XMLVisitorD2Ev,__ZN8tinyxml210XMLVisitorD0Ev,b3,b3,b3,b3,b3,b3,b3,b3
,__ZN8tinyxml28MemPoolTILi56EED2Ev,__ZN8tinyxml28MemPoolTILi56EED0Ev,b3,b3,b3,__ZN8tinyxml28MemPoolTILi56EE10SetTrackedEv,__ZN8tinyxml28MemPoolTILi56EE5ClearEv,__ZN8tinyxml27MemPoolD2Ev,__ZN8tinyxml27MemPoolD0Ev,__ZN8tinyxml28MemPoolTILi36EED2Ev,__ZN8tinyxml28MemPoolTILi36EED0Ev,b3,b3,b3,__ZN8tinyxml28MemPoolTILi36EE10SetTrackedEv,__ZN8tinyxml28MemPoolTILi36EE5ClearEv,__ZN8tinyxml28MemPoolTILi52EED2Ev,__ZN8tinyxml28MemPoolTILi52EED0Ev,b3,b3,b3,__ZN8tinyxml28MemPoolTILi52EE10SetTrackedEv,__ZN8tinyxml28MemPoolTILi52EE5ClearEv,__ZN8tinyxml28MemPoolTILi48EED2Ev,__ZN8tinyxml28MemPoolTILi48EED0Ev,b3,b3,b3,__ZN8tinyxml28MemPoolTILi48EE10SetTrackedEv,__ZN8tinyxml28MemPoolTILi48EE5ClearEv
,__ZN4NGIS4Data6Schema14CUdxNodeSchemaD2Ev,__ZN4NGIS4Data6Schema14CUdxNodeSchemaD0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN4NGIS4Data6Schema21CUdxSchemaDescriptionD2Ev,__ZN4NGIS4Data6Schema21CUdxSchemaDescriptionD0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,__ZN4NGIS4Data6Schema16INodeDescriptionD2Ev,__ZN4NGIS4Data6Schema16INodeDescriptionD0Ev,__ZN4NGIS4Data10INxUnknownD2Ev,__ZN4NGIS4Data10INxUnknownD0Ev,__ZN4NGIS4Data6Schema14IUdxNodeSchemaD2Ev,__ZN4NGIS4Data6Schema14IUdxNodeSchemaD0Ev,__ZN4NGIS4Data8IUdxNodeD2Ev,__ZN4NGIS4Data8IUdxNodeD0Ev,b3,b3,b3,b3,__ZN4NGIS4Data6Schema17CUdxDatasetSchemaD1Ev,__ZN4NGIS4Data6Schema17CUdxDatasetSchemaD0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZTv0_n12_N4NGIS4Data6Schema17CUdxDatasetSchemaD1Ev,__ZTv0_n12_N4NGIS4Data6Schema17CUdxDatasetSchemaD0Ev,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,__ZN4NGIS4Data6Schema17IUdxDatasetSchemaD1Ev,__ZN4NGIS4Data6Schema17IUdxDatasetSchemaD0Ev,__ZTv0_n12_N4NGIS4Data6Schema17IUdxDatasetSchemaD1Ev,__ZTv0_n12_N4NGIS4Data6Schema17IUdxDatasetSchemaD0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN4NGIS4Data11CUdxDatasetD1Ev,__ZN4NGIS4Data11CUdxDatasetD0Ev,b3,b3,b3,b3,b3,b3,b3,b3
,b3,__ZTv0_n12_N4NGIS4Data11CUdxDatasetD1Ev,__ZTv0_n12_N4NGIS4Data11CUdxDatasetD0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN4NGIS4Data11IUdxDatasetD1Ev,__ZN4NGIS4Data11IUdxDatasetD0Ev,__ZTv0_n12_N4NGIS4Data11IUdxDatasetD1Ev,__ZTv0_n12_N4NGIS4Data11IUdxDatasetD0Ev,__ZN4NGIS4Data10CUdxKernelD2Ev,__ZN4NGIS4Data10CUdxKernelD0Ev,b3,b3,__ZN4NGIS4Data18CUdxKernelIntValueD2Ev,__ZN4NGIS4Data18CUdxKernelIntValueD0Ev,b3,b3,__ZN4NGIS4Data19CUdxKernelRealValueD2Ev,__ZN4NGIS4Data19CUdxKernelRealValueD0Ev,b3,b3
,__ZN4NGIS4Data21CUdxKernelStringValueD2Ev,__ZN4NGIS4Data21CUdxKernelStringValueD0Ev,b3,b3,__ZN4NGIS4Data23CUdxKernelVector2dValueD2Ev,__ZN4NGIS4Data23CUdxKernelVector2dValueD0Ev,b3,b3,b3,__ZN4NGIS4Data23CUdxKernelVector3dValueD2Ev,__ZN4NGIS4Data23CUdxKernelVector3dValueD0Ev,b3,b3,b3,__ZN4NGIS4Data23CUdxKernelVector4dValueD2Ev,__ZN4NGIS4Data23CUdxKernelVector4dValueD0Ev,b3,b3,b3,__ZN4NGIS4Data18CUdxKernelIntArrayD2Ev,__ZN4NGIS4Data18CUdxKernelIntArrayD0Ev,b3,b3,b3,b3,__ZN4NGIS4Data18CUdxKernelIntArray10clearValueEv,b3,__ZN4NGIS4Data19CUdxKernelRealArrayD2Ev,__ZN4NGIS4Data19CUdxKernelRealArrayD0Ev,b3
,b3,b3,b3,__ZN4NGIS4Data19CUdxKernelRealArray10clearValueEv,b3,__ZN4NGIS4Data21CUdxKernelStringArrayD2Ev,__ZN4NGIS4Data21CUdxKernelStringArrayD0Ev,b3,b3,b3,b3,__ZN4NGIS4Data21CUdxKernelStringArray10clearValueEv,b3,__ZN4NGIS4Data23CUdxKernelVector2dArrayD2Ev,__ZN4NGIS4Data23CUdxKernelVector2dArrayD0Ev,b3,b3,b3,b3,b3,__ZN4NGIS4Data23CUdxKernelVector2dArray10clearValueEv,b3,__ZN4NGIS4Data23CUdxKernelVector3dArrayD2Ev,__ZN4NGIS4Data23CUdxKernelVector3dArrayD0Ev,b3,b3,b3,b3,b3,__ZN4NGIS4Data23CUdxKernelVector3dArray10clearValueEv
,b3,__ZN4NGIS4Data23CUdxKernelVector4dArrayD2Ev,__ZN4NGIS4Data23CUdxKernelVector4dArrayD0Ev,b3,b3,b3,b3,b3,__ZN4NGIS4Data23CUdxKernelVector4dArray10clearValueEv,b3,__ZN4NGIS4Data10IUdxKernelD2Ev,__ZN4NGIS4Data10IUdxKernelD0Ev,__ZN4NGIS4Data8CUdxNodeD2Ev,__ZN4NGIS4Data8CUdxNodeD0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,b3,__ZN10__cxxabiv116__shim_type_infoD2Ev
,__ZN10__cxxabiv123__fundamental_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b3,__ZN10__cxxabiv116__enum_type_infoD0Ev,b3,__ZN10__cxxabiv117__class_type_infoD0Ev,b3,b3,b3,b3,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b3,b3,b3,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,b3,b3,b3,b3,b3,b3,b3,b3,__ZN8tinyxml27StrPair5ResetEv,__ZN8tinyxml27XMLNode14DeleteChildrenEv,b3,__ZN8tinyxml27XMLNode10DeleteNodeEPS0_,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN8tinyxml210XMLElement15DeleteAttributeEPNS_12XMLAttributeE,__ZN8tinyxml27StrPairC2Ev,__ZN8tinyxml28MemPoolTILi56EEC2Ev,__ZN8tinyxml28MemPoolTILi36EEC2Ev,__ZN8tinyxml28MemPoolTILi52EEC2Ev,__ZN8tinyxml28MemPoolTILi48EEC2Ev,__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EEC2Ev,__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi36EE5BlockELi10EEC2Ev,__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EEC2Ev,__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi48EE5BlockELi10EEC2Ev,__ZN8tinyxml211XMLDocument5ClearEv,b3,__ZN8tinyxml28DynArrayIPKcLi10EEC2Ev,__ZN8tinyxml28DynArrayIcLi20EEC2Ev,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__Z7getInfov,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN10emscripten8internal14raw_destructorIN4NGIS4Data8Vector2dEEEvPT_,b3,b3,b3,b3,__embind_finalize_value_array__wrapper,b3,__ZN10emscripten8internal14raw_destructorIN4NGIS4Data8Vector3dEEEvPT_,b3,b3,b3,b3,__ZN10emscripten8internal14raw_destructorIN4NGIS4Data8Vector4dEEEvPT_,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN4NGIS4Data8Vector4dC2Ev,__ZN4NGIS4Data8Vector3dC2Ev,__ZN4NGIS4Data8Vector2dC2Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b3,b3,_cleanup521,_cleanup526
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_iiidd = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN10emscripten8internal7InvokerIbJiddEE6invokeEPFbiddEidd,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_vii = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,__ZN8tinyxml210XMLPrinter12CloseElementEb,b5,__ZN8tinyxml210XMLPrinter10PrintSpaceEi,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,__ZN8tinyxml28MemPoolTILi56EE4FreeEPv,b5,b5,b5,b5,b5,b5,b5,b5,__ZN8tinyxml28MemPoolTILi36EE4FreeEPv,b5,b5,b5,b5,b5,b5,__ZN8tinyxml28MemPoolTILi52EE4FreeEPv,b5,b5,b5,b5,b5,b5,__ZN8tinyxml28MemPoolTILi48EE4FreeEPv,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN4NGIS4Data11CUdxDataset7setNameEPKc,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,__ZTv0_n32_N4NGIS4Data11CUdxDataset7setNameEPKc,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,__ZN4NGIS4Data21CUdxKernelStringValue13getTypedValueEv,b5,b5,b5,__ZN4NGIS4Data23CUdxKernelVector2dValue13getTypedValueEv,b5,b5,b5,b5,__ZN4NGIS4Data23CUdxKernelVector3dValue13getTypedValueEv,b5,b5,b5,b5,__ZN4NGIS4Data23CUdxKernelVector4dValue13getTypedValueEv,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN4NGIS4Data8CUdxNode7setNameEPKc,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN8tinyxml27XMLNode6UnlinkEPS0_,b5,b5,b5
,b5,b5,b5,__ZN8tinyxml27StrPair10TransferToEPS0_,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNK8tinyxml211XMLDocument5PrintEPNS_10XMLPrinterE,b5,b5,__ZN8tinyxml28DynArrayIcLi20EE4PushEc,b5,b5,__ZNKSt3__16vectorIPN4NGIS4Data6Schema14IUdxNodeSchemaENS_9allocatorIS5_EEE17__annotate_shrinkEj,b5,b5,b5
,b5,__ZNSt3__16vectorIPN4NGIS4Data6Schema14IUdxNodeSchemaENS_9allocatorIS5_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS5_RS7_EE,b5,b5,b5,__ZN4NGIS4Data6Schema17CUdxDatasetSchemaC1EPKc,__Z4s2wsRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b5,b5,__ZN4NGIS4Data11CUdxDatasetC1EPKc,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__Z21schemaNodeType2StringN4NGIS4Data6Schema15ESchemaNodeTypeE,__Z17getSchemaNodeNamei,__Z24getSchemaNodeDescriptioni,__Z24getSchemaNodeConceptInfoi
,__Z27getSchemaNodeSpatialRefInfoi,__Z21getSchemaNodeUnitInfoi,__Z29getSchemaNodeDataTemplateInfoi,b5,b5,b5,b5,b5,b5,b5,__Z23formatSchemaToXmlStreami,b5,b5,b5,b5,b5,__Z11getNodeNamei,b5,b5,b5,__Z17kerneltype2stringN4NGIS4Data11EKernelTypeE,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,__Z18getNodeStringValuei,__Z20getNodeVector2dValuei,__Z20getNodeVector3dValuei,__Z20getNodeVector4dValuei,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,__Z18udx_formatToXmlStri,b5,__ZN4NGIS4Data6Schema17IUdxDatasetSchemaC2Ev,b5,__ZN4NGIS4Data6Schema21CUdxSchemaDescriptionC2ENS1_15ESchemaNodeTypeE,__ZN4NGIS4Data11IUdxDatasetC2Ev,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE12fromWireTypeEPNS9_Ut_E,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN4NGIS4DataL17KernelType2StringENS0_11EKernelTypeE190,b5,b5,b5,b5,b5,__ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_,b5,__ZN4NGIS4Data11CUdxDataset17IterateChildNodesEPNS0_6Schema14IUdxNodeSchemaEPNS0_8IUdxNodeE,__ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE,__ZNSt3__16vectorIiNS_9allocatorIiEEE26__swap_out_circular_bufferERNS_14__split_bufferIiRS2_EE,__ZNSt3__16vectorIdNS_9allocatorIdEEE26__swap_out_circular_bufferERNS_14__split_bufferIdRS2_EE,__ZNSt3__16vectorIN4NGIS4Data8Vector2dENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE,__ZNSt3__16vectorIN4NGIS4Data8Vector3dENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE,__ZNSt3__16vectorIN4NGIS4Data8Vector4dENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE,__ZNKSt3__16vectorIiNS_9allocatorIiEEE17__annotate_shrinkEj,__ZNKSt3__16vectorIdNS_9allocatorIdEEE17__annotate_shrinkEj
,__ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE17__annotate_shrinkEj,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj,__ZNKSt3__16vectorIN4NGIS4Data8Vector2dENS_9allocatorIS3_EEE17__annotate_shrinkEj,__ZNKSt3__16vectorIN4NGIS4Data8Vector3dENS_9allocatorIS3_EEE17__annotate_shrinkEj,__ZNKSt3__16vectorIN4NGIS4Data8Vector4dENS_9allocatorIS3_EEE17__annotate_shrinkEj,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNKSt3__16vectorIPN4NGIS4Data8IUdxNodeENS_9allocatorIS4_EEE17__annotate_shrinkEj,__ZNSt3__16vectorIPN4NGIS4Data8IUdxNodeENS_9allocatorIS4_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS4_RS6_EE,b5,_abort_message,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_iiiiiii = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,__ZN4NGIS4Data23CUdxKernelVector4dArray20getTypedValueByIndexEiRdS2_S2_S2_,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6];
var FUNCTION_TABLE_iiiddd = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZN10emscripten8internal7InvokerIbJidddEE6invokeEPFbidddEiddd,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7];
var FUNCTION_TABLE_ii = [b8,__ZN8tinyxml27XMLNode9ToElementEv,__ZN8tinyxml27XMLNode6ToTextEv,__ZN8tinyxml27XMLNode9ToCommentEv,__ZN8tinyxml27XMLNode10ToDocumentEv,__ZN8tinyxml27XMLNode13ToDeclarationEv,__ZN8tinyxml27XMLNode9ToUnknownEv,__ZNK8tinyxml27XMLNode9ToElementEv,__ZNK8tinyxml27XMLNode6ToTextEv,__ZNK8tinyxml27XMLNode9ToCommentEv,__ZNK8tinyxml27XMLNode10ToDocumentEv,__ZNK8tinyxml27XMLNode13ToDeclarationEv,__ZNK8tinyxml27XMLNode9ToUnknownEv,b8,b8,b8,b8,__ZN8tinyxml210XMLComment9ToCommentEv,__ZNK8tinyxml210XMLComment9ToCommentEv,b8,b8,b8,b8,b8,b8,__ZN8tinyxml214XMLDeclaration13ToDeclarationEv,__ZNK8tinyxml214XMLDeclaration13ToDeclarationEv,b8,b8
,b8,b8,b8,b8,__ZN8tinyxml210XMLUnknown9ToUnknownEv,__ZNK8tinyxml210XMLUnknown9ToUnknownEv,b8,b8,b8,b8,b8,b8,__ZN8tinyxml210XMLElement9ToElementEv,__ZNK8tinyxml210XMLElement9ToElementEv,b8,b8,b8,b8,b8,b8,__ZN8tinyxml211XMLDocument10ToDocumentEv,__ZNK8tinyxml211XMLDocument10ToDocumentEv,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZN8tinyxml27XMLText6ToTextEv,__ZNK8tinyxml27XMLText6ToTextEv,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,__ZNK8tinyxml28MemPoolTILi56EE8ItemSizeEv,__ZN8tinyxml28MemPoolTILi56EE5AllocEv,b8,b8,b8,b8,b8,b8,b8,__ZNK8tinyxml28MemPoolTILi36EE8ItemSizeEv,__ZN8tinyxml28MemPoolTILi36EE5AllocEv,b8,b8,b8,b8,b8,__ZNK8tinyxml28MemPoolTILi52EE8ItemSizeEv,__ZN8tinyxml28MemPoolTILi52EE5AllocEv,b8,b8,b8,b8,b8,__ZNK8tinyxml28MemPoolTILi48EE8ItemSizeEv,__ZN8tinyxml28MemPoolTILi48EE5AllocEv,b8,b8,b8
,b8,b8,__ZN4NGIS4Data10INxUnknown6addRefEv,__ZN4NGIS4Data10INxUnknown7releaseEv,__ZN4NGIS4Data10INxUnknown19getReferenceCounterEv,__ZN4NGIS4Data6Schema14CUdxNodeSchema7getNameEv,__ZN4NGIS4Data6Schema14CUdxNodeSchema14getDescriptionEv,b8,__ZN4NGIS4Data6Schema14CUdxNodeSchema13getParentNodeEv,__ZN4NGIS4Data6Schema14CUdxNodeSchema17getChildNodeCountEv,b8,b8,b8,b8,b8,b8,b8,__ZN4NGIS4Data6Schema21CUdxSchemaDescription13getKernelTypeEv,b8,__ZN4NGIS4Data6Schema21CUdxSchemaDescription18getNodeDescriptionEv,b8,__ZN4NGIS4Data6Schema21CUdxSchemaDescription13getConceptTagEv,b8,__ZN4NGIS4Data6Schema21CUdxSchemaDescription10getUnitTagEv,b8,__ZN4NGIS4Data6Schema21CUdxSchemaDescription15getDimensionTagEv,b8,__ZN4NGIS4Data6Schema21CUdxSchemaDescription23getSpatialReferencefTagEv,b8,__ZN4NGIS4Data6Schema21CUdxSchemaDescription18getDataTemplateTagEv
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZN4NGIS4Data6Schema17CUdxDatasetSchema7getNameEv,__ZN4NGIS4Data6Schema17CUdxDatasetSchema14getDescriptionEv,b8,__ZN4NGIS4Data6Schema17CUdxDatasetSchema13getParentNodeEv,__ZN4NGIS4Data6Schema17CUdxDatasetSchema17getChildNodeCountEv,b8,b8,b8,b8,b8,b8,b8,__ZTv0_n28_N4NGIS4Data6Schema17CUdxDatasetSchema7getNameEv,__ZTv0_n32_N4NGIS4Data6Schema17CUdxDatasetSchema14getDescriptionEv,b8
,__ZTv0_n40_N4NGIS4Data6Schema17CUdxDatasetSchema13getParentNodeEv,__ZTv0_n44_N4NGIS4Data6Schema17CUdxDatasetSchema17getChildNodeCountEv,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZN4NGIS4Data11CUdxDataset7getNameEv,b8,__ZN4NGIS4Data11CUdxDataset9getKernelEv,__ZN4NGIS4Data11CUdxDataset17getChildNodeCountEv,b8,b8,b8,b8
,b8,b8,b8,__ZTv0_n28_N4NGIS4Data11CUdxDataset7getNameEv,b8,__ZTv0_n36_N4NGIS4Data11CUdxDataset9getKernelEv,__ZTv0_n40_N4NGIS4Data11CUdxDataset17getChildNodeCountEv,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZN4NGIS4Data10CUdxKernel7getNodeEv,__ZN4NGIS4Data10CUdxKernel7getTypeEv,b8,b8,b8,__ZN4NGIS4Data18CUdxKernelIntValue13getTypedValueEv,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZN4NGIS4Data18CUdxKernelIntArray8getCountEv,b8,b8,b8,b8,b8
,b8,b8,__ZN4NGIS4Data19CUdxKernelRealArray8getCountEv,b8,b8,b8,b8,b8,b8,b8,__ZN4NGIS4Data21CUdxKernelStringArray8getCountEv,b8,b8,b8,b8,b8,b8,b8,b8,__ZN4NGIS4Data23CUdxKernelVector2dArray8getCountEv,b8,b8,b8,b8,b8,b8,b8,b8,__ZN4NGIS4Data23CUdxKernelVector3dArray8getCountEv,b8
,b8,b8,b8,b8,b8,b8,b8,__ZN4NGIS4Data23CUdxKernelVector4dArray8getCountEv,b8,b8,b8,b8,b8,b8,__ZN4NGIS4Data8CUdxNode7getNameEv,b8,__ZN4NGIS4Data8CUdxNode9getKernelEv,__ZN4NGIS4Data8CUdxNode17getChildNodeCountEv,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNKSt9bad_alloc4whatEv,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,___stdio_close,b8,b8,b8,b8,b8,b8,b8,__ZNK8tinyxml211XMLDocument5ErrorEv,b8
,__ZNK8tinyxml27XMLNode10NoChildrenEv,__ZNK8tinyxml27XMLNode5ValueEv,__ZNK8tinyxml210XMLElement11ClosingTypeEv,b8,__ZNK8tinyxml27StrPair5EmptyEv,__ZN8tinyxml27StrPair6GetStrEv,__ZNK8tinyxml210XMLElement4NameEv,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNSt3__111char_traitsIcE6lengthEPKc,b8,b8,b8,b8,b8
,b8,b8,b8,__Znaj,b8,b8,b8,__ZNSt3__111char_traitsIwE6lengthEPKw,b8,b8,__ZN4NGIS4DataL17String2KernelTypeENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,b8,b8,b8,b8,b8,b8,b8,__Z23releaseUdxDatasetSchemai,__Z17getSchemaRootNodei,b8,b8,b8,__Z23getNodeSchemaChildCounti,b8,__Z17getSchemaNodeTypei,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__Z14getDatasetNodei,__Z14releaseDataseti,__Z17getNodeChildCounti,b8,b8,b8,__Z11getNodeTypei,__Z13getNodeLengthi,b8,__Z17string2kerneltypeNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,__Z15getNodeIntValuei,b8,b8,b8,b8,b8,__Z20getNodeIntArrayCounti,__Z21getNodeRealArrayCounti,__Z23getNodeStringArrayCounti,__Z25getNodeVector2dArrayCounti,__Z25getNodeVector3dArrayCounti,__Z25getNodeVector4dArrayCounti,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,__Z14clearNodeArrayi,b8,b8,b8,__Znwj,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZN10emscripten8internal7InvokerINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEJEE6invokeEPFS8_vE,__ZN10emscripten8internal7InvokerIiJEE6invokeEPFivE,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,__ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE10toWireTypeERKS8_,__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi,__ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb,__ZN10emscripten8internal15EnumBindingTypeIN4NGIS4Data11EKernelTypeEE12fromWireTypeES4_,__ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi,__ZN10emscripten8internal15EnumBindingTypeIN4NGIS4Data11EKernelTypeEE10toWireTypeES4_,__ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE10toWireTypeERKS8_,__ZN10emscripten8internal15EnumBindingTypeIN4NGIS4Data6Schema15ESchemaNodeTypeEE12fromWireTypeES5_,b8,b8,b8,b8,b8,__ZN8tinyxml211XMLDocument11RootElementEv,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,__ZNK8tinyxml210XMLPrinter4CStrEv,__ZN4NGIS4Data6SchemaL21String2SchemaNodeTypeEPKc,b8,__ZN4NGIS4DataL17String2KernelTypeENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE134,b8,b8,b8,b8,_atoi,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZN4NGIS4Data8CUdxNode21getKernelTypeBySchemaENS0_6Schema15ESchemaNodeTypeE,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_iidddd = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZN4NGIS4Data23CUdxKernelVector4dValue13setTypedValueEdddd,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,__ZN4NGIS4Data23CUdxKernelVector4dArray13addTypedValueEdddd,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,__Z20setVector4dNodeValueidddd,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9];
var FUNCTION_TABLE_iidd = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,__ZN4NGIS4Data23CUdxKernelVector2dValue13setTypedValueEdd,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZN4NGIS4Data23CUdxKernelVector2dArray13addTypedValueEdd,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__Z20setVector2dNodeValueidd,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10];
var FUNCTION_TABLE_iidddi = [b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,__Z20addVector3dNodeValueidddi,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11];
var FUNCTION_TABLE_iidi = [b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,__ZN4NGIS4Data19CUdxKernelRealArray13setTypedValueEdi,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,__Z16addRealNodeValueidi,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12];
var FUNCTION_TABLE_iiiddddi = [b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZN10emscripten8internal7InvokerIbJiddddiEE6invokeEPFbiddddiEiddddi,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13];
var FUNCTION_TABLE_iiiiii = [b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZN4NGIS4Data23CUdxKernelVector3dArray20getTypedValueByIndexEiRdS2_S2_,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,__ZN10emscripten8internal7InvokerIiJiNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN4NGIS4Data6Schema15ESchemaNodeTypeENS3_IwNS4_IwEENS6_IwEEEEEE6invokeEPFiiS8_SC_SF_EiPNS0_11BindingTypeIS8_EUt_ESC_PNSJ_ISF_EUt_E,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZNSt3__118__find_first_of_ceIPKcS2_PFbccEEET_S5_S5_T0_S6_T1_,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjPKcj,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14];
var FUNCTION_TABLE_iiii = [b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZN8tinyxml27XMLNode9ParseDeepEPcPNS_7StrPairE,b15,b15,b15,b15,b15,b15,b15,__ZN8tinyxml210XMLComment9ParseDeepEPcPNS_7StrPairE,b15,b15,b15,b15
,b15,b15,b15,__ZN8tinyxml214XMLDeclaration9ParseDeepEPcPNS_7StrPairE,b15,b15,b15,b15,b15,b15,b15,__ZN8tinyxml210XMLUnknown9ParseDeepEPcPNS_7StrPairE,b15,b15,b15,b15,b15,b15,b15,__ZN8tinyxml210XMLElement9ParseDeepEPcPNS_7StrPairE,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,__ZN8tinyxml210XMLPrinter10VisitEnterERKNS_10XMLElementEPKNS_12XMLAttributeE,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZN8tinyxml27XMLText9ParseDeepEPcPNS_7StrPairE,b15,b15,b15,b15,b15,b15,__ZN8tinyxml210XMLVisitor10VisitEnterERKNS_10XMLElementEPKNS_12XMLAttributeE,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZN4NGIS4Data6Schema14CUdxNodeSchema12addChildNodeEPKcPNS1_16INodeDescriptionE,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZN4NGIS4Data6Schema17CUdxDatasetSchema12addChildNodeEPKcPNS1_16INodeDescriptionE,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,__ZTv0_n52_N4NGIS4Data6Schema17CUdxDatasetSchema12addChildNodeEPKcPNS1_16INodeDescriptionE,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZN4NGIS4Data11CUdxDataset12addChildNodeEPKcNS0_11EKernelTypeE,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,__ZTv0_n48_N4NGIS4Data11CUdxDataset12addChildNodeEPKcNS0_11EKernelTypeE,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZN4NGIS4Data18CUdxKernelIntArray20getTypedValueByIndexEiRi,__ZN4NGIS4Data18CUdxKernelIntArray13setTypedValueEii,b15,b15,b15,b15,b15,b15
,__ZN4NGIS4Data19CUdxKernelRealArray20getTypedValueByIndexEiRd,b15,b15,b15,b15,b15,b15,b15,__ZN4NGIS4Data21CUdxKernelStringArray20getTypedValueByIndexEiRNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE,__ZN4NGIS4Data21CUdxKernelStringArray13setTypedValueENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEi,b15,b15,b15,b15,b15,b15,__ZN4NGIS4Data23CUdxKernelVector2dArray20getTypedValueByIndexEiRNS0_8Vector2dE,b15,__ZN4NGIS4Data23CUdxKernelVector2dArray13setTypedValueENS0_8Vector2dEi,b15,b15,b15,b15,b15,b15,__ZN4NGIS4Data23CUdxKernelVector3dArray20getTypedValueByIndexEiRNS0_8Vector3dE,b15,__ZN4NGIS4Data23CUdxKernelVector3dArray13setTypedValueENS0_8Vector3dEi,b15,b15
,b15,b15,b15,b15,__ZN4NGIS4Data23CUdxKernelVector4dArray20getTypedValueByIndexEiRNS0_8Vector4dE,b15,__ZN4NGIS4Data23CUdxKernelVector4dArray13setTypedValueENS0_8Vector4dEi,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZN4NGIS4Data8CUdxNode12addChildNodeEPKcNS0_11EKernelTypeE,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv,b15,__ZNK10__cxxabiv116__enum_type_info9can_catchEPKNS_16__shim_type_infoERPv,b15,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,_sn_write,b15,___stdio_write,___stdio_seek,___stdout_write,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,__ZN8tinyxml27XMLUtil11StringEqualEPKcS2_i,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNSt3__111char_traitsIcE7compareEPKcS3_j,b15,b15
,b15,b15,b15,b15,_wcstombs,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__Z12addChildNodeiNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4NGIS4Data11EKernelTypeE,b15,b15,b15,b15,b15,b15,b15
,b15,__Z15addIntNodeValueiii,b15,__Z18addStringNodeValueiNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEi,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZN10emscripten8internal7InvokerIiJN4NGIS4Data6Schema15ESchemaNodeTypeENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEE6invokeEPFiS5_SC_ES5_PNS0_11BindingTypeISC_EUt_E
,b15,b15,__ZN10emscripten8internal7InvokerIiJiiEE6invokeEPFiiiEii,b15,b15,b15,b15,__ZN10emscripten8internal7InvokerIbJiNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEEE6invokeEPFbiS8_EiPNS0_11BindingTypeIS8_EUt_E,__ZN10emscripten8internal7InvokerIbJiNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE6invokeEPFbiS8_EiPNS0_11BindingTypeIS8_EUt_E,__ZN10emscripten8internal7InvokerINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJiNS3_IwNS4_IwEENS6_IwEEEEEE6invokeEPFS8_iSB_EiPNS0_11BindingTypeISB_EUt_E,b15,b15,b15,b15,__ZN10emscripten8internal7InvokerIbJiiEE6invokeEPFbiiEii,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,__ZN10emscripten8internal7InvokerINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJiiEE6invokeEPFS8_iiEii,__ZN10emscripten8internal7InvokerIN4NGIS4Data8Vector2dEJiiEE6invokeEPFS4_iiEii,__ZN10emscripten8internal7InvokerIN4NGIS4Data8Vector3dEJiiEE6invokeEPFS4_iiEii,__ZN10emscripten8internal7InvokerIN4NGIS4Data8Vector4dEJiiEE6invokeEPFS4_iiEii,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNK8tinyxml210XMLElement9AttributeEPKcS2_,b15,b15,b15,b15,__ZN4NGIS4Data6Schema17CUdxDatasetSchema13getNodeWithIdENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPNS1_14IUdxNodeSchemaE,b15,b15,b15,b15,__ZN8tinyxml211XMLDocument8SaveFileEPKcb
,__ZN8tinyxml211XMLDocument5ParseEPKcj,b15,b15,b15,b15,b15,b15,b15,_sscanf,b15,b15,b15,b15,b15,b15,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,_do_read,___stdio_read,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15];
var FUNCTION_TABLE_iiidddi = [b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZN10emscripten8internal7InvokerIbJidddiEE6invokeEPFbidddiEidddi,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16];
var FUNCTION_TABLE_iiidddd = [b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZN10emscripten8internal7InvokerIbJiddddEE6invokeEPFbiddddEidddd,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17];
var FUNCTION_TABLE_diii = [b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZN10emscripten8internal7InvokerIdJiiEE6invokeEPFdiiEii
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18];
var FUNCTION_TABLE_iiid = [b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,__ZN10emscripten8internal7InvokerIbJidEE6invokeEPFbidEid,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19];
var FUNCTION_TABLE_di = [b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,__ZN4NGIS4Data19CUdxKernelRealValue13getTypedValueEv
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,__Z16getNodeRealValuei,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,__ZN10emscripten8internal7InvokerIfJEE6invokeEPFfvE,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,_atof,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20];
var FUNCTION_TABLE_iid = [b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,__ZN4NGIS4Data19CUdxKernelRealValue13setTypedValueEd,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,__ZN4NGIS4Data19CUdxKernelRealArray13addTypedValueEd
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,__Z16setRealNodeValueid,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21];
var FUNCTION_TABLE_iiddd = [b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZN4NGIS4Data23CUdxKernelVector3dValue13setTypedValueEddd,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZN4NGIS4Data23CUdxKernelVector3dArray13addTypedValueEddd,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__Z20setVector3dNodeValueiddd
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22];
var FUNCTION_TABLE_iiddddi = [b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,__Z20addVector4dNodeValueiddddi,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23];
var FUNCTION_TABLE_iiddi = [b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,__Z20addVector2dNodeValueiddi,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24];
var FUNCTION_TABLE_iii = [b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,__ZNK8tinyxml210XMLComment12ShallowCloneEPNS_11XMLDocumentE,__ZNK8tinyxml210XMLComment12ShallowEqualEPKNS_7XMLNodeE,__ZNK8tinyxml210XMLComment6AcceptEPNS_10XMLVisitorE,b25,b25,b25,b25,b25,__ZNK8tinyxml214XMLDeclaration12ShallowCloneEPNS_11XMLDocumentE,__ZNK8tinyxml214XMLDeclaration12ShallowEqualEPKNS_7XMLNodeE
,__ZNK8tinyxml214XMLDeclaration6AcceptEPNS_10XMLVisitorE,b25,b25,b25,b25,b25,__ZNK8tinyxml210XMLUnknown12ShallowCloneEPNS_11XMLDocumentE,__ZNK8tinyxml210XMLUnknown12ShallowEqualEPKNS_7XMLNodeE,__ZNK8tinyxml210XMLUnknown6AcceptEPNS_10XMLVisitorE,b25,b25,b25,b25,b25,__ZNK8tinyxml210XMLElement12ShallowCloneEPNS_11XMLDocumentE,__ZNK8tinyxml210XMLElement12ShallowEqualEPKNS_7XMLNodeE,__ZNK8tinyxml210XMLElement6AcceptEPNS_10XMLVisitorE,b25,b25,b25,b25,b25,__ZNK8tinyxml211XMLDocument12ShallowCloneEPS0_,__ZNK8tinyxml211XMLDocument12ShallowEqualEPKNS_7XMLNodeE,__ZNK8tinyxml211XMLDocument6AcceptEPNS_10XMLVisitorE,b25,b25,b25,b25,__ZN8tinyxml210XMLPrinter10VisitEnterERKNS_11XMLDocumentE
,__ZN8tinyxml210XMLPrinter9VisitExitERKNS_11XMLDocumentE,b25,__ZN8tinyxml210XMLPrinter9VisitExitERKNS_10XMLElementE,__ZN8tinyxml210XMLPrinter5VisitERKNS_14XMLDeclarationE,__ZN8tinyxml210XMLPrinter5VisitERKNS_7XMLTextE,__ZN8tinyxml210XMLPrinter5VisitERKNS_10XMLCommentE,__ZN8tinyxml210XMLPrinter5VisitERKNS_10XMLUnknownE,b25,__ZN8tinyxml210XMLPrinter11CompactModeERKNS_10XMLElementE,b25,b25,b25,__ZNK8tinyxml27XMLText12ShallowCloneEPNS_11XMLDocumentE,__ZNK8tinyxml27XMLText12ShallowEqualEPKNS_7XMLNodeE,__ZNK8tinyxml27XMLText6AcceptEPNS_10XMLVisitorE,b25,b25,b25,b25,b25,b25,b25,__ZN8tinyxml210XMLVisitor10VisitEnterERKNS_11XMLDocumentE,__ZN8tinyxml210XMLVisitor9VisitExitERKNS_11XMLDocumentE,b25,__ZN8tinyxml210XMLVisitor9VisitExitERKNS_10XMLElementE,__ZN8tinyxml210XMLVisitor5VisitERKNS_14XMLDeclarationE,__ZN8tinyxml210XMLVisitor5VisitERKNS_7XMLTextE,__ZN8tinyxml210XMLVisitor5VisitERKNS_10XMLCommentE,__ZN8tinyxml210XMLVisitor5VisitERKNS_10XMLUnknownE
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,__ZN4NGIS4Data6Schema14CUdxNodeSchema10modifyNameEPKc,b25,b25,__ZN4NGIS4Data6Schema14CUdxNodeSchema12getChildNodeEi,b25,b25,__ZN4NGIS4Data6Schema14CUdxNodeSchema15removeChildNodeEPNS1_14IUdxNodeSchemaE,__ZN4NGIS4Data6Schema14CUdxNodeSchema15removeChildNodeEi,b25,b25,b25,__ZN4NGIS4Data6Schema21CUdxSchemaDescription16modifyKernelTypeENS1_15ESchemaNodeTypeE,b25,__ZN4NGIS4Data6Schema21CUdxSchemaDescription21modifyNodeDescriptionEPKc,b25,__ZN4NGIS4Data6Schema21CUdxSchemaDescription16modifyConceptTagEPKc,b25,__ZN4NGIS4Data6Schema21CUdxSchemaDescription13modifyUnitTagEPKc,b25,__ZN4NGIS4Data6Schema21CUdxSchemaDescription18modifyDimensionTagEPKc,b25,__ZN4NGIS4Data6Schema21CUdxSchemaDescription25modifySpatialReferenceTagEPKc,b25
,__ZN4NGIS4Data6Schema21CUdxSchemaDescription21modifyDataTemplateTagEPKc,b25,b25,b25,b25,b25,b25,b25,b25,__ZN4NGIS4Data6Schema17CUdxDatasetSchema15LoadFromXmlFileEPKc,__ZN4NGIS4Data6Schema17CUdxDatasetSchema15FormatToXmlFileEPKc,__ZN4NGIS4Data6Schema17CUdxDatasetSchema17LoadFromXmlStreamEPKc,__ZN4NGIS4Data6Schema17CUdxDatasetSchema17FormatToXmlStreamERNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE,b25,b25,b25,b25,__ZN4NGIS4Data6Schema17CUdxDatasetSchema10modifyNameEPKc,b25,b25,__ZN4NGIS4Data6Schema17CUdxDatasetSchema12getChildNodeEi,b25,b25,__ZN4NGIS4Data6Schema17CUdxDatasetSchema15removeChildNodeEPNS1_14IUdxNodeSchemaE,__ZN4NGIS4Data6Schema17CUdxDatasetSchema15removeChildNodeEi,b25,b25,b25,b25,__ZTv0_n36_N4NGIS4Data6Schema17CUdxDatasetSchema10modifyNameEPKc
,b25,b25,__ZTv0_n48_N4NGIS4Data6Schema17CUdxDatasetSchema12getChildNodeEi,b25,b25,__ZTv0_n60_N4NGIS4Data6Schema17CUdxDatasetSchema15removeChildNodeEPNS1_14IUdxNodeSchemaE,__ZTv0_n64_N4NGIS4Data6Schema17CUdxDatasetSchema15removeChildNodeEi,b25,b25,b25,b25,__ZN4NGIS4Data11CUdxDataset15LoadFromXmlFileEPKc,__ZN4NGIS4Data11CUdxDataset15FormatToXmlFileEPKc,__ZN4NGIS4Data11CUdxDataset17LoadFromXmlStreamEPKc,__ZN4NGIS4Data11CUdxDataset17FormatToXmlStreamERNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE,__ZN4NGIS4Data11CUdxDataset16LoadFromJsonFileEPKc,__ZN4NGIS4Data11CUdxDataset16FormatToJsonFileEPKc,__ZN4NGIS4Data11CUdxDataset18LoadFromJsonStreamEPKc,__ZN4NGIS4Data11CUdxDataset18FormatToJsonStreamERNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE,__ZN4NGIS4Data11CUdxDataset23constructDataFromSchemaEPNS0_6Schema14IUdxNodeSchemaE,b25,b25,b25,b25,b25,b25,__ZN4NGIS4Data11CUdxDataset12getChildNodeEi,b25,__ZN4NGIS4Data11CUdxDataset15removeChildNodeEPNS0_8IUdxNodeE,__ZN4NGIS4Data11CUdxDataset15removeChildNodeEi
,__ZN4NGIS4Data11CUdxDataset14validateSchemaEPNS0_6Schema14IUdxNodeSchemaE,b25,b25,b25,b25,b25,b25,__ZTv0_n44_N4NGIS4Data11CUdxDataset12getChildNodeEi,b25,__ZTv0_n52_N4NGIS4Data11CUdxDataset15removeChildNodeEPNS0_8IUdxNodeE,__ZTv0_n56_N4NGIS4Data11CUdxDataset15removeChildNodeEi,__ZTv0_n60_N4NGIS4Data11CUdxDataset14validateSchemaEPNS0_6Schema14IUdxNodeSchemaE,__ZTv0_n64_N4NGIS4Data11CUdxDataset17FormatToXmlStreamERNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE,__ZTv0_n68_N4NGIS4Data11CUdxDataset18FormatToJsonStreamERNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,__ZN4NGIS4Data18CUdxKernelIntValue13setTypedValueEi,b25,b25,b25,b25,b25
,b25,b25,__ZN4NGIS4Data21CUdxKernelStringValue13setTypedValueENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,__ZN4NGIS4Data18CUdxKernelIntArray13addTypedValueEi,b25,b25,b25,b25,__ZN4NGIS4Data18CUdxKernelIntArray18removeValueByIndexEi,b25,b25,b25
,b25,b25,b25,b25,__ZN4NGIS4Data19CUdxKernelRealArray18removeValueByIndexEi,b25,b25,__ZN4NGIS4Data21CUdxKernelStringArray13addTypedValueENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE,b25,b25,b25,b25,__ZN4NGIS4Data21CUdxKernelStringArray18removeValueByIndexEi,b25,b25,b25,b25,b25,b25,b25,b25,__ZN4NGIS4Data23CUdxKernelVector2dArray18removeValueByIndexEi,b25,b25,b25,b25,b25,b25,b25,b25
,__ZN4NGIS4Data23CUdxKernelVector3dArray18removeValueByIndexEi,b25,b25,b25,b25,b25,b25,b25,b25,__ZN4NGIS4Data23CUdxKernelVector4dArray18removeValueByIndexEi,b25,b25,b25,b25,b25,b25,b25,b25,__ZN4NGIS4Data8CUdxNode12getChildNodeEi,b25,__ZN4NGIS4Data8CUdxNode15removeChildNodeEPNS0_8IUdxNodeE,__ZN4NGIS4Data8CUdxNode15removeChildNodeEi,__ZN4NGIS4Data8CUdxNode14validateSchemaEPNS0_6Schema14IUdxNodeSchemaE,__ZN4NGIS4Data8CUdxNode17FormatToXmlStreamERNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE,__ZN4NGIS4Data8CUdxNode18FormatToJsonStreamERNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,__ZN8tinyxml27XMLNode14InsertEndChildEPS0_,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc,b25
,b25,b25,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_,b25,b25,b25,b25,b25,b25,b25,b25,__ZN10emscripten11value_arrayIN4NGIS4Data8Vector2dEE7elementIS3_dEERS4_MT_T0_,__ZN10emscripten11value_arrayIN4NGIS4Data8Vector3dEE7elementIS3_dEERS4_MT_T0_,__ZN10emscripten11value_arrayIN4NGIS4Data8Vector4dEE7elementIS3_dEERS4_MT_T0_,b25,b25,b25,__Z24createUdxNodeDescriptionN4NGIS4Data6Schema15ESchemaNodeTypeENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE,b25,b25,b25,__Z21removeSchemaChildNodeii,__Z28removeSchemaChildNodeByIndexii,b25,__Z18getSchemaChildNodeii,b25,b25,b25,b25,b25
,b25,b25,b25,__Z20modifySchemaNodeNameiNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,__Z27modifySchemaNodeDescriptioniNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,__Z27modifySchemaNodeConceptInfoiNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,__Z30modifySchemaNodeSpatialRefInfoiNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,__Z24modifySchemaNodeUnitInfoiNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,__Z32modifySchemaNodeDataTemplateInfoiNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b25,b25,b25,b25,b25,b25,__Z12getChildNodeii,b25,__Z11setNodeNameiNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b25,b25,b25,b25,b25,__Z22removeChildNodeByIndexii,__Z15removeChildNodeii,__Z15setIntNodeValueii,b25,__Z18setStringNodeValueiNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,__Z20getNodeIntArrayValueii,b25,b25,b25,b25,b25,__Z28removeIntNodeArrayValueByIdxii,__Z29removeRealNodeArrayValueByIdxii,__Z31removeStringNodeArrayValueByIdxii,__Z33removeVector2dNodeArrayValueByIdxii,__Z33removeVector3dNodeArrayValueByIdxii
,__Z33removeVector4dNodeArrayValueByIdxii,b25,b25,__Z18udx_loadFromXmlStriNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,__ZN10emscripten8internal7InvokerIiJiEE6invokeEPFiiEi,b25,b25,__ZN10emscripten8internal7InvokerIN4NGIS4Data6Schema15ESchemaNodeTypeEJiEE6invokeEPFS5_iEi,__ZN10emscripten8internal7InvokerINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJN4NGIS4Data6Schema15ESchemaNodeTypeEEE6invokeEPFS8_SC_ESC_,__ZN10emscripten8internal7InvokerINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJiEE6invokeEPFS8_iEi,__ZN10emscripten8internal7InvokerINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEJiEE6invokeEPFS8_iEi,b25,b25,b25,__ZN10emscripten8internal7InvokerIN4NGIS4Data11EKernelTypeEJiEE6invokeEPFS4_iEi,__ZN10emscripten8internal7InvokerINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJN4NGIS4Data11EKernelTypeEEE6invokeEPFS8_SB_ESB_,__ZN10emscripten8internal7InvokerIN4NGIS4Data11EKernelTypeEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE6invokeEPFS4_SB_EPNS0_11BindingTypeISB_EUt_E,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,__ZN10emscripten8internal7InvokerIN4NGIS4Data8Vector2dEJiEE6invokeEPFS4_iEi,__ZN10emscripten8internal7InvokerIN4NGIS4Data8Vector3dEJiEE6invokeEPFS4_iEi,__ZN10emscripten8internal7InvokerIN4NGIS4Data8Vector4dEJiEE6invokeEPFS4_iEi,b25
,b25,b25,b25,b25,__ZN10emscripten8internal7InvokerIbJiEE6invokeEPFbiEi,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,__ZN8tinyxml211XMLDocument8LoadFileEPKc,b25,b25,__ZN8tinyxml27XMLNode17FirstChildElementEPKc,b25,__ZN8tinyxml27XMLNode18NextSiblingElementEPKc,b25,b25,__ZN8tinyxml211XMLDocument10NewElementEPKc,__ZN8tinyxml27XMLNode12LinkEndChildEPS0_,b25,b25,b25
,b25,b25,b25,b25,b25,b25,__ZNK8tinyxml210XMLElement12IntAttributeEPKc,b25,b25,b25,b25,b25,b25,b25,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc,b25,b25,b25,__ZNSt3__111char_traitsIcE2eqEcc,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25];
var FUNCTION_TABLE_dii = [b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,__Z21getNodeRealArrayValueii,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,__ZN10emscripten8internal12MemberAccessIN4NGIS4Data8Vector2dEdE7getWireIS4_EEdRKMS4_dRKT_,b26,b26,b26,b26,b26,__ZN10emscripten8internal12MemberAccessIN4NGIS4Data8Vector3dEdE7getWireIS4_EEdRKMS4_dRKT_,b26,b26,b26,b26,__ZN10emscripten8internal12MemberAccessIN4NGIS4Data8Vector4dEdE7getWireIS4_EEdRKMS4_dRKT_,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,__ZN10emscripten8internal7InvokerIdJiEE6invokeEPFdiEi,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,__ZNK8tinyxml210XMLElement15DoubleAttributeEPKc,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26];
var FUNCTION_TABLE_viiiiii = [b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b27,b27,b27,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b27,b27,b27,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,__embind_register_value_array__wrapper,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27];
var FUNCTION_TABLE_d = [b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,__Z10getVersionv,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28];
var FUNCTION_TABLE_i = [b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,__Z22createUdxDatasetSchemav,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,__Z16createUdxDatasetv,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,__ZN10emscripten8internal15raw_constructorIN4NGIS4Data8Vector2dEJEEEPT_DpNS0_11BindingTypeIT0_E8WireTypeE,b29,__ZN10emscripten8internal6TypeIDIN4NGIS4Data8Vector2dEE3getEv,b29,b29,b29,b29,__ZN10emscripten8internal15raw_constructorIN4NGIS4Data8Vector3dEJEEEPT_DpNS0_11BindingTypeIT0_E8WireTypeE,b29,__ZN10emscripten8internal6TypeIDIN4NGIS4Data8Vector3dEE3getEv,b29,b29,__ZN10emscripten8internal15raw_constructorIN4NGIS4Data8Vector4dEJEEEPT_DpNS0_11BindingTypeIT0_E8WireTypeE,b29,__ZN10emscripten8internal6TypeIDIN4NGIS4Data8Vector4dEE3getEv,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,___cxa_get_globals_fast,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29];
var FUNCTION_TABLE_iiiii = [b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,__ZN4NGIS4Data6Schema14CUdxNodeSchema12addChildNodeEPKciS4_,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,__ZN4NGIS4Data6Schema17CUdxDatasetSchema12addChildNodeEPKciS4_,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,__ZTv0_n56_N4NGIS4Data6Schema17CUdxDatasetSchema12addChildNodeEPKciS4_,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,__ZN4NGIS4Data23CUdxKernelVector2dArray20getTypedValueByIndexEiRdS2_,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,__Z18addSchemaChildNodeiNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4NGIS4Data6Schema15ESchemaNodeTypeENS0_IwNS1_IwEENS3_IwEEEE,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,__ZN10emscripten8internal7InvokerIiJiNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN4NGIS4Data11EKernelTypeEEE6invokeEPFiiS8_SB_EiPNS0_11BindingTypeIS8_EUt_ESB_,b30,b30,b30,b30,b30,__ZN10emscripten8internal7InvokerIbJiiiEE6invokeEPFbiiiEiii,b30,__ZN10emscripten8internal7InvokerIbJiNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEiEE6invokeEPFbiS8_iEiPNS0_11BindingTypeIS8_EUt_Ei,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30];
var FUNCTION_TABLE_viii = [b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,__ZN4NGIS4Data23CUdxKernelVector2dValue13getTypedValueERdS2_,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj,b31,b31,b31,b31
,__ZN4NGIS4Data6Schema21CUdxSchemaDescriptionC2ENS1_15ESchemaNodeTypeEPKc,b31,b31,b31,b31,b31,b31,b31,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,__Z23loadSchemaFromXmlStreamiNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,__Z23getNodeStringArrayValueii,__Z25getNodeVector2dArrayValueii,__Z25getNodeVector3dArrayValueii,__Z25getNodeVector4dArrayValueii,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,__ZN4NGIS4Data6Schema17CUdxDatasetSchema8ParseXDOEPNS1_14IUdxNodeSchemaEPN8tinyxml210XMLElementE,b31,b31,b31,b31,b31,__ZN8tinyxml210XMLElement12SetAttributeEPKcS2_,__ZN4NGIS4Data6Schema17CUdxDatasetSchema9FormatXDOEPNS1_14IUdxNodeSchemaEPN8tinyxml210XMLElementE,b31
,b31,b31,b31,b31,__ZN4NGIS4Data11CUdxDataset8ParseXDOEPNS0_8IUdxNodeEPN8tinyxml210XMLElementE,b31,b31,b31,b31,__ZN4NGIS4Data5splitERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_PNS1_6vectorIS7_NS5_IS7_EEEE,b31,b31,__ZN8tinyxml211XMLDocumentC2EbNS_10WhitespaceE,b31,b31,b31,__ZN4NGIS4Data11CUdxDataset9FormatXDOEPNS0_8IUdxNodeEPN8tinyxml210XMLElementE,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,__ZN4NGIS4Data8CUdxNode12createKernelEPKcNS0_11EKernelTypeE,__ZN4NGIS4Data10CUdxKernelC2ENS0_11EKernelTypeEPKNS0_8CUdxNodeE,__ZN4NGIS4Data18CUdxKernelIntValueC2ENS0_11EKernelTypeEPKNS0_8CUdxNodeE,__ZN4NGIS4Data19CUdxKernelRealValueC2ENS0_11EKernelTypeEPKNS0_8CUdxNodeE,__ZN4NGIS4Data21CUdxKernelStringValueC2ENS0_11EKernelTypeEPKNS0_8CUdxNodeE,__ZN4NGIS4Data23CUdxKernelVector2dValueC2ENS0_11EKernelTypeEPKNS0_8CUdxNodeE,__ZN4NGIS4Data23CUdxKernelVector3dValueC2ENS0_11EKernelTypeEPKNS0_8CUdxNodeE,__ZN4NGIS4Data23CUdxKernelVector4dValueC2ENS0_11EKernelTypeEPKNS0_8CUdxNodeE,__ZN4NGIS4Data18CUdxKernelIntArrayC2ENS0_11EKernelTypeEPKNS0_8CUdxNodeE,__ZN4NGIS4Data19CUdxKernelRealArrayC2ENS0_11EKernelTypeEPKNS0_8CUdxNodeE,__ZN4NGIS4Data21CUdxKernelStringArrayC2ENS0_11EKernelTypeEPKNS0_8CUdxNodeE,__ZN4NGIS4Data23CUdxKernelVector2dArrayC2ENS0_11EKernelTypeEPKNS0_8CUdxNodeE,__ZN4NGIS4Data23CUdxKernelVector3dArrayC2ENS0_11EKernelTypeEPKNS0_8CUdxNodeE,__ZN4NGIS4Data23CUdxKernelVector4dArrayC2ENS0_11EKernelTypeEPKNS0_8CUdxNodeE,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31];
var FUNCTION_TABLE_v = [b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,___cxa_pure_virtual__wrapper,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,__ZL25default_terminate_handlerv,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b32,___cxa_end_catch__wrapper,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32];
var FUNCTION_TABLE_viid = [b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,__ZN10emscripten8internal12MemberAccessIN4NGIS4Data8Vector2dEdE7setWireIS4_EEvRKMS4_dRT_d,b33,b33,b33,b33,b33,__ZN10emscripten8internal12MemberAccessIN4NGIS4Data8Vector3dEdE7setWireIS4_EEvRKMS4_dRT_d,b33,b33,b33,b33,__ZN10emscripten8internal12MemberAccessIN4NGIS4Data8Vector4dEdE7setWireIS4_EEvRKMS4_dRT_d,b33,b33,b33,b33
,b33,b33,b33];
var FUNCTION_TABLE_viiii = [b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34
,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34
,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34
,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34
,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34
,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34
,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34
,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34
,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,__ZN4NGIS4Data23CUdxKernelVector3dValue13getTypedValueERdS2_S2_,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34
,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34
,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34
,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b34,b34,b34,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b34,b34,b34,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,__ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEPKcS3_
,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,__ZN4NGIS4Data6Schema14CUdxNodeSchemaC2EPNS1_14IUdxNodeSchemaEPKcPNS1_16INodeDescriptionE
,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34
,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34
,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34
,b34,b34,b34,b34,b34,b34,b34,b34,__ZN4NGIS4Data8CUdxNodeC2EPNS0_8IUdxNodeEPKcNS0_11EKernelTypeE,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34
,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34
,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34
,b34,__ZN8tinyxml210XMLPrinterC2EP8_IO_FILEbi,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34
,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34
,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34
,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34
,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34
,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34
,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34
,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34
,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34
,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34
,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34
,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34
,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34
,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34
,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34
,b34,b34,b34,b34,b34];

  return { ___cxa_can_catch: ___cxa_can_catch, _fflush: _fflush, ___cxa_is_pointer_type: ___cxa_is_pointer_type, _i64Add: _i64Add, _memmove: _memmove, _i64Subtract: _i64Subtract, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, ___getTypeName: ___getTypeName, _bitshift64Lshr: _bitshift64Lshr, _free: _free, ___errno_location: ___errno_location, _bitshift64Shl: _bitshift64Shl, __GLOBAL__sub_I_UdxDatasetSchema_cpp: __GLOBAL__sub_I_UdxDatasetSchema_cpp, __GLOBAL__sub_I_bind_cpp: __GLOBAL__sub_I_bind_cpp, runPostSets: runPostSets, _emscripten_replace_memory: _emscripten_replace_memory, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_viiiii: dynCall_viiiii, dynCall_iiiddi: dynCall_iiiddi, dynCall_iiidi: dynCall_iiidi, dynCall_vi: dynCall_vi, dynCall_iiidd: dynCall_iiidd, dynCall_vii: dynCall_vii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_iiiddd: dynCall_iiiddd, dynCall_ii: dynCall_ii, dynCall_iidddd: dynCall_iidddd, dynCall_iidd: dynCall_iidd, dynCall_iidddi: dynCall_iidddi, dynCall_iidi: dynCall_iidi, dynCall_iiiddddi: dynCall_iiiddddi, dynCall_iiiiii: dynCall_iiiiii, dynCall_iiii: dynCall_iiii, dynCall_iiidddi: dynCall_iiidddi, dynCall_iiidddd: dynCall_iiidddd, dynCall_diii: dynCall_diii, dynCall_iiid: dynCall_iiid, dynCall_di: dynCall_di, dynCall_iid: dynCall_iid, dynCall_iiddd: dynCall_iiddd, dynCall_iiddddi: dynCall_iiddddi, dynCall_iiddi: dynCall_iiddi, dynCall_iii: dynCall_iii, dynCall_dii: dynCall_dii, dynCall_viiiiii: dynCall_viiiiii, dynCall_d: dynCall_d, dynCall_i: dynCall_i, dynCall_iiiii: dynCall_iiiii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_viid: dynCall_viid, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_can_catch.apply(null, arguments);
};

var real___GLOBAL__sub_I_bind_cpp = asm["__GLOBAL__sub_I_bind_cpp"]; asm["__GLOBAL__sub_I_bind_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_bind_cpp.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fflush.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_is_pointer_type.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};

var real___GLOBAL__sub_I_UdxDatasetSchema_cpp = asm["__GLOBAL__sub_I_UdxDatasetSchema_cpp"]; asm["__GLOBAL__sub_I_UdxDatasetSchema_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_UdxDatasetSchema_cpp.apply(null, arguments);
};

var real____getTypeName = asm["___getTypeName"]; asm["___getTypeName"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____getTypeName.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____errno_location.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var __GLOBAL__sub_I_bind_cpp = Module["__GLOBAL__sub_I_bind_cpp"] = asm["__GLOBAL__sub_I_bind_cpp"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var __GLOBAL__sub_I_UdxDatasetSchema_cpp = Module["__GLOBAL__sub_I_UdxDatasetSchema_cpp"] = asm["__GLOBAL__sub_I_UdxDatasetSchema_cpp"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var ___getTypeName = Module["___getTypeName"] = asm["___getTypeName"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _free = Module["_free"] = asm["_free"];
var _emscripten_replace_memory = Module["_emscripten_replace_memory"] = asm["_emscripten_replace_memory"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_iiiddi = Module["dynCall_iiiddi"] = asm["dynCall_iiiddi"];
var dynCall_iiidi = Module["dynCall_iiidi"] = asm["dynCall_iiidi"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_iiidd = Module["dynCall_iiidd"] = asm["dynCall_iiidd"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_iiiddd = Module["dynCall_iiiddd"] = asm["dynCall_iiiddd"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iidddd = Module["dynCall_iidddd"] = asm["dynCall_iidddd"];
var dynCall_iidd = Module["dynCall_iidd"] = asm["dynCall_iidd"];
var dynCall_iidddi = Module["dynCall_iidddi"] = asm["dynCall_iidddi"];
var dynCall_iidi = Module["dynCall_iidi"] = asm["dynCall_iidi"];
var dynCall_iiiddddi = Module["dynCall_iiiddddi"] = asm["dynCall_iiiddddi"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiidddi = Module["dynCall_iiidddi"] = asm["dynCall_iiidddi"];
var dynCall_iiidddd = Module["dynCall_iiidddd"] = asm["dynCall_iiidddd"];
var dynCall_diii = Module["dynCall_diii"] = asm["dynCall_diii"];
var dynCall_iiid = Module["dynCall_iiid"] = asm["dynCall_iiid"];
var dynCall_di = Module["dynCall_di"] = asm["dynCall_di"];
var dynCall_iid = Module["dynCall_iid"] = asm["dynCall_iid"];
var dynCall_iiddd = Module["dynCall_iiddd"] = asm["dynCall_iiddd"];
var dynCall_iiddddi = Module["dynCall_iiddddi"] = asm["dynCall_iiddddi"];
var dynCall_iiddi = Module["dynCall_iiddi"] = asm["dynCall_iiddi"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_dii = Module["dynCall_dii"] = asm["dynCall_dii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_d = Module["dynCall_d"] = asm["dynCall_d"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_viid = Module["dynCall_viid"] = asm["dynCall_viid"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===


function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



